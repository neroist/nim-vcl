#[ 
   The code is automatically generated by the genBind tool. 
   Author: ying32
   https://github.com/ying32  
]#
#{.experimental: "codeReordering".}

import lclapi, types

type

  TObject* {.inheritable.} = ref object
    Instance: pointer

  TComponent* = ref object of TObject

  TControl* = ref object of TComponent

  TWinControl* = ref object of TControl

  TGraphic* = ref object of TObject

  TStrings* = ref object of TObject

  TStream* = ref object of TObject

  TCheckBox* = ref object of TWinControl

  TRadioButton* = ref object of TWinControl

  TGroupBox* = ref object of TWinControl

  TLabel* = ref object of TControl

  TListBox* = ref object of TWinControl

  TComboBox* = ref object of TWinControl

  TPanel* = ref object of TWinControl

  TImage* = ref object of TControl

  TLinkLabel* = ref object of TWinControl

  TSpeedButton* = ref object of TControl

  TSplitter* = ref object of TControl

  TRadioGroup* = ref object of TWinControl

  TStaticText* = ref object of TWinControl

  TColorBox* = ref object of TWinControl

  TColorListBox* = ref object of TWinControl

  TTrayIcon* = ref object of TComponent

  TOpenDialog* = ref object of TComponent

  TSaveDialog* = ref object of TComponent

  TColorDialog* = ref object of TComponent

  TFontDialog* = ref object of TComponent

  TPrintDialog* = ref object of TComponent

  TOpenPictureDialog* = ref object of TComponent

  TSavePictureDialog* = ref object of TComponent

  TSelectDirectoryDialog* = ref object of TComponent

  TRichEdit* = ref object of TWinControl

  TTrackBar* = ref object of TWinControl

  TImageList* = ref object of TComponent

  TUpDown* = ref object of TWinControl

  TProgressBar* = ref object of TWinControl

  TDateTimePicker* = ref object of TWinControl

  TMonthCalendar* = ref object of TWinControl

  TListView* = ref object of TWinControl

  TTreeView* = ref object of TWinControl

  TStatusBar* = ref object of TWinControl

  TToolBar* = ref object of TWinControl

  TBitBtn* = ref object of TWinControl

  TIcon* = ref object of TGraphic

  TBitmap* = ref object of TGraphic

  TMemo* = ref object of TWinControl

  TMemoryStream* = ref object of TStream

  TFont* = ref object of TObject

  TPopupMenu* = ref object of TComponent

  TStringList* = ref object of TStrings

  TBrush* = ref object of TObject

  TPen* = ref object of TObject

  TMenuItem* = ref object of TComponent

  TPicture* = ref object of TObject

  TListColumns* = ref object of TObject

  TListItems* = ref object of TObject

  TTreeNodes* = ref object of TObject

  TListItem* = ref object of TObject

  TTreeNode* = ref object of TObject

  TPageControl* = ref object of TWinControl

  TTabSheet* = ref object of TWinControl

  TButton* = ref object of TWinControl

  TEdit* = ref object of TWinControl

  TScreen* = ref object of TComponent

  TMouse* = ref object of TObject

  TListColumn* = ref object of TObject

  TCollectionItem* = ref object of TObject

  TStatusPanels* = ref object of TObject

  TStatusPanel* = ref object of TObject

  TSpinEdit* = ref object of TWinControl

  TMiniWebview* = ref object of TWinControl

  TCanvas* = ref object of TObject

  TApplication* = ref object of TComponent

  TMainMenu* = ref object of TComponent

  TPngImage* = ref object of TGraphic

  TJPEGImage* = ref object of TGraphic

  TGIFImage* = ref object of TGraphic

  TActionList* = ref object of TComponent

  TAction* = ref object of TComponent

  TToolButton* = ref object of TControl

  TIniFile* = ref object of TObject

  TRegistry* = ref object of TObject

  TClipboard* = ref object of TObject

  TMonitor* = ref object of TObject

  TPaintBox* = ref object of TControl

  TTimer* = ref object of TComponent

  TList* = ref object of TObject

  TForm* = ref object of TWinControl

  TParaAttributes* = ref object of TObject

  TTextAttributes* = ref object of TObject

  TIconOptions* = ref object of TObject


  TScrollBar* = ref object of TWinControl

  TMaskEdit* = ref object of TWinControl

  TShape* = ref object of TControl

  TBevel* = ref object of TControl

  TScrollBox* = ref object of TWinControl

  TCheckListBox* = ref object of TWinControl

  TGauge* = ref object of TControl

  TImageButton* = ref object of TControl

  TFindDialog* = ref object of TComponent

  TReplaceDialog* = ref object of TComponent

  TPrinterSetupDialog* = ref object of TComponent

  TPageSetupDialog* = ref object of TComponent

  TDragObject* = ref object of TObject

  TDragDockObject* = ref object of TObject

  TStringGrid* = ref object of TWinControl

  TDrawGrid* = ref object of TWinControl

  TValueListEditor* = ref object of TWinControl

  THeaderControl* = ref object of TWinControl

  THeaderSection* = ref object of TObject

  THeaderSections* = ref object of TObject

  TLabeledEdit* = ref object of TWinControl

  TBoundLabel* = ref object of TControl

  TFlowPanel* = ref object of TWinControl

  TCoolBar* = ref object of TWinControl

  TCoolBands* = ref object of TObject

  TCoolBand* = ref object of TObject

  TCollection* = ref object of TObject

  TPrinter* = ref object of TObject

  TTaskDialog* = ref object of TComponent

  TTaskDialogButtons* = ref object of TObject

  TTaskDialogButtonItem* = ref object of TObject

  TTaskDialogRadioButtonItem* = ref object of TObject

  TTaskDialogBaseButtonItem* = ref object of TObject

  TComboBoxEx* = ref object of TWinControl

  TComboExItems* = ref object of TObject

  TComboExItem* = ref object of TObject

  TFrame* = ref object of TWinControl

  TControlScrollBar* = ref object of TObject

  TSizeConstraints* = ref object of TObject

  TXButton* = ref object of TControl

  TAnchorSide* = ref object of TObject

  TControlBorderSpacing* = ref object of TObject

  TControlChildSizing* = ref object of TObject

  TCheckGroup* = ref object of TWinControl

  TToggleBox* = ref object of TWinControl

  TGridColumnTitle* = ref object of TObject

  TGridColumn* = ref object of TObject

  TGridColumns* = ref object of TObject
#---------------------------------------------------------------

proc CheckPtr*(obj: TObject): pointer =
  if obj != nil:
    return obj.Instance
  else:
    return nil

## -------------------- 转换对象定义 ------------------------------------------

template defaultPointerAs =
  if obj == nil:
    return nil
  new(result)
  result.Instance = obj

proc AsObject*(obj: pointer): TObject = defaultPointerAs
proc AsComponent*(obj: pointer): TComponent = defaultPointerAs
proc AsControl*(obj: pointer): TControl = defaultPointerAs
proc AsWinControl*(obj: pointer): TWinControl = defaultPointerAs
proc AsGraphic*(obj: pointer): TGraphic = defaultPointerAs
proc AsStrings*(obj: pointer): TStrings = defaultPointerAs
proc AsStream*(obj: pointer): TStream = defaultPointerAs
proc AsCheckBox*(obj: pointer): TCheckBox = defaultPointerAs
proc AsRadioButton*(obj: pointer): TRadioButton = defaultPointerAs
proc AsGroupBox*(obj: pointer): TGroupBox = defaultPointerAs
proc AsLabel*(obj: pointer): TLabel = defaultPointerAs
proc AsListBox*(obj: pointer): TListBox = defaultPointerAs
proc AsComboBox*(obj: pointer): TComboBox = defaultPointerAs
proc AsPanel*(obj: pointer): TPanel = defaultPointerAs
proc AsImage*(obj: pointer): TImage = defaultPointerAs
proc AsLinkLabel*(obj: pointer): TLinkLabel = defaultPointerAs
proc AsSpeedButton*(obj: pointer): TSpeedButton = defaultPointerAs
proc AsSplitter*(obj: pointer): TSplitter = defaultPointerAs
proc AsRadioGroup*(obj: pointer): TRadioGroup = defaultPointerAs
proc AsStaticText*(obj: pointer): TStaticText = defaultPointerAs
proc AsColorBox*(obj: pointer): TColorBox = defaultPointerAs
proc AsColorListBox*(obj: pointer): TColorListBox = defaultPointerAs
proc AsTrayIcon*(obj: pointer): TTrayIcon = defaultPointerAs
proc AsOpenDialog*(obj: pointer): TOpenDialog = defaultPointerAs
proc AsSaveDialog*(obj: pointer): TSaveDialog = defaultPointerAs
proc AsColorDialog*(obj: pointer): TColorDialog = defaultPointerAs
proc AsFontDialog*(obj: pointer): TFontDialog = defaultPointerAs
proc AsPrintDialog*(obj: pointer): TPrintDialog = defaultPointerAs
proc AsOpenPictureDialog*(obj: pointer): TOpenPictureDialog = defaultPointerAs
proc AsSavePictureDialog*(obj: pointer): TSavePictureDialog = defaultPointerAs
proc AsSelectDirectoryDialog*(obj: pointer): TSelectDirectoryDialog = defaultPointerAs
proc AsRichEdit*(obj: pointer): TRichEdit = defaultPointerAs
proc AsTrackBar*(obj: pointer): TTrackBar = defaultPointerAs
proc AsImageList*(obj: pointer): TImageList = defaultPointerAs
proc AsUpDown*(obj: pointer): TUpDown = defaultPointerAs
proc AsProgressBar*(obj: pointer): TProgressBar = defaultPointerAs
proc AsDateTimePicker*(obj: pointer): TDateTimePicker = defaultPointerAs
proc AsMonthCalendar*(obj: pointer): TMonthCalendar = defaultPointerAs
proc AsListView*(obj: pointer): TListView = defaultPointerAs
proc AsTreeView*(obj: pointer): TTreeView = defaultPointerAs
proc AsStatusBar*(obj: pointer): TStatusBar = defaultPointerAs
proc AsToolBar*(obj: pointer): TToolBar = defaultPointerAs
proc AsBitBtn*(obj: pointer): TBitBtn = defaultPointerAs
proc AsIcon*(obj: pointer): TIcon = defaultPointerAs
proc AsBitmap*(obj: pointer): TBitmap = defaultPointerAs
proc AsMemo*(obj: pointer): TMemo = defaultPointerAs
proc AsMemoryStream*(obj: pointer): TMemoryStream = defaultPointerAs
proc AsFont*(obj: pointer): TFont = defaultPointerAs
proc AsPopupMenu*(obj: pointer): TPopupMenu = defaultPointerAs
proc AsStringList*(obj: pointer): TStringList = defaultPointerAs
proc AsBrush*(obj: pointer): TBrush = defaultPointerAs
proc AsPen*(obj: pointer): TPen = defaultPointerAs
proc AsMenuItem*(obj: pointer): TMenuItem = defaultPointerAs
proc AsPicture*(obj: pointer): TPicture = defaultPointerAs
proc AsListColumns*(obj: pointer): TListColumns = defaultPointerAs
proc AsListItems*(obj: pointer): TListItems = defaultPointerAs
proc AsTreeNodes*(obj: pointer): TTreeNodes = defaultPointerAs
proc AsListItem*(obj: pointer): TListItem = defaultPointerAs
proc AsTreeNode*(obj: pointer): TTreeNode = defaultPointerAs
proc AsPageControl*(obj: pointer): TPageControl = defaultPointerAs
proc AsTabSheet*(obj: pointer): TTabSheet = defaultPointerAs
proc AsButton*(obj: pointer): TButton = defaultPointerAs
proc AsEdit*(obj: pointer): TEdit = defaultPointerAs
proc AsScreen*(obj: pointer): TScreen = defaultPointerAs
proc AsMouse*(obj: pointer): TMouse = defaultPointerAs
proc AsListColumn*(obj: pointer): TListColumn = defaultPointerAs
proc AsCollectionItem*(obj: pointer): TCollectionItem = defaultPointerAs
proc AsStatusPanels*(obj: pointer): TStatusPanels = defaultPointerAs
proc AsStatusPanel*(obj: pointer): TStatusPanel = defaultPointerAs
proc AsSpinEdit*(obj: pointer): TSpinEdit = defaultPointerAs
proc AsMiniWebview*(obj: pointer): TMiniWebview = defaultPointerAs
proc AsCanvas*(obj: pointer): TCanvas = defaultPointerAs
proc AsApplication*(obj: pointer): TApplication = defaultPointerAs
proc AsMainMenu*(obj: pointer): TMainMenu = defaultPointerAs
proc AsPngImage*(obj: pointer): TPngImage = defaultPointerAs
proc AsJPEGImage*(obj: pointer): TJPEGImage = defaultPointerAs
proc AsGIFImage*(obj: pointer): TGIFImage = defaultPointerAs
proc AsActionList*(obj: pointer): TActionList = defaultPointerAs
proc AsAction*(obj: pointer): TAction = defaultPointerAs
proc AsToolButton*(obj: pointer): TToolButton = defaultPointerAs
proc AsIniFile*(obj: pointer): TIniFile = defaultPointerAs
proc AsRegistry*(obj: pointer): TRegistry = defaultPointerAs
proc AsClipboard*(obj: pointer): TClipboard = defaultPointerAs
proc AsMonitor*(obj: pointer): TMonitor = defaultPointerAs
proc AsPaintBox*(obj: pointer): TPaintBox = defaultPointerAs
proc AsTimer*(obj: pointer): TTimer = defaultPointerAs
proc AsList*(obj: pointer): TList = defaultPointerAs
proc AsForm*(obj: pointer): TForm = defaultPointerAs
proc AsParaAttributes*(obj: pointer): TParaAttributes = defaultPointerAs
proc AsTextAttributes*(obj: pointer): TTextAttributes = defaultPointerAs
proc AsIconOptions*(obj: pointer): TIconOptions = defaultPointerAs
proc AsScrollBar*(obj: pointer): TScrollBar = defaultPointerAs
proc AsMaskEdit*(obj: pointer): TMaskEdit = defaultPointerAs
proc AsShape*(obj: pointer): TShape = defaultPointerAs
proc AsBevel*(obj: pointer): TBevel = defaultPointerAs
proc AsScrollBox*(obj: pointer): TScrollBox = defaultPointerAs
proc AsCheckListBox*(obj: pointer): TCheckListBox = defaultPointerAs
proc AsGauge*(obj: pointer): TGauge = defaultPointerAs
proc AsImageButton*(obj: pointer): TImageButton = defaultPointerAs
proc AsFindDialog*(obj: pointer): TFindDialog = defaultPointerAs
proc AsReplaceDialog*(obj: pointer): TReplaceDialog = defaultPointerAs
proc AsPrinterSetupDialog*(obj: pointer): TPrinterSetupDialog = defaultPointerAs
proc AsPageSetupDialog*(obj: pointer): TPageSetupDialog = defaultPointerAs
proc AsDragObject*(obj: pointer): TDragObject = defaultPointerAs
proc AsDragDockObject*(obj: pointer): TDragDockObject = defaultPointerAs
proc AsStringGrid*(obj: pointer): TStringGrid = defaultPointerAs
proc AsDrawGrid*(obj: pointer): TDrawGrid = defaultPointerAs
proc AsValueListEditor*(obj: pointer): TValueListEditor = defaultPointerAs
proc AsHeaderControl*(obj: pointer): THeaderControl = defaultPointerAs
proc AsHeaderSection*(obj: pointer): THeaderSection = defaultPointerAs
proc AsHeaderSections*(obj: pointer): THeaderSections = defaultPointerAs
proc AsLabeledEdit*(obj: pointer): TLabeledEdit = defaultPointerAs
proc AsBoundLabel*(obj: pointer): TBoundLabel = defaultPointerAs
proc AsFlowPanel*(obj: pointer): TFlowPanel = defaultPointerAs
proc AsCoolBar*(obj: pointer): TCoolBar = defaultPointerAs
proc AsCoolBands*(obj: pointer): TCoolBands = defaultPointerAs
proc AsCoolBand*(obj: pointer): TCoolBand = defaultPointerAs
proc AsCollection*(obj: pointer): TCollection = defaultPointerAs
proc AsPrinter*(obj: pointer): TPrinter = defaultPointerAs
proc AsTaskDialog*(obj: pointer): TTaskDialog = defaultPointerAs
proc AsTaskDialogButtons*(obj: pointer): TTaskDialogButtons = defaultPointerAs
proc AsTaskDialogButtonItem*(obj: pointer): TTaskDialogButtonItem = defaultPointerAs
proc AsTaskDialogRadioButtonItem*(obj: pointer): TTaskDialogRadioButtonItem = defaultPointerAs
proc AsTaskDialogBaseButtonItem*(obj: pointer): TTaskDialogBaseButtonItem = defaultPointerAs
proc AsComboBoxEx*(obj: pointer): TComboBoxEx = defaultPointerAs
proc AsComboExItems*(obj: pointer): TComboExItems = defaultPointerAs
proc AsComboExItem*(obj: pointer): TComboExItem = defaultPointerAs
proc AsFrame*(obj: pointer): TFrame = defaultPointerAs
proc AsControlScrollBar*(obj: pointer): TControlScrollBar = defaultPointerAs
proc AsSizeConstraints*(obj: pointer): TSizeConstraints = defaultPointerAs
proc AsXButton*(obj: pointer): TXButton = defaultPointerAs
proc AsAnchorSide*(obj: pointer): TAnchorSide = defaultPointerAs
proc AsControlBorderSpacing*(obj: pointer): TControlBorderSpacing = defaultPointerAs
proc AsControlChildSizing*(obj: pointer): TControlChildSizing = defaultPointerAs
proc AsCheckGroup*(obj: pointer): TCheckGroup = defaultPointerAs
proc AsToggleBox*(obj: pointer): TToggleBox = defaultPointerAs
proc AsGridColumnTitle*(obj: pointer): TGridColumnTitle = defaultPointerAs
proc AsGridColumn*(obj: pointer): TGridColumn = defaultPointerAs
proc AsGridColumns*(obj: pointer): TGridColumns = defaultPointerAs


proc Instance*(this: TObject): pointer =
  if this != nil:
    return this.Instance
  else:
    return nil


template defaultFree(pName) =
  if (this != nil) and (this.Instance != nil):
     pName(this.Instance)
     this.Instance = nil

#------------------------- TObject -------------------------

proc Free*(this: TObject)  = defaultFree: Object_Free

proc NewObject*(): TObject =
  new(result, Free)
  result.Instance = Object_Create()

proc ClassType*(this: TObject): TClass  =
  return Object_ClassType(this.Instance)

proc ClassName*(this: TObject): string  =
  return $Object_ClassName(this.Instance)

proc InstanceSize*(this: TObject): int32  =
  return Object_InstanceSize(this.Instance)

proc InheritsFrom*(this: TObject, AClass: TClass): bool  =
  return Object_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TObject, Obj: TObject): bool  =
  return Object_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TObject): int32  =
  return Object_GetHashCode(this.Instance)

proc ToString*(this: TObject): string  =
  return $Object_ToString(this.Instance)

proc TObjectClass*(): TClass = Object_StaticClassType()


#------------------------- TComponent -------------------------

proc Free*(this: TComponent) = defaultFree: Component_Free

proc NewComponent*(AOwner: TComponent): TComponent =
  new(result)
  result.Instance = Component_Create(CheckPtr(AOwner))

proc FindComponent*(this: TComponent, AName: string): TComponent  =
  return Component_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TComponent): string  =
  return $Component_GetNamePath(this.Instance)

proc HasParent*(this: TComponent): bool  =
  return Component_HasParent(this.Instance)

proc Assign*(this: TComponent, Source: TObject)  =
  Component_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TComponent): TClass =
  return Component_ClassType(this.Instance)

proc ClassName*(this: TComponent): string =
  return $Component_ClassName(this.Instance)

proc InstanceSize*(this: TComponent): int32 =
  return Component_InstanceSize(this.Instance)

proc InheritsFrom*(this: TComponent, AClass: TClass): bool =
  return Component_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TComponent, Obj: TObject): bool =
  return Component_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TComponent): int32 =
  return Component_GetHashCode(this.Instance)

proc ToString*(this: TComponent): string =
  return $Component_ToString(this.Instance)

proc ComponentCount*(this: TComponent): int32  =
  return Component_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TComponent): int32  =
  return Component_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TComponent, AValue: int32)  =
  Component_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TComponent): TComponent  =
  return Component_GetOwner(this.Instance).AsComponent

proc Name*(this: TComponent): string  =
  return $Component_GetName(this.Instance)

proc `Name=`*(this: TComponent, AValue: string)  =
  Component_SetName(this.Instance, AValue)

proc Tag*(this: TComponent): int  =
  return Component_GetTag(this.Instance)

proc `Tag=`*(this: TComponent, AValue: int)  =
  Component_SetTag(this.Instance, AValue)

proc Components*(this: TComponent, AIndex: int32): TComponent  =
  return Component_GetComponents(this.Instance, AIndex).AsComponent

proc TComponentClass*(): TClass = Component_StaticClassType()


#------------------------- TControl -------------------------

proc Free*(this: TControl) = defaultFree: Control_Free

proc NewControl*(AOwner: TComponent): TControl =
  new(result)
  result.Instance = Control_Create(CheckPtr(AOwner))

proc BringToFront*(this: TControl)  =
  Control_BringToFront(this.Instance)

proc ClientToScreen*(this: TControl, Point: TPoint): TPoint  =
  var ps1 = Point
  Control_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TControl, Point: TPoint, AParent: TWinControl): TPoint  =
  var ps1 = Point
  Control_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TControl): bool  =
  return Control_Dragging(this.Instance)

proc HasParent*(this: TControl): bool =
  return Control_HasParent(this.Instance)

proc Hide*(this: TControl)  =
  Control_Hide(this.Instance)

proc Invalidate*(this: TControl)  =
  Control_Invalidate(this.Instance)

proc Perform*(this: TControl, Msg: uint32, WParam: uint, LParam: int): int  =
  return Control_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TControl)  =
  Control_Refresh(this.Instance)

proc Repaint*(this: TControl)  =
  Control_Repaint(this.Instance)

proc ScreenToClient*(this: TControl, Point: TPoint): TPoint  =
  var ps1 = Point
  Control_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TControl, Point: TPoint, AParent: TWinControl): TPoint  =
  var ps1 = Point
  Control_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TControl)  =
  Control_SendToBack(this.Instance)

proc SetBounds*(this: TControl, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32)  =
  Control_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Show*(this: TControl)  =
  Control_Show(this.Instance)

proc Update*(this: TControl)  =
  Control_Update(this.Instance)

proc GetTextBuf*(this: TControl, Buffer: string, BufSize: int32): int32  =
  return Control_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TControl): int32  =
  return Control_GetTextLen(this.Instance)

proc SetTextBuf*(this: TControl, Buffer: string)  =
  Control_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TControl, AName: string): TComponent =
  return Control_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TControl): string =
  return $Control_GetNamePath(this.Instance)

proc Assign*(this: TControl, Source: TObject) =
  Control_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TControl): TClass =
  return Control_ClassType(this.Instance)

proc ClassName*(this: TControl): string =
  return $Control_ClassName(this.Instance)

proc InstanceSize*(this: TControl): int32 =
  return Control_InstanceSize(this.Instance)

proc InheritsFrom*(this: TControl, AClass: TClass): bool =
  return Control_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TControl, Obj: TObject): bool =
  return Control_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TControl): int32 =
  return Control_GetHashCode(this.Instance)

proc ToString*(this: TControl): string =
  return $Control_ToString(this.Instance)

proc AnchorToNeighbour*(this: TControl, ASide: TAnchorKind, ASpace: int32, ASibling: TControl)  =
  Control_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TControl, ASide: TAnchorKind, ASpace: int32, ASibling: TControl)  =
  Control_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TControl, ASibling: TControl)  =
  Control_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TControl, ASibling: TControl)  =
  Control_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TControl, ASide: TAnchorKind, ASibling: TControl)  =
  Control_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TControl, ATheAlign: TAlign, ASpace: int32)  =
  Control_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TControl, ASpace: int32)  =
  Control_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TControl, ASize: int32): int32  =
  return Control_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TControl, ASize: int32): int32  =
  return Control_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TControl, ASize: int32): int32  =
  return Control_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TControl, ASize: int32): int32  =
  return Control_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TControl, ASize: int32): int32  =
  return Control_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TControl, ASize: int32): int32  =
  return Control_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TControl, ASize: int32): int32  =
  return Control_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TControl, ASize: int32): int32  =
  return Control_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TControl, ASize: int32): int32  =
  return Control_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TControl, ASize: int32): int32  =
  return Control_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TControl, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32)  =
  Control_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TControl, ADesignTimePPI: int32)  =
  Control_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TControl, AToPPI: int32, AProportion: float64)  =
  var ps2 = AProportion
  Control_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Enabled*(this: TControl): bool  =
  return Control_GetEnabled(this.Instance)

proc `Enabled=`*(this: TControl, AValue: bool)  =
  Control_SetEnabled(this.Instance, AValue)

proc Action*(this: TControl): TAction  =
  return Control_GetAction(this.Instance).AsAction

proc `Action=`*(this: TControl, AValue: TAction)  =
  Control_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TControl): TAlign  =
  return Control_GetAlign(this.Instance)

proc `Align=`*(this: TControl, AValue: TAlign)  =
  Control_SetAlign(this.Instance, AValue)

proc Anchors*(this: TControl): TAnchors  =
  return Control_GetAnchors(this.Instance)

proc `Anchors=`*(this: TControl, AValue: TAnchors)  =
  Control_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TControl): TBiDiMode  =
  return Control_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TControl, AValue: TBiDiMode)  =
  Control_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TControl): TRect  =
  Control_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TControl, AValue: TRect)  =
  var ps1 = AValue
  Control_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TControl): int32  =
  return Control_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TControl, AValue: int32)  =
  Control_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TControl): TPoint  =
  Control_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TControl): TRect  =
  Control_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TControl): int32  =
  return Control_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TControl, AValue: int32)  =
  Control_SetClientWidth(this.Instance, AValue)

proc Constraints*(this: TControl): TSizeConstraints  =
  return Control_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TControl, AValue: TSizeConstraints)  =
  Control_SetConstraints(this.Instance, CheckPtr(AValue))

proc ControlState*(this: TControl): TControlState  =
  return Control_GetControlState(this.Instance)

proc `ControlState=`*(this: TControl, AValue: TControlState)  =
  Control_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TControl): TControlStyle  =
  return Control_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TControl, AValue: TControlStyle)  =
  Control_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TControl): bool  =
  return Control_GetFloating(this.Instance)

proc ShowHint*(this: TControl): bool  =
  return Control_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TControl, AValue: bool)  =
  Control_SetShowHint(this.Instance, AValue)

proc Visible*(this: TControl): bool  =
  return Control_GetVisible(this.Instance)

proc `Visible=`*(this: TControl, AValue: bool)  =
  Control_SetVisible(this.Instance, AValue)

proc Parent*(this: TControl): TWinControl  =
  return Control_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TControl, AValue: TWinControl)  =
  Control_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TControl): int32  =
  return Control_GetLeft(this.Instance)

proc `Left=`*(this: TControl, AValue: int32)  =
  Control_SetLeft(this.Instance, AValue)

proc Top*(this: TControl): int32  =
  return Control_GetTop(this.Instance)

proc `Top=`*(this: TControl, AValue: int32)  =
  Control_SetTop(this.Instance, AValue)

proc Width*(this: TControl): int32  =
  return Control_GetWidth(this.Instance)

proc `Width=`*(this: TControl, AValue: int32)  =
  Control_SetWidth(this.Instance, AValue)

proc Height*(this: TControl): int32  =
  return Control_GetHeight(this.Instance)

proc `Height=`*(this: TControl, AValue: int32)  =
  Control_SetHeight(this.Instance, AValue)

proc Cursor*(this: TControl): TCursor  =
  return Control_GetCursor(this.Instance)

proc `Cursor=`*(this: TControl, AValue: TCursor)  =
  Control_SetCursor(this.Instance, AValue)

proc Hint*(this: TControl): string  =
  return $Control_GetHint(this.Instance)

proc `Hint=`*(this: TControl, AValue: string)  =
  Control_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TControl): int32  =
  return Control_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TControl): int32  =
  return Control_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TControl, AValue: int32)  =
  Control_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TControl): TComponent  =
  return Control_GetOwner(this.Instance).AsComponent

proc Name*(this: TControl): string  =
  return $Control_GetName(this.Instance)

proc `Name=`*(this: TControl, AValue: string)  =
  Control_SetName(this.Instance, AValue)

proc Tag*(this: TControl): int  =
  return Control_GetTag(this.Instance)

proc `Tag=`*(this: TControl, AValue: int)  =
  Control_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TControl): TAnchorSide  =
  return Control_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TControl, AValue: TAnchorSide)  =
  Control_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TControl): TAnchorSide  =
  return Control_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TControl, AValue: TAnchorSide)  =
  Control_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TControl): TAnchorSide  =
  return Control_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TControl, AValue: TAnchorSide)  =
  Control_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TControl): TAnchorSide  =
  return Control_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TControl, AValue: TAnchorSide)  =
  Control_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TControl): TControlBorderSpacing  =
  return Control_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TControl, AValue: TControlBorderSpacing)  =
  Control_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TControl, AIndex: int32): TComponent  =
  return Control_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TControl, AKind: TAnchorKind): TAnchorSide  =
  return Control_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TControlClass*(): TClass = Control_StaticClassType()


#------------------------- TWinControl -------------------------

proc Free*(this: TWinControl) = defaultFree: WinControl_Free

proc NewWinControl*(AOwner: TComponent): TWinControl =
  new(result)
  result.Instance = WinControl_Create(CheckPtr(AOwner))

proc CanFocus*(this: TWinControl): bool  =
  return WinControl_CanFocus(this.Instance)

proc ContainsControl*(this: TWinControl, Control: TControl): bool  =
  return WinControl_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TWinControl, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl  =
  var ps1 = Pos
  return WinControl_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TWinControl)  =
  WinControl_DisableAlign(this.Instance)

proc EnableAlign*(this: TWinControl)  =
  WinControl_EnableAlign(this.Instance)

proc FindChildControl*(this: TWinControl, ControlName: string): TControl  =
  return WinControl_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TWinControl, AllLevels: bool)  =
  WinControl_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TWinControl): bool  =
  return WinControl_Focused(this.Instance)

proc HandleAllocated*(this: TWinControl): bool  =
  return WinControl_HandleAllocated(this.Instance)

proc InsertControl*(this: TWinControl, AControl: TControl)  =
  WinControl_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TWinControl) =
  WinControl_Invalidate(this.Instance)

proc PaintTo*(this: TWinControl, DC: HDC, X: int32, Y: int32)  =
  WinControl_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TWinControl, AControl: TControl)  =
  WinControl_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TWinControl)  =
  WinControl_Realign(this.Instance)

proc Repaint*(this: TWinControl) =
  WinControl_Repaint(this.Instance)

proc ScaleBy*(this: TWinControl, M: int32, D: int32)  =
  WinControl_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TWinControl, DeltaX: int32, DeltaY: int32)  =
  WinControl_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TWinControl, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  WinControl_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TWinControl)  =
  WinControl_SetFocus(this.Instance)

proc Update*(this: TWinControl) =
  WinControl_Update(this.Instance)

proc BringToFront*(this: TWinControl) =
  WinControl_BringToFront(this.Instance)

proc ClientToScreen*(this: TWinControl, Point: TPoint): TPoint =
  var ps1 = Point
  WinControl_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TWinControl, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  WinControl_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TWinControl): bool =
  return WinControl_Dragging(this.Instance)

proc HasParent*(this: TWinControl): bool =
  return WinControl_HasParent(this.Instance)

proc Hide*(this: TWinControl) =
  WinControl_Hide(this.Instance)

proc Perform*(this: TWinControl, Msg: uint32, WParam: uint, LParam: int): int =
  return WinControl_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TWinControl) =
  WinControl_Refresh(this.Instance)

proc ScreenToClient*(this: TWinControl, Point: TPoint): TPoint =
  var ps1 = Point
  WinControl_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TWinControl, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  WinControl_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TWinControl) =
  WinControl_SendToBack(this.Instance)

proc Show*(this: TWinControl) =
  WinControl_Show(this.Instance)

proc GetTextBuf*(this: TWinControl, Buffer: string, BufSize: int32): int32 =
  return WinControl_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TWinControl): int32 =
  return WinControl_GetTextLen(this.Instance)

proc SetTextBuf*(this: TWinControl, Buffer: string) =
  WinControl_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TWinControl, AName: string): TComponent =
  return WinControl_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TWinControl): string =
  return $WinControl_GetNamePath(this.Instance)

proc Assign*(this: TWinControl, Source: TObject) =
  WinControl_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TWinControl): TClass =
  return WinControl_ClassType(this.Instance)

proc ClassName*(this: TWinControl): string =
  return $WinControl_ClassName(this.Instance)

proc InstanceSize*(this: TWinControl): int32 =
  return WinControl_InstanceSize(this.Instance)

proc InheritsFrom*(this: TWinControl, AClass: TClass): bool =
  return WinControl_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TWinControl, Obj: TObject): bool =
  return WinControl_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TWinControl): int32 =
  return WinControl_GetHashCode(this.Instance)

proc ToString*(this: TWinControl): string =
  return $WinControl_ToString(this.Instance)

proc AnchorToNeighbour*(this: TWinControl, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  WinControl_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TWinControl, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  WinControl_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TWinControl, ASibling: TControl) =
  WinControl_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TWinControl, ASibling: TControl) =
  WinControl_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TWinControl, ASide: TAnchorKind, ASibling: TControl) =
  WinControl_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TWinControl, ATheAlign: TAlign, ASpace: int32) =
  WinControl_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TWinControl, ASpace: int32) =
  WinControl_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TWinControl, ASize: int32): int32 =
  return WinControl_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TWinControl, ASize: int32): int32 =
  return WinControl_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TWinControl, ASize: int32): int32 =
  return WinControl_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TWinControl, ASize: int32): int32 =
  return WinControl_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TWinControl, ASize: int32): int32 =
  return WinControl_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TWinControl, ASize: int32): int32 =
  return WinControl_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TWinControl, ASize: int32): int32 =
  return WinControl_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TWinControl, ASize: int32): int32 =
  return WinControl_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TWinControl, ASize: int32): int32 =
  return WinControl_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TWinControl, ASize: int32): int32 =
  return WinControl_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TWinControl, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  WinControl_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TWinControl, ADesignTimePPI: int32) =
  WinControl_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TWinControl, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  WinControl_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc DockClientCount*(this: TWinControl): int32  =
  return WinControl_GetDockClientCount(this.Instance)

proc DockSite*(this: TWinControl): bool  =
  return WinControl_GetDockSite(this.Instance)

proc `DockSite=`*(this: TWinControl, AValue: bool)  =
  WinControl_SetDockSite(this.Instance, AValue)

proc DoubleBuffered*(this: TWinControl): bool  =
  return WinControl_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TWinControl, AValue: bool)  =
  WinControl_SetDoubleBuffered(this.Instance, AValue)

proc MouseInClient*(this: TWinControl): bool  =
  return WinControl_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TWinControl): int32  =
  return WinControl_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TWinControl): TBrush  =
  return WinControl_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TWinControl): int32  =
  return WinControl_GetControlCount(this.Instance)

proc Handle*(this: TWinControl): HWND  =
  return WinControl_GetHandle(this.Instance)

proc ParentDoubleBuffered*(this: TWinControl): bool  =
  return WinControl_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TWinControl, AValue: bool)  =
  WinControl_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentWindow*(this: TWinControl): HWND  =
  return WinControl_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TWinControl, AValue: HWND)  =
  WinControl_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TWinControl): bool  =
  return WinControl_GetShowing(this.Instance)

proc TabOrder*(this: TWinControl): TTabOrder  =
  return WinControl_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TWinControl, AValue: TTabOrder)  =
  WinControl_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TWinControl): bool  =
  return WinControl_GetTabStop(this.Instance)

proc `TabStop=`*(this: TWinControl, AValue: bool)  =
  WinControl_SetTabStop(this.Instance, AValue)

proc UseDockManager*(this: TWinControl): bool  =
  return WinControl_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TWinControl, AValue: bool)  =
  WinControl_SetUseDockManager(this.Instance, AValue)

proc Enabled*(this: TWinControl): bool  =
  return WinControl_GetEnabled(this.Instance)

proc `Enabled=`*(this: TWinControl, AValue: bool)  =
  WinControl_SetEnabled(this.Instance, AValue)

proc Action*(this: TWinControl): TAction  =
  return WinControl_GetAction(this.Instance).AsAction

proc `Action=`*(this: TWinControl, AValue: TAction)  =
  WinControl_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TWinControl): TAlign  =
  return WinControl_GetAlign(this.Instance)

proc `Align=`*(this: TWinControl, AValue: TAlign)  =
  WinControl_SetAlign(this.Instance, AValue)

proc Anchors*(this: TWinControl): TAnchors  =
  return WinControl_GetAnchors(this.Instance)

proc `Anchors=`*(this: TWinControl, AValue: TAnchors)  =
  WinControl_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TWinControl): TBiDiMode  =
  return WinControl_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TWinControl, AValue: TBiDiMode)  =
  WinControl_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TWinControl): TRect  =
  WinControl_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TWinControl, AValue: TRect)  =
  var ps1 = AValue
  WinControl_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TWinControl): int32  =
  return WinControl_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TWinControl, AValue: int32)  =
  WinControl_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TWinControl): TPoint  =
  WinControl_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TWinControl): TRect  =
  WinControl_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TWinControl): int32  =
  return WinControl_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TWinControl, AValue: int32)  =
  WinControl_SetClientWidth(this.Instance, AValue)

proc Constraints*(this: TWinControl): TSizeConstraints  =
  return WinControl_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TWinControl, AValue: TSizeConstraints)  =
  WinControl_SetConstraints(this.Instance, CheckPtr(AValue))

proc ControlState*(this: TWinControl): TControlState  =
  return WinControl_GetControlState(this.Instance)

proc `ControlState=`*(this: TWinControl, AValue: TControlState)  =
  WinControl_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TWinControl): TControlStyle  =
  return WinControl_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TWinControl, AValue: TControlStyle)  =
  WinControl_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TWinControl): bool  =
  return WinControl_GetFloating(this.Instance)

proc ShowHint*(this: TWinControl): bool  =
  return WinControl_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TWinControl, AValue: bool)  =
  WinControl_SetShowHint(this.Instance, AValue)

proc Visible*(this: TWinControl): bool  =
  return WinControl_GetVisible(this.Instance)

proc `Visible=`*(this: TWinControl, AValue: bool)  =
  WinControl_SetVisible(this.Instance, AValue)

proc Parent*(this: TWinControl): TWinControl  =
  return WinControl_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TWinControl, AValue: TWinControl)  =
  WinControl_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TWinControl): int32  =
  return WinControl_GetLeft(this.Instance)

proc `Left=`*(this: TWinControl, AValue: int32)  =
  WinControl_SetLeft(this.Instance, AValue)

proc Top*(this: TWinControl): int32  =
  return WinControl_GetTop(this.Instance)

proc `Top=`*(this: TWinControl, AValue: int32)  =
  WinControl_SetTop(this.Instance, AValue)

proc Width*(this: TWinControl): int32  =
  return WinControl_GetWidth(this.Instance)

proc `Width=`*(this: TWinControl, AValue: int32)  =
  WinControl_SetWidth(this.Instance, AValue)

proc Height*(this: TWinControl): int32  =
  return WinControl_GetHeight(this.Instance)

proc `Height=`*(this: TWinControl, AValue: int32)  =
  WinControl_SetHeight(this.Instance, AValue)

proc Cursor*(this: TWinControl): TCursor  =
  return WinControl_GetCursor(this.Instance)

proc `Cursor=`*(this: TWinControl, AValue: TCursor)  =
  WinControl_SetCursor(this.Instance, AValue)

proc Hint*(this: TWinControl): string  =
  return $WinControl_GetHint(this.Instance)

proc `Hint=`*(this: TWinControl, AValue: string)  =
  WinControl_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TWinControl): int32  =
  return WinControl_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TWinControl): int32  =
  return WinControl_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TWinControl, AValue: int32)  =
  WinControl_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TWinControl): TComponent  =
  return WinControl_GetOwner(this.Instance).AsComponent

proc Name*(this: TWinControl): string  =
  return $WinControl_GetName(this.Instance)

proc `Name=`*(this: TWinControl, AValue: string)  =
  WinControl_SetName(this.Instance, AValue)

proc Tag*(this: TWinControl): int  =
  return WinControl_GetTag(this.Instance)

proc `Tag=`*(this: TWinControl, AValue: int)  =
  WinControl_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TWinControl): TAnchorSide  =
  return WinControl_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TWinControl, AValue: TAnchorSide)  =
  WinControl_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TWinControl): TAnchorSide  =
  return WinControl_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TWinControl, AValue: TAnchorSide)  =
  WinControl_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TWinControl): TAnchorSide  =
  return WinControl_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TWinControl, AValue: TAnchorSide)  =
  WinControl_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TWinControl): TAnchorSide  =
  return WinControl_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TWinControl, AValue: TAnchorSide)  =
  WinControl_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TWinControl): TControlChildSizing  =
  return WinControl_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TWinControl, AValue: TControlChildSizing)  =
  WinControl_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TWinControl): TControlBorderSpacing  =
  return WinControl_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TWinControl, AValue: TControlBorderSpacing)  =
  WinControl_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TWinControl, Index: int32): TControl  =
  return WinControl_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TWinControl, Index: int32): TControl  =
  return WinControl_GetControls(this.Instance, Index).AsControl

proc Components*(this: TWinControl, AIndex: int32): TComponent  =
  return WinControl_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TWinControl, AKind: TAnchorKind): TAnchorSide  =
  return WinControl_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TWinControlClass*(): TClass = WinControl_StaticClassType()


#------------------------- TGraphic -------------------------

proc Free*(this: TGraphic) = defaultFree: Graphic_Free

proc NewGraphic*(): TGraphic =
  new(result, Free)
  result.Instance = Graphic_Create()

proc Equals*(this: TGraphic, Obj: TObject): bool =
  return Graphic_Equals(this.Instance, CheckPtr(Obj))

proc LoadFromFile*(this: TGraphic, Filename: string)  =
  Graphic_LoadFromFile(this.Instance, Filename)

proc SaveToFile*(this: TGraphic, Filename: string)  =
  Graphic_SaveToFile(this.Instance, Filename)

proc LoadFromStream*(this: TGraphic, Stream: TStream)  =
  Graphic_LoadFromStream(this.Instance, CheckPtr(Stream))

proc SaveToStream*(this: TGraphic, Stream: TStream)  =
  Graphic_SaveToStream(this.Instance, CheckPtr(Stream))

proc Assign*(this: TGraphic, Source: TObject)  =
  Graphic_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TGraphic): string  =
  return $Graphic_GetNamePath(this.Instance)

proc ClassType*(this: TGraphic): TClass =
  return Graphic_ClassType(this.Instance)

proc ClassName*(this: TGraphic): string =
  return $Graphic_ClassName(this.Instance)

proc InstanceSize*(this: TGraphic): int32 =
  return Graphic_InstanceSize(this.Instance)

proc InheritsFrom*(this: TGraphic, AClass: TClass): bool =
  return Graphic_InheritsFrom(this.Instance, AClass)

proc GetHashCode*(this: TGraphic): int32 =
  return Graphic_GetHashCode(this.Instance)

proc ToString*(this: TGraphic): string =
  return $Graphic_ToString(this.Instance)

proc Empty*(this: TGraphic): bool  =
  return Graphic_GetEmpty(this.Instance)

proc Height*(this: TGraphic): int32  =
  return Graphic_GetHeight(this.Instance)

proc `Height=`*(this: TGraphic, AValue: int32)  =
  Graphic_SetHeight(this.Instance, AValue)

proc Modified*(this: TGraphic): bool  =
  return Graphic_GetModified(this.Instance)

proc `Modified=`*(this: TGraphic, AValue: bool)  =
  Graphic_SetModified(this.Instance, AValue)

proc Palette*(this: TGraphic): HPALETTE  =
  return Graphic_GetPalette(this.Instance)

proc `Palette=`*(this: TGraphic, AValue: HPALETTE)  =
  Graphic_SetPalette(this.Instance, AValue)

proc PaletteModified*(this: TGraphic): bool  =
  return Graphic_GetPaletteModified(this.Instance)

proc `PaletteModified=`*(this: TGraphic, AValue: bool)  =
  Graphic_SetPaletteModified(this.Instance, AValue)

proc Transparent*(this: TGraphic): bool  =
  return Graphic_GetTransparent(this.Instance)

proc `Transparent=`*(this: TGraphic, AValue: bool)  =
  Graphic_SetTransparent(this.Instance, AValue)

proc Width*(this: TGraphic): int32  =
  return Graphic_GetWidth(this.Instance)

proc `Width=`*(this: TGraphic, AValue: int32)  =
  Graphic_SetWidth(this.Instance, AValue)

proc `OnChange=`*(this: TGraphic, AEventId: TNotifyEvent)  =
  Graphic_SetOnChange(this.Instance, AEventId)

proc TGraphicClass*(): TClass = Graphic_StaticClassType()


#------------------------- TStrings -------------------------

proc Free*(this: TStrings) = defaultFree: Strings_Free

proc NewStrings*(): TStrings =
  new(result, Free)
  result.Instance = Strings_Create()

proc Add*(this: TStrings, S: string): int32  =
  return Strings_Add(this.Instance, S)

proc AddObject*(this: TStrings, S: string, AObject: TObject): int32  =
  return Strings_AddObject(this.Instance, S, CheckPtr(AObject))

proc Append*(this: TStrings, S: string)  =
  Strings_Append(this.Instance, S)

proc Assign*(this: TStrings, Source: TObject)  =
  Strings_Assign(this.Instance, CheckPtr(Source))

proc BeginUpdate*(this: TStrings)  =
  Strings_BeginUpdate(this.Instance)

proc Clear*(this: TStrings)  =
  Strings_Clear(this.Instance)

proc Delete*(this: TStrings, Index: int32)  =
  Strings_Delete(this.Instance, Index)

proc EndUpdate*(this: TStrings)  =
  Strings_EndUpdate(this.Instance)

proc Equals*(this: TStrings, Strings: TStrings): bool  =
  return Strings_Equals(this.Instance, CheckPtr(Strings))

proc IndexOf*(this: TStrings, S: string): int32  =
  return Strings_IndexOf(this.Instance, S)

proc IndexOfName*(this: TStrings, Name: string): int32  =
  return Strings_IndexOfName(this.Instance, Name)

proc IndexOfObject*(this: TStrings, AObject: TObject): int32  =
  return Strings_IndexOfObject(this.Instance, CheckPtr(AObject))

proc Insert*(this: TStrings, Index: int32, S: string)  =
  Strings_Insert(this.Instance, Index, S)

proc InsertObject*(this: TStrings, Index: int32, S: string, AObject: TObject)  =
  Strings_InsertObject(this.Instance, Index, S, CheckPtr(AObject))

proc LoadFromFile*(this: TStrings, FileName: string)  =
  Strings_LoadFromFile(this.Instance, FileName)

proc LoadFromStream*(this: TStrings, Stream: TStream)  =
  Strings_LoadFromStream(this.Instance, CheckPtr(Stream))

proc Move*(this: TStrings, CurIndex: int32, NewIndex: int32)  =
  Strings_Move(this.Instance, CurIndex, NewIndex)

proc SaveToFile*(this: TStrings, FileName: string)  =
  Strings_SaveToFile(this.Instance, FileName)

proc SaveToStream*(this: TStrings, Stream: TStream)  =
  Strings_SaveToStream(this.Instance, CheckPtr(Stream))

proc GetNamePath*(this: TStrings): string  =
  return $Strings_GetNamePath(this.Instance)

proc ClassType*(this: TStrings): TClass =
  return Strings_ClassType(this.Instance)

proc ClassName*(this: TStrings): string =
  return $Strings_ClassName(this.Instance)

proc InstanceSize*(this: TStrings): int32 =
  return Strings_InstanceSize(this.Instance)

proc InheritsFrom*(this: TStrings, AClass: TClass): bool =
  return Strings_InheritsFrom(this.Instance, AClass)

proc GetHashCode*(this: TStrings): int32 =
  return Strings_GetHashCode(this.Instance)

proc ToString*(this: TStrings): string =
  return $Strings_ToString(this.Instance)

proc Capacity*(this: TStrings): int32  =
  return Strings_GetCapacity(this.Instance)

proc `Capacity=`*(this: TStrings, AValue: int32)  =
  Strings_SetCapacity(this.Instance, AValue)

proc CommaText*(this: TStrings): string  =
  return $Strings_GetCommaText(this.Instance)

proc `CommaText=`*(this: TStrings, AValue: string)  =
  Strings_SetCommaText(this.Instance, AValue)

proc Count*(this: TStrings): int32  =
  return Strings_GetCount(this.Instance)

proc Delimiter*(this: TStrings): Char  =
  return Strings_GetDelimiter(this.Instance)

proc `Delimiter=`*(this: TStrings, AValue: Char)  =
  Strings_SetDelimiter(this.Instance, AValue)

proc NameValueSeparator*(this: TStrings): Char  =
  return Strings_GetNameValueSeparator(this.Instance)

proc `NameValueSeparator=`*(this: TStrings, AValue: Char)  =
  Strings_SetNameValueSeparator(this.Instance, AValue)

proc Text*(this: TStrings): string  =
  return $Strings_GetText(this.Instance)

proc `Text=`*(this: TStrings, AValue: string)  =
  Strings_SetText(this.Instance, AValue)

proc Objects*(this: TStrings, Index: int32): TObject  =
  return Strings_GetObjects(this.Instance, Index).AsObject

proc `Objects=`*(this: TStrings, Index: int32, AValue: TObject)  =
  Strings_SetObjects(this.Instance, Index, CheckPtr(AValue))

proc Values*(this: TStrings, Name: string): string  =
  return $Strings_GetValues(this.Instance, Name)

proc `Values=`*(this: TStrings, Name: string, AValue: string)  =
  Strings_SetValues(this.Instance, Name, AValue)

proc ValueFromIndex*(this: TStrings, Index: int32): string  =
  return $Strings_GetValueFromIndex(this.Instance, Index)

proc `ValueFromIndex=`*(this: TStrings, Index: int32, AValue: string)  =
  Strings_SetValueFromIndex(this.Instance, Index, AValue)

proc Strings*(this: TStrings, Index: int32): string  =
  return $Strings_GetStrings(this.Instance, Index)

proc `Strings=`*(this: TStrings, Index: int32, AValue: string)  =
  Strings_SetStrings(this.Instance, Index, AValue)

proc TStringsClass*(): TClass = Strings_StaticClassType()


#------------------------- TStream -------------------------


#------------------------- TCheckBox -------------------------

proc Free*(this: TCheckBox) = defaultFree: CheckBox_Free

proc NewCheckBox*(AOwner: TComponent): TCheckBox =
  new(result)
  result.Instance = CheckBox_Create(CheckPtr(AOwner))

proc CanFocus*(this: TCheckBox): bool =
  return CheckBox_CanFocus(this.Instance)

proc ContainsControl*(this: TCheckBox, Control: TControl): bool =
  return CheckBox_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TCheckBox, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return CheckBox_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TCheckBox) =
  CheckBox_DisableAlign(this.Instance)

proc EnableAlign*(this: TCheckBox) =
  CheckBox_EnableAlign(this.Instance)

proc FindChildControl*(this: TCheckBox, ControlName: string): TControl =
  return CheckBox_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TCheckBox, AllLevels: bool) =
  CheckBox_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TCheckBox): bool =
  return CheckBox_Focused(this.Instance)

proc HandleAllocated*(this: TCheckBox): bool =
  return CheckBox_HandleAllocated(this.Instance)

proc InsertControl*(this: TCheckBox, AControl: TControl) =
  CheckBox_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TCheckBox) =
  CheckBox_Invalidate(this.Instance)

proc PaintTo*(this: TCheckBox, DC: HDC, X: int32, Y: int32) =
  CheckBox_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TCheckBox, AControl: TControl) =
  CheckBox_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TCheckBox) =
  CheckBox_Realign(this.Instance)

proc Repaint*(this: TCheckBox) =
  CheckBox_Repaint(this.Instance)

proc ScaleBy*(this: TCheckBox, M: int32, D: int32) =
  CheckBox_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TCheckBox, DeltaX: int32, DeltaY: int32) =
  CheckBox_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TCheckBox, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  CheckBox_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TCheckBox) =
  CheckBox_SetFocus(this.Instance)

proc Update*(this: TCheckBox) =
  CheckBox_Update(this.Instance)

proc BringToFront*(this: TCheckBox) =
  CheckBox_BringToFront(this.Instance)

proc ClientToScreen*(this: TCheckBox, Point: TPoint): TPoint =
  var ps1 = Point
  CheckBox_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TCheckBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  CheckBox_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TCheckBox): bool =
  return CheckBox_Dragging(this.Instance)

proc HasParent*(this: TCheckBox): bool =
  return CheckBox_HasParent(this.Instance)

proc Hide*(this: TCheckBox) =
  CheckBox_Hide(this.Instance)

proc Perform*(this: TCheckBox, Msg: uint32, WParam: uint, LParam: int): int =
  return CheckBox_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TCheckBox) =
  CheckBox_Refresh(this.Instance)

proc ScreenToClient*(this: TCheckBox, Point: TPoint): TPoint =
  var ps1 = Point
  CheckBox_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TCheckBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  CheckBox_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TCheckBox) =
  CheckBox_SendToBack(this.Instance)

proc Show*(this: TCheckBox) =
  CheckBox_Show(this.Instance)

proc GetTextBuf*(this: TCheckBox, Buffer: string, BufSize: int32): int32 =
  return CheckBox_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TCheckBox): int32 =
  return CheckBox_GetTextLen(this.Instance)

proc SetTextBuf*(this: TCheckBox, Buffer: string) =
  CheckBox_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TCheckBox, AName: string): TComponent =
  return CheckBox_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TCheckBox): string =
  return $CheckBox_GetNamePath(this.Instance)

proc Assign*(this: TCheckBox, Source: TObject) =
  CheckBox_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TCheckBox): TClass =
  return CheckBox_ClassType(this.Instance)

proc ClassName*(this: TCheckBox): string =
  return $CheckBox_ClassName(this.Instance)

proc InstanceSize*(this: TCheckBox): int32 =
  return CheckBox_InstanceSize(this.Instance)

proc InheritsFrom*(this: TCheckBox, AClass: TClass): bool =
  return CheckBox_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TCheckBox, Obj: TObject): bool =
  return CheckBox_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TCheckBox): int32 =
  return CheckBox_GetHashCode(this.Instance)

proc ToString*(this: TCheckBox): string =
  return $CheckBox_ToString(this.Instance)

proc AnchorToNeighbour*(this: TCheckBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  CheckBox_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TCheckBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  CheckBox_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TCheckBox, ASibling: TControl) =
  CheckBox_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TCheckBox, ASibling: TControl) =
  CheckBox_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TCheckBox, ASide: TAnchorKind, ASibling: TControl) =
  CheckBox_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TCheckBox, ATheAlign: TAlign, ASpace: int32) =
  CheckBox_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TCheckBox, ASpace: int32) =
  CheckBox_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TCheckBox, ASize: int32): int32 =
  return CheckBox_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TCheckBox, ASize: int32): int32 =
  return CheckBox_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TCheckBox, ASize: int32): int32 =
  return CheckBox_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TCheckBox, ASize: int32): int32 =
  return CheckBox_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TCheckBox, ASize: int32): int32 =
  return CheckBox_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TCheckBox, ASize: int32): int32 =
  return CheckBox_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TCheckBox, ASize: int32): int32 =
  return CheckBox_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TCheckBox, ASize: int32): int32 =
  return CheckBox_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TCheckBox, ASize: int32): int32 =
  return CheckBox_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TCheckBox, ASize: int32): int32 =
  return CheckBox_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TCheckBox, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  CheckBox_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TCheckBox, ADesignTimePPI: int32) =
  CheckBox_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TCheckBox, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  CheckBox_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc `OnChange=`*(this: TCheckBox, AEventId: TNotifyEvent)  =
  CheckBox_SetOnChange(this.Instance, AEventId)

proc Action*(this: TCheckBox): TAction  =
  return CheckBox_GetAction(this.Instance).AsAction

proc `Action=`*(this: TCheckBox, AValue: TAction)  =
  CheckBox_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TCheckBox): TAlign  =
  return CheckBox_GetAlign(this.Instance)

proc `Align=`*(this: TCheckBox, AValue: TAlign)  =
  CheckBox_SetAlign(this.Instance, AValue)

proc Alignment*(this: TCheckBox): TLeftRight  =
  return CheckBox_GetAlignment(this.Instance)

proc `Alignment=`*(this: TCheckBox, AValue: TLeftRight)  =
  CheckBox_SetAlignment(this.Instance, AValue)

proc AllowGrayed*(this: TCheckBox): bool  =
  return CheckBox_GetAllowGrayed(this.Instance)

proc `AllowGrayed=`*(this: TCheckBox, AValue: bool)  =
  CheckBox_SetAllowGrayed(this.Instance, AValue)

proc Anchors*(this: TCheckBox): TAnchors  =
  return CheckBox_GetAnchors(this.Instance)

proc `Anchors=`*(this: TCheckBox, AValue: TAnchors)  =
  CheckBox_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TCheckBox): TBiDiMode  =
  return CheckBox_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TCheckBox, AValue: TBiDiMode)  =
  CheckBox_SetBiDiMode(this.Instance, AValue)

proc Caption*(this: TCheckBox): string  =
  return $CheckBox_GetCaption(this.Instance)

proc `Caption=`*(this: TCheckBox, AValue: string)  =
  CheckBox_SetCaption(this.Instance, AValue)

proc Checked*(this: TCheckBox): bool  =
  return CheckBox_GetChecked(this.Instance)

proc `Checked=`*(this: TCheckBox, AValue: bool)  =
  CheckBox_SetChecked(this.Instance, AValue)

proc Color*(this: TCheckBox): TColor  =
  return CheckBox_GetColor(this.Instance)

proc `Color=`*(this: TCheckBox, AValue: TColor)  =
  CheckBox_SetColor(this.Instance, AValue)

proc Constraints*(this: TCheckBox): TSizeConstraints  =
  return CheckBox_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TCheckBox, AValue: TSizeConstraints)  =
  CheckBox_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TCheckBox): bool  =
  return CheckBox_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TCheckBox, AValue: bool)  =
  CheckBox_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TCheckBox): TCursor  =
  return CheckBox_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TCheckBox, AValue: TCursor)  =
  CheckBox_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TCheckBox): TDragKind  =
  return CheckBox_GetDragKind(this.Instance)

proc `DragKind=`*(this: TCheckBox, AValue: TDragKind)  =
  CheckBox_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TCheckBox): TDragMode  =
  return CheckBox_GetDragMode(this.Instance)

proc `DragMode=`*(this: TCheckBox, AValue: TDragMode)  =
  CheckBox_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TCheckBox): bool  =
  return CheckBox_GetEnabled(this.Instance)

proc `Enabled=`*(this: TCheckBox, AValue: bool)  =
  CheckBox_SetEnabled(this.Instance, AValue)

proc Font*(this: TCheckBox): TFont  =
  return CheckBox_GetFont(this.Instance).AsFont

proc `Font=`*(this: TCheckBox, AValue: TFont)  =
  CheckBox_SetFont(this.Instance, CheckPtr(AValue))

proc ParentColor*(this: TCheckBox): bool  =
  return CheckBox_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TCheckBox, AValue: bool)  =
  CheckBox_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TCheckBox): bool  =
  return CheckBox_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TCheckBox, AValue: bool)  =
  CheckBox_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TCheckBox): bool  =
  return CheckBox_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TCheckBox, AValue: bool)  =
  CheckBox_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TCheckBox): bool  =
  return CheckBox_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TCheckBox, AValue: bool)  =
  CheckBox_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TCheckBox): TPopupMenu  =
  return CheckBox_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TCheckBox, AValue: TPopupMenu)  =
  CheckBox_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TCheckBox): bool  =
  return CheckBox_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TCheckBox, AValue: bool)  =
  CheckBox_SetShowHint(this.Instance, AValue)

proc State*(this: TCheckBox): TCheckBoxState  =
  return CheckBox_GetState(this.Instance)

proc `State=`*(this: TCheckBox, AValue: TCheckBoxState)  =
  CheckBox_SetState(this.Instance, AValue)

proc TabOrder*(this: TCheckBox): TTabOrder  =
  return CheckBox_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TCheckBox, AValue: TTabOrder)  =
  CheckBox_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TCheckBox): bool  =
  return CheckBox_GetTabStop(this.Instance)

proc `TabStop=`*(this: TCheckBox, AValue: bool)  =
  CheckBox_SetTabStop(this.Instance, AValue)

proc Visible*(this: TCheckBox): bool  =
  return CheckBox_GetVisible(this.Instance)

proc `Visible=`*(this: TCheckBox, AValue: bool)  =
  CheckBox_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TCheckBox, AEventId: TNotifyEvent)  =
  CheckBox_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TCheckBox, AEventId: TContextPopupEvent)  =
  CheckBox_SetOnContextPopup(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TCheckBox, AEventId: TDragDropEvent)  =
  CheckBox_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TCheckBox, AEventId: TDragOverEvent)  =
  CheckBox_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TCheckBox, AEventId: TEndDragEvent)  =
  CheckBox_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TCheckBox, AEventId: TNotifyEvent)  =
  CheckBox_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TCheckBox, AEventId: TNotifyEvent)  =
  CheckBox_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TCheckBox, AEventId: TKeyEvent)  =
  CheckBox_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TCheckBox, AEventId: TKeyPressEvent)  =
  CheckBox_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TCheckBox, AEventId: TKeyEvent)  =
  CheckBox_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TCheckBox, AEventId: TMouseEvent)  =
  CheckBox_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TCheckBox, AEventId: TNotifyEvent)  =
  CheckBox_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TCheckBox, AEventId: TNotifyEvent)  =
  CheckBox_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TCheckBox, AEventId: TMouseMoveEvent)  =
  CheckBox_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TCheckBox, AEventId: TMouseEvent)  =
  CheckBox_SetOnMouseUp(this.Instance, AEventId)

proc DockClientCount*(this: TCheckBox): int32  =
  return CheckBox_GetDockClientCount(this.Instance)

proc DockSite*(this: TCheckBox): bool  =
  return CheckBox_GetDockSite(this.Instance)

proc `DockSite=`*(this: TCheckBox, AValue: bool)  =
  CheckBox_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TCheckBox): bool  =
  return CheckBox_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TCheckBox): int32  =
  return CheckBox_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TCheckBox): TBrush  =
  return CheckBox_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TCheckBox): int32  =
  return CheckBox_GetControlCount(this.Instance)

proc Handle*(this: TCheckBox): HWND  =
  return CheckBox_GetHandle(this.Instance)

proc ParentWindow*(this: TCheckBox): HWND  =
  return CheckBox_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TCheckBox, AValue: HWND)  =
  CheckBox_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TCheckBox): bool  =
  return CheckBox_GetShowing(this.Instance)

proc UseDockManager*(this: TCheckBox): bool  =
  return CheckBox_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TCheckBox, AValue: bool)  =
  CheckBox_SetUseDockManager(this.Instance, AValue)

proc BoundsRect*(this: TCheckBox): TRect  =
  CheckBox_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TCheckBox, AValue: TRect)  =
  var ps1 = AValue
  CheckBox_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TCheckBox): int32  =
  return CheckBox_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TCheckBox, AValue: int32)  =
  CheckBox_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TCheckBox): TPoint  =
  CheckBox_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TCheckBox): TRect  =
  CheckBox_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TCheckBox): int32  =
  return CheckBox_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TCheckBox, AValue: int32)  =
  CheckBox_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TCheckBox): TControlState  =
  return CheckBox_GetControlState(this.Instance)

proc `ControlState=`*(this: TCheckBox, AValue: TControlState)  =
  CheckBox_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TCheckBox): TControlStyle  =
  return CheckBox_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TCheckBox, AValue: TControlStyle)  =
  CheckBox_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TCheckBox): bool  =
  return CheckBox_GetFloating(this.Instance)

proc Parent*(this: TCheckBox): TWinControl  =
  return CheckBox_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TCheckBox, AValue: TWinControl)  =
  CheckBox_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TCheckBox): int32  =
  return CheckBox_GetLeft(this.Instance)

proc `Left=`*(this: TCheckBox, AValue: int32)  =
  CheckBox_SetLeft(this.Instance, AValue)

proc Top*(this: TCheckBox): int32  =
  return CheckBox_GetTop(this.Instance)

proc `Top=`*(this: TCheckBox, AValue: int32)  =
  CheckBox_SetTop(this.Instance, AValue)

proc Width*(this: TCheckBox): int32  =
  return CheckBox_GetWidth(this.Instance)

proc `Width=`*(this: TCheckBox, AValue: int32)  =
  CheckBox_SetWidth(this.Instance, AValue)

proc Height*(this: TCheckBox): int32  =
  return CheckBox_GetHeight(this.Instance)

proc `Height=`*(this: TCheckBox, AValue: int32)  =
  CheckBox_SetHeight(this.Instance, AValue)

proc Cursor*(this: TCheckBox): TCursor  =
  return CheckBox_GetCursor(this.Instance)

proc `Cursor=`*(this: TCheckBox, AValue: TCursor)  =
  CheckBox_SetCursor(this.Instance, AValue)

proc Hint*(this: TCheckBox): string  =
  return $CheckBox_GetHint(this.Instance)

proc `Hint=`*(this: TCheckBox, AValue: string)  =
  CheckBox_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TCheckBox): int32  =
  return CheckBox_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TCheckBox): int32  =
  return CheckBox_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TCheckBox, AValue: int32)  =
  CheckBox_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TCheckBox): TComponent  =
  return CheckBox_GetOwner(this.Instance).AsComponent

proc Name*(this: TCheckBox): string  =
  return $CheckBox_GetName(this.Instance)

proc `Name=`*(this: TCheckBox, AValue: string)  =
  CheckBox_SetName(this.Instance, AValue)

proc Tag*(this: TCheckBox): int  =
  return CheckBox_GetTag(this.Instance)

proc `Tag=`*(this: TCheckBox, AValue: int)  =
  CheckBox_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TCheckBox): TAnchorSide  =
  return CheckBox_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TCheckBox, AValue: TAnchorSide)  =
  CheckBox_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TCheckBox): TAnchorSide  =
  return CheckBox_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TCheckBox, AValue: TAnchorSide)  =
  CheckBox_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TCheckBox): TAnchorSide  =
  return CheckBox_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TCheckBox, AValue: TAnchorSide)  =
  CheckBox_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TCheckBox): TAnchorSide  =
  return CheckBox_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TCheckBox, AValue: TAnchorSide)  =
  CheckBox_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TCheckBox): TControlChildSizing  =
  return CheckBox_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TCheckBox, AValue: TControlChildSizing)  =
  CheckBox_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TCheckBox): TControlBorderSpacing  =
  return CheckBox_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TCheckBox, AValue: TControlBorderSpacing)  =
  CheckBox_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TCheckBox, Index: int32): TControl  =
  return CheckBox_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TCheckBox, Index: int32): TControl  =
  return CheckBox_GetControls(this.Instance, Index).AsControl

proc Components*(this: TCheckBox, AIndex: int32): TComponent  =
  return CheckBox_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TCheckBox, AKind: TAnchorKind): TAnchorSide  =
  return CheckBox_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TCheckBoxClass*(): TClass = CheckBox_StaticClassType()


#------------------------- TRadioButton -------------------------

proc Free*(this: TRadioButton) = defaultFree: RadioButton_Free

proc NewRadioButton*(AOwner: TComponent): TRadioButton =
  new(result)
  result.Instance = RadioButton_Create(CheckPtr(AOwner))

proc CanFocus*(this: TRadioButton): bool =
  return RadioButton_CanFocus(this.Instance)

proc ContainsControl*(this: TRadioButton, Control: TControl): bool =
  return RadioButton_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TRadioButton, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return RadioButton_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TRadioButton) =
  RadioButton_DisableAlign(this.Instance)

proc EnableAlign*(this: TRadioButton) =
  RadioButton_EnableAlign(this.Instance)

proc FindChildControl*(this: TRadioButton, ControlName: string): TControl =
  return RadioButton_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TRadioButton, AllLevels: bool) =
  RadioButton_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TRadioButton): bool =
  return RadioButton_Focused(this.Instance)

proc HandleAllocated*(this: TRadioButton): bool =
  return RadioButton_HandleAllocated(this.Instance)

proc InsertControl*(this: TRadioButton, AControl: TControl) =
  RadioButton_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TRadioButton) =
  RadioButton_Invalidate(this.Instance)

proc PaintTo*(this: TRadioButton, DC: HDC, X: int32, Y: int32) =
  RadioButton_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TRadioButton, AControl: TControl) =
  RadioButton_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TRadioButton) =
  RadioButton_Realign(this.Instance)

proc Repaint*(this: TRadioButton) =
  RadioButton_Repaint(this.Instance)

proc ScaleBy*(this: TRadioButton, M: int32, D: int32) =
  RadioButton_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TRadioButton, DeltaX: int32, DeltaY: int32) =
  RadioButton_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TRadioButton, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  RadioButton_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TRadioButton) =
  RadioButton_SetFocus(this.Instance)

proc Update*(this: TRadioButton) =
  RadioButton_Update(this.Instance)

proc BringToFront*(this: TRadioButton) =
  RadioButton_BringToFront(this.Instance)

proc ClientToScreen*(this: TRadioButton, Point: TPoint): TPoint =
  var ps1 = Point
  RadioButton_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TRadioButton, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  RadioButton_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TRadioButton): bool =
  return RadioButton_Dragging(this.Instance)

proc HasParent*(this: TRadioButton): bool =
  return RadioButton_HasParent(this.Instance)

proc Hide*(this: TRadioButton) =
  RadioButton_Hide(this.Instance)

proc Perform*(this: TRadioButton, Msg: uint32, WParam: uint, LParam: int): int =
  return RadioButton_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TRadioButton) =
  RadioButton_Refresh(this.Instance)

proc ScreenToClient*(this: TRadioButton, Point: TPoint): TPoint =
  var ps1 = Point
  RadioButton_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TRadioButton, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  RadioButton_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TRadioButton) =
  RadioButton_SendToBack(this.Instance)

proc Show*(this: TRadioButton) =
  RadioButton_Show(this.Instance)

proc GetTextBuf*(this: TRadioButton, Buffer: string, BufSize: int32): int32 =
  return RadioButton_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TRadioButton): int32 =
  return RadioButton_GetTextLen(this.Instance)

proc SetTextBuf*(this: TRadioButton, Buffer: string) =
  RadioButton_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TRadioButton, AName: string): TComponent =
  return RadioButton_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TRadioButton): string =
  return $RadioButton_GetNamePath(this.Instance)

proc Assign*(this: TRadioButton, Source: TObject) =
  RadioButton_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TRadioButton): TClass =
  return RadioButton_ClassType(this.Instance)

proc ClassName*(this: TRadioButton): string =
  return $RadioButton_ClassName(this.Instance)

proc InstanceSize*(this: TRadioButton): int32 =
  return RadioButton_InstanceSize(this.Instance)

proc InheritsFrom*(this: TRadioButton, AClass: TClass): bool =
  return RadioButton_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TRadioButton, Obj: TObject): bool =
  return RadioButton_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TRadioButton): int32 =
  return RadioButton_GetHashCode(this.Instance)

proc ToString*(this: TRadioButton): string =
  return $RadioButton_ToString(this.Instance)

proc AnchorToNeighbour*(this: TRadioButton, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  RadioButton_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TRadioButton, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  RadioButton_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TRadioButton, ASibling: TControl) =
  RadioButton_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TRadioButton, ASibling: TControl) =
  RadioButton_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TRadioButton, ASide: TAnchorKind, ASibling: TControl) =
  RadioButton_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TRadioButton, ATheAlign: TAlign, ASpace: int32) =
  RadioButton_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TRadioButton, ASpace: int32) =
  RadioButton_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TRadioButton, ASize: int32): int32 =
  return RadioButton_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TRadioButton, ASize: int32): int32 =
  return RadioButton_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TRadioButton, ASize: int32): int32 =
  return RadioButton_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TRadioButton, ASize: int32): int32 =
  return RadioButton_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TRadioButton, ASize: int32): int32 =
  return RadioButton_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TRadioButton, ASize: int32): int32 =
  return RadioButton_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TRadioButton, ASize: int32): int32 =
  return RadioButton_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TRadioButton, ASize: int32): int32 =
  return RadioButton_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TRadioButton, ASize: int32): int32 =
  return RadioButton_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TRadioButton, ASize: int32): int32 =
  return RadioButton_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TRadioButton, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  RadioButton_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TRadioButton, ADesignTimePPI: int32) =
  RadioButton_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TRadioButton, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  RadioButton_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc `OnChange=`*(this: TRadioButton, AEventId: TNotifyEvent)  =
  RadioButton_SetOnChange(this.Instance, AEventId)

proc Action*(this: TRadioButton): TAction  =
  return RadioButton_GetAction(this.Instance).AsAction

proc `Action=`*(this: TRadioButton, AValue: TAction)  =
  RadioButton_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TRadioButton): TAlign  =
  return RadioButton_GetAlign(this.Instance)

proc `Align=`*(this: TRadioButton, AValue: TAlign)  =
  RadioButton_SetAlign(this.Instance, AValue)

proc Alignment*(this: TRadioButton): TLeftRight  =
  return RadioButton_GetAlignment(this.Instance)

proc `Alignment=`*(this: TRadioButton, AValue: TLeftRight)  =
  RadioButton_SetAlignment(this.Instance, AValue)

proc Anchors*(this: TRadioButton): TAnchors  =
  return RadioButton_GetAnchors(this.Instance)

proc `Anchors=`*(this: TRadioButton, AValue: TAnchors)  =
  RadioButton_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TRadioButton): TBiDiMode  =
  return RadioButton_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TRadioButton, AValue: TBiDiMode)  =
  RadioButton_SetBiDiMode(this.Instance, AValue)

proc Caption*(this: TRadioButton): string  =
  return $RadioButton_GetCaption(this.Instance)

proc `Caption=`*(this: TRadioButton, AValue: string)  =
  RadioButton_SetCaption(this.Instance, AValue)

proc Checked*(this: TRadioButton): bool  =
  return RadioButton_GetChecked(this.Instance)

proc `Checked=`*(this: TRadioButton, AValue: bool)  =
  RadioButton_SetChecked(this.Instance, AValue)

proc Color*(this: TRadioButton): TColor  =
  return RadioButton_GetColor(this.Instance)

proc `Color=`*(this: TRadioButton, AValue: TColor)  =
  RadioButton_SetColor(this.Instance, AValue)

proc Constraints*(this: TRadioButton): TSizeConstraints  =
  return RadioButton_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TRadioButton, AValue: TSizeConstraints)  =
  RadioButton_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TRadioButton): bool  =
  return RadioButton_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TRadioButton, AValue: bool)  =
  RadioButton_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TRadioButton): TCursor  =
  return RadioButton_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TRadioButton, AValue: TCursor)  =
  RadioButton_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TRadioButton): TDragKind  =
  return RadioButton_GetDragKind(this.Instance)

proc `DragKind=`*(this: TRadioButton, AValue: TDragKind)  =
  RadioButton_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TRadioButton): TDragMode  =
  return RadioButton_GetDragMode(this.Instance)

proc `DragMode=`*(this: TRadioButton, AValue: TDragMode)  =
  RadioButton_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TRadioButton): bool  =
  return RadioButton_GetEnabled(this.Instance)

proc `Enabled=`*(this: TRadioButton, AValue: bool)  =
  RadioButton_SetEnabled(this.Instance, AValue)

proc Font*(this: TRadioButton): TFont  =
  return RadioButton_GetFont(this.Instance).AsFont

proc `Font=`*(this: TRadioButton, AValue: TFont)  =
  RadioButton_SetFont(this.Instance, CheckPtr(AValue))

proc ParentColor*(this: TRadioButton): bool  =
  return RadioButton_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TRadioButton, AValue: bool)  =
  RadioButton_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TRadioButton): bool  =
  return RadioButton_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TRadioButton, AValue: bool)  =
  RadioButton_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TRadioButton): bool  =
  return RadioButton_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TRadioButton, AValue: bool)  =
  RadioButton_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TRadioButton): bool  =
  return RadioButton_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TRadioButton, AValue: bool)  =
  RadioButton_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TRadioButton): TPopupMenu  =
  return RadioButton_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TRadioButton, AValue: TPopupMenu)  =
  RadioButton_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TRadioButton): bool  =
  return RadioButton_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TRadioButton, AValue: bool)  =
  RadioButton_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TRadioButton): TTabOrder  =
  return RadioButton_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TRadioButton, AValue: TTabOrder)  =
  RadioButton_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TRadioButton): bool  =
  return RadioButton_GetTabStop(this.Instance)

proc `TabStop=`*(this: TRadioButton, AValue: bool)  =
  RadioButton_SetTabStop(this.Instance, AValue)

proc Visible*(this: TRadioButton): bool  =
  return RadioButton_GetVisible(this.Instance)

proc `Visible=`*(this: TRadioButton, AValue: bool)  =
  RadioButton_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TRadioButton, AEventId: TNotifyEvent)  =
  RadioButton_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TRadioButton, AEventId: TContextPopupEvent)  =
  RadioButton_SetOnContextPopup(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TRadioButton, AEventId: TDragDropEvent)  =
  RadioButton_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TRadioButton, AEventId: TDragOverEvent)  =
  RadioButton_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TRadioButton, AEventId: TEndDragEvent)  =
  RadioButton_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TRadioButton, AEventId: TNotifyEvent)  =
  RadioButton_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TRadioButton, AEventId: TNotifyEvent)  =
  RadioButton_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TRadioButton, AEventId: TKeyEvent)  =
  RadioButton_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TRadioButton, AEventId: TKeyPressEvent)  =
  RadioButton_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TRadioButton, AEventId: TKeyEvent)  =
  RadioButton_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TRadioButton, AEventId: TMouseEvent)  =
  RadioButton_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TRadioButton, AEventId: TNotifyEvent)  =
  RadioButton_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TRadioButton, AEventId: TNotifyEvent)  =
  RadioButton_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TRadioButton, AEventId: TMouseMoveEvent)  =
  RadioButton_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TRadioButton, AEventId: TMouseEvent)  =
  RadioButton_SetOnMouseUp(this.Instance, AEventId)

proc DockClientCount*(this: TRadioButton): int32  =
  return RadioButton_GetDockClientCount(this.Instance)

proc DockSite*(this: TRadioButton): bool  =
  return RadioButton_GetDockSite(this.Instance)

proc `DockSite=`*(this: TRadioButton, AValue: bool)  =
  RadioButton_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TRadioButton): bool  =
  return RadioButton_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TRadioButton): int32  =
  return RadioButton_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TRadioButton): TBrush  =
  return RadioButton_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TRadioButton): int32  =
  return RadioButton_GetControlCount(this.Instance)

proc Handle*(this: TRadioButton): HWND  =
  return RadioButton_GetHandle(this.Instance)

proc ParentWindow*(this: TRadioButton): HWND  =
  return RadioButton_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TRadioButton, AValue: HWND)  =
  RadioButton_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TRadioButton): bool  =
  return RadioButton_GetShowing(this.Instance)

proc UseDockManager*(this: TRadioButton): bool  =
  return RadioButton_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TRadioButton, AValue: bool)  =
  RadioButton_SetUseDockManager(this.Instance, AValue)

proc BoundsRect*(this: TRadioButton): TRect  =
  RadioButton_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TRadioButton, AValue: TRect)  =
  var ps1 = AValue
  RadioButton_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TRadioButton): int32  =
  return RadioButton_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TRadioButton, AValue: int32)  =
  RadioButton_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TRadioButton): TPoint  =
  RadioButton_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TRadioButton): TRect  =
  RadioButton_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TRadioButton): int32  =
  return RadioButton_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TRadioButton, AValue: int32)  =
  RadioButton_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TRadioButton): TControlState  =
  return RadioButton_GetControlState(this.Instance)

proc `ControlState=`*(this: TRadioButton, AValue: TControlState)  =
  RadioButton_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TRadioButton): TControlStyle  =
  return RadioButton_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TRadioButton, AValue: TControlStyle)  =
  RadioButton_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TRadioButton): bool  =
  return RadioButton_GetFloating(this.Instance)

proc Parent*(this: TRadioButton): TWinControl  =
  return RadioButton_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TRadioButton, AValue: TWinControl)  =
  RadioButton_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TRadioButton): int32  =
  return RadioButton_GetLeft(this.Instance)

proc `Left=`*(this: TRadioButton, AValue: int32)  =
  RadioButton_SetLeft(this.Instance, AValue)

proc Top*(this: TRadioButton): int32  =
  return RadioButton_GetTop(this.Instance)

proc `Top=`*(this: TRadioButton, AValue: int32)  =
  RadioButton_SetTop(this.Instance, AValue)

proc Width*(this: TRadioButton): int32  =
  return RadioButton_GetWidth(this.Instance)

proc `Width=`*(this: TRadioButton, AValue: int32)  =
  RadioButton_SetWidth(this.Instance, AValue)

proc Height*(this: TRadioButton): int32  =
  return RadioButton_GetHeight(this.Instance)

proc `Height=`*(this: TRadioButton, AValue: int32)  =
  RadioButton_SetHeight(this.Instance, AValue)

proc Cursor*(this: TRadioButton): TCursor  =
  return RadioButton_GetCursor(this.Instance)

proc `Cursor=`*(this: TRadioButton, AValue: TCursor)  =
  RadioButton_SetCursor(this.Instance, AValue)

proc Hint*(this: TRadioButton): string  =
  return $RadioButton_GetHint(this.Instance)

proc `Hint=`*(this: TRadioButton, AValue: string)  =
  RadioButton_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TRadioButton): int32  =
  return RadioButton_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TRadioButton): int32  =
  return RadioButton_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TRadioButton, AValue: int32)  =
  RadioButton_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TRadioButton): TComponent  =
  return RadioButton_GetOwner(this.Instance).AsComponent

proc Name*(this: TRadioButton): string  =
  return $RadioButton_GetName(this.Instance)

proc `Name=`*(this: TRadioButton, AValue: string)  =
  RadioButton_SetName(this.Instance, AValue)

proc Tag*(this: TRadioButton): int  =
  return RadioButton_GetTag(this.Instance)

proc `Tag=`*(this: TRadioButton, AValue: int)  =
  RadioButton_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TRadioButton): TAnchorSide  =
  return RadioButton_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TRadioButton, AValue: TAnchorSide)  =
  RadioButton_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TRadioButton): TAnchorSide  =
  return RadioButton_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TRadioButton, AValue: TAnchorSide)  =
  RadioButton_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TRadioButton): TAnchorSide  =
  return RadioButton_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TRadioButton, AValue: TAnchorSide)  =
  RadioButton_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TRadioButton): TAnchorSide  =
  return RadioButton_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TRadioButton, AValue: TAnchorSide)  =
  RadioButton_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TRadioButton): TControlChildSizing  =
  return RadioButton_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TRadioButton, AValue: TControlChildSizing)  =
  RadioButton_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TRadioButton): TControlBorderSpacing  =
  return RadioButton_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TRadioButton, AValue: TControlBorderSpacing)  =
  RadioButton_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TRadioButton, Index: int32): TControl  =
  return RadioButton_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TRadioButton, Index: int32): TControl  =
  return RadioButton_GetControls(this.Instance, Index).AsControl

proc Components*(this: TRadioButton, AIndex: int32): TComponent  =
  return RadioButton_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TRadioButton, AKind: TAnchorKind): TAnchorSide  =
  return RadioButton_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TRadioButtonClass*(): TClass = RadioButton_StaticClassType()


#------------------------- TGroupBox -------------------------

proc Free*(this: TGroupBox) = defaultFree: GroupBox_Free

proc NewGroupBox*(AOwner: TComponent): TGroupBox =
  new(result)
  result.Instance = GroupBox_Create(CheckPtr(AOwner))

proc CanFocus*(this: TGroupBox): bool =
  return GroupBox_CanFocus(this.Instance)

proc ContainsControl*(this: TGroupBox, Control: TControl): bool =
  return GroupBox_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TGroupBox, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return GroupBox_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TGroupBox) =
  GroupBox_DisableAlign(this.Instance)

proc EnableAlign*(this: TGroupBox) =
  GroupBox_EnableAlign(this.Instance)

proc FindChildControl*(this: TGroupBox, ControlName: string): TControl =
  return GroupBox_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TGroupBox, AllLevels: bool) =
  GroupBox_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TGroupBox): bool =
  return GroupBox_Focused(this.Instance)

proc HandleAllocated*(this: TGroupBox): bool =
  return GroupBox_HandleAllocated(this.Instance)

proc InsertControl*(this: TGroupBox, AControl: TControl) =
  GroupBox_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TGroupBox) =
  GroupBox_Invalidate(this.Instance)

proc PaintTo*(this: TGroupBox, DC: HDC, X: int32, Y: int32) =
  GroupBox_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TGroupBox, AControl: TControl) =
  GroupBox_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TGroupBox) =
  GroupBox_Realign(this.Instance)

proc Repaint*(this: TGroupBox) =
  GroupBox_Repaint(this.Instance)

proc ScaleBy*(this: TGroupBox, M: int32, D: int32) =
  GroupBox_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TGroupBox, DeltaX: int32, DeltaY: int32) =
  GroupBox_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TGroupBox, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  GroupBox_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TGroupBox) =
  GroupBox_SetFocus(this.Instance)

proc Update*(this: TGroupBox) =
  GroupBox_Update(this.Instance)

proc BringToFront*(this: TGroupBox) =
  GroupBox_BringToFront(this.Instance)

proc ClientToScreen*(this: TGroupBox, Point: TPoint): TPoint =
  var ps1 = Point
  GroupBox_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TGroupBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  GroupBox_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TGroupBox): bool =
  return GroupBox_Dragging(this.Instance)

proc HasParent*(this: TGroupBox): bool =
  return GroupBox_HasParent(this.Instance)

proc Hide*(this: TGroupBox) =
  GroupBox_Hide(this.Instance)

proc Perform*(this: TGroupBox, Msg: uint32, WParam: uint, LParam: int): int =
  return GroupBox_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TGroupBox) =
  GroupBox_Refresh(this.Instance)

proc ScreenToClient*(this: TGroupBox, Point: TPoint): TPoint =
  var ps1 = Point
  GroupBox_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TGroupBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  GroupBox_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TGroupBox) =
  GroupBox_SendToBack(this.Instance)

proc Show*(this: TGroupBox) =
  GroupBox_Show(this.Instance)

proc GetTextBuf*(this: TGroupBox, Buffer: string, BufSize: int32): int32 =
  return GroupBox_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TGroupBox): int32 =
  return GroupBox_GetTextLen(this.Instance)

proc SetTextBuf*(this: TGroupBox, Buffer: string) =
  GroupBox_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TGroupBox, AName: string): TComponent =
  return GroupBox_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TGroupBox): string =
  return $GroupBox_GetNamePath(this.Instance)

proc Assign*(this: TGroupBox, Source: TObject) =
  GroupBox_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TGroupBox): TClass =
  return GroupBox_ClassType(this.Instance)

proc ClassName*(this: TGroupBox): string =
  return $GroupBox_ClassName(this.Instance)

proc InstanceSize*(this: TGroupBox): int32 =
  return GroupBox_InstanceSize(this.Instance)

proc InheritsFrom*(this: TGroupBox, AClass: TClass): bool =
  return GroupBox_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TGroupBox, Obj: TObject): bool =
  return GroupBox_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TGroupBox): int32 =
  return GroupBox_GetHashCode(this.Instance)

proc ToString*(this: TGroupBox): string =
  return $GroupBox_ToString(this.Instance)

proc AnchorToNeighbour*(this: TGroupBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  GroupBox_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TGroupBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  GroupBox_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TGroupBox, ASibling: TControl) =
  GroupBox_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TGroupBox, ASibling: TControl) =
  GroupBox_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TGroupBox, ASide: TAnchorKind, ASibling: TControl) =
  GroupBox_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TGroupBox, ATheAlign: TAlign, ASpace: int32) =
  GroupBox_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TGroupBox, ASpace: int32) =
  GroupBox_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TGroupBox, ASize: int32): int32 =
  return GroupBox_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TGroupBox, ASize: int32): int32 =
  return GroupBox_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TGroupBox, ASize: int32): int32 =
  return GroupBox_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TGroupBox, ASize: int32): int32 =
  return GroupBox_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TGroupBox, ASize: int32): int32 =
  return GroupBox_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TGroupBox, ASize: int32): int32 =
  return GroupBox_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TGroupBox, ASize: int32): int32 =
  return GroupBox_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TGroupBox, ASize: int32): int32 =
  return GroupBox_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TGroupBox, ASize: int32): int32 =
  return GroupBox_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TGroupBox, ASize: int32): int32 =
  return GroupBox_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TGroupBox, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  GroupBox_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TGroupBox, ADesignTimePPI: int32) =
  GroupBox_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TGroupBox, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  GroupBox_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TGroupBox): TAlign  =
  return GroupBox_GetAlign(this.Instance)

proc `Align=`*(this: TGroupBox, AValue: TAlign)  =
  GroupBox_SetAlign(this.Instance, AValue)

proc Anchors*(this: TGroupBox): TAnchors  =
  return GroupBox_GetAnchors(this.Instance)

proc `Anchors=`*(this: TGroupBox, AValue: TAnchors)  =
  GroupBox_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TGroupBox): TBiDiMode  =
  return GroupBox_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TGroupBox, AValue: TBiDiMode)  =
  GroupBox_SetBiDiMode(this.Instance, AValue)

proc Caption*(this: TGroupBox): string  =
  return $GroupBox_GetCaption(this.Instance)

proc `Caption=`*(this: TGroupBox, AValue: string)  =
  GroupBox_SetCaption(this.Instance, AValue)

proc Color*(this: TGroupBox): TColor  =
  return GroupBox_GetColor(this.Instance)

proc `Color=`*(this: TGroupBox, AValue: TColor)  =
  GroupBox_SetColor(this.Instance, AValue)

proc Constraints*(this: TGroupBox): TSizeConstraints  =
  return GroupBox_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TGroupBox, AValue: TSizeConstraints)  =
  GroupBox_SetConstraints(this.Instance, CheckPtr(AValue))

proc DockSite*(this: TGroupBox): bool  =
  return GroupBox_GetDockSite(this.Instance)

proc `DockSite=`*(this: TGroupBox, AValue: bool)  =
  GroupBox_SetDockSite(this.Instance, AValue)

proc DoubleBuffered*(this: TGroupBox): bool  =
  return GroupBox_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TGroupBox, AValue: bool)  =
  GroupBox_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TGroupBox): TCursor  =
  return GroupBox_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TGroupBox, AValue: TCursor)  =
  GroupBox_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TGroupBox): TDragKind  =
  return GroupBox_GetDragKind(this.Instance)

proc `DragKind=`*(this: TGroupBox, AValue: TDragKind)  =
  GroupBox_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TGroupBox): TDragMode  =
  return GroupBox_GetDragMode(this.Instance)

proc `DragMode=`*(this: TGroupBox, AValue: TDragMode)  =
  GroupBox_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TGroupBox): bool  =
  return GroupBox_GetEnabled(this.Instance)

proc `Enabled=`*(this: TGroupBox, AValue: bool)  =
  GroupBox_SetEnabled(this.Instance, AValue)

proc Font*(this: TGroupBox): TFont  =
  return GroupBox_GetFont(this.Instance).AsFont

proc `Font=`*(this: TGroupBox, AValue: TFont)  =
  GroupBox_SetFont(this.Instance, CheckPtr(AValue))

proc ParentColor*(this: TGroupBox): bool  =
  return GroupBox_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TGroupBox, AValue: bool)  =
  GroupBox_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TGroupBox): bool  =
  return GroupBox_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TGroupBox, AValue: bool)  =
  GroupBox_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TGroupBox): bool  =
  return GroupBox_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TGroupBox, AValue: bool)  =
  GroupBox_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TGroupBox): bool  =
  return GroupBox_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TGroupBox, AValue: bool)  =
  GroupBox_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TGroupBox): TPopupMenu  =
  return GroupBox_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TGroupBox, AValue: TPopupMenu)  =
  GroupBox_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TGroupBox): bool  =
  return GroupBox_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TGroupBox, AValue: bool)  =
  GroupBox_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TGroupBox): TTabOrder  =
  return GroupBox_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TGroupBox, AValue: TTabOrder)  =
  GroupBox_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TGroupBox): bool  =
  return GroupBox_GetTabStop(this.Instance)

proc `TabStop=`*(this: TGroupBox, AValue: bool)  =
  GroupBox_SetTabStop(this.Instance, AValue)

proc Visible*(this: TGroupBox): bool  =
  return GroupBox_GetVisible(this.Instance)

proc `Visible=`*(this: TGroupBox, AValue: bool)  =
  GroupBox_SetVisible(this.Instance, AValue)

proc `OnAlignPosition=`*(this: TGroupBox, AEventId: TAlignPositionEvent)  =
  GroupBox_SetOnAlignPosition(this.Instance, AEventId)

proc `OnClick=`*(this: TGroupBox, AEventId: TNotifyEvent)  =
  GroupBox_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TGroupBox, AEventId: TContextPopupEvent)  =
  GroupBox_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TGroupBox, AEventId: TNotifyEvent)  =
  GroupBox_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TGroupBox, AEventId: TDragDropEvent)  =
  GroupBox_SetOnDragDrop(this.Instance, AEventId)

proc `OnDockDrop=`*(this: TGroupBox, AEventId: TDockDropEvent)  =
  GroupBox_SetOnDockDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TGroupBox, AEventId: TDragOverEvent)  =
  GroupBox_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDock=`*(this: TGroupBox, AEventId: TEndDragEvent)  =
  GroupBox_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TGroupBox, AEventId: TEndDragEvent)  =
  GroupBox_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TGroupBox, AEventId: TNotifyEvent)  =
  GroupBox_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TGroupBox, AEventId: TNotifyEvent)  =
  GroupBox_SetOnExit(this.Instance, AEventId)

proc `OnGetSiteInfo=`*(this: TGroupBox, AEventId: TGetSiteInfoEvent)  =
  GroupBox_SetOnGetSiteInfo(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TGroupBox, AEventId: TMouseEvent)  =
  GroupBox_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TGroupBox, AEventId: TNotifyEvent)  =
  GroupBox_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TGroupBox, AEventId: TNotifyEvent)  =
  GroupBox_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TGroupBox, AEventId: TMouseMoveEvent)  =
  GroupBox_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TGroupBox, AEventId: TMouseEvent)  =
  GroupBox_SetOnMouseUp(this.Instance, AEventId)

proc `OnStartDock=`*(this: TGroupBox, AEventId: TStartDockEvent)  =
  GroupBox_SetOnStartDock(this.Instance, AEventId)

proc `OnUnDock=`*(this: TGroupBox, AEventId: TUnDockEvent)  =
  GroupBox_SetOnUnDock(this.Instance, AEventId)

proc DockClientCount*(this: TGroupBox): int32  =
  return GroupBox_GetDockClientCount(this.Instance)

proc MouseInClient*(this: TGroupBox): bool  =
  return GroupBox_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TGroupBox): int32  =
  return GroupBox_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TGroupBox): TBrush  =
  return GroupBox_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TGroupBox): int32  =
  return GroupBox_GetControlCount(this.Instance)

proc Handle*(this: TGroupBox): HWND  =
  return GroupBox_GetHandle(this.Instance)

proc ParentWindow*(this: TGroupBox): HWND  =
  return GroupBox_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TGroupBox, AValue: HWND)  =
  GroupBox_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TGroupBox): bool  =
  return GroupBox_GetShowing(this.Instance)

proc UseDockManager*(this: TGroupBox): bool  =
  return GroupBox_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TGroupBox, AValue: bool)  =
  GroupBox_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TGroupBox): TAction  =
  return GroupBox_GetAction(this.Instance).AsAction

proc `Action=`*(this: TGroupBox, AValue: TAction)  =
  GroupBox_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TGroupBox): TRect  =
  GroupBox_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TGroupBox, AValue: TRect)  =
  var ps1 = AValue
  GroupBox_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TGroupBox): int32  =
  return GroupBox_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TGroupBox, AValue: int32)  =
  GroupBox_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TGroupBox): TPoint  =
  GroupBox_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TGroupBox): TRect  =
  GroupBox_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TGroupBox): int32  =
  return GroupBox_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TGroupBox, AValue: int32)  =
  GroupBox_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TGroupBox): TControlState  =
  return GroupBox_GetControlState(this.Instance)

proc `ControlState=`*(this: TGroupBox, AValue: TControlState)  =
  GroupBox_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TGroupBox): TControlStyle  =
  return GroupBox_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TGroupBox, AValue: TControlStyle)  =
  GroupBox_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TGroupBox): bool  =
  return GroupBox_GetFloating(this.Instance)

proc Parent*(this: TGroupBox): TWinControl  =
  return GroupBox_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TGroupBox, AValue: TWinControl)  =
  GroupBox_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TGroupBox): int32  =
  return GroupBox_GetLeft(this.Instance)

proc `Left=`*(this: TGroupBox, AValue: int32)  =
  GroupBox_SetLeft(this.Instance, AValue)

proc Top*(this: TGroupBox): int32  =
  return GroupBox_GetTop(this.Instance)

proc `Top=`*(this: TGroupBox, AValue: int32)  =
  GroupBox_SetTop(this.Instance, AValue)

proc Width*(this: TGroupBox): int32  =
  return GroupBox_GetWidth(this.Instance)

proc `Width=`*(this: TGroupBox, AValue: int32)  =
  GroupBox_SetWidth(this.Instance, AValue)

proc Height*(this: TGroupBox): int32  =
  return GroupBox_GetHeight(this.Instance)

proc `Height=`*(this: TGroupBox, AValue: int32)  =
  GroupBox_SetHeight(this.Instance, AValue)

proc Cursor*(this: TGroupBox): TCursor  =
  return GroupBox_GetCursor(this.Instance)

proc `Cursor=`*(this: TGroupBox, AValue: TCursor)  =
  GroupBox_SetCursor(this.Instance, AValue)

proc Hint*(this: TGroupBox): string  =
  return $GroupBox_GetHint(this.Instance)

proc `Hint=`*(this: TGroupBox, AValue: string)  =
  GroupBox_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TGroupBox): int32  =
  return GroupBox_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TGroupBox): int32  =
  return GroupBox_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TGroupBox, AValue: int32)  =
  GroupBox_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TGroupBox): TComponent  =
  return GroupBox_GetOwner(this.Instance).AsComponent

proc Name*(this: TGroupBox): string  =
  return $GroupBox_GetName(this.Instance)

proc `Name=`*(this: TGroupBox, AValue: string)  =
  GroupBox_SetName(this.Instance, AValue)

proc Tag*(this: TGroupBox): int  =
  return GroupBox_GetTag(this.Instance)

proc `Tag=`*(this: TGroupBox, AValue: int)  =
  GroupBox_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TGroupBox): TAnchorSide  =
  return GroupBox_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TGroupBox, AValue: TAnchorSide)  =
  GroupBox_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TGroupBox): TAnchorSide  =
  return GroupBox_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TGroupBox, AValue: TAnchorSide)  =
  GroupBox_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TGroupBox): TAnchorSide  =
  return GroupBox_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TGroupBox, AValue: TAnchorSide)  =
  GroupBox_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TGroupBox): TAnchorSide  =
  return GroupBox_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TGroupBox, AValue: TAnchorSide)  =
  GroupBox_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TGroupBox): TControlChildSizing  =
  return GroupBox_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TGroupBox, AValue: TControlChildSizing)  =
  GroupBox_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TGroupBox): TControlBorderSpacing  =
  return GroupBox_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TGroupBox, AValue: TControlBorderSpacing)  =
  GroupBox_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TGroupBox, Index: int32): TControl  =
  return GroupBox_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TGroupBox, Index: int32): TControl  =
  return GroupBox_GetControls(this.Instance, Index).AsControl

proc Components*(this: TGroupBox, AIndex: int32): TComponent  =
  return GroupBox_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TGroupBox, AKind: TAnchorKind): TAnchorSide  =
  return GroupBox_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TGroupBoxClass*(): TClass = GroupBox_StaticClassType()


#------------------------- TLabel -------------------------

proc Free*(this: TLabel) = defaultFree: Label_Free

proc NewLabel*(AOwner: TComponent): TLabel =
  new(result)
  result.Instance = Label_Create(CheckPtr(AOwner))

proc BringToFront*(this: TLabel) =
  Label_BringToFront(this.Instance)

proc ClientToScreen*(this: TLabel, Point: TPoint): TPoint =
  var ps1 = Point
  Label_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TLabel, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Label_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TLabel): bool =
  return Label_Dragging(this.Instance)

proc HasParent*(this: TLabel): bool =
  return Label_HasParent(this.Instance)

proc Hide*(this: TLabel) =
  Label_Hide(this.Instance)

proc Invalidate*(this: TLabel) =
  Label_Invalidate(this.Instance)

proc Perform*(this: TLabel, Msg: uint32, WParam: uint, LParam: int): int =
  return Label_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TLabel) =
  Label_Refresh(this.Instance)

proc Repaint*(this: TLabel) =
  Label_Repaint(this.Instance)

proc ScreenToClient*(this: TLabel, Point: TPoint): TPoint =
  var ps1 = Point
  Label_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TLabel, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Label_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TLabel) =
  Label_SendToBack(this.Instance)

proc SetBounds*(this: TLabel, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  Label_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Show*(this: TLabel) =
  Label_Show(this.Instance)

proc Update*(this: TLabel) =
  Label_Update(this.Instance)

proc GetTextBuf*(this: TLabel, Buffer: string, BufSize: int32): int32 =
  return Label_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TLabel): int32 =
  return Label_GetTextLen(this.Instance)

proc SetTextBuf*(this: TLabel, Buffer: string) =
  Label_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TLabel, AName: string): TComponent =
  return Label_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TLabel): string =
  return $Label_GetNamePath(this.Instance)

proc Assign*(this: TLabel, Source: TObject) =
  Label_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TLabel): TClass =
  return Label_ClassType(this.Instance)

proc ClassName*(this: TLabel): string =
  return $Label_ClassName(this.Instance)

proc InstanceSize*(this: TLabel): int32 =
  return Label_InstanceSize(this.Instance)

proc InheritsFrom*(this: TLabel, AClass: TClass): bool =
  return Label_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TLabel, Obj: TObject): bool =
  return Label_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TLabel): int32 =
  return Label_GetHashCode(this.Instance)

proc ToString*(this: TLabel): string =
  return $Label_ToString(this.Instance)

proc AnchorToNeighbour*(this: TLabel, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Label_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TLabel, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Label_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TLabel, ASibling: TControl) =
  Label_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TLabel, ASibling: TControl) =
  Label_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TLabel, ASide: TAnchorKind, ASibling: TControl) =
  Label_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TLabel, ATheAlign: TAlign, ASpace: int32) =
  Label_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TLabel, ASpace: int32) =
  Label_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TLabel, ASize: int32): int32 =
  return Label_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TLabel, ASize: int32): int32 =
  return Label_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TLabel, ASize: int32): int32 =
  return Label_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TLabel, ASize: int32): int32 =
  return Label_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TLabel, ASize: int32): int32 =
  return Label_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TLabel, ASize: int32): int32 =
  return Label_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TLabel, ASize: int32): int32 =
  return Label_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TLabel, ASize: int32): int32 =
  return Label_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TLabel, ASize: int32): int32 =
  return Label_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TLabel, ASize: int32): int32 =
  return Label_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TLabel, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  Label_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TLabel, ADesignTimePPI: int32) =
  Label_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TLabel, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  Label_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc OptimalFill*(this: TLabel): bool  =
  return Label_GetOptimalFill(this.Instance)

proc `OptimalFill=`*(this: TLabel, AValue: bool)  =
  Label_SetOptimalFill(this.Instance, AValue)

proc Align*(this: TLabel): TAlign  =
  return Label_GetAlign(this.Instance)

proc `Align=`*(this: TLabel, AValue: TAlign)  =
  Label_SetAlign(this.Instance, AValue)

proc Alignment*(this: TLabel): TAlignment  =
  return Label_GetAlignment(this.Instance)

proc `Alignment=`*(this: TLabel, AValue: TAlignment)  =
  Label_SetAlignment(this.Instance, AValue)

proc Anchors*(this: TLabel): TAnchors  =
  return Label_GetAnchors(this.Instance)

proc `Anchors=`*(this: TLabel, AValue: TAnchors)  =
  Label_SetAnchors(this.Instance, AValue)

proc AutoSize*(this: TLabel): bool  =
  return Label_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TLabel, AValue: bool)  =
  Label_SetAutoSize(this.Instance, AValue)

proc BiDiMode*(this: TLabel): TBiDiMode  =
  return Label_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TLabel, AValue: TBiDiMode)  =
  Label_SetBiDiMode(this.Instance, AValue)

proc Caption*(this: TLabel): string  =
  return $Label_GetCaption(this.Instance)

proc `Caption=`*(this: TLabel, AValue: string)  =
  Label_SetCaption(this.Instance, AValue)

proc Color*(this: TLabel): TColor  =
  return Label_GetColor(this.Instance)

proc `Color=`*(this: TLabel, AValue: TColor)  =
  Label_SetColor(this.Instance, AValue)

proc Constraints*(this: TLabel): TSizeConstraints  =
  return Label_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TLabel, AValue: TSizeConstraints)  =
  Label_SetConstraints(this.Instance, CheckPtr(AValue))

proc DragCursor*(this: TLabel): TCursor  =
  return Label_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TLabel, AValue: TCursor)  =
  Label_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TLabel): TDragKind  =
  return Label_GetDragKind(this.Instance)

proc `DragKind=`*(this: TLabel, AValue: TDragKind)  =
  Label_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TLabel): TDragMode  =
  return Label_GetDragMode(this.Instance)

proc `DragMode=`*(this: TLabel, AValue: TDragMode)  =
  Label_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TLabel): bool  =
  return Label_GetEnabled(this.Instance)

proc `Enabled=`*(this: TLabel, AValue: bool)  =
  Label_SetEnabled(this.Instance, AValue)

proc FocusControl*(this: TLabel): TWinControl  =
  return Label_GetFocusControl(this.Instance).AsWinControl

proc `FocusControl=`*(this: TLabel, AValue: TWinControl)  =
  Label_SetFocusControl(this.Instance, CheckPtr(AValue))

proc Font*(this: TLabel): TFont  =
  return Label_GetFont(this.Instance).AsFont

proc `Font=`*(this: TLabel, AValue: TFont)  =
  Label_SetFont(this.Instance, CheckPtr(AValue))

proc ParentColor*(this: TLabel): bool  =
  return Label_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TLabel, AValue: bool)  =
  Label_SetParentColor(this.Instance, AValue)

proc ParentFont*(this: TLabel): bool  =
  return Label_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TLabel, AValue: bool)  =
  Label_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TLabel): bool  =
  return Label_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TLabel, AValue: bool)  =
  Label_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TLabel): TPopupMenu  =
  return Label_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TLabel, AValue: TPopupMenu)  =
  Label_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowAccelChar*(this: TLabel): bool  =
  return Label_GetShowAccelChar(this.Instance)

proc `ShowAccelChar=`*(this: TLabel, AValue: bool)  =
  Label_SetShowAccelChar(this.Instance, AValue)

proc ShowHint*(this: TLabel): bool  =
  return Label_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TLabel, AValue: bool)  =
  Label_SetShowHint(this.Instance, AValue)

proc Transparent*(this: TLabel): bool  =
  return Label_GetTransparent(this.Instance)

proc `Transparent=`*(this: TLabel, AValue: bool)  =
  Label_SetTransparent(this.Instance, AValue)

proc Layout*(this: TLabel): TTextLayout  =
  return Label_GetLayout(this.Instance)

proc `Layout=`*(this: TLabel, AValue: TTextLayout)  =
  Label_SetLayout(this.Instance, AValue)

proc Visible*(this: TLabel): bool  =
  return Label_GetVisible(this.Instance)

proc `Visible=`*(this: TLabel, AValue: bool)  =
  Label_SetVisible(this.Instance, AValue)

proc WordWrap*(this: TLabel): bool  =
  return Label_GetWordWrap(this.Instance)

proc `WordWrap=`*(this: TLabel, AValue: bool)  =
  Label_SetWordWrap(this.Instance, AValue)

proc `OnClick=`*(this: TLabel, AEventId: TNotifyEvent)  =
  Label_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TLabel, AEventId: TContextPopupEvent)  =
  Label_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TLabel, AEventId: TNotifyEvent)  =
  Label_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TLabel, AEventId: TDragDropEvent)  =
  Label_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TLabel, AEventId: TDragOverEvent)  =
  Label_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TLabel, AEventId: TEndDragEvent)  =
  Label_SetOnEndDrag(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TLabel, AEventId: TMouseEvent)  =
  Label_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TLabel, AEventId: TMouseMoveEvent)  =
  Label_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TLabel, AEventId: TMouseEvent)  =
  Label_SetOnMouseUp(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TLabel, AEventId: TNotifyEvent)  =
  Label_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TLabel, AEventId: TNotifyEvent)  =
  Label_SetOnMouseLeave(this.Instance, AEventId)

proc Canvas*(this: TLabel): TCanvas  =
  return Label_GetCanvas(this.Instance).AsCanvas

proc Action*(this: TLabel): TAction  =
  return Label_GetAction(this.Instance).AsAction

proc `Action=`*(this: TLabel, AValue: TAction)  =
  Label_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TLabel): TRect  =
  Label_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TLabel, AValue: TRect)  =
  var ps1 = AValue
  Label_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TLabel): int32  =
  return Label_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TLabel, AValue: int32)  =
  Label_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TLabel): TPoint  =
  Label_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TLabel): TRect  =
  Label_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TLabel): int32  =
  return Label_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TLabel, AValue: int32)  =
  Label_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TLabel): TControlState  =
  return Label_GetControlState(this.Instance)

proc `ControlState=`*(this: TLabel, AValue: TControlState)  =
  Label_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TLabel): TControlStyle  =
  return Label_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TLabel, AValue: TControlStyle)  =
  Label_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TLabel): bool  =
  return Label_GetFloating(this.Instance)

proc Parent*(this: TLabel): TWinControl  =
  return Label_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TLabel, AValue: TWinControl)  =
  Label_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TLabel): int32  =
  return Label_GetLeft(this.Instance)

proc `Left=`*(this: TLabel, AValue: int32)  =
  Label_SetLeft(this.Instance, AValue)

proc Top*(this: TLabel): int32  =
  return Label_GetTop(this.Instance)

proc `Top=`*(this: TLabel, AValue: int32)  =
  Label_SetTop(this.Instance, AValue)

proc Width*(this: TLabel): int32  =
  return Label_GetWidth(this.Instance)

proc `Width=`*(this: TLabel, AValue: int32)  =
  Label_SetWidth(this.Instance, AValue)

proc Height*(this: TLabel): int32  =
  return Label_GetHeight(this.Instance)

proc `Height=`*(this: TLabel, AValue: int32)  =
  Label_SetHeight(this.Instance, AValue)

proc Cursor*(this: TLabel): TCursor  =
  return Label_GetCursor(this.Instance)

proc `Cursor=`*(this: TLabel, AValue: TCursor)  =
  Label_SetCursor(this.Instance, AValue)

proc Hint*(this: TLabel): string  =
  return $Label_GetHint(this.Instance)

proc `Hint=`*(this: TLabel, AValue: string)  =
  Label_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TLabel): int32  =
  return Label_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TLabel): int32  =
  return Label_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TLabel, AValue: int32)  =
  Label_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TLabel): TComponent  =
  return Label_GetOwner(this.Instance).AsComponent

proc Name*(this: TLabel): string  =
  return $Label_GetName(this.Instance)

proc `Name=`*(this: TLabel, AValue: string)  =
  Label_SetName(this.Instance, AValue)

proc Tag*(this: TLabel): int  =
  return Label_GetTag(this.Instance)

proc `Tag=`*(this: TLabel, AValue: int)  =
  Label_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TLabel): TAnchorSide  =
  return Label_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TLabel, AValue: TAnchorSide)  =
  Label_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TLabel): TAnchorSide  =
  return Label_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TLabel, AValue: TAnchorSide)  =
  Label_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TLabel): TAnchorSide  =
  return Label_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TLabel, AValue: TAnchorSide)  =
  Label_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TLabel): TAnchorSide  =
  return Label_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TLabel, AValue: TAnchorSide)  =
  Label_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TLabel): TControlBorderSpacing  =
  return Label_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TLabel, AValue: TControlBorderSpacing)  =
  Label_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TLabel, AIndex: int32): TComponent  =
  return Label_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TLabel, AKind: TAnchorKind): TAnchorSide  =
  return Label_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TLabelClass*(): TClass = Label_StaticClassType()


#------------------------- TListBox -------------------------

proc Free*(this: TListBox) = defaultFree: ListBox_Free

proc NewListBox*(AOwner: TComponent): TListBox =
  new(result)
  result.Instance = ListBox_Create(CheckPtr(AOwner))

proc AddItem*(this: TListBox, Item: string, AObject: TObject)  =
  ListBox_AddItem(this.Instance, Item, CheckPtr(AObject))

proc Clear*(this: TListBox)  =
  ListBox_Clear(this.Instance)

proc ClearSelection*(this: TListBox)  =
  ListBox_ClearSelection(this.Instance)

proc DeleteSelected*(this: TListBox)  =
  ListBox_DeleteSelected(this.Instance)

proc ItemAtPos*(this: TListBox, Pos: TPoint, Existing: bool): int32  =
  var ps1 = Pos
  return ListBox_ItemAtPos(this.Instance, ps1, Existing)

proc ItemRect*(this: TListBox, Index: int32): TRect  =
  ListBox_ItemRect(this.Instance, Index, result)

proc SelectAll*(this: TListBox)  =
  ListBox_SelectAll(this.Instance)

proc CanFocus*(this: TListBox): bool =
  return ListBox_CanFocus(this.Instance)

proc ContainsControl*(this: TListBox, Control: TControl): bool =
  return ListBox_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TListBox, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return ListBox_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TListBox) =
  ListBox_DisableAlign(this.Instance)

proc EnableAlign*(this: TListBox) =
  ListBox_EnableAlign(this.Instance)

proc FindChildControl*(this: TListBox, ControlName: string): TControl =
  return ListBox_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TListBox, AllLevels: bool) =
  ListBox_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TListBox): bool =
  return ListBox_Focused(this.Instance)

proc HandleAllocated*(this: TListBox): bool =
  return ListBox_HandleAllocated(this.Instance)

proc InsertControl*(this: TListBox, AControl: TControl) =
  ListBox_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TListBox) =
  ListBox_Invalidate(this.Instance)

proc PaintTo*(this: TListBox, DC: HDC, X: int32, Y: int32) =
  ListBox_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TListBox, AControl: TControl) =
  ListBox_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TListBox) =
  ListBox_Realign(this.Instance)

proc Repaint*(this: TListBox) =
  ListBox_Repaint(this.Instance)

proc ScaleBy*(this: TListBox, M: int32, D: int32) =
  ListBox_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TListBox, DeltaX: int32, DeltaY: int32) =
  ListBox_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TListBox, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ListBox_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TListBox) =
  ListBox_SetFocus(this.Instance)

proc Update*(this: TListBox) =
  ListBox_Update(this.Instance)

proc BringToFront*(this: TListBox) =
  ListBox_BringToFront(this.Instance)

proc ClientToScreen*(this: TListBox, Point: TPoint): TPoint =
  var ps1 = Point
  ListBox_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TListBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ListBox_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TListBox): bool =
  return ListBox_Dragging(this.Instance)

proc HasParent*(this: TListBox): bool =
  return ListBox_HasParent(this.Instance)

proc Hide*(this: TListBox) =
  ListBox_Hide(this.Instance)

proc Perform*(this: TListBox, Msg: uint32, WParam: uint, LParam: int): int =
  return ListBox_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TListBox) =
  ListBox_Refresh(this.Instance)

proc ScreenToClient*(this: TListBox, Point: TPoint): TPoint =
  var ps1 = Point
  ListBox_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TListBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ListBox_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TListBox) =
  ListBox_SendToBack(this.Instance)

proc Show*(this: TListBox) =
  ListBox_Show(this.Instance)

proc GetTextBuf*(this: TListBox, Buffer: string, BufSize: int32): int32 =
  return ListBox_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TListBox): int32 =
  return ListBox_GetTextLen(this.Instance)

proc SetTextBuf*(this: TListBox, Buffer: string) =
  ListBox_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TListBox, AName: string): TComponent =
  return ListBox_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TListBox): string =
  return $ListBox_GetNamePath(this.Instance)

proc Assign*(this: TListBox, Source: TObject) =
  ListBox_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TListBox): TClass =
  return ListBox_ClassType(this.Instance)

proc ClassName*(this: TListBox): string =
  return $ListBox_ClassName(this.Instance)

proc InstanceSize*(this: TListBox): int32 =
  return ListBox_InstanceSize(this.Instance)

proc InheritsFrom*(this: TListBox, AClass: TClass): bool =
  return ListBox_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TListBox, Obj: TObject): bool =
  return ListBox_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TListBox): int32 =
  return ListBox_GetHashCode(this.Instance)

proc ToString*(this: TListBox): string =
  return $ListBox_ToString(this.Instance)

proc AnchorToNeighbour*(this: TListBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ListBox_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TListBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ListBox_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TListBox, ASibling: TControl) =
  ListBox_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TListBox, ASibling: TControl) =
  ListBox_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TListBox, ASide: TAnchorKind, ASibling: TControl) =
  ListBox_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TListBox, ATheAlign: TAlign, ASpace: int32) =
  ListBox_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TListBox, ASpace: int32) =
  ListBox_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TListBox, ASize: int32): int32 =
  return ListBox_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TListBox, ASize: int32): int32 =
  return ListBox_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TListBox, ASize: int32): int32 =
  return ListBox_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TListBox, ASize: int32): int32 =
  return ListBox_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TListBox, ASize: int32): int32 =
  return ListBox_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TListBox, ASize: int32): int32 =
  return ListBox_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TListBox, ASize: int32): int32 =
  return ListBox_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TListBox, ASize: int32): int32 =
  return ListBox_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TListBox, ASize: int32): int32 =
  return ListBox_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TListBox, ASize: int32): int32 =
  return ListBox_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TListBox, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ListBox_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TListBox, ADesignTimePPI: int32) =
  ListBox_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TListBox, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ListBox_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc ClickOnSelChange*(this: TListBox): bool  =
  return ListBox_GetClickOnSelChange(this.Instance)

proc `ClickOnSelChange=`*(this: TListBox, AValue: bool)  =
  ListBox_SetClickOnSelChange(this.Instance, AValue)

proc Options*(this: TListBox): TListBoxOptions  =
  return ListBox_GetOptions(this.Instance)

proc `Options=`*(this: TListBox, AValue: TListBoxOptions)  =
  ListBox_SetOptions(this.Instance, AValue)

proc TopIndex*(this: TListBox): int32  =
  return ListBox_GetTopIndex(this.Instance)

proc `TopIndex=`*(this: TListBox, AValue: int32)  =
  ListBox_SetTopIndex(this.Instance, AValue)

proc Style*(this: TListBox): TListBoxStyle  =
  return ListBox_GetStyle(this.Instance)

proc `Style=`*(this: TListBox, AValue: TListBoxStyle)  =
  ListBox_SetStyle(this.Instance, AValue)

proc Align*(this: TListBox): TAlign  =
  return ListBox_GetAlign(this.Instance)

proc `Align=`*(this: TListBox, AValue: TAlign)  =
  ListBox_SetAlign(this.Instance, AValue)

proc Anchors*(this: TListBox): TAnchors  =
  return ListBox_GetAnchors(this.Instance)

proc `Anchors=`*(this: TListBox, AValue: TAnchors)  =
  ListBox_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TListBox): TBiDiMode  =
  return ListBox_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TListBox, AValue: TBiDiMode)  =
  ListBox_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TListBox): TBorderStyle  =
  return ListBox_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TListBox, AValue: TBorderStyle)  =
  ListBox_SetBorderStyle(this.Instance, AValue)

proc Color*(this: TListBox): TColor  =
  return ListBox_GetColor(this.Instance)

proc `Color=`*(this: TListBox, AValue: TColor)  =
  ListBox_SetColor(this.Instance, AValue)

proc Columns*(this: TListBox): int32  =
  return ListBox_GetColumns(this.Instance)

proc `Columns=`*(this: TListBox, AValue: int32)  =
  ListBox_SetColumns(this.Instance, AValue)

proc Constraints*(this: TListBox): TSizeConstraints  =
  return ListBox_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TListBox, AValue: TSizeConstraints)  =
  ListBox_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TListBox): bool  =
  return ListBox_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TListBox, AValue: bool)  =
  ListBox_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TListBox): TCursor  =
  return ListBox_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TListBox, AValue: TCursor)  =
  ListBox_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TListBox): TDragKind  =
  return ListBox_GetDragKind(this.Instance)

proc `DragKind=`*(this: TListBox, AValue: TDragKind)  =
  ListBox_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TListBox): TDragMode  =
  return ListBox_GetDragMode(this.Instance)

proc `DragMode=`*(this: TListBox, AValue: TDragMode)  =
  ListBox_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TListBox): bool  =
  return ListBox_GetEnabled(this.Instance)

proc `Enabled=`*(this: TListBox, AValue: bool)  =
  ListBox_SetEnabled(this.Instance, AValue)

proc ExtendedSelect*(this: TListBox): bool  =
  return ListBox_GetExtendedSelect(this.Instance)

proc `ExtendedSelect=`*(this: TListBox, AValue: bool)  =
  ListBox_SetExtendedSelect(this.Instance, AValue)

proc Font*(this: TListBox): TFont  =
  return ListBox_GetFont(this.Instance).AsFont

proc `Font=`*(this: TListBox, AValue: TFont)  =
  ListBox_SetFont(this.Instance, CheckPtr(AValue))

proc ItemHeight*(this: TListBox): int32  =
  return ListBox_GetItemHeight(this.Instance)

proc `ItemHeight=`*(this: TListBox, AValue: int32)  =
  ListBox_SetItemHeight(this.Instance, AValue)

proc Items*(this: TListBox): TStrings  =
  return ListBox_GetItems(this.Instance).AsStrings

proc `Items=`*(this: TListBox, AValue: TStrings)  =
  ListBox_SetItems(this.Instance, CheckPtr(AValue))

proc MultiSelect*(this: TListBox): bool  =
  return ListBox_GetMultiSelect(this.Instance)

proc `MultiSelect=`*(this: TListBox, AValue: bool)  =
  ListBox_SetMultiSelect(this.Instance, AValue)

proc ParentColor*(this: TListBox): bool  =
  return ListBox_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TListBox, AValue: bool)  =
  ListBox_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TListBox): bool  =
  return ListBox_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TListBox, AValue: bool)  =
  ListBox_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TListBox): bool  =
  return ListBox_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TListBox, AValue: bool)  =
  ListBox_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TListBox): bool  =
  return ListBox_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TListBox, AValue: bool)  =
  ListBox_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TListBox): TPopupMenu  =
  return ListBox_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TListBox, AValue: TPopupMenu)  =
  ListBox_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TListBox): bool  =
  return ListBox_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TListBox, AValue: bool)  =
  ListBox_SetShowHint(this.Instance, AValue)

proc Sorted*(this: TListBox): bool  =
  return ListBox_GetSorted(this.Instance)

proc `Sorted=`*(this: TListBox, AValue: bool)  =
  ListBox_SetSorted(this.Instance, AValue)

proc TabOrder*(this: TListBox): TTabOrder  =
  return ListBox_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TListBox, AValue: TTabOrder)  =
  ListBox_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TListBox): bool  =
  return ListBox_GetTabStop(this.Instance)

proc `TabStop=`*(this: TListBox, AValue: bool)  =
  ListBox_SetTabStop(this.Instance, AValue)

proc Visible*(this: TListBox): bool  =
  return ListBox_GetVisible(this.Instance)

proc `Visible=`*(this: TListBox, AValue: bool)  =
  ListBox_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TListBox, AEventId: TNotifyEvent)  =
  ListBox_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TListBox, AEventId: TContextPopupEvent)  =
  ListBox_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TListBox, AEventId: TNotifyEvent)  =
  ListBox_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TListBox, AEventId: TDragDropEvent)  =
  ListBox_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TListBox, AEventId: TDragOverEvent)  =
  ListBox_SetOnDragOver(this.Instance, AEventId)

proc `OnDrawItem=`*(this: TListBox, AEventId: TDrawItemEvent)  =
  ListBox_SetOnDrawItem(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TListBox, AEventId: TEndDragEvent)  =
  ListBox_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TListBox, AEventId: TNotifyEvent)  =
  ListBox_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TListBox, AEventId: TNotifyEvent)  =
  ListBox_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TListBox, AEventId: TKeyEvent)  =
  ListBox_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TListBox, AEventId: TKeyPressEvent)  =
  ListBox_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TListBox, AEventId: TKeyEvent)  =
  ListBox_SetOnKeyUp(this.Instance, AEventId)

proc `OnMeasureItem=`*(this: TListBox, AEventId: TMeasureItemEvent)  =
  ListBox_SetOnMeasureItem(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TListBox, AEventId: TMouseEvent)  =
  ListBox_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TListBox, AEventId: TNotifyEvent)  =
  ListBox_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TListBox, AEventId: TNotifyEvent)  =
  ListBox_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TListBox, AEventId: TMouseMoveEvent)  =
  ListBox_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TListBox, AEventId: TMouseEvent)  =
  ListBox_SetOnMouseUp(this.Instance, AEventId)

proc Canvas*(this: TListBox): TCanvas  =
  return ListBox_GetCanvas(this.Instance).AsCanvas

proc Count*(this: TListBox): int32  =
  return ListBox_GetCount(this.Instance)

proc SelCount*(this: TListBox): int32  =
  return ListBox_GetSelCount(this.Instance)

proc ItemIndex*(this: TListBox): int32  =
  return ListBox_GetItemIndex(this.Instance)

proc `ItemIndex=`*(this: TListBox, AValue: int32)  =
  ListBox_SetItemIndex(this.Instance, AValue)

proc DockClientCount*(this: TListBox): int32  =
  return ListBox_GetDockClientCount(this.Instance)

proc DockSite*(this: TListBox): bool  =
  return ListBox_GetDockSite(this.Instance)

proc `DockSite=`*(this: TListBox, AValue: bool)  =
  ListBox_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TListBox): bool  =
  return ListBox_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TListBox): int32  =
  return ListBox_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TListBox): TBrush  =
  return ListBox_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TListBox): int32  =
  return ListBox_GetControlCount(this.Instance)

proc Handle*(this: TListBox): HWND  =
  return ListBox_GetHandle(this.Instance)

proc ParentWindow*(this: TListBox): HWND  =
  return ListBox_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TListBox, AValue: HWND)  =
  ListBox_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TListBox): bool  =
  return ListBox_GetShowing(this.Instance)

proc UseDockManager*(this: TListBox): bool  =
  return ListBox_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TListBox, AValue: bool)  =
  ListBox_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TListBox): TAction  =
  return ListBox_GetAction(this.Instance).AsAction

proc `Action=`*(this: TListBox, AValue: TAction)  =
  ListBox_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TListBox): TRect  =
  ListBox_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TListBox, AValue: TRect)  =
  var ps1 = AValue
  ListBox_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TListBox): int32  =
  return ListBox_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TListBox, AValue: int32)  =
  ListBox_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TListBox): TPoint  =
  ListBox_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TListBox): TRect  =
  ListBox_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TListBox): int32  =
  return ListBox_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TListBox, AValue: int32)  =
  ListBox_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TListBox): TControlState  =
  return ListBox_GetControlState(this.Instance)

proc `ControlState=`*(this: TListBox, AValue: TControlState)  =
  ListBox_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TListBox): TControlStyle  =
  return ListBox_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TListBox, AValue: TControlStyle)  =
  ListBox_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TListBox): bool  =
  return ListBox_GetFloating(this.Instance)

proc Parent*(this: TListBox): TWinControl  =
  return ListBox_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TListBox, AValue: TWinControl)  =
  ListBox_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TListBox): int32  =
  return ListBox_GetLeft(this.Instance)

proc `Left=`*(this: TListBox, AValue: int32)  =
  ListBox_SetLeft(this.Instance, AValue)

proc Top*(this: TListBox): int32  =
  return ListBox_GetTop(this.Instance)

proc `Top=`*(this: TListBox, AValue: int32)  =
  ListBox_SetTop(this.Instance, AValue)

proc Width*(this: TListBox): int32  =
  return ListBox_GetWidth(this.Instance)

proc `Width=`*(this: TListBox, AValue: int32)  =
  ListBox_SetWidth(this.Instance, AValue)

proc Height*(this: TListBox): int32  =
  return ListBox_GetHeight(this.Instance)

proc `Height=`*(this: TListBox, AValue: int32)  =
  ListBox_SetHeight(this.Instance, AValue)

proc Cursor*(this: TListBox): TCursor  =
  return ListBox_GetCursor(this.Instance)

proc `Cursor=`*(this: TListBox, AValue: TCursor)  =
  ListBox_SetCursor(this.Instance, AValue)

proc Hint*(this: TListBox): string  =
  return $ListBox_GetHint(this.Instance)

proc `Hint=`*(this: TListBox, AValue: string)  =
  ListBox_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TListBox): int32  =
  return ListBox_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TListBox): int32  =
  return ListBox_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TListBox, AValue: int32)  =
  ListBox_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TListBox): TComponent  =
  return ListBox_GetOwner(this.Instance).AsComponent

proc Name*(this: TListBox): string  =
  return $ListBox_GetName(this.Instance)

proc `Name=`*(this: TListBox, AValue: string)  =
  ListBox_SetName(this.Instance, AValue)

proc Tag*(this: TListBox): int  =
  return ListBox_GetTag(this.Instance)

proc `Tag=`*(this: TListBox, AValue: int)  =
  ListBox_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TListBox): TAnchorSide  =
  return ListBox_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TListBox, AValue: TAnchorSide)  =
  ListBox_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TListBox): TAnchorSide  =
  return ListBox_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TListBox, AValue: TAnchorSide)  =
  ListBox_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TListBox): TAnchorSide  =
  return ListBox_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TListBox, AValue: TAnchorSide)  =
  ListBox_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TListBox): TAnchorSide  =
  return ListBox_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TListBox, AValue: TAnchorSide)  =
  ListBox_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TListBox): TControlChildSizing  =
  return ListBox_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TListBox, AValue: TControlChildSizing)  =
  ListBox_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TListBox): TControlBorderSpacing  =
  return ListBox_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TListBox, AValue: TControlBorderSpacing)  =
  ListBox_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Selected*(this: TListBox, Index: int32): bool  =
  return ListBox_GetSelected(this.Instance, Index)

proc `Selected=`*(this: TListBox, Index: int32, AValue: bool)  =
  ListBox_SetSelected(this.Instance, Index, AValue)

proc DockClients*(this: TListBox, Index: int32): TControl  =
  return ListBox_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TListBox, Index: int32): TControl  =
  return ListBox_GetControls(this.Instance, Index).AsControl

proc Components*(this: TListBox, AIndex: int32): TComponent  =
  return ListBox_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TListBox, AKind: TAnchorKind): TAnchorSide  =
  return ListBox_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TListBoxClass*(): TClass = ListBox_StaticClassType()


#------------------------- TComboBox -------------------------

proc Free*(this: TComboBox) = defaultFree: ComboBox_Free

proc NewComboBox*(AOwner: TComponent): TComboBox =
  new(result)
  result.Instance = ComboBox_Create(CheckPtr(AOwner))

proc AddItem*(this: TComboBox, Item: string, AObject: TObject)  =
  ComboBox_AddItem(this.Instance, Item, CheckPtr(AObject))

proc Clear*(this: TComboBox)  =
  ComboBox_Clear(this.Instance)

proc ClearSelection*(this: TComboBox)  =
  ComboBox_ClearSelection(this.Instance)

proc DeleteSelected*(this: TComboBox)  =
  ComboBox_DeleteSelected(this.Instance)

proc Focused*(this: TComboBox): bool =
  return ComboBox_Focused(this.Instance)

proc SelectAll*(this: TComboBox)  =
  ComboBox_SelectAll(this.Instance)

proc CanFocus*(this: TComboBox): bool =
  return ComboBox_CanFocus(this.Instance)

proc ContainsControl*(this: TComboBox, Control: TControl): bool =
  return ComboBox_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TComboBox, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return ComboBox_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TComboBox) =
  ComboBox_DisableAlign(this.Instance)

proc EnableAlign*(this: TComboBox) =
  ComboBox_EnableAlign(this.Instance)

proc FindChildControl*(this: TComboBox, ControlName: string): TControl =
  return ComboBox_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TComboBox, AllLevels: bool) =
  ComboBox_FlipChildren(this.Instance, AllLevels)

proc HandleAllocated*(this: TComboBox): bool =
  return ComboBox_HandleAllocated(this.Instance)

proc InsertControl*(this: TComboBox, AControl: TControl) =
  ComboBox_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TComboBox) =
  ComboBox_Invalidate(this.Instance)

proc PaintTo*(this: TComboBox, DC: HDC, X: int32, Y: int32) =
  ComboBox_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TComboBox, AControl: TControl) =
  ComboBox_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TComboBox) =
  ComboBox_Realign(this.Instance)

proc Repaint*(this: TComboBox) =
  ComboBox_Repaint(this.Instance)

proc ScaleBy*(this: TComboBox, M: int32, D: int32) =
  ComboBox_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TComboBox, DeltaX: int32, DeltaY: int32) =
  ComboBox_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TComboBox, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ComboBox_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TComboBox) =
  ComboBox_SetFocus(this.Instance)

proc Update*(this: TComboBox) =
  ComboBox_Update(this.Instance)

proc BringToFront*(this: TComboBox) =
  ComboBox_BringToFront(this.Instance)

proc ClientToScreen*(this: TComboBox, Point: TPoint): TPoint =
  var ps1 = Point
  ComboBox_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TComboBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ComboBox_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TComboBox): bool =
  return ComboBox_Dragging(this.Instance)

proc HasParent*(this: TComboBox): bool =
  return ComboBox_HasParent(this.Instance)

proc Hide*(this: TComboBox) =
  ComboBox_Hide(this.Instance)

proc Perform*(this: TComboBox, Msg: uint32, WParam: uint, LParam: int): int =
  return ComboBox_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TComboBox) =
  ComboBox_Refresh(this.Instance)

proc ScreenToClient*(this: TComboBox, Point: TPoint): TPoint =
  var ps1 = Point
  ComboBox_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TComboBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ComboBox_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TComboBox) =
  ComboBox_SendToBack(this.Instance)

proc Show*(this: TComboBox) =
  ComboBox_Show(this.Instance)

proc GetTextBuf*(this: TComboBox, Buffer: string, BufSize: int32): int32 =
  return ComboBox_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TComboBox): int32 =
  return ComboBox_GetTextLen(this.Instance)

proc SetTextBuf*(this: TComboBox, Buffer: string) =
  ComboBox_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TComboBox, AName: string): TComponent =
  return ComboBox_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TComboBox): string =
  return $ComboBox_GetNamePath(this.Instance)

proc Assign*(this: TComboBox, Source: TObject) =
  ComboBox_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TComboBox): TClass =
  return ComboBox_ClassType(this.Instance)

proc ClassName*(this: TComboBox): string =
  return $ComboBox_ClassName(this.Instance)

proc InstanceSize*(this: TComboBox): int32 =
  return ComboBox_InstanceSize(this.Instance)

proc InheritsFrom*(this: TComboBox, AClass: TClass): bool =
  return ComboBox_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TComboBox, Obj: TObject): bool =
  return ComboBox_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TComboBox): int32 =
  return ComboBox_GetHashCode(this.Instance)

proc ToString*(this: TComboBox): string =
  return $ComboBox_ToString(this.Instance)

proc AnchorToNeighbour*(this: TComboBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ComboBox_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TComboBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ComboBox_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TComboBox, ASibling: TControl) =
  ComboBox_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TComboBox, ASibling: TControl) =
  ComboBox_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TComboBox, ASide: TAnchorKind, ASibling: TControl) =
  ComboBox_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TComboBox, ATheAlign: TAlign, ASpace: int32) =
  ComboBox_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TComboBox, ASpace: int32) =
  ComboBox_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TComboBox, ASize: int32): int32 =
  return ComboBox_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TComboBox, ASize: int32): int32 =
  return ComboBox_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TComboBox, ASize: int32): int32 =
  return ComboBox_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TComboBox, ASize: int32): int32 =
  return ComboBox_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TComboBox, ASize: int32): int32 =
  return ComboBox_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TComboBox, ASize: int32): int32 =
  return ComboBox_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TComboBox, ASize: int32): int32 =
  return ComboBox_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TComboBox, ASize: int32): int32 =
  return ComboBox_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TComboBox, ASize: int32): int32 =
  return ComboBox_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TComboBox, ASize: int32): int32 =
  return ComboBox_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TComboBox, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ComboBox_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TComboBox, ADesignTimePPI: int32) =
  ComboBox_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TComboBox, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ComboBox_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TComboBox): TAlign  =
  return ComboBox_GetAlign(this.Instance)

proc `Align=`*(this: TComboBox, AValue: TAlign)  =
  ComboBox_SetAlign(this.Instance, AValue)

proc AutoComplete*(this: TComboBox): bool  =
  return ComboBox_GetAutoComplete(this.Instance)

proc `AutoComplete=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetAutoComplete(this.Instance, AValue)

proc AutoDropDown*(this: TComboBox): bool  =
  return ComboBox_GetAutoDropDown(this.Instance)

proc `AutoDropDown=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetAutoDropDown(this.Instance, AValue)

proc Style*(this: TComboBox): TComboBoxStyle  =
  return ComboBox_GetStyle(this.Instance)

proc `Style=`*(this: TComboBox, AValue: TComboBoxStyle)  =
  ComboBox_SetStyle(this.Instance, AValue)

proc Anchors*(this: TComboBox): TAnchors  =
  return ComboBox_GetAnchors(this.Instance)

proc `Anchors=`*(this: TComboBox, AValue: TAnchors)  =
  ComboBox_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TComboBox): TBiDiMode  =
  return ComboBox_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TComboBox, AValue: TBiDiMode)  =
  ComboBox_SetBiDiMode(this.Instance, AValue)

proc CharCase*(this: TComboBox): TEditCharCase  =
  return ComboBox_GetCharCase(this.Instance)

proc `CharCase=`*(this: TComboBox, AValue: TEditCharCase)  =
  ComboBox_SetCharCase(this.Instance, AValue)

proc Color*(this: TComboBox): TColor  =
  return ComboBox_GetColor(this.Instance)

proc `Color=`*(this: TComboBox, AValue: TColor)  =
  ComboBox_SetColor(this.Instance, AValue)

proc Constraints*(this: TComboBox): TSizeConstraints  =
  return ComboBox_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TComboBox, AValue: TSizeConstraints)  =
  ComboBox_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TComboBox): bool  =
  return ComboBox_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TComboBox): TCursor  =
  return ComboBox_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TComboBox, AValue: TCursor)  =
  ComboBox_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TComboBox): TDragKind  =
  return ComboBox_GetDragKind(this.Instance)

proc `DragKind=`*(this: TComboBox, AValue: TDragKind)  =
  ComboBox_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TComboBox): TDragMode  =
  return ComboBox_GetDragMode(this.Instance)

proc `DragMode=`*(this: TComboBox, AValue: TDragMode)  =
  ComboBox_SetDragMode(this.Instance, AValue)

proc DropDownCount*(this: TComboBox): int32  =
  return ComboBox_GetDropDownCount(this.Instance)

proc `DropDownCount=`*(this: TComboBox, AValue: int32)  =
  ComboBox_SetDropDownCount(this.Instance, AValue)

proc Enabled*(this: TComboBox): bool  =
  return ComboBox_GetEnabled(this.Instance)

proc `Enabled=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetEnabled(this.Instance, AValue)

proc Font*(this: TComboBox): TFont  =
  return ComboBox_GetFont(this.Instance).AsFont

proc `Font=`*(this: TComboBox, AValue: TFont)  =
  ComboBox_SetFont(this.Instance, CheckPtr(AValue))

proc ItemHeight*(this: TComboBox): int32  =
  return ComboBox_GetItemHeight(this.Instance)

proc `ItemHeight=`*(this: TComboBox, AValue: int32)  =
  ComboBox_SetItemHeight(this.Instance, AValue)

proc ItemIndex*(this: TComboBox): int32  =
  return ComboBox_GetItemIndex(this.Instance)

proc `ItemIndex=`*(this: TComboBox, AValue: int32)  =
  ComboBox_SetItemIndex(this.Instance, AValue)

proc MaxLength*(this: TComboBox): int32  =
  return ComboBox_GetMaxLength(this.Instance)

proc `MaxLength=`*(this: TComboBox, AValue: int32)  =
  ComboBox_SetMaxLength(this.Instance, AValue)

proc ParentColor*(this: TComboBox): bool  =
  return ComboBox_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TComboBox): bool  =
  return ComboBox_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TComboBox): bool  =
  return ComboBox_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TComboBox): bool  =
  return ComboBox_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TComboBox): TPopupMenu  =
  return ComboBox_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TComboBox, AValue: TPopupMenu)  =
  ComboBox_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TComboBox): bool  =
  return ComboBox_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetShowHint(this.Instance, AValue)

proc Sorted*(this: TComboBox): bool  =
  return ComboBox_GetSorted(this.Instance)

proc `Sorted=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetSorted(this.Instance, AValue)

proc TabOrder*(this: TComboBox): TTabOrder  =
  return ComboBox_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TComboBox, AValue: TTabOrder)  =
  ComboBox_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TComboBox): bool  =
  return ComboBox_GetTabStop(this.Instance)

proc `TabStop=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetTabStop(this.Instance, AValue)

proc Text*(this: TComboBox): string  =
  return $ComboBox_GetText(this.Instance)

proc `Text=`*(this: TComboBox, AValue: string)  =
  ComboBox_SetText(this.Instance, AValue)

proc Visible*(this: TComboBox): bool  =
  return ComboBox_GetVisible(this.Instance)

proc `Visible=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetVisible(this.Instance, AValue)

proc `OnChange=`*(this: TComboBox, AEventId: TNotifyEvent)  =
  ComboBox_SetOnChange(this.Instance, AEventId)

proc `OnClick=`*(this: TComboBox, AEventId: TNotifyEvent)  =
  ComboBox_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TComboBox, AEventId: TContextPopupEvent)  =
  ComboBox_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TComboBox, AEventId: TNotifyEvent)  =
  ComboBox_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TComboBox, AEventId: TDragDropEvent)  =
  ComboBox_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TComboBox, AEventId: TDragOverEvent)  =
  ComboBox_SetOnDragOver(this.Instance, AEventId)

proc `OnDrawItem=`*(this: TComboBox, AEventId: TDrawItemEvent)  =
  ComboBox_SetOnDrawItem(this.Instance, AEventId)

proc `OnDropDown=`*(this: TComboBox, AEventId: TNotifyEvent)  =
  ComboBox_SetOnDropDown(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TComboBox, AEventId: TEndDragEvent)  =
  ComboBox_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TComboBox, AEventId: TNotifyEvent)  =
  ComboBox_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TComboBox, AEventId: TNotifyEvent)  =
  ComboBox_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TComboBox, AEventId: TKeyEvent)  =
  ComboBox_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TComboBox, AEventId: TKeyPressEvent)  =
  ComboBox_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TComboBox, AEventId: TKeyEvent)  =
  ComboBox_SetOnKeyUp(this.Instance, AEventId)

proc `OnMeasureItem=`*(this: TComboBox, AEventId: TMeasureItemEvent)  =
  ComboBox_SetOnMeasureItem(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TComboBox, AEventId: TNotifyEvent)  =
  ComboBox_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TComboBox, AEventId: TNotifyEvent)  =
  ComboBox_SetOnMouseLeave(this.Instance, AEventId)

proc `OnSelect=`*(this: TComboBox, AEventId: TNotifyEvent)  =
  ComboBox_SetOnSelect(this.Instance, AEventId)

proc Items*(this: TComboBox): TStrings  =
  return ComboBox_GetItems(this.Instance).AsStrings

proc `Items=`*(this: TComboBox, AValue: TStrings)  =
  ComboBox_SetItems(this.Instance, CheckPtr(AValue))

proc SelText*(this: TComboBox): string  =
  return $ComboBox_GetSelText(this.Instance)

proc `SelText=`*(this: TComboBox, AValue: string)  =
  ComboBox_SetSelText(this.Instance, AValue)

proc Canvas*(this: TComboBox): TCanvas  =
  return ComboBox_GetCanvas(this.Instance).AsCanvas

proc DroppedDown*(this: TComboBox): bool  =
  return ComboBox_GetDroppedDown(this.Instance)

proc `DroppedDown=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetDroppedDown(this.Instance, AValue)

proc SelLength*(this: TComboBox): int32  =
  return ComboBox_GetSelLength(this.Instance)

proc `SelLength=`*(this: TComboBox, AValue: int32)  =
  ComboBox_SetSelLength(this.Instance, AValue)

proc SelStart*(this: TComboBox): int32  =
  return ComboBox_GetSelStart(this.Instance)

proc `SelStart=`*(this: TComboBox, AValue: int32)  =
  ComboBox_SetSelStart(this.Instance, AValue)

proc DockClientCount*(this: TComboBox): int32  =
  return ComboBox_GetDockClientCount(this.Instance)

proc DockSite*(this: TComboBox): bool  =
  return ComboBox_GetDockSite(this.Instance)

proc `DockSite=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TComboBox): bool  =
  return ComboBox_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TComboBox): int32  =
  return ComboBox_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TComboBox): TBrush  =
  return ComboBox_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TComboBox): int32  =
  return ComboBox_GetControlCount(this.Instance)

proc Handle*(this: TComboBox): HWND  =
  return ComboBox_GetHandle(this.Instance)

proc ParentWindow*(this: TComboBox): HWND  =
  return ComboBox_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TComboBox, AValue: HWND)  =
  ComboBox_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TComboBox): bool  =
  return ComboBox_GetShowing(this.Instance)

proc UseDockManager*(this: TComboBox): bool  =
  return ComboBox_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TComboBox, AValue: bool)  =
  ComboBox_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TComboBox): TAction  =
  return ComboBox_GetAction(this.Instance).AsAction

proc `Action=`*(this: TComboBox, AValue: TAction)  =
  ComboBox_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TComboBox): TRect  =
  ComboBox_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TComboBox, AValue: TRect)  =
  var ps1 = AValue
  ComboBox_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TComboBox): int32  =
  return ComboBox_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TComboBox, AValue: int32)  =
  ComboBox_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TComboBox): TPoint  =
  ComboBox_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TComboBox): TRect  =
  ComboBox_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TComboBox): int32  =
  return ComboBox_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TComboBox, AValue: int32)  =
  ComboBox_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TComboBox): TControlState  =
  return ComboBox_GetControlState(this.Instance)

proc `ControlState=`*(this: TComboBox, AValue: TControlState)  =
  ComboBox_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TComboBox): TControlStyle  =
  return ComboBox_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TComboBox, AValue: TControlStyle)  =
  ComboBox_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TComboBox): bool  =
  return ComboBox_GetFloating(this.Instance)

proc Parent*(this: TComboBox): TWinControl  =
  return ComboBox_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TComboBox, AValue: TWinControl)  =
  ComboBox_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TComboBox): int32  =
  return ComboBox_GetLeft(this.Instance)

proc `Left=`*(this: TComboBox, AValue: int32)  =
  ComboBox_SetLeft(this.Instance, AValue)

proc Top*(this: TComboBox): int32  =
  return ComboBox_GetTop(this.Instance)

proc `Top=`*(this: TComboBox, AValue: int32)  =
  ComboBox_SetTop(this.Instance, AValue)

proc Width*(this: TComboBox): int32  =
  return ComboBox_GetWidth(this.Instance)

proc `Width=`*(this: TComboBox, AValue: int32)  =
  ComboBox_SetWidth(this.Instance, AValue)

proc Height*(this: TComboBox): int32  =
  return ComboBox_GetHeight(this.Instance)

proc `Height=`*(this: TComboBox, AValue: int32)  =
  ComboBox_SetHeight(this.Instance, AValue)

proc Cursor*(this: TComboBox): TCursor  =
  return ComboBox_GetCursor(this.Instance)

proc `Cursor=`*(this: TComboBox, AValue: TCursor)  =
  ComboBox_SetCursor(this.Instance, AValue)

proc Hint*(this: TComboBox): string  =
  return $ComboBox_GetHint(this.Instance)

proc `Hint=`*(this: TComboBox, AValue: string)  =
  ComboBox_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TComboBox): int32  =
  return ComboBox_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TComboBox): int32  =
  return ComboBox_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TComboBox, AValue: int32)  =
  ComboBox_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TComboBox): TComponent  =
  return ComboBox_GetOwner(this.Instance).AsComponent

proc Name*(this: TComboBox): string  =
  return $ComboBox_GetName(this.Instance)

proc `Name=`*(this: TComboBox, AValue: string)  =
  ComboBox_SetName(this.Instance, AValue)

proc Tag*(this: TComboBox): int  =
  return ComboBox_GetTag(this.Instance)

proc `Tag=`*(this: TComboBox, AValue: int)  =
  ComboBox_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TComboBox): TAnchorSide  =
  return ComboBox_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TComboBox, AValue: TAnchorSide)  =
  ComboBox_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TComboBox): TAnchorSide  =
  return ComboBox_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TComboBox, AValue: TAnchorSide)  =
  ComboBox_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TComboBox): TAnchorSide  =
  return ComboBox_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TComboBox, AValue: TAnchorSide)  =
  ComboBox_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TComboBox): TAnchorSide  =
  return ComboBox_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TComboBox, AValue: TAnchorSide)  =
  ComboBox_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TComboBox): TControlChildSizing  =
  return ComboBox_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TComboBox, AValue: TControlChildSizing)  =
  ComboBox_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TComboBox): TControlBorderSpacing  =
  return ComboBox_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TComboBox, AValue: TControlBorderSpacing)  =
  ComboBox_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TComboBox, Index: int32): TControl  =
  return ComboBox_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TComboBox, Index: int32): TControl  =
  return ComboBox_GetControls(this.Instance, Index).AsControl

proc Components*(this: TComboBox, AIndex: int32): TComponent  =
  return ComboBox_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TComboBox, AKind: TAnchorKind): TAnchorSide  =
  return ComboBox_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TComboBoxClass*(): TClass = ComboBox_StaticClassType()


#------------------------- TPanel -------------------------

proc Free*(this: TPanel) = defaultFree: Panel_Free

proc NewPanel*(AOwner: TComponent): TPanel =
  new(result)
  result.Instance = Panel_Create(CheckPtr(AOwner))

proc CanFocus*(this: TPanel): bool =
  return Panel_CanFocus(this.Instance)

proc ContainsControl*(this: TPanel, Control: TControl): bool =
  return Panel_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TPanel, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return Panel_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TPanel) =
  Panel_DisableAlign(this.Instance)

proc EnableAlign*(this: TPanel) =
  Panel_EnableAlign(this.Instance)

proc FindChildControl*(this: TPanel, ControlName: string): TControl =
  return Panel_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TPanel, AllLevels: bool) =
  Panel_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TPanel): bool =
  return Panel_Focused(this.Instance)

proc HandleAllocated*(this: TPanel): bool =
  return Panel_HandleAllocated(this.Instance)

proc InsertControl*(this: TPanel, AControl: TControl) =
  Panel_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TPanel) =
  Panel_Invalidate(this.Instance)

proc PaintTo*(this: TPanel, DC: HDC, X: int32, Y: int32) =
  Panel_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TPanel, AControl: TControl) =
  Panel_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TPanel) =
  Panel_Realign(this.Instance)

proc Repaint*(this: TPanel) =
  Panel_Repaint(this.Instance)

proc ScaleBy*(this: TPanel, M: int32, D: int32) =
  Panel_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TPanel, DeltaX: int32, DeltaY: int32) =
  Panel_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TPanel, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  Panel_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TPanel) =
  Panel_SetFocus(this.Instance)

proc Update*(this: TPanel) =
  Panel_Update(this.Instance)

proc BringToFront*(this: TPanel) =
  Panel_BringToFront(this.Instance)

proc ClientToScreen*(this: TPanel, Point: TPoint): TPoint =
  var ps1 = Point
  Panel_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TPanel, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Panel_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TPanel): bool =
  return Panel_Dragging(this.Instance)

proc HasParent*(this: TPanel): bool =
  return Panel_HasParent(this.Instance)

proc Hide*(this: TPanel) =
  Panel_Hide(this.Instance)

proc Perform*(this: TPanel, Msg: uint32, WParam: uint, LParam: int): int =
  return Panel_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TPanel) =
  Panel_Refresh(this.Instance)

proc ScreenToClient*(this: TPanel, Point: TPoint): TPoint =
  var ps1 = Point
  Panel_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TPanel, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Panel_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TPanel) =
  Panel_SendToBack(this.Instance)

proc Show*(this: TPanel) =
  Panel_Show(this.Instance)

proc GetTextBuf*(this: TPanel, Buffer: string, BufSize: int32): int32 =
  return Panel_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TPanel): int32 =
  return Panel_GetTextLen(this.Instance)

proc SetTextBuf*(this: TPanel, Buffer: string) =
  Panel_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TPanel, AName: string): TComponent =
  return Panel_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TPanel): string =
  return $Panel_GetNamePath(this.Instance)

proc Assign*(this: TPanel, Source: TObject) =
  Panel_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TPanel): TClass =
  return Panel_ClassType(this.Instance)

proc ClassName*(this: TPanel): string =
  return $Panel_ClassName(this.Instance)

proc InstanceSize*(this: TPanel): int32 =
  return Panel_InstanceSize(this.Instance)

proc InheritsFrom*(this: TPanel, AClass: TClass): bool =
  return Panel_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TPanel, Obj: TObject): bool =
  return Panel_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TPanel): int32 =
  return Panel_GetHashCode(this.Instance)

proc ToString*(this: TPanel): string =
  return $Panel_ToString(this.Instance)

proc AnchorToNeighbour*(this: TPanel, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Panel_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TPanel, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Panel_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TPanel, ASibling: TControl) =
  Panel_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TPanel, ASibling: TControl) =
  Panel_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TPanel, ASide: TAnchorKind, ASibling: TControl) =
  Panel_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TPanel, ATheAlign: TAlign, ASpace: int32) =
  Panel_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TPanel, ASpace: int32) =
  Panel_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TPanel, ASize: int32): int32 =
  return Panel_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TPanel, ASize: int32): int32 =
  return Panel_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TPanel, ASize: int32): int32 =
  return Panel_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TPanel, ASize: int32): int32 =
  return Panel_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TPanel, ASize: int32): int32 =
  return Panel_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TPanel, ASize: int32): int32 =
  return Panel_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TPanel, ASize: int32): int32 =
  return Panel_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TPanel, ASize: int32): int32 =
  return Panel_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TPanel, ASize: int32): int32 =
  return Panel_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TPanel, ASize: int32): int32 =
  return Panel_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TPanel, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  Panel_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TPanel, ADesignTimePPI: int32) =
  Panel_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TPanel, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  Panel_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TPanel): TAlign  =
  return Panel_GetAlign(this.Instance)

proc `Align=`*(this: TPanel, AValue: TAlign)  =
  Panel_SetAlign(this.Instance, AValue)

proc Alignment*(this: TPanel): TAlignment  =
  return Panel_GetAlignment(this.Instance)

proc `Alignment=`*(this: TPanel, AValue: TAlignment)  =
  Panel_SetAlignment(this.Instance, AValue)

proc Anchors*(this: TPanel): TAnchors  =
  return Panel_GetAnchors(this.Instance)

proc `Anchors=`*(this: TPanel, AValue: TAnchors)  =
  Panel_SetAnchors(this.Instance, AValue)

proc AutoSize*(this: TPanel): bool  =
  return Panel_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TPanel, AValue: bool)  =
  Panel_SetAutoSize(this.Instance, AValue)

proc BevelInner*(this: TPanel): TBevelCut  =
  return Panel_GetBevelInner(this.Instance)

proc `BevelInner=`*(this: TPanel, AValue: TBevelCut)  =
  Panel_SetBevelInner(this.Instance, AValue)

proc BevelOuter*(this: TPanel): TBevelCut  =
  return Panel_GetBevelOuter(this.Instance)

proc `BevelOuter=`*(this: TPanel, AValue: TBevelCut)  =
  Panel_SetBevelOuter(this.Instance, AValue)

proc BiDiMode*(this: TPanel): TBiDiMode  =
  return Panel_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TPanel, AValue: TBiDiMode)  =
  Panel_SetBiDiMode(this.Instance, AValue)

proc BorderWidth*(this: TPanel): int32  =
  return Panel_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TPanel, AValue: int32)  =
  Panel_SetBorderWidth(this.Instance, AValue)

proc BorderStyle*(this: TPanel): TBorderStyle  =
  return Panel_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TPanel, AValue: TBorderStyle)  =
  Panel_SetBorderStyle(this.Instance, AValue)

proc Caption*(this: TPanel): string  =
  return $Panel_GetCaption(this.Instance)

proc `Caption=`*(this: TPanel, AValue: string)  =
  Panel_SetCaption(this.Instance, AValue)

proc Color*(this: TPanel): TColor  =
  return Panel_GetColor(this.Instance)

proc `Color=`*(this: TPanel, AValue: TColor)  =
  Panel_SetColor(this.Instance, AValue)

proc Constraints*(this: TPanel): TSizeConstraints  =
  return Panel_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TPanel, AValue: TSizeConstraints)  =
  Panel_SetConstraints(this.Instance, CheckPtr(AValue))

proc UseDockManager*(this: TPanel): bool  =
  return Panel_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TPanel, AValue: bool)  =
  Panel_SetUseDockManager(this.Instance, AValue)

proc DockSite*(this: TPanel): bool  =
  return Panel_GetDockSite(this.Instance)

proc `DockSite=`*(this: TPanel, AValue: bool)  =
  Panel_SetDockSite(this.Instance, AValue)

proc DoubleBuffered*(this: TPanel): bool  =
  return Panel_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TPanel, AValue: bool)  =
  Panel_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TPanel): TCursor  =
  return Panel_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TPanel, AValue: TCursor)  =
  Panel_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TPanel): TDragKind  =
  return Panel_GetDragKind(this.Instance)

proc `DragKind=`*(this: TPanel, AValue: TDragKind)  =
  Panel_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TPanel): TDragMode  =
  return Panel_GetDragMode(this.Instance)

proc `DragMode=`*(this: TPanel, AValue: TDragMode)  =
  Panel_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TPanel): bool  =
  return Panel_GetEnabled(this.Instance)

proc `Enabled=`*(this: TPanel, AValue: bool)  =
  Panel_SetEnabled(this.Instance, AValue)

proc FullRepaint*(this: TPanel): bool  =
  return Panel_GetFullRepaint(this.Instance)

proc `FullRepaint=`*(this: TPanel, AValue: bool)  =
  Panel_SetFullRepaint(this.Instance, AValue)

proc Font*(this: TPanel): TFont  =
  return Panel_GetFont(this.Instance).AsFont

proc `Font=`*(this: TPanel, AValue: TFont)  =
  Panel_SetFont(this.Instance, CheckPtr(AValue))

proc ParentBackground*(this: TPanel): bool  =
  return Panel_GetParentBackground(this.Instance)

proc `ParentBackground=`*(this: TPanel, AValue: bool)  =
  Panel_SetParentBackground(this.Instance, AValue)

proc ParentColor*(this: TPanel): bool  =
  return Panel_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TPanel, AValue: bool)  =
  Panel_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TPanel): bool  =
  return Panel_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TPanel, AValue: bool)  =
  Panel_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TPanel): bool  =
  return Panel_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TPanel, AValue: bool)  =
  Panel_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TPanel): bool  =
  return Panel_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TPanel, AValue: bool)  =
  Panel_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TPanel): TPopupMenu  =
  return Panel_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TPanel, AValue: TPopupMenu)  =
  Panel_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TPanel): bool  =
  return Panel_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TPanel, AValue: bool)  =
  Panel_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TPanel): TTabOrder  =
  return Panel_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TPanel, AValue: TTabOrder)  =
  Panel_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TPanel): bool  =
  return Panel_GetTabStop(this.Instance)

proc `TabStop=`*(this: TPanel, AValue: bool)  =
  Panel_SetTabStop(this.Instance, AValue)

proc Visible*(this: TPanel): bool  =
  return Panel_GetVisible(this.Instance)

proc `Visible=`*(this: TPanel, AValue: bool)  =
  Panel_SetVisible(this.Instance, AValue)

proc `OnAlignPosition=`*(this: TPanel, AEventId: TAlignPositionEvent)  =
  Panel_SetOnAlignPosition(this.Instance, AEventId)

proc `OnClick=`*(this: TPanel, AEventId: TNotifyEvent)  =
  Panel_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TPanel, AEventId: TContextPopupEvent)  =
  Panel_SetOnContextPopup(this.Instance, AEventId)

proc `OnDockDrop=`*(this: TPanel, AEventId: TDockDropEvent)  =
  Panel_SetOnDockDrop(this.Instance, AEventId)

proc `OnDblClick=`*(this: TPanel, AEventId: TNotifyEvent)  =
  Panel_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TPanel, AEventId: TDragDropEvent)  =
  Panel_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TPanel, AEventId: TDragOverEvent)  =
  Panel_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDock=`*(this: TPanel, AEventId: TEndDragEvent)  =
  Panel_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TPanel, AEventId: TEndDragEvent)  =
  Panel_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TPanel, AEventId: TNotifyEvent)  =
  Panel_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TPanel, AEventId: TNotifyEvent)  =
  Panel_SetOnExit(this.Instance, AEventId)

proc `OnGetSiteInfo=`*(this: TPanel, AEventId: TGetSiteInfoEvent)  =
  Panel_SetOnGetSiteInfo(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TPanel, AEventId: TMouseEvent)  =
  Panel_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TPanel, AEventId: TNotifyEvent)  =
  Panel_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TPanel, AEventId: TNotifyEvent)  =
  Panel_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TPanel, AEventId: TMouseMoveEvent)  =
  Panel_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TPanel, AEventId: TMouseEvent)  =
  Panel_SetOnMouseUp(this.Instance, AEventId)

proc `OnResize=`*(this: TPanel, AEventId: TNotifyEvent)  =
  Panel_SetOnResize(this.Instance, AEventId)

proc `OnStartDock=`*(this: TPanel, AEventId: TStartDockEvent)  =
  Panel_SetOnStartDock(this.Instance, AEventId)

proc `OnUnDock=`*(this: TPanel, AEventId: TUnDockEvent)  =
  Panel_SetOnUnDock(this.Instance, AEventId)

proc DockClientCount*(this: TPanel): int32  =
  return Panel_GetDockClientCount(this.Instance)

proc MouseInClient*(this: TPanel): bool  =
  return Panel_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TPanel): int32  =
  return Panel_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TPanel): TBrush  =
  return Panel_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TPanel): int32  =
  return Panel_GetControlCount(this.Instance)

proc Handle*(this: TPanel): HWND  =
  return Panel_GetHandle(this.Instance)

proc ParentWindow*(this: TPanel): HWND  =
  return Panel_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TPanel, AValue: HWND)  =
  Panel_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TPanel): bool  =
  return Panel_GetShowing(this.Instance)

proc Action*(this: TPanel): TAction  =
  return Panel_GetAction(this.Instance).AsAction

proc `Action=`*(this: TPanel, AValue: TAction)  =
  Panel_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TPanel): TRect  =
  Panel_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TPanel, AValue: TRect)  =
  var ps1 = AValue
  Panel_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TPanel): int32  =
  return Panel_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TPanel, AValue: int32)  =
  Panel_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TPanel): TPoint  =
  Panel_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TPanel): TRect  =
  Panel_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TPanel): int32  =
  return Panel_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TPanel, AValue: int32)  =
  Panel_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TPanel): TControlState  =
  return Panel_GetControlState(this.Instance)

proc `ControlState=`*(this: TPanel, AValue: TControlState)  =
  Panel_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TPanel): TControlStyle  =
  return Panel_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TPanel, AValue: TControlStyle)  =
  Panel_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TPanel): bool  =
  return Panel_GetFloating(this.Instance)

proc Parent*(this: TPanel): TWinControl  =
  return Panel_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TPanel, AValue: TWinControl)  =
  Panel_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TPanel): int32  =
  return Panel_GetLeft(this.Instance)

proc `Left=`*(this: TPanel, AValue: int32)  =
  Panel_SetLeft(this.Instance, AValue)

proc Top*(this: TPanel): int32  =
  return Panel_GetTop(this.Instance)

proc `Top=`*(this: TPanel, AValue: int32)  =
  Panel_SetTop(this.Instance, AValue)

proc Width*(this: TPanel): int32  =
  return Panel_GetWidth(this.Instance)

proc `Width=`*(this: TPanel, AValue: int32)  =
  Panel_SetWidth(this.Instance, AValue)

proc Height*(this: TPanel): int32  =
  return Panel_GetHeight(this.Instance)

proc `Height=`*(this: TPanel, AValue: int32)  =
  Panel_SetHeight(this.Instance, AValue)

proc Cursor*(this: TPanel): TCursor  =
  return Panel_GetCursor(this.Instance)

proc `Cursor=`*(this: TPanel, AValue: TCursor)  =
  Panel_SetCursor(this.Instance, AValue)

proc Hint*(this: TPanel): string  =
  return $Panel_GetHint(this.Instance)

proc `Hint=`*(this: TPanel, AValue: string)  =
  Panel_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TPanel): int32  =
  return Panel_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TPanel): int32  =
  return Panel_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TPanel, AValue: int32)  =
  Panel_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TPanel): TComponent  =
  return Panel_GetOwner(this.Instance).AsComponent

proc Name*(this: TPanel): string  =
  return $Panel_GetName(this.Instance)

proc `Name=`*(this: TPanel, AValue: string)  =
  Panel_SetName(this.Instance, AValue)

proc Tag*(this: TPanel): int  =
  return Panel_GetTag(this.Instance)

proc `Tag=`*(this: TPanel, AValue: int)  =
  Panel_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TPanel): TAnchorSide  =
  return Panel_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TPanel, AValue: TAnchorSide)  =
  Panel_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TPanel): TAnchorSide  =
  return Panel_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TPanel, AValue: TAnchorSide)  =
  Panel_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TPanel): TAnchorSide  =
  return Panel_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TPanel, AValue: TAnchorSide)  =
  Panel_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TPanel): TAnchorSide  =
  return Panel_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TPanel, AValue: TAnchorSide)  =
  Panel_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TPanel): TControlChildSizing  =
  return Panel_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TPanel, AValue: TControlChildSizing)  =
  Panel_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TPanel): TControlBorderSpacing  =
  return Panel_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TPanel, AValue: TControlBorderSpacing)  =
  Panel_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TPanel, Index: int32): TControl  =
  return Panel_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TPanel, Index: int32): TControl  =
  return Panel_GetControls(this.Instance, Index).AsControl

proc Components*(this: TPanel, AIndex: int32): TComponent  =
  return Panel_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TPanel, AKind: TAnchorKind): TAnchorSide  =
  return Panel_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TPanelClass*(): TClass = Panel_StaticClassType()


#------------------------- TImage -------------------------

proc Free*(this: TImage) = defaultFree: Image_Free

proc NewImage*(AOwner: TComponent): TImage =
  new(result)
  result.Instance = Image_Create(CheckPtr(AOwner))

proc BringToFront*(this: TImage) =
  Image_BringToFront(this.Instance)

proc ClientToScreen*(this: TImage, Point: TPoint): TPoint =
  var ps1 = Point
  Image_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TImage, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Image_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TImage): bool =
  return Image_Dragging(this.Instance)

proc HasParent*(this: TImage): bool =
  return Image_HasParent(this.Instance)

proc Hide*(this: TImage) =
  Image_Hide(this.Instance)

proc Invalidate*(this: TImage) =
  Image_Invalidate(this.Instance)

proc Perform*(this: TImage, Msg: uint32, WParam: uint, LParam: int): int =
  return Image_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TImage) =
  Image_Refresh(this.Instance)

proc Repaint*(this: TImage) =
  Image_Repaint(this.Instance)

proc ScreenToClient*(this: TImage, Point: TPoint): TPoint =
  var ps1 = Point
  Image_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TImage, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Image_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TImage) =
  Image_SendToBack(this.Instance)

proc SetBounds*(this: TImage, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  Image_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Show*(this: TImage) =
  Image_Show(this.Instance)

proc Update*(this: TImage) =
  Image_Update(this.Instance)

proc GetTextBuf*(this: TImage, Buffer: string, BufSize: int32): int32 =
  return Image_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TImage): int32 =
  return Image_GetTextLen(this.Instance)

proc SetTextBuf*(this: TImage, Buffer: string) =
  Image_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TImage, AName: string): TComponent =
  return Image_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TImage): string =
  return $Image_GetNamePath(this.Instance)

proc Assign*(this: TImage, Source: TObject) =
  Image_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TImage): TClass =
  return Image_ClassType(this.Instance)

proc ClassName*(this: TImage): string =
  return $Image_ClassName(this.Instance)

proc InstanceSize*(this: TImage): int32 =
  return Image_InstanceSize(this.Instance)

proc InheritsFrom*(this: TImage, AClass: TClass): bool =
  return Image_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TImage, Obj: TObject): bool =
  return Image_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TImage): int32 =
  return Image_GetHashCode(this.Instance)

proc ToString*(this: TImage): string =
  return $Image_ToString(this.Instance)

proc AnchorToNeighbour*(this: TImage, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Image_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TImage, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Image_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TImage, ASibling: TControl) =
  Image_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TImage, ASibling: TControl) =
  Image_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TImage, ASide: TAnchorKind, ASibling: TControl) =
  Image_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TImage, ATheAlign: TAlign, ASpace: int32) =
  Image_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TImage, ASpace: int32) =
  Image_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TImage, ASize: int32): int32 =
  return Image_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TImage, ASize: int32): int32 =
  return Image_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TImage, ASize: int32): int32 =
  return Image_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TImage, ASize: int32): int32 =
  return Image_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TImage, ASize: int32): int32 =
  return Image_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TImage, ASize: int32): int32 =
  return Image_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TImage, ASize: int32): int32 =
  return Image_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TImage, ASize: int32): int32 =
  return Image_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TImage, ASize: int32): int32 =
  return Image_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TImage, ASize: int32): int32 =
  return Image_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TImage, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  Image_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TImage, ADesignTimePPI: int32) =
  Image_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TImage, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  Image_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc AntialiasingMode*(this: TImage): TAntialiasingMode  =
  return Image_GetAntialiasingMode(this.Instance)

proc `AntialiasingMode=`*(this: TImage, AValue: TAntialiasingMode)  =
  Image_SetAntialiasingMode(this.Instance, AValue)

proc KeepOriginXWhenClipped*(this: TImage): bool  =
  return Image_GetKeepOriginXWhenClipped(this.Instance)

proc `KeepOriginXWhenClipped=`*(this: TImage, AValue: bool)  =
  Image_SetKeepOriginXWhenClipped(this.Instance, AValue)

proc KeepOriginYWhenClipped*(this: TImage): bool  =
  return Image_GetKeepOriginYWhenClipped(this.Instance)

proc `KeepOriginYWhenClipped=`*(this: TImage, AValue: bool)  =
  Image_SetKeepOriginYWhenClipped(this.Instance, AValue)

proc StretchInEnabled*(this: TImage): bool  =
  return Image_GetStretchInEnabled(this.Instance)

proc `StretchInEnabled=`*(this: TImage, AValue: bool)  =
  Image_SetStretchInEnabled(this.Instance, AValue)

proc StretchOutEnabled*(this: TImage): bool  =
  return Image_GetStretchOutEnabled(this.Instance)

proc `StretchOutEnabled=`*(this: TImage, AValue: bool)  =
  Image_SetStretchOutEnabled(this.Instance, AValue)

proc Canvas*(this: TImage): TCanvas  =
  return Image_GetCanvas(this.Instance).AsCanvas

proc Align*(this: TImage): TAlign  =
  return Image_GetAlign(this.Instance)

proc `Align=`*(this: TImage, AValue: TAlign)  =
  Image_SetAlign(this.Instance, AValue)

proc Anchors*(this: TImage): TAnchors  =
  return Image_GetAnchors(this.Instance)

proc `Anchors=`*(this: TImage, AValue: TAnchors)  =
  Image_SetAnchors(this.Instance, AValue)

proc AutoSize*(this: TImage): bool  =
  return Image_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TImage, AValue: bool)  =
  Image_SetAutoSize(this.Instance, AValue)

proc Center*(this: TImage): bool  =
  return Image_GetCenter(this.Instance)

proc `Center=`*(this: TImage, AValue: bool)  =
  Image_SetCenter(this.Instance, AValue)

proc Constraints*(this: TImage): TSizeConstraints  =
  return Image_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TImage, AValue: TSizeConstraints)  =
  Image_SetConstraints(this.Instance, CheckPtr(AValue))

proc DragCursor*(this: TImage): TCursor  =
  return Image_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TImage, AValue: TCursor)  =
  Image_SetDragCursor(this.Instance, AValue)

proc DragMode*(this: TImage): TDragMode  =
  return Image_GetDragMode(this.Instance)

proc `DragMode=`*(this: TImage, AValue: TDragMode)  =
  Image_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TImage): bool  =
  return Image_GetEnabled(this.Instance)

proc `Enabled=`*(this: TImage, AValue: bool)  =
  Image_SetEnabled(this.Instance, AValue)

proc ParentShowHint*(this: TImage): bool  =
  return Image_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TImage, AValue: bool)  =
  Image_SetParentShowHint(this.Instance, AValue)

proc Picture*(this: TImage): TPicture  =
  return Image_GetPicture(this.Instance).AsPicture

proc `Picture=`*(this: TImage, AValue: TPicture)  =
  Image_SetPicture(this.Instance, CheckPtr(AValue))

proc PopupMenu*(this: TImage): TPopupMenu  =
  return Image_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TImage, AValue: TPopupMenu)  =
  Image_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc Proportional*(this: TImage): bool  =
  return Image_GetProportional(this.Instance)

proc `Proportional=`*(this: TImage, AValue: bool)  =
  Image_SetProportional(this.Instance, AValue)

proc ShowHint*(this: TImage): bool  =
  return Image_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TImage, AValue: bool)  =
  Image_SetShowHint(this.Instance, AValue)

proc Stretch*(this: TImage): bool  =
  return Image_GetStretch(this.Instance)

proc `Stretch=`*(this: TImage, AValue: bool)  =
  Image_SetStretch(this.Instance, AValue)

proc Transparent*(this: TImage): bool  =
  return Image_GetTransparent(this.Instance)

proc `Transparent=`*(this: TImage, AValue: bool)  =
  Image_SetTransparent(this.Instance, AValue)

proc Visible*(this: TImage): bool  =
  return Image_GetVisible(this.Instance)

proc `Visible=`*(this: TImage, AValue: bool)  =
  Image_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TImage, AEventId: TNotifyEvent)  =
  Image_SetOnClick(this.Instance, AEventId)

proc `OnDblClick=`*(this: TImage, AEventId: TNotifyEvent)  =
  Image_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TImage, AEventId: TDragDropEvent)  =
  Image_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TImage, AEventId: TDragOverEvent)  =
  Image_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TImage, AEventId: TEndDragEvent)  =
  Image_SetOnEndDrag(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TImage, AEventId: TMouseEvent)  =
  Image_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TImage, AEventId: TNotifyEvent)  =
  Image_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TImage, AEventId: TNotifyEvent)  =
  Image_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TImage, AEventId: TMouseMoveEvent)  =
  Image_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TImage, AEventId: TMouseEvent)  =
  Image_SetOnMouseUp(this.Instance, AEventId)

proc Action*(this: TImage): TAction  =
  return Image_GetAction(this.Instance).AsAction

proc `Action=`*(this: TImage, AValue: TAction)  =
  Image_SetAction(this.Instance, CheckPtr(AValue))

proc BiDiMode*(this: TImage): TBiDiMode  =
  return Image_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TImage, AValue: TBiDiMode)  =
  Image_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TImage): TRect  =
  Image_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TImage, AValue: TRect)  =
  var ps1 = AValue
  Image_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TImage): int32  =
  return Image_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TImage, AValue: int32)  =
  Image_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TImage): TPoint  =
  Image_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TImage): TRect  =
  Image_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TImage): int32  =
  return Image_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TImage, AValue: int32)  =
  Image_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TImage): TControlState  =
  return Image_GetControlState(this.Instance)

proc `ControlState=`*(this: TImage, AValue: TControlState)  =
  Image_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TImage): TControlStyle  =
  return Image_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TImage, AValue: TControlStyle)  =
  Image_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TImage): bool  =
  return Image_GetFloating(this.Instance)

proc Parent*(this: TImage): TWinControl  =
  return Image_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TImage, AValue: TWinControl)  =
  Image_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TImage): int32  =
  return Image_GetLeft(this.Instance)

proc `Left=`*(this: TImage, AValue: int32)  =
  Image_SetLeft(this.Instance, AValue)

proc Top*(this: TImage): int32  =
  return Image_GetTop(this.Instance)

proc `Top=`*(this: TImage, AValue: int32)  =
  Image_SetTop(this.Instance, AValue)

proc Width*(this: TImage): int32  =
  return Image_GetWidth(this.Instance)

proc `Width=`*(this: TImage, AValue: int32)  =
  Image_SetWidth(this.Instance, AValue)

proc Height*(this: TImage): int32  =
  return Image_GetHeight(this.Instance)

proc `Height=`*(this: TImage, AValue: int32)  =
  Image_SetHeight(this.Instance, AValue)

proc Cursor*(this: TImage): TCursor  =
  return Image_GetCursor(this.Instance)

proc `Cursor=`*(this: TImage, AValue: TCursor)  =
  Image_SetCursor(this.Instance, AValue)

proc Hint*(this: TImage): string  =
  return $Image_GetHint(this.Instance)

proc `Hint=`*(this: TImage, AValue: string)  =
  Image_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TImage): int32  =
  return Image_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TImage): int32  =
  return Image_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TImage, AValue: int32)  =
  Image_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TImage): TComponent  =
  return Image_GetOwner(this.Instance).AsComponent

proc Name*(this: TImage): string  =
  return $Image_GetName(this.Instance)

proc `Name=`*(this: TImage, AValue: string)  =
  Image_SetName(this.Instance, AValue)

proc Tag*(this: TImage): int  =
  return Image_GetTag(this.Instance)

proc `Tag=`*(this: TImage, AValue: int)  =
  Image_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TImage): TAnchorSide  =
  return Image_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TImage, AValue: TAnchorSide)  =
  Image_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TImage): TAnchorSide  =
  return Image_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TImage, AValue: TAnchorSide)  =
  Image_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TImage): TAnchorSide  =
  return Image_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TImage, AValue: TAnchorSide)  =
  Image_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TImage): TAnchorSide  =
  return Image_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TImage, AValue: TAnchorSide)  =
  Image_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TImage): TControlBorderSpacing  =
  return Image_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TImage, AValue: TControlBorderSpacing)  =
  Image_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TImage, AIndex: int32): TComponent  =
  return Image_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TImage, AKind: TAnchorKind): TAnchorSide  =
  return Image_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TImageClass*(): TClass = Image_StaticClassType()


#------------------------- TLinkLabel -------------------------

proc Free*(this: TLinkLabel) = defaultFree: LinkLabel_Free

proc NewLinkLabel*(AOwner: TComponent): TLinkLabel =
  new(result)
  result.Instance = LinkLabel_Create(CheckPtr(AOwner))

proc Invalidate*(this: TLinkLabel) =
  LinkLabel_Invalidate(this.Instance)

proc Repaint*(this: TLinkLabel) =
  LinkLabel_Repaint(this.Instance)

proc SetBounds*(this: TLinkLabel, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  LinkLabel_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Update*(this: TLinkLabel) =
  LinkLabel_Update(this.Instance)

proc BringToFront*(this: TLinkLabel) =
  LinkLabel_BringToFront(this.Instance)

proc ClientToScreen*(this: TLinkLabel, Point: TPoint): TPoint =
  var ps1 = Point
  LinkLabel_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TLinkLabel, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  LinkLabel_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TLinkLabel): bool =
  return LinkLabel_Dragging(this.Instance)

proc HasParent*(this: TLinkLabel): bool =
  return LinkLabel_HasParent(this.Instance)

proc Hide*(this: TLinkLabel) =
  LinkLabel_Hide(this.Instance)

proc Perform*(this: TLinkLabel, Msg: uint32, WParam: uint, LParam: int): int =
  return LinkLabel_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TLinkLabel) =
  LinkLabel_Refresh(this.Instance)

proc ScreenToClient*(this: TLinkLabel, Point: TPoint): TPoint =
  var ps1 = Point
  LinkLabel_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TLinkLabel, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  LinkLabel_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TLinkLabel) =
  LinkLabel_SendToBack(this.Instance)

proc Show*(this: TLinkLabel) =
  LinkLabel_Show(this.Instance)

proc GetTextBuf*(this: TLinkLabel, Buffer: string, BufSize: int32): int32 =
  return LinkLabel_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TLinkLabel): int32 =
  return LinkLabel_GetTextLen(this.Instance)

proc SetTextBuf*(this: TLinkLabel, Buffer: string) =
  LinkLabel_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TLinkLabel, AName: string): TComponent =
  return LinkLabel_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TLinkLabel): string =
  return $LinkLabel_GetNamePath(this.Instance)

proc Assign*(this: TLinkLabel, Source: TObject) =
  LinkLabel_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TLinkLabel): TClass =
  return LinkLabel_ClassType(this.Instance)

proc ClassName*(this: TLinkLabel): string =
  return $LinkLabel_ClassName(this.Instance)

proc InstanceSize*(this: TLinkLabel): int32 =
  return LinkLabel_InstanceSize(this.Instance)

proc InheritsFrom*(this: TLinkLabel, AClass: TClass): bool =
  return LinkLabel_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TLinkLabel, Obj: TObject): bool =
  return LinkLabel_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TLinkLabel): int32 =
  return LinkLabel_GetHashCode(this.Instance)

proc ToString*(this: TLinkLabel): string =
  return $LinkLabel_ToString(this.Instance)

proc AnchorToNeighbour*(this: TLinkLabel, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  LinkLabel_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TLinkLabel, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  LinkLabel_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TLinkLabel, ASibling: TControl) =
  LinkLabel_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TLinkLabel, ASibling: TControl) =
  LinkLabel_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TLinkLabel, ASide: TAnchorKind, ASibling: TControl) =
  LinkLabel_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TLinkLabel, ATheAlign: TAlign, ASpace: int32) =
  LinkLabel_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TLinkLabel, ASpace: int32) =
  LinkLabel_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TLinkLabel, ASize: int32): int32 =
  return LinkLabel_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TLinkLabel, ASize: int32): int32 =
  return LinkLabel_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TLinkLabel, ASize: int32): int32 =
  return LinkLabel_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TLinkLabel, ASize: int32): int32 =
  return LinkLabel_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TLinkLabel, ASize: int32): int32 =
  return LinkLabel_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TLinkLabel, ASize: int32): int32 =
  return LinkLabel_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TLinkLabel, ASize: int32): int32 =
  return LinkLabel_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TLinkLabel, ASize: int32): int32 =
  return LinkLabel_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TLinkLabel, ASize: int32): int32 =
  return LinkLabel_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TLinkLabel, ASize: int32): int32 =
  return LinkLabel_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TLinkLabel, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  LinkLabel_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TLinkLabel, ADesignTimePPI: int32) =
  LinkLabel_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TLinkLabel, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  LinkLabel_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TLinkLabel): TAlign  =
  return LinkLabel_GetAlign(this.Instance)

proc `Align=`*(this: TLinkLabel, AValue: TAlign)  =
  LinkLabel_SetAlign(this.Instance, AValue)

proc Alignment*(this: TLinkLabel): TAlignment  =
  return LinkLabel_GetAlignment(this.Instance)

proc `Alignment=`*(this: TLinkLabel, AValue: TAlignment)  =
  LinkLabel_SetAlignment(this.Instance, AValue)

proc Anchors*(this: TLinkLabel): TAnchors  =
  return LinkLabel_GetAnchors(this.Instance)

proc `Anchors=`*(this: TLinkLabel, AValue: TAnchors)  =
  LinkLabel_SetAnchors(this.Instance, AValue)

proc AutoSize*(this: TLinkLabel): bool  =
  return LinkLabel_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TLinkLabel, AValue: bool)  =
  LinkLabel_SetAutoSize(this.Instance, AValue)

proc Caption*(this: TLinkLabel): string  =
  return $LinkLabel_GetCaption(this.Instance)

proc `Caption=`*(this: TLinkLabel, AValue: string)  =
  LinkLabel_SetCaption(this.Instance, AValue)

proc Color*(this: TLinkLabel): TColor  =
  return LinkLabel_GetColor(this.Instance)

proc `Color=`*(this: TLinkLabel, AValue: TColor)  =
  LinkLabel_SetColor(this.Instance, AValue)

proc Constraints*(this: TLinkLabel): TSizeConstraints  =
  return LinkLabel_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TLinkLabel, AValue: TSizeConstraints)  =
  LinkLabel_SetConstraints(this.Instance, CheckPtr(AValue))

proc DragCursor*(this: TLinkLabel): TCursor  =
  return LinkLabel_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TLinkLabel, AValue: TCursor)  =
  LinkLabel_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TLinkLabel): TDragKind  =
  return LinkLabel_GetDragKind(this.Instance)

proc `DragKind=`*(this: TLinkLabel, AValue: TDragKind)  =
  LinkLabel_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TLinkLabel): TDragMode  =
  return LinkLabel_GetDragMode(this.Instance)

proc `DragMode=`*(this: TLinkLabel, AValue: TDragMode)  =
  LinkLabel_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TLinkLabel): bool  =
  return LinkLabel_GetEnabled(this.Instance)

proc `Enabled=`*(this: TLinkLabel, AValue: bool)  =
  LinkLabel_SetEnabled(this.Instance, AValue)

proc Font*(this: TLinkLabel): TFont  =
  return LinkLabel_GetFont(this.Instance).AsFont

proc `Font=`*(this: TLinkLabel, AValue: TFont)  =
  LinkLabel_SetFont(this.Instance, CheckPtr(AValue))

proc ParentColor*(this: TLinkLabel): bool  =
  return LinkLabel_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TLinkLabel, AValue: bool)  =
  LinkLabel_SetParentColor(this.Instance, AValue)

proc ParentFont*(this: TLinkLabel): bool  =
  return LinkLabel_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TLinkLabel, AValue: bool)  =
  LinkLabel_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TLinkLabel): bool  =
  return LinkLabel_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TLinkLabel, AValue: bool)  =
  LinkLabel_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TLinkLabel): TPopupMenu  =
  return LinkLabel_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TLinkLabel, AValue: TPopupMenu)  =
  LinkLabel_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TLinkLabel): bool  =
  return LinkLabel_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TLinkLabel, AValue: bool)  =
  LinkLabel_SetShowHint(this.Instance, AValue)

proc Visible*(this: TLinkLabel): bool  =
  return LinkLabel_GetVisible(this.Instance)

proc `Visible=`*(this: TLinkLabel, AValue: bool)  =
  LinkLabel_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TLinkLabel, AEventId: TNotifyEvent)  =
  LinkLabel_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TLinkLabel, AEventId: TContextPopupEvent)  =
  LinkLabel_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TLinkLabel, AEventId: TNotifyEvent)  =
  LinkLabel_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TLinkLabel, AEventId: TDragDropEvent)  =
  LinkLabel_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TLinkLabel, AEventId: TDragOverEvent)  =
  LinkLabel_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TLinkLabel, AEventId: TEndDragEvent)  =
  LinkLabel_SetOnEndDrag(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TLinkLabel, AEventId: TMouseEvent)  =
  LinkLabel_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TLinkLabel, AEventId: TNotifyEvent)  =
  LinkLabel_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TLinkLabel, AEventId: TNotifyEvent)  =
  LinkLabel_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TLinkLabel, AEventId: TMouseMoveEvent)  =
  LinkLabel_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TLinkLabel, AEventId: TMouseEvent)  =
  LinkLabel_SetOnMouseUp(this.Instance, AEventId)

proc `OnLinkClick=`*(this: TLinkLabel, AEventId: TSysLinkEvent)  =
  LinkLabel_SetOnLinkClick(this.Instance, AEventId)

proc MouseInClient*(this: TLinkLabel): bool  =
  return LinkLabel_GetMouseInClient(this.Instance)

proc Action*(this: TLinkLabel): TAction  =
  return LinkLabel_GetAction(this.Instance).AsAction

proc `Action=`*(this: TLinkLabel, AValue: TAction)  =
  LinkLabel_SetAction(this.Instance, CheckPtr(AValue))

proc BiDiMode*(this: TLinkLabel): TBiDiMode  =
  return LinkLabel_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TLinkLabel, AValue: TBiDiMode)  =
  LinkLabel_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TLinkLabel): TRect  =
  LinkLabel_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TLinkLabel, AValue: TRect)  =
  var ps1 = AValue
  LinkLabel_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TLinkLabel): int32  =
  return LinkLabel_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TLinkLabel, AValue: int32)  =
  LinkLabel_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TLinkLabel): TPoint  =
  LinkLabel_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TLinkLabel): TRect  =
  LinkLabel_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TLinkLabel): int32  =
  return LinkLabel_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TLinkLabel, AValue: int32)  =
  LinkLabel_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TLinkLabel): TControlState  =
  return LinkLabel_GetControlState(this.Instance)

proc `ControlState=`*(this: TLinkLabel, AValue: TControlState)  =
  LinkLabel_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TLinkLabel): TControlStyle  =
  return LinkLabel_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TLinkLabel, AValue: TControlStyle)  =
  LinkLabel_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TLinkLabel): bool  =
  return LinkLabel_GetFloating(this.Instance)

proc Parent*(this: TLinkLabel): TWinControl  =
  return LinkLabel_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TLinkLabel, AValue: TWinControl)  =
  LinkLabel_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TLinkLabel): int32  =
  return LinkLabel_GetLeft(this.Instance)

proc `Left=`*(this: TLinkLabel, AValue: int32)  =
  LinkLabel_SetLeft(this.Instance, AValue)

proc Top*(this: TLinkLabel): int32  =
  return LinkLabel_GetTop(this.Instance)

proc `Top=`*(this: TLinkLabel, AValue: int32)  =
  LinkLabel_SetTop(this.Instance, AValue)

proc Width*(this: TLinkLabel): int32  =
  return LinkLabel_GetWidth(this.Instance)

proc `Width=`*(this: TLinkLabel, AValue: int32)  =
  LinkLabel_SetWidth(this.Instance, AValue)

proc Height*(this: TLinkLabel): int32  =
  return LinkLabel_GetHeight(this.Instance)

proc `Height=`*(this: TLinkLabel, AValue: int32)  =
  LinkLabel_SetHeight(this.Instance, AValue)

proc Hint*(this: TLinkLabel): string  =
  return $LinkLabel_GetHint(this.Instance)

proc `Hint=`*(this: TLinkLabel, AValue: string)  =
  LinkLabel_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TLinkLabel): int32  =
  return LinkLabel_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TLinkLabel): int32  =
  return LinkLabel_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TLinkLabel, AValue: int32)  =
  LinkLabel_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TLinkLabel): TComponent  =
  return LinkLabel_GetOwner(this.Instance).AsComponent

proc Name*(this: TLinkLabel): string  =
  return $LinkLabel_GetName(this.Instance)

proc `Name=`*(this: TLinkLabel, AValue: string)  =
  LinkLabel_SetName(this.Instance, AValue)

proc Tag*(this: TLinkLabel): int  =
  return LinkLabel_GetTag(this.Instance)

proc `Tag=`*(this: TLinkLabel, AValue: int)  =
  LinkLabel_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TLinkLabel): TAnchorSide  =
  return LinkLabel_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TLinkLabel, AValue: TAnchorSide)  =
  LinkLabel_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TLinkLabel): TAnchorSide  =
  return LinkLabel_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TLinkLabel, AValue: TAnchorSide)  =
  LinkLabel_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TLinkLabel): TAnchorSide  =
  return LinkLabel_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TLinkLabel, AValue: TAnchorSide)  =
  LinkLabel_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TLinkLabel): TAnchorSide  =
  return LinkLabel_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TLinkLabel, AValue: TAnchorSide)  =
  LinkLabel_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TLinkLabel): TControlBorderSpacing  =
  return LinkLabel_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TLinkLabel, AValue: TControlBorderSpacing)  =
  LinkLabel_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TLinkLabel, AIndex: int32): TComponent  =
  return LinkLabel_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TLinkLabel, AKind: TAnchorKind): TAnchorSide  =
  return LinkLabel_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TLinkLabelClass*(): TClass = LinkLabel_StaticClassType()


#------------------------- TSpeedButton -------------------------

proc Free*(this: TSpeedButton) = defaultFree: SpeedButton_Free

proc NewSpeedButton*(AOwner: TComponent): TSpeedButton =
  new(result)
  result.Instance = SpeedButton_Create(CheckPtr(AOwner))

proc Click*(this: TSpeedButton)  =
  SpeedButton_Click(this.Instance)

proc BringToFront*(this: TSpeedButton) =
  SpeedButton_BringToFront(this.Instance)

proc ClientToScreen*(this: TSpeedButton, Point: TPoint): TPoint =
  var ps1 = Point
  SpeedButton_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TSpeedButton, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  SpeedButton_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TSpeedButton): bool =
  return SpeedButton_Dragging(this.Instance)

proc HasParent*(this: TSpeedButton): bool =
  return SpeedButton_HasParent(this.Instance)

proc Hide*(this: TSpeedButton) =
  SpeedButton_Hide(this.Instance)

proc Invalidate*(this: TSpeedButton) =
  SpeedButton_Invalidate(this.Instance)

proc Perform*(this: TSpeedButton, Msg: uint32, WParam: uint, LParam: int): int =
  return SpeedButton_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TSpeedButton) =
  SpeedButton_Refresh(this.Instance)

proc Repaint*(this: TSpeedButton) =
  SpeedButton_Repaint(this.Instance)

proc ScreenToClient*(this: TSpeedButton, Point: TPoint): TPoint =
  var ps1 = Point
  SpeedButton_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TSpeedButton, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  SpeedButton_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TSpeedButton) =
  SpeedButton_SendToBack(this.Instance)

proc SetBounds*(this: TSpeedButton, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  SpeedButton_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Show*(this: TSpeedButton) =
  SpeedButton_Show(this.Instance)

proc Update*(this: TSpeedButton) =
  SpeedButton_Update(this.Instance)

proc GetTextBuf*(this: TSpeedButton, Buffer: string, BufSize: int32): int32 =
  return SpeedButton_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TSpeedButton): int32 =
  return SpeedButton_GetTextLen(this.Instance)

proc SetTextBuf*(this: TSpeedButton, Buffer: string) =
  SpeedButton_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TSpeedButton, AName: string): TComponent =
  return SpeedButton_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TSpeedButton): string =
  return $SpeedButton_GetNamePath(this.Instance)

proc Assign*(this: TSpeedButton, Source: TObject) =
  SpeedButton_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TSpeedButton): TClass =
  return SpeedButton_ClassType(this.Instance)

proc ClassName*(this: TSpeedButton): string =
  return $SpeedButton_ClassName(this.Instance)

proc InstanceSize*(this: TSpeedButton): int32 =
  return SpeedButton_InstanceSize(this.Instance)

proc InheritsFrom*(this: TSpeedButton, AClass: TClass): bool =
  return SpeedButton_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TSpeedButton, Obj: TObject): bool =
  return SpeedButton_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TSpeedButton): int32 =
  return SpeedButton_GetHashCode(this.Instance)

proc ToString*(this: TSpeedButton): string =
  return $SpeedButton_ToString(this.Instance)

proc AnchorToNeighbour*(this: TSpeedButton, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  SpeedButton_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TSpeedButton, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  SpeedButton_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TSpeedButton, ASibling: TControl) =
  SpeedButton_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TSpeedButton, ASibling: TControl) =
  SpeedButton_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TSpeedButton, ASide: TAnchorKind, ASibling: TControl) =
  SpeedButton_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TSpeedButton, ATheAlign: TAlign, ASpace: int32) =
  SpeedButton_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TSpeedButton, ASpace: int32) =
  SpeedButton_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TSpeedButton, ASize: int32): int32 =
  return SpeedButton_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TSpeedButton, ASize: int32): int32 =
  return SpeedButton_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TSpeedButton, ASize: int32): int32 =
  return SpeedButton_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TSpeedButton, ASize: int32): int32 =
  return SpeedButton_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TSpeedButton, ASize: int32): int32 =
  return SpeedButton_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TSpeedButton, ASize: int32): int32 =
  return SpeedButton_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TSpeedButton, ASize: int32): int32 =
  return SpeedButton_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TSpeedButton, ASize: int32): int32 =
  return SpeedButton_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TSpeedButton, ASize: int32): int32 =
  return SpeedButton_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TSpeedButton, ASize: int32): int32 =
  return SpeedButton_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TSpeedButton, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  SpeedButton_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TSpeedButton, ADesignTimePPI: int32) =
  SpeedButton_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TSpeedButton, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  SpeedButton_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc ImageIndex*(this: TSpeedButton): int32  =
  return SpeedButton_GetImageIndex(this.Instance)

proc `ImageIndex=`*(this: TSpeedButton, AValue: int32)  =
  SpeedButton_SetImageIndex(this.Instance, AValue)

proc Images*(this: TSpeedButton): TImageList  =
  return SpeedButton_GetImages(this.Instance).AsImageList

proc `Images=`*(this: TSpeedButton, AValue: TImageList)  =
  SpeedButton_SetImages(this.Instance, CheckPtr(AValue))

proc ImageWidth*(this: TSpeedButton): int32  =
  return SpeedButton_GetImageWidth(this.Instance)

proc `ImageWidth=`*(this: TSpeedButton, AValue: int32)  =
  SpeedButton_SetImageWidth(this.Instance, AValue)

proc ShowCaption*(this: TSpeedButton): bool  =
  return SpeedButton_GetShowCaption(this.Instance)

proc `ShowCaption=`*(this: TSpeedButton, AValue: bool)  =
  SpeedButton_SetShowCaption(this.Instance, AValue)

proc Action*(this: TSpeedButton): TAction  =
  return SpeedButton_GetAction(this.Instance).AsAction

proc `Action=`*(this: TSpeedButton, AValue: TAction)  =
  SpeedButton_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TSpeedButton): TAlign  =
  return SpeedButton_GetAlign(this.Instance)

proc `Align=`*(this: TSpeedButton, AValue: TAlign)  =
  SpeedButton_SetAlign(this.Instance, AValue)

proc AllowAllUp*(this: TSpeedButton): bool  =
  return SpeedButton_GetAllowAllUp(this.Instance)

proc `AllowAllUp=`*(this: TSpeedButton, AValue: bool)  =
  SpeedButton_SetAllowAllUp(this.Instance, AValue)

proc Anchors*(this: TSpeedButton): TAnchors  =
  return SpeedButton_GetAnchors(this.Instance)

proc `Anchors=`*(this: TSpeedButton, AValue: TAnchors)  =
  SpeedButton_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TSpeedButton): TBiDiMode  =
  return SpeedButton_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TSpeedButton, AValue: TBiDiMode)  =
  SpeedButton_SetBiDiMode(this.Instance, AValue)

proc Constraints*(this: TSpeedButton): TSizeConstraints  =
  return SpeedButton_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TSpeedButton, AValue: TSizeConstraints)  =
  SpeedButton_SetConstraints(this.Instance, CheckPtr(AValue))

proc GroupIndex*(this: TSpeedButton): int32  =
  return SpeedButton_GetGroupIndex(this.Instance)

proc `GroupIndex=`*(this: TSpeedButton, AValue: int32)  =
  SpeedButton_SetGroupIndex(this.Instance, AValue)

proc Down*(this: TSpeedButton): bool  =
  return SpeedButton_GetDown(this.Instance)

proc `Down=`*(this: TSpeedButton, AValue: bool)  =
  SpeedButton_SetDown(this.Instance, AValue)

proc Caption*(this: TSpeedButton): string  =
  return $SpeedButton_GetCaption(this.Instance)

proc `Caption=`*(this: TSpeedButton, AValue: string)  =
  SpeedButton_SetCaption(this.Instance, AValue)

proc Enabled*(this: TSpeedButton): bool  =
  return SpeedButton_GetEnabled(this.Instance)

proc `Enabled=`*(this: TSpeedButton, AValue: bool)  =
  SpeedButton_SetEnabled(this.Instance, AValue)

proc Flat*(this: TSpeedButton): bool  =
  return SpeedButton_GetFlat(this.Instance)

proc `Flat=`*(this: TSpeedButton, AValue: bool)  =
  SpeedButton_SetFlat(this.Instance, AValue)

proc Font*(this: TSpeedButton): TFont  =
  return SpeedButton_GetFont(this.Instance).AsFont

proc `Font=`*(this: TSpeedButton, AValue: TFont)  =
  SpeedButton_SetFont(this.Instance, CheckPtr(AValue))

proc Glyph*(this: TSpeedButton): TBitmap  =
  return SpeedButton_GetGlyph(this.Instance).AsBitmap

proc `Glyph=`*(this: TSpeedButton, AValue: TBitmap)  =
  SpeedButton_SetGlyph(this.Instance, CheckPtr(AValue))

proc Layout*(this: TSpeedButton): TButtonLayout  =
  return SpeedButton_GetLayout(this.Instance)

proc `Layout=`*(this: TSpeedButton, AValue: TButtonLayout)  =
  SpeedButton_SetLayout(this.Instance, AValue)

proc NumGlyphs*(this: TSpeedButton): TNumGlyphs  =
  return SpeedButton_GetNumGlyphs(this.Instance)

proc `NumGlyphs=`*(this: TSpeedButton, AValue: TNumGlyphs)  =
  SpeedButton_SetNumGlyphs(this.Instance, AValue)

proc ParentFont*(this: TSpeedButton): bool  =
  return SpeedButton_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TSpeedButton, AValue: bool)  =
  SpeedButton_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TSpeedButton): bool  =
  return SpeedButton_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TSpeedButton, AValue: bool)  =
  SpeedButton_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TSpeedButton): TPopupMenu  =
  return SpeedButton_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TSpeedButton, AValue: TPopupMenu)  =
  SpeedButton_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TSpeedButton): bool  =
  return SpeedButton_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TSpeedButton, AValue: bool)  =
  SpeedButton_SetShowHint(this.Instance, AValue)

proc Spacing*(this: TSpeedButton): int32  =
  return SpeedButton_GetSpacing(this.Instance)

proc `Spacing=`*(this: TSpeedButton, AValue: int32)  =
  SpeedButton_SetSpacing(this.Instance, AValue)

proc Transparent*(this: TSpeedButton): bool  =
  return SpeedButton_GetTransparent(this.Instance)

proc `Transparent=`*(this: TSpeedButton, AValue: bool)  =
  SpeedButton_SetTransparent(this.Instance, AValue)

proc Visible*(this: TSpeedButton): bool  =
  return SpeedButton_GetVisible(this.Instance)

proc `Visible=`*(this: TSpeedButton, AValue: bool)  =
  SpeedButton_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TSpeedButton, AEventId: TNotifyEvent)  =
  SpeedButton_SetOnClick(this.Instance, AEventId)

proc `OnDblClick=`*(this: TSpeedButton, AEventId: TNotifyEvent)  =
  SpeedButton_SetOnDblClick(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TSpeedButton, AEventId: TMouseEvent)  =
  SpeedButton_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TSpeedButton, AEventId: TNotifyEvent)  =
  SpeedButton_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TSpeedButton, AEventId: TNotifyEvent)  =
  SpeedButton_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TSpeedButton, AEventId: TMouseMoveEvent)  =
  SpeedButton_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TSpeedButton, AEventId: TMouseEvent)  =
  SpeedButton_SetOnMouseUp(this.Instance, AEventId)

proc BoundsRect*(this: TSpeedButton): TRect  =
  SpeedButton_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TSpeedButton, AValue: TRect)  =
  var ps1 = AValue
  SpeedButton_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TSpeedButton): int32  =
  return SpeedButton_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TSpeedButton, AValue: int32)  =
  SpeedButton_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TSpeedButton): TPoint  =
  SpeedButton_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TSpeedButton): TRect  =
  SpeedButton_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TSpeedButton): int32  =
  return SpeedButton_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TSpeedButton, AValue: int32)  =
  SpeedButton_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TSpeedButton): TControlState  =
  return SpeedButton_GetControlState(this.Instance)

proc `ControlState=`*(this: TSpeedButton, AValue: TControlState)  =
  SpeedButton_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TSpeedButton): TControlStyle  =
  return SpeedButton_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TSpeedButton, AValue: TControlStyle)  =
  SpeedButton_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TSpeedButton): bool  =
  return SpeedButton_GetFloating(this.Instance)

proc Parent*(this: TSpeedButton): TWinControl  =
  return SpeedButton_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TSpeedButton, AValue: TWinControl)  =
  SpeedButton_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TSpeedButton): int32  =
  return SpeedButton_GetLeft(this.Instance)

proc `Left=`*(this: TSpeedButton, AValue: int32)  =
  SpeedButton_SetLeft(this.Instance, AValue)

proc Top*(this: TSpeedButton): int32  =
  return SpeedButton_GetTop(this.Instance)

proc `Top=`*(this: TSpeedButton, AValue: int32)  =
  SpeedButton_SetTop(this.Instance, AValue)

proc Width*(this: TSpeedButton): int32  =
  return SpeedButton_GetWidth(this.Instance)

proc `Width=`*(this: TSpeedButton, AValue: int32)  =
  SpeedButton_SetWidth(this.Instance, AValue)

proc Height*(this: TSpeedButton): int32  =
  return SpeedButton_GetHeight(this.Instance)

proc `Height=`*(this: TSpeedButton, AValue: int32)  =
  SpeedButton_SetHeight(this.Instance, AValue)

proc Cursor*(this: TSpeedButton): TCursor  =
  return SpeedButton_GetCursor(this.Instance)

proc `Cursor=`*(this: TSpeedButton, AValue: TCursor)  =
  SpeedButton_SetCursor(this.Instance, AValue)

proc Hint*(this: TSpeedButton): string  =
  return $SpeedButton_GetHint(this.Instance)

proc `Hint=`*(this: TSpeedButton, AValue: string)  =
  SpeedButton_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TSpeedButton): int32  =
  return SpeedButton_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TSpeedButton): int32  =
  return SpeedButton_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TSpeedButton, AValue: int32)  =
  SpeedButton_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TSpeedButton): TComponent  =
  return SpeedButton_GetOwner(this.Instance).AsComponent

proc Name*(this: TSpeedButton): string  =
  return $SpeedButton_GetName(this.Instance)

proc `Name=`*(this: TSpeedButton, AValue: string)  =
  SpeedButton_SetName(this.Instance, AValue)

proc Tag*(this: TSpeedButton): int  =
  return SpeedButton_GetTag(this.Instance)

proc `Tag=`*(this: TSpeedButton, AValue: int)  =
  SpeedButton_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TSpeedButton): TAnchorSide  =
  return SpeedButton_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TSpeedButton, AValue: TAnchorSide)  =
  SpeedButton_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TSpeedButton): TAnchorSide  =
  return SpeedButton_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TSpeedButton, AValue: TAnchorSide)  =
  SpeedButton_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TSpeedButton): TAnchorSide  =
  return SpeedButton_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TSpeedButton, AValue: TAnchorSide)  =
  SpeedButton_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TSpeedButton): TAnchorSide  =
  return SpeedButton_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TSpeedButton, AValue: TAnchorSide)  =
  SpeedButton_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TSpeedButton): TControlBorderSpacing  =
  return SpeedButton_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TSpeedButton, AValue: TControlBorderSpacing)  =
  SpeedButton_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TSpeedButton, AIndex: int32): TComponent  =
  return SpeedButton_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TSpeedButton, AKind: TAnchorKind): TAnchorSide  =
  return SpeedButton_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TSpeedButtonClass*(): TClass = SpeedButton_StaticClassType()


#------------------------- TSplitter -------------------------

proc Free*(this: TSplitter) = defaultFree: Splitter_Free

proc NewSplitter*(AOwner: TComponent): TSplitter =
  new(result)
  result.Instance = Splitter_Create(CheckPtr(AOwner))

proc BringToFront*(this: TSplitter) =
  Splitter_BringToFront(this.Instance)

proc ClientToScreen*(this: TSplitter, Point: TPoint): TPoint =
  var ps1 = Point
  Splitter_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TSplitter, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Splitter_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TSplitter): bool =
  return Splitter_Dragging(this.Instance)

proc HasParent*(this: TSplitter): bool =
  return Splitter_HasParent(this.Instance)

proc Hide*(this: TSplitter) =
  Splitter_Hide(this.Instance)

proc Invalidate*(this: TSplitter) =
  Splitter_Invalidate(this.Instance)

proc Perform*(this: TSplitter, Msg: uint32, WParam: uint, LParam: int): int =
  return Splitter_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TSplitter) =
  Splitter_Refresh(this.Instance)

proc Repaint*(this: TSplitter) =
  Splitter_Repaint(this.Instance)

proc ScreenToClient*(this: TSplitter, Point: TPoint): TPoint =
  var ps1 = Point
  Splitter_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TSplitter, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Splitter_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TSplitter) =
  Splitter_SendToBack(this.Instance)

proc SetBounds*(this: TSplitter, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  Splitter_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Show*(this: TSplitter) =
  Splitter_Show(this.Instance)

proc Update*(this: TSplitter) =
  Splitter_Update(this.Instance)

proc GetTextBuf*(this: TSplitter, Buffer: string, BufSize: int32): int32 =
  return Splitter_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TSplitter): int32 =
  return Splitter_GetTextLen(this.Instance)

proc SetTextBuf*(this: TSplitter, Buffer: string) =
  Splitter_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TSplitter, AName: string): TComponent =
  return Splitter_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TSplitter): string =
  return $Splitter_GetNamePath(this.Instance)

proc Assign*(this: TSplitter, Source: TObject) =
  Splitter_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TSplitter): TClass =
  return Splitter_ClassType(this.Instance)

proc ClassName*(this: TSplitter): string =
  return $Splitter_ClassName(this.Instance)

proc InstanceSize*(this: TSplitter): int32 =
  return Splitter_InstanceSize(this.Instance)

proc InheritsFrom*(this: TSplitter, AClass: TClass): bool =
  return Splitter_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TSplitter, Obj: TObject): bool =
  return Splitter_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TSplitter): int32 =
  return Splitter_GetHashCode(this.Instance)

proc ToString*(this: TSplitter): string =
  return $Splitter_ToString(this.Instance)

proc AnchorToNeighbour*(this: TSplitter, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Splitter_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TSplitter, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Splitter_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TSplitter, ASibling: TControl) =
  Splitter_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TSplitter, ASibling: TControl) =
  Splitter_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TSplitter, ASide: TAnchorKind, ASibling: TControl) =
  Splitter_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TSplitter, ATheAlign: TAlign, ASpace: int32) =
  Splitter_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TSplitter, ASpace: int32) =
  Splitter_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TSplitter, ASize: int32): int32 =
  return Splitter_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TSplitter, ASize: int32): int32 =
  return Splitter_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TSplitter, ASize: int32): int32 =
  return Splitter_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TSplitter, ASize: int32): int32 =
  return Splitter_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TSplitter, ASize: int32): int32 =
  return Splitter_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TSplitter, ASize: int32): int32 =
  return Splitter_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TSplitter, ASize: int32): int32 =
  return Splitter_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TSplitter, ASize: int32): int32 =
  return Splitter_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TSplitter, ASize: int32): int32 =
  return Splitter_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TSplitter, ASize: int32): int32 =
  return Splitter_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TSplitter, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  Splitter_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TSplitter, ADesignTimePPI: int32) =
  Splitter_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TSplitter, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  Splitter_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc ResizeAnchor*(this: TSplitter): TAnchorKind  =
  return Splitter_GetResizeAnchor(this.Instance)

proc `ResizeAnchor=`*(this: TSplitter, AValue: TAnchorKind)  =
  Splitter_SetResizeAnchor(this.Instance, AValue)

proc Canvas*(this: TSplitter): TCanvas  =
  return Splitter_GetCanvas(this.Instance).AsCanvas

proc Align*(this: TSplitter): TAlign  =
  return Splitter_GetAlign(this.Instance)

proc `Align=`*(this: TSplitter, AValue: TAlign)  =
  Splitter_SetAlign(this.Instance, AValue)

proc Color*(this: TSplitter): TColor  =
  return Splitter_GetColor(this.Instance)

proc `Color=`*(this: TSplitter, AValue: TColor)  =
  Splitter_SetColor(this.Instance, AValue)

proc Cursor*(this: TSplitter): TCursor  =
  return Splitter_GetCursor(this.Instance)

proc `Cursor=`*(this: TSplitter, AValue: TCursor)  =
  Splitter_SetCursor(this.Instance, AValue)

proc Constraints*(this: TSplitter): TSizeConstraints  =
  return Splitter_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TSplitter, AValue: TSizeConstraints)  =
  Splitter_SetConstraints(this.Instance, CheckPtr(AValue))

proc MinSize*(this: TSplitter): int32  =
  return Splitter_GetMinSize(this.Instance)

proc `MinSize=`*(this: TSplitter, AValue: int32)  =
  Splitter_SetMinSize(this.Instance, AValue)

proc ParentColor*(this: TSplitter): bool  =
  return Splitter_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TSplitter, AValue: bool)  =
  Splitter_SetParentColor(this.Instance, AValue)

proc Visible*(this: TSplitter): bool  =
  return Splitter_GetVisible(this.Instance)

proc `Visible=`*(this: TSplitter, AValue: bool)  =
  Splitter_SetVisible(this.Instance, AValue)

proc Width*(this: TSplitter): int32  =
  return Splitter_GetWidth(this.Instance)

proc `Width=`*(this: TSplitter, AValue: int32)  =
  Splitter_SetWidth(this.Instance, AValue)

proc `OnPaint=`*(this: TSplitter, AEventId: TNotifyEvent)  =
  Splitter_SetOnPaint(this.Instance, AEventId)

proc Enabled*(this: TSplitter): bool  =
  return Splitter_GetEnabled(this.Instance)

proc `Enabled=`*(this: TSplitter, AValue: bool)  =
  Splitter_SetEnabled(this.Instance, AValue)

proc Action*(this: TSplitter): TAction  =
  return Splitter_GetAction(this.Instance).AsAction

proc `Action=`*(this: TSplitter, AValue: TAction)  =
  Splitter_SetAction(this.Instance, CheckPtr(AValue))

proc Anchors*(this: TSplitter): TAnchors  =
  return Splitter_GetAnchors(this.Instance)

proc `Anchors=`*(this: TSplitter, AValue: TAnchors)  =
  Splitter_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TSplitter): TBiDiMode  =
  return Splitter_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TSplitter, AValue: TBiDiMode)  =
  Splitter_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TSplitter): TRect  =
  Splitter_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TSplitter, AValue: TRect)  =
  var ps1 = AValue
  Splitter_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TSplitter): int32  =
  return Splitter_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TSplitter, AValue: int32)  =
  Splitter_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TSplitter): TPoint  =
  Splitter_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TSplitter): TRect  =
  Splitter_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TSplitter): int32  =
  return Splitter_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TSplitter, AValue: int32)  =
  Splitter_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TSplitter): TControlState  =
  return Splitter_GetControlState(this.Instance)

proc `ControlState=`*(this: TSplitter, AValue: TControlState)  =
  Splitter_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TSplitter): TControlStyle  =
  return Splitter_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TSplitter, AValue: TControlStyle)  =
  Splitter_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TSplitter): bool  =
  return Splitter_GetFloating(this.Instance)

proc ShowHint*(this: TSplitter): bool  =
  return Splitter_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TSplitter, AValue: bool)  =
  Splitter_SetShowHint(this.Instance, AValue)

proc Parent*(this: TSplitter): TWinControl  =
  return Splitter_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TSplitter, AValue: TWinControl)  =
  Splitter_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TSplitter): int32  =
  return Splitter_GetLeft(this.Instance)

proc `Left=`*(this: TSplitter, AValue: int32)  =
  Splitter_SetLeft(this.Instance, AValue)

proc Top*(this: TSplitter): int32  =
  return Splitter_GetTop(this.Instance)

proc `Top=`*(this: TSplitter, AValue: int32)  =
  Splitter_SetTop(this.Instance, AValue)

proc Height*(this: TSplitter): int32  =
  return Splitter_GetHeight(this.Instance)

proc `Height=`*(this: TSplitter, AValue: int32)  =
  Splitter_SetHeight(this.Instance, AValue)

proc Hint*(this: TSplitter): string  =
  return $Splitter_GetHint(this.Instance)

proc `Hint=`*(this: TSplitter, AValue: string)  =
  Splitter_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TSplitter): int32  =
  return Splitter_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TSplitter): int32  =
  return Splitter_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TSplitter, AValue: int32)  =
  Splitter_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TSplitter): TComponent  =
  return Splitter_GetOwner(this.Instance).AsComponent

proc Name*(this: TSplitter): string  =
  return $Splitter_GetName(this.Instance)

proc `Name=`*(this: TSplitter, AValue: string)  =
  Splitter_SetName(this.Instance, AValue)

proc Tag*(this: TSplitter): int  =
  return Splitter_GetTag(this.Instance)

proc `Tag=`*(this: TSplitter, AValue: int)  =
  Splitter_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TSplitter): TAnchorSide  =
  return Splitter_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TSplitter, AValue: TAnchorSide)  =
  Splitter_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TSplitter): TAnchorSide  =
  return Splitter_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TSplitter, AValue: TAnchorSide)  =
  Splitter_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TSplitter): TAnchorSide  =
  return Splitter_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TSplitter, AValue: TAnchorSide)  =
  Splitter_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TSplitter): TAnchorSide  =
  return Splitter_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TSplitter, AValue: TAnchorSide)  =
  Splitter_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TSplitter): TControlBorderSpacing  =
  return Splitter_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TSplitter, AValue: TControlBorderSpacing)  =
  Splitter_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TSplitter, AIndex: int32): TComponent  =
  return Splitter_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TSplitter, AKind: TAnchorKind): TAnchorSide  =
  return Splitter_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TSplitterClass*(): TClass = Splitter_StaticClassType()


#------------------------- TRadioGroup -------------------------

proc Free*(this: TRadioGroup) = defaultFree: RadioGroup_Free

proc NewRadioGroup*(AOwner: TComponent): TRadioGroup =
  new(result)
  result.Instance = RadioGroup_Create(CheckPtr(AOwner))

proc FlipChildren*(this: TRadioGroup, AllLevels: bool) =
  RadioGroup_FlipChildren(this.Instance, AllLevels)

proc CanFocus*(this: TRadioGroup): bool =
  return RadioGroup_CanFocus(this.Instance)

proc ContainsControl*(this: TRadioGroup, Control: TControl): bool =
  return RadioGroup_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TRadioGroup, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return RadioGroup_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TRadioGroup) =
  RadioGroup_DisableAlign(this.Instance)

proc EnableAlign*(this: TRadioGroup) =
  RadioGroup_EnableAlign(this.Instance)

proc FindChildControl*(this: TRadioGroup, ControlName: string): TControl =
  return RadioGroup_FindChildControl(this.Instance, ControlName).AsControl

proc Focused*(this: TRadioGroup): bool =
  return RadioGroup_Focused(this.Instance)

proc HandleAllocated*(this: TRadioGroup): bool =
  return RadioGroup_HandleAllocated(this.Instance)

proc InsertControl*(this: TRadioGroup, AControl: TControl) =
  RadioGroup_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TRadioGroup) =
  RadioGroup_Invalidate(this.Instance)

proc PaintTo*(this: TRadioGroup, DC: HDC, X: int32, Y: int32) =
  RadioGroup_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TRadioGroup, AControl: TControl) =
  RadioGroup_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TRadioGroup) =
  RadioGroup_Realign(this.Instance)

proc Repaint*(this: TRadioGroup) =
  RadioGroup_Repaint(this.Instance)

proc ScaleBy*(this: TRadioGroup, M: int32, D: int32) =
  RadioGroup_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TRadioGroup, DeltaX: int32, DeltaY: int32) =
  RadioGroup_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TRadioGroup, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  RadioGroup_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TRadioGroup) =
  RadioGroup_SetFocus(this.Instance)

proc Update*(this: TRadioGroup) =
  RadioGroup_Update(this.Instance)

proc BringToFront*(this: TRadioGroup) =
  RadioGroup_BringToFront(this.Instance)

proc ClientToScreen*(this: TRadioGroup, Point: TPoint): TPoint =
  var ps1 = Point
  RadioGroup_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TRadioGroup, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  RadioGroup_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TRadioGroup): bool =
  return RadioGroup_Dragging(this.Instance)

proc HasParent*(this: TRadioGroup): bool =
  return RadioGroup_HasParent(this.Instance)

proc Hide*(this: TRadioGroup) =
  RadioGroup_Hide(this.Instance)

proc Perform*(this: TRadioGroup, Msg: uint32, WParam: uint, LParam: int): int =
  return RadioGroup_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TRadioGroup) =
  RadioGroup_Refresh(this.Instance)

proc ScreenToClient*(this: TRadioGroup, Point: TPoint): TPoint =
  var ps1 = Point
  RadioGroup_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TRadioGroup, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  RadioGroup_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TRadioGroup) =
  RadioGroup_SendToBack(this.Instance)

proc Show*(this: TRadioGroup) =
  RadioGroup_Show(this.Instance)

proc GetTextBuf*(this: TRadioGroup, Buffer: string, BufSize: int32): int32 =
  return RadioGroup_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TRadioGroup): int32 =
  return RadioGroup_GetTextLen(this.Instance)

proc SetTextBuf*(this: TRadioGroup, Buffer: string) =
  RadioGroup_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TRadioGroup, AName: string): TComponent =
  return RadioGroup_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TRadioGroup): string =
  return $RadioGroup_GetNamePath(this.Instance)

proc Assign*(this: TRadioGroup, Source: TObject) =
  RadioGroup_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TRadioGroup): TClass =
  return RadioGroup_ClassType(this.Instance)

proc ClassName*(this: TRadioGroup): string =
  return $RadioGroup_ClassName(this.Instance)

proc InstanceSize*(this: TRadioGroup): int32 =
  return RadioGroup_InstanceSize(this.Instance)

proc InheritsFrom*(this: TRadioGroup, AClass: TClass): bool =
  return RadioGroup_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TRadioGroup, Obj: TObject): bool =
  return RadioGroup_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TRadioGroup): int32 =
  return RadioGroup_GetHashCode(this.Instance)

proc ToString*(this: TRadioGroup): string =
  return $RadioGroup_ToString(this.Instance)

proc AnchorToNeighbour*(this: TRadioGroup, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  RadioGroup_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TRadioGroup, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  RadioGroup_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TRadioGroup, ASibling: TControl) =
  RadioGroup_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TRadioGroup, ASibling: TControl) =
  RadioGroup_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TRadioGroup, ASide: TAnchorKind, ASibling: TControl) =
  RadioGroup_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TRadioGroup, ATheAlign: TAlign, ASpace: int32) =
  RadioGroup_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TRadioGroup, ASpace: int32) =
  RadioGroup_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TRadioGroup, ASize: int32): int32 =
  return RadioGroup_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TRadioGroup, ASize: int32): int32 =
  return RadioGroup_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TRadioGroup, ASize: int32): int32 =
  return RadioGroup_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TRadioGroup, ASize: int32): int32 =
  return RadioGroup_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TRadioGroup, ASize: int32): int32 =
  return RadioGroup_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TRadioGroup, ASize: int32): int32 =
  return RadioGroup_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TRadioGroup, ASize: int32): int32 =
  return RadioGroup_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TRadioGroup, ASize: int32): int32 =
  return RadioGroup_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TRadioGroup, ASize: int32): int32 =
  return RadioGroup_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TRadioGroup, ASize: int32): int32 =
  return RadioGroup_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TRadioGroup, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  RadioGroup_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TRadioGroup, ADesignTimePPI: int32) =
  RadioGroup_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TRadioGroup, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  RadioGroup_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TRadioGroup): TAlign  =
  return RadioGroup_GetAlign(this.Instance)

proc `Align=`*(this: TRadioGroup, AValue: TAlign)  =
  RadioGroup_SetAlign(this.Instance, AValue)

proc Anchors*(this: TRadioGroup): TAnchors  =
  return RadioGroup_GetAnchors(this.Instance)

proc `Anchors=`*(this: TRadioGroup, AValue: TAnchors)  =
  RadioGroup_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TRadioGroup): TBiDiMode  =
  return RadioGroup_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TRadioGroup, AValue: TBiDiMode)  =
  RadioGroup_SetBiDiMode(this.Instance, AValue)

proc Caption*(this: TRadioGroup): string  =
  return $RadioGroup_GetCaption(this.Instance)

proc `Caption=`*(this: TRadioGroup, AValue: string)  =
  RadioGroup_SetCaption(this.Instance, AValue)

proc Color*(this: TRadioGroup): TColor  =
  return RadioGroup_GetColor(this.Instance)

proc `Color=`*(this: TRadioGroup, AValue: TColor)  =
  RadioGroup_SetColor(this.Instance, AValue)

proc Columns*(this: TRadioGroup): int32  =
  return RadioGroup_GetColumns(this.Instance)

proc `Columns=`*(this: TRadioGroup, AValue: int32)  =
  RadioGroup_SetColumns(this.Instance, AValue)

proc DoubleBuffered*(this: TRadioGroup): bool  =
  return RadioGroup_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TRadioGroup, AValue: bool)  =
  RadioGroup_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TRadioGroup): TCursor  =
  return RadioGroup_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TRadioGroup, AValue: TCursor)  =
  RadioGroup_SetDragCursor(this.Instance, AValue)

proc DragMode*(this: TRadioGroup): TDragMode  =
  return RadioGroup_GetDragMode(this.Instance)

proc `DragMode=`*(this: TRadioGroup, AValue: TDragMode)  =
  RadioGroup_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TRadioGroup): bool  =
  return RadioGroup_GetEnabled(this.Instance)

proc `Enabled=`*(this: TRadioGroup, AValue: bool)  =
  RadioGroup_SetEnabled(this.Instance, AValue)

proc Font*(this: TRadioGroup): TFont  =
  return RadioGroup_GetFont(this.Instance).AsFont

proc `Font=`*(this: TRadioGroup, AValue: TFont)  =
  RadioGroup_SetFont(this.Instance, CheckPtr(AValue))

proc ItemIndex*(this: TRadioGroup): int32  =
  return RadioGroup_GetItemIndex(this.Instance)

proc `ItemIndex=`*(this: TRadioGroup, AValue: int32)  =
  RadioGroup_SetItemIndex(this.Instance, AValue)

proc Items*(this: TRadioGroup): TStrings  =
  return RadioGroup_GetItems(this.Instance).AsStrings

proc `Items=`*(this: TRadioGroup, AValue: TStrings)  =
  RadioGroup_SetItems(this.Instance, CheckPtr(AValue))

proc Constraints*(this: TRadioGroup): TSizeConstraints  =
  return RadioGroup_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TRadioGroup, AValue: TSizeConstraints)  =
  RadioGroup_SetConstraints(this.Instance, CheckPtr(AValue))

proc ParentColor*(this: TRadioGroup): bool  =
  return RadioGroup_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TRadioGroup, AValue: bool)  =
  RadioGroup_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TRadioGroup): bool  =
  return RadioGroup_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TRadioGroup, AValue: bool)  =
  RadioGroup_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TRadioGroup): bool  =
  return RadioGroup_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TRadioGroup, AValue: bool)  =
  RadioGroup_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TRadioGroup): bool  =
  return RadioGroup_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TRadioGroup, AValue: bool)  =
  RadioGroup_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TRadioGroup): TPopupMenu  =
  return RadioGroup_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TRadioGroup, AValue: TPopupMenu)  =
  RadioGroup_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TRadioGroup): bool  =
  return RadioGroup_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TRadioGroup, AValue: bool)  =
  RadioGroup_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TRadioGroup): TTabOrder  =
  return RadioGroup_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TRadioGroup, AValue: TTabOrder)  =
  RadioGroup_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TRadioGroup): bool  =
  return RadioGroup_GetTabStop(this.Instance)

proc `TabStop=`*(this: TRadioGroup, AValue: bool)  =
  RadioGroup_SetTabStop(this.Instance, AValue)

proc Visible*(this: TRadioGroup): bool  =
  return RadioGroup_GetVisible(this.Instance)

proc `Visible=`*(this: TRadioGroup, AValue: bool)  =
  RadioGroup_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TRadioGroup, AEventId: TNotifyEvent)  =
  RadioGroup_SetOnClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TRadioGroup, AEventId: TDragDropEvent)  =
  RadioGroup_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TRadioGroup, AEventId: TDragOverEvent)  =
  RadioGroup_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TRadioGroup, AEventId: TEndDragEvent)  =
  RadioGroup_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TRadioGroup, AEventId: TNotifyEvent)  =
  RadioGroup_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TRadioGroup, AEventId: TNotifyEvent)  =
  RadioGroup_SetOnExit(this.Instance, AEventId)

proc DockClientCount*(this: TRadioGroup): int32  =
  return RadioGroup_GetDockClientCount(this.Instance)

proc DockSite*(this: TRadioGroup): bool  =
  return RadioGroup_GetDockSite(this.Instance)

proc `DockSite=`*(this: TRadioGroup, AValue: bool)  =
  RadioGroup_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TRadioGroup): bool  =
  return RadioGroup_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TRadioGroup): int32  =
  return RadioGroup_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TRadioGroup): TBrush  =
  return RadioGroup_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TRadioGroup): int32  =
  return RadioGroup_GetControlCount(this.Instance)

proc Handle*(this: TRadioGroup): HWND  =
  return RadioGroup_GetHandle(this.Instance)

proc ParentWindow*(this: TRadioGroup): HWND  =
  return RadioGroup_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TRadioGroup, AValue: HWND)  =
  RadioGroup_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TRadioGroup): bool  =
  return RadioGroup_GetShowing(this.Instance)

proc UseDockManager*(this: TRadioGroup): bool  =
  return RadioGroup_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TRadioGroup, AValue: bool)  =
  RadioGroup_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TRadioGroup): TAction  =
  return RadioGroup_GetAction(this.Instance).AsAction

proc `Action=`*(this: TRadioGroup, AValue: TAction)  =
  RadioGroup_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TRadioGroup): TRect  =
  RadioGroup_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TRadioGroup, AValue: TRect)  =
  var ps1 = AValue
  RadioGroup_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TRadioGroup): int32  =
  return RadioGroup_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TRadioGroup, AValue: int32)  =
  RadioGroup_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TRadioGroup): TPoint  =
  RadioGroup_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TRadioGroup): TRect  =
  RadioGroup_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TRadioGroup): int32  =
  return RadioGroup_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TRadioGroup, AValue: int32)  =
  RadioGroup_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TRadioGroup): TControlState  =
  return RadioGroup_GetControlState(this.Instance)

proc `ControlState=`*(this: TRadioGroup, AValue: TControlState)  =
  RadioGroup_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TRadioGroup): TControlStyle  =
  return RadioGroup_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TRadioGroup, AValue: TControlStyle)  =
  RadioGroup_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TRadioGroup): bool  =
  return RadioGroup_GetFloating(this.Instance)

proc Parent*(this: TRadioGroup): TWinControl  =
  return RadioGroup_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TRadioGroup, AValue: TWinControl)  =
  RadioGroup_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TRadioGroup): int32  =
  return RadioGroup_GetLeft(this.Instance)

proc `Left=`*(this: TRadioGroup, AValue: int32)  =
  RadioGroup_SetLeft(this.Instance, AValue)

proc Top*(this: TRadioGroup): int32  =
  return RadioGroup_GetTop(this.Instance)

proc `Top=`*(this: TRadioGroup, AValue: int32)  =
  RadioGroup_SetTop(this.Instance, AValue)

proc Width*(this: TRadioGroup): int32  =
  return RadioGroup_GetWidth(this.Instance)

proc `Width=`*(this: TRadioGroup, AValue: int32)  =
  RadioGroup_SetWidth(this.Instance, AValue)

proc Height*(this: TRadioGroup): int32  =
  return RadioGroup_GetHeight(this.Instance)

proc `Height=`*(this: TRadioGroup, AValue: int32)  =
  RadioGroup_SetHeight(this.Instance, AValue)

proc Cursor*(this: TRadioGroup): TCursor  =
  return RadioGroup_GetCursor(this.Instance)

proc `Cursor=`*(this: TRadioGroup, AValue: TCursor)  =
  RadioGroup_SetCursor(this.Instance, AValue)

proc Hint*(this: TRadioGroup): string  =
  return $RadioGroup_GetHint(this.Instance)

proc `Hint=`*(this: TRadioGroup, AValue: string)  =
  RadioGroup_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TRadioGroup): int32  =
  return RadioGroup_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TRadioGroup): int32  =
  return RadioGroup_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TRadioGroup, AValue: int32)  =
  RadioGroup_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TRadioGroup): TComponent  =
  return RadioGroup_GetOwner(this.Instance).AsComponent

proc Name*(this: TRadioGroup): string  =
  return $RadioGroup_GetName(this.Instance)

proc `Name=`*(this: TRadioGroup, AValue: string)  =
  RadioGroup_SetName(this.Instance, AValue)

proc Tag*(this: TRadioGroup): int  =
  return RadioGroup_GetTag(this.Instance)

proc `Tag=`*(this: TRadioGroup, AValue: int)  =
  RadioGroup_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TRadioGroup): TAnchorSide  =
  return RadioGroup_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TRadioGroup, AValue: TAnchorSide)  =
  RadioGroup_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TRadioGroup): TAnchorSide  =
  return RadioGroup_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TRadioGroup, AValue: TAnchorSide)  =
  RadioGroup_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TRadioGroup): TAnchorSide  =
  return RadioGroup_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TRadioGroup, AValue: TAnchorSide)  =
  RadioGroup_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TRadioGroup): TAnchorSide  =
  return RadioGroup_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TRadioGroup, AValue: TAnchorSide)  =
  RadioGroup_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TRadioGroup): TControlChildSizing  =
  return RadioGroup_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TRadioGroup, AValue: TControlChildSizing)  =
  RadioGroup_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TRadioGroup): TControlBorderSpacing  =
  return RadioGroup_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TRadioGroup, AValue: TControlBorderSpacing)  =
  RadioGroup_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TRadioGroup, Index: int32): TControl  =
  return RadioGroup_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TRadioGroup, Index: int32): TControl  =
  return RadioGroup_GetControls(this.Instance, Index).AsControl

proc Components*(this: TRadioGroup, AIndex: int32): TComponent  =
  return RadioGroup_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TRadioGroup, AKind: TAnchorKind): TAnchorSide  =
  return RadioGroup_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TRadioGroupClass*(): TClass = RadioGroup_StaticClassType()


#------------------------- TStaticText -------------------------

proc Free*(this: TStaticText) = defaultFree: StaticText_Free

proc NewStaticText*(AOwner: TComponent): TStaticText =
  new(result)
  result.Instance = StaticText_Create(CheckPtr(AOwner))

proc CanFocus*(this: TStaticText): bool =
  return StaticText_CanFocus(this.Instance)

proc ContainsControl*(this: TStaticText, Control: TControl): bool =
  return StaticText_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TStaticText, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return StaticText_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TStaticText) =
  StaticText_DisableAlign(this.Instance)

proc EnableAlign*(this: TStaticText) =
  StaticText_EnableAlign(this.Instance)

proc FindChildControl*(this: TStaticText, ControlName: string): TControl =
  return StaticText_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TStaticText, AllLevels: bool) =
  StaticText_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TStaticText): bool =
  return StaticText_Focused(this.Instance)

proc HandleAllocated*(this: TStaticText): bool =
  return StaticText_HandleAllocated(this.Instance)

proc InsertControl*(this: TStaticText, AControl: TControl) =
  StaticText_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TStaticText) =
  StaticText_Invalidate(this.Instance)

proc PaintTo*(this: TStaticText, DC: HDC, X: int32, Y: int32) =
  StaticText_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TStaticText, AControl: TControl) =
  StaticText_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TStaticText) =
  StaticText_Realign(this.Instance)

proc Repaint*(this: TStaticText) =
  StaticText_Repaint(this.Instance)

proc ScaleBy*(this: TStaticText, M: int32, D: int32) =
  StaticText_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TStaticText, DeltaX: int32, DeltaY: int32) =
  StaticText_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TStaticText, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  StaticText_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TStaticText) =
  StaticText_SetFocus(this.Instance)

proc Update*(this: TStaticText) =
  StaticText_Update(this.Instance)

proc BringToFront*(this: TStaticText) =
  StaticText_BringToFront(this.Instance)

proc ClientToScreen*(this: TStaticText, Point: TPoint): TPoint =
  var ps1 = Point
  StaticText_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TStaticText, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  StaticText_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TStaticText): bool =
  return StaticText_Dragging(this.Instance)

proc HasParent*(this: TStaticText): bool =
  return StaticText_HasParent(this.Instance)

proc Hide*(this: TStaticText) =
  StaticText_Hide(this.Instance)

proc Perform*(this: TStaticText, Msg: uint32, WParam: uint, LParam: int): int =
  return StaticText_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TStaticText) =
  StaticText_Refresh(this.Instance)

proc ScreenToClient*(this: TStaticText, Point: TPoint): TPoint =
  var ps1 = Point
  StaticText_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TStaticText, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  StaticText_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TStaticText) =
  StaticText_SendToBack(this.Instance)

proc Show*(this: TStaticText) =
  StaticText_Show(this.Instance)

proc GetTextBuf*(this: TStaticText, Buffer: string, BufSize: int32): int32 =
  return StaticText_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TStaticText): int32 =
  return StaticText_GetTextLen(this.Instance)

proc SetTextBuf*(this: TStaticText, Buffer: string) =
  StaticText_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TStaticText, AName: string): TComponent =
  return StaticText_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TStaticText): string =
  return $StaticText_GetNamePath(this.Instance)

proc Assign*(this: TStaticText, Source: TObject) =
  StaticText_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TStaticText): TClass =
  return StaticText_ClassType(this.Instance)

proc ClassName*(this: TStaticText): string =
  return $StaticText_ClassName(this.Instance)

proc InstanceSize*(this: TStaticText): int32 =
  return StaticText_InstanceSize(this.Instance)

proc InheritsFrom*(this: TStaticText, AClass: TClass): bool =
  return StaticText_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TStaticText, Obj: TObject): bool =
  return StaticText_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TStaticText): int32 =
  return StaticText_GetHashCode(this.Instance)

proc ToString*(this: TStaticText): string =
  return $StaticText_ToString(this.Instance)

proc AnchorToNeighbour*(this: TStaticText, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  StaticText_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TStaticText, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  StaticText_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TStaticText, ASibling: TControl) =
  StaticText_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TStaticText, ASibling: TControl) =
  StaticText_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TStaticText, ASide: TAnchorKind, ASibling: TControl) =
  StaticText_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TStaticText, ATheAlign: TAlign, ASpace: int32) =
  StaticText_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TStaticText, ASpace: int32) =
  StaticText_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TStaticText, ASize: int32): int32 =
  return StaticText_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TStaticText, ASize: int32): int32 =
  return StaticText_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TStaticText, ASize: int32): int32 =
  return StaticText_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TStaticText, ASize: int32): int32 =
  return StaticText_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TStaticText, ASize: int32): int32 =
  return StaticText_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TStaticText, ASize: int32): int32 =
  return StaticText_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TStaticText, ASize: int32): int32 =
  return StaticText_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TStaticText, ASize: int32): int32 =
  return StaticText_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TStaticText, ASize: int32): int32 =
  return StaticText_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TStaticText, ASize: int32): int32 =
  return StaticText_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TStaticText, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  StaticText_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TStaticText, ADesignTimePPI: int32) =
  StaticText_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TStaticText, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  StaticText_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TStaticText): TAlign  =
  return StaticText_GetAlign(this.Instance)

proc `Align=`*(this: TStaticText, AValue: TAlign)  =
  StaticText_SetAlign(this.Instance, AValue)

proc Alignment*(this: TStaticText): TAlignment  =
  return StaticText_GetAlignment(this.Instance)

proc `Alignment=`*(this: TStaticText, AValue: TAlignment)  =
  StaticText_SetAlignment(this.Instance, AValue)

proc Anchors*(this: TStaticText): TAnchors  =
  return StaticText_GetAnchors(this.Instance)

proc `Anchors=`*(this: TStaticText, AValue: TAnchors)  =
  StaticText_SetAnchors(this.Instance, AValue)

proc AutoSize*(this: TStaticText): bool  =
  return StaticText_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetAutoSize(this.Instance, AValue)

proc BiDiMode*(this: TStaticText): TBiDiMode  =
  return StaticText_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TStaticText, AValue: TBiDiMode)  =
  StaticText_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TStaticText): TStaticBorderStyle  =
  return StaticText_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TStaticText, AValue: TStaticBorderStyle)  =
  StaticText_SetBorderStyle(this.Instance, AValue)

proc Caption*(this: TStaticText): string  =
  return $StaticText_GetCaption(this.Instance)

proc `Caption=`*(this: TStaticText, AValue: string)  =
  StaticText_SetCaption(this.Instance, AValue)

proc Color*(this: TStaticText): TColor  =
  return StaticText_GetColor(this.Instance)

proc `Color=`*(this: TStaticText, AValue: TColor)  =
  StaticText_SetColor(this.Instance, AValue)

proc Constraints*(this: TStaticText): TSizeConstraints  =
  return StaticText_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TStaticText, AValue: TSizeConstraints)  =
  StaticText_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TStaticText): bool  =
  return StaticText_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TStaticText): TCursor  =
  return StaticText_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TStaticText, AValue: TCursor)  =
  StaticText_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TStaticText): TDragKind  =
  return StaticText_GetDragKind(this.Instance)

proc `DragKind=`*(this: TStaticText, AValue: TDragKind)  =
  StaticText_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TStaticText): TDragMode  =
  return StaticText_GetDragMode(this.Instance)

proc `DragMode=`*(this: TStaticText, AValue: TDragMode)  =
  StaticText_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TStaticText): bool  =
  return StaticText_GetEnabled(this.Instance)

proc `Enabled=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetEnabled(this.Instance, AValue)

proc FocusControl*(this: TStaticText): TWinControl  =
  return StaticText_GetFocusControl(this.Instance).AsWinControl

proc `FocusControl=`*(this: TStaticText, AValue: TWinControl)  =
  StaticText_SetFocusControl(this.Instance, CheckPtr(AValue))

proc Font*(this: TStaticText): TFont  =
  return StaticText_GetFont(this.Instance).AsFont

proc `Font=`*(this: TStaticText, AValue: TFont)  =
  StaticText_SetFont(this.Instance, CheckPtr(AValue))

proc ParentColor*(this: TStaticText): bool  =
  return StaticText_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TStaticText): bool  =
  return StaticText_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TStaticText): bool  =
  return StaticText_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TStaticText): bool  =
  return StaticText_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TStaticText): TPopupMenu  =
  return StaticText_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TStaticText, AValue: TPopupMenu)  =
  StaticText_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowAccelChar*(this: TStaticText): bool  =
  return StaticText_GetShowAccelChar(this.Instance)

proc `ShowAccelChar=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetShowAccelChar(this.Instance, AValue)

proc ShowHint*(this: TStaticText): bool  =
  return StaticText_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TStaticText): TTabOrder  =
  return StaticText_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TStaticText, AValue: TTabOrder)  =
  StaticText_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TStaticText): bool  =
  return StaticText_GetTabStop(this.Instance)

proc `TabStop=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetTabStop(this.Instance, AValue)

proc Transparent*(this: TStaticText): bool  =
  return StaticText_GetTransparent(this.Instance)

proc `Transparent=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetTransparent(this.Instance, AValue)

proc Visible*(this: TStaticText): bool  =
  return StaticText_GetVisible(this.Instance)

proc `Visible=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TStaticText, AEventId: TNotifyEvent)  =
  StaticText_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TStaticText, AEventId: TContextPopupEvent)  =
  StaticText_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TStaticText, AEventId: TNotifyEvent)  =
  StaticText_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TStaticText, AEventId: TDragDropEvent)  =
  StaticText_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TStaticText, AEventId: TDragOverEvent)  =
  StaticText_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TStaticText, AEventId: TEndDragEvent)  =
  StaticText_SetOnEndDrag(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TStaticText, AEventId: TMouseEvent)  =
  StaticText_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TStaticText, AEventId: TNotifyEvent)  =
  StaticText_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TStaticText, AEventId: TNotifyEvent)  =
  StaticText_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TStaticText, AEventId: TMouseMoveEvent)  =
  StaticText_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TStaticText, AEventId: TMouseEvent)  =
  StaticText_SetOnMouseUp(this.Instance, AEventId)

proc DockClientCount*(this: TStaticText): int32  =
  return StaticText_GetDockClientCount(this.Instance)

proc DockSite*(this: TStaticText): bool  =
  return StaticText_GetDockSite(this.Instance)

proc `DockSite=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TStaticText): bool  =
  return StaticText_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TStaticText): int32  =
  return StaticText_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TStaticText): TBrush  =
  return StaticText_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TStaticText): int32  =
  return StaticText_GetControlCount(this.Instance)

proc Handle*(this: TStaticText): HWND  =
  return StaticText_GetHandle(this.Instance)

proc ParentWindow*(this: TStaticText): HWND  =
  return StaticText_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TStaticText, AValue: HWND)  =
  StaticText_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TStaticText): bool  =
  return StaticText_GetShowing(this.Instance)

proc UseDockManager*(this: TStaticText): bool  =
  return StaticText_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TStaticText, AValue: bool)  =
  StaticText_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TStaticText): TAction  =
  return StaticText_GetAction(this.Instance).AsAction

proc `Action=`*(this: TStaticText, AValue: TAction)  =
  StaticText_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TStaticText): TRect  =
  StaticText_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TStaticText, AValue: TRect)  =
  var ps1 = AValue
  StaticText_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TStaticText): int32  =
  return StaticText_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TStaticText, AValue: int32)  =
  StaticText_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TStaticText): TPoint  =
  StaticText_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TStaticText): TRect  =
  StaticText_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TStaticText): int32  =
  return StaticText_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TStaticText, AValue: int32)  =
  StaticText_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TStaticText): TControlState  =
  return StaticText_GetControlState(this.Instance)

proc `ControlState=`*(this: TStaticText, AValue: TControlState)  =
  StaticText_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TStaticText): TControlStyle  =
  return StaticText_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TStaticText, AValue: TControlStyle)  =
  StaticText_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TStaticText): bool  =
  return StaticText_GetFloating(this.Instance)

proc Parent*(this: TStaticText): TWinControl  =
  return StaticText_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TStaticText, AValue: TWinControl)  =
  StaticText_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TStaticText): int32  =
  return StaticText_GetLeft(this.Instance)

proc `Left=`*(this: TStaticText, AValue: int32)  =
  StaticText_SetLeft(this.Instance, AValue)

proc Top*(this: TStaticText): int32  =
  return StaticText_GetTop(this.Instance)

proc `Top=`*(this: TStaticText, AValue: int32)  =
  StaticText_SetTop(this.Instance, AValue)

proc Width*(this: TStaticText): int32  =
  return StaticText_GetWidth(this.Instance)

proc `Width=`*(this: TStaticText, AValue: int32)  =
  StaticText_SetWidth(this.Instance, AValue)

proc Height*(this: TStaticText): int32  =
  return StaticText_GetHeight(this.Instance)

proc `Height=`*(this: TStaticText, AValue: int32)  =
  StaticText_SetHeight(this.Instance, AValue)

proc Cursor*(this: TStaticText): TCursor  =
  return StaticText_GetCursor(this.Instance)

proc `Cursor=`*(this: TStaticText, AValue: TCursor)  =
  StaticText_SetCursor(this.Instance, AValue)

proc Hint*(this: TStaticText): string  =
  return $StaticText_GetHint(this.Instance)

proc `Hint=`*(this: TStaticText, AValue: string)  =
  StaticText_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TStaticText): int32  =
  return StaticText_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TStaticText): int32  =
  return StaticText_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TStaticText, AValue: int32)  =
  StaticText_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TStaticText): TComponent  =
  return StaticText_GetOwner(this.Instance).AsComponent

proc Name*(this: TStaticText): string  =
  return $StaticText_GetName(this.Instance)

proc `Name=`*(this: TStaticText, AValue: string)  =
  StaticText_SetName(this.Instance, AValue)

proc Tag*(this: TStaticText): int  =
  return StaticText_GetTag(this.Instance)

proc `Tag=`*(this: TStaticText, AValue: int)  =
  StaticText_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TStaticText): TAnchorSide  =
  return StaticText_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TStaticText, AValue: TAnchorSide)  =
  StaticText_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TStaticText): TAnchorSide  =
  return StaticText_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TStaticText, AValue: TAnchorSide)  =
  StaticText_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TStaticText): TAnchorSide  =
  return StaticText_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TStaticText, AValue: TAnchorSide)  =
  StaticText_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TStaticText): TAnchorSide  =
  return StaticText_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TStaticText, AValue: TAnchorSide)  =
  StaticText_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TStaticText): TControlChildSizing  =
  return StaticText_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TStaticText, AValue: TControlChildSizing)  =
  StaticText_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TStaticText): TControlBorderSpacing  =
  return StaticText_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TStaticText, AValue: TControlBorderSpacing)  =
  StaticText_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TStaticText, Index: int32): TControl  =
  return StaticText_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TStaticText, Index: int32): TControl  =
  return StaticText_GetControls(this.Instance, Index).AsControl

proc Components*(this: TStaticText, AIndex: int32): TComponent  =
  return StaticText_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TStaticText, AKind: TAnchorKind): TAnchorSide  =
  return StaticText_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TStaticTextClass*(): TClass = StaticText_StaticClassType()


#------------------------- TColorBox -------------------------

proc Free*(this: TColorBox) = defaultFree: ColorBox_Free

proc NewColorBox*(AOwner: TComponent): TColorBox =
  new(result)
  result.Instance = ColorBox_Create(CheckPtr(AOwner))

proc AddItem*(this: TColorBox, Item: string, AObject: TObject)  =
  ColorBox_AddItem(this.Instance, Item, CheckPtr(AObject))

proc Clear*(this: TColorBox)  =
  ColorBox_Clear(this.Instance)

proc ClearSelection*(this: TColorBox)  =
  ColorBox_ClearSelection(this.Instance)

proc DeleteSelected*(this: TColorBox)  =
  ColorBox_DeleteSelected(this.Instance)

proc Focused*(this: TColorBox): bool =
  return ColorBox_Focused(this.Instance)

proc SelectAll*(this: TColorBox)  =
  ColorBox_SelectAll(this.Instance)

proc CanFocus*(this: TColorBox): bool =
  return ColorBox_CanFocus(this.Instance)

proc ContainsControl*(this: TColorBox, Control: TControl): bool =
  return ColorBox_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TColorBox, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return ColorBox_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TColorBox) =
  ColorBox_DisableAlign(this.Instance)

proc EnableAlign*(this: TColorBox) =
  ColorBox_EnableAlign(this.Instance)

proc FindChildControl*(this: TColorBox, ControlName: string): TControl =
  return ColorBox_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TColorBox, AllLevels: bool) =
  ColorBox_FlipChildren(this.Instance, AllLevels)

proc HandleAllocated*(this: TColorBox): bool =
  return ColorBox_HandleAllocated(this.Instance)

proc InsertControl*(this: TColorBox, AControl: TControl) =
  ColorBox_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TColorBox) =
  ColorBox_Invalidate(this.Instance)

proc PaintTo*(this: TColorBox, DC: HDC, X: int32, Y: int32) =
  ColorBox_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TColorBox, AControl: TControl) =
  ColorBox_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TColorBox) =
  ColorBox_Realign(this.Instance)

proc Repaint*(this: TColorBox) =
  ColorBox_Repaint(this.Instance)

proc ScaleBy*(this: TColorBox, M: int32, D: int32) =
  ColorBox_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TColorBox, DeltaX: int32, DeltaY: int32) =
  ColorBox_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TColorBox, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ColorBox_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TColorBox) =
  ColorBox_SetFocus(this.Instance)

proc Update*(this: TColorBox) =
  ColorBox_Update(this.Instance)

proc BringToFront*(this: TColorBox) =
  ColorBox_BringToFront(this.Instance)

proc ClientToScreen*(this: TColorBox, Point: TPoint): TPoint =
  var ps1 = Point
  ColorBox_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TColorBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ColorBox_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TColorBox): bool =
  return ColorBox_Dragging(this.Instance)

proc HasParent*(this: TColorBox): bool =
  return ColorBox_HasParent(this.Instance)

proc Hide*(this: TColorBox) =
  ColorBox_Hide(this.Instance)

proc Perform*(this: TColorBox, Msg: uint32, WParam: uint, LParam: int): int =
  return ColorBox_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TColorBox) =
  ColorBox_Refresh(this.Instance)

proc ScreenToClient*(this: TColorBox, Point: TPoint): TPoint =
  var ps1 = Point
  ColorBox_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TColorBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ColorBox_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TColorBox) =
  ColorBox_SendToBack(this.Instance)

proc Show*(this: TColorBox) =
  ColorBox_Show(this.Instance)

proc GetTextBuf*(this: TColorBox, Buffer: string, BufSize: int32): int32 =
  return ColorBox_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TColorBox): int32 =
  return ColorBox_GetTextLen(this.Instance)

proc SetTextBuf*(this: TColorBox, Buffer: string) =
  ColorBox_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TColorBox, AName: string): TComponent =
  return ColorBox_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TColorBox): string =
  return $ColorBox_GetNamePath(this.Instance)

proc Assign*(this: TColorBox, Source: TObject) =
  ColorBox_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TColorBox): TClass =
  return ColorBox_ClassType(this.Instance)

proc ClassName*(this: TColorBox): string =
  return $ColorBox_ClassName(this.Instance)

proc InstanceSize*(this: TColorBox): int32 =
  return ColorBox_InstanceSize(this.Instance)

proc InheritsFrom*(this: TColorBox, AClass: TClass): bool =
  return ColorBox_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TColorBox, Obj: TObject): bool =
  return ColorBox_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TColorBox): int32 =
  return ColorBox_GetHashCode(this.Instance)

proc ToString*(this: TColorBox): string =
  return $ColorBox_ToString(this.Instance)

proc AnchorToNeighbour*(this: TColorBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ColorBox_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TColorBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ColorBox_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TColorBox, ASibling: TControl) =
  ColorBox_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TColorBox, ASibling: TControl) =
  ColorBox_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TColorBox, ASide: TAnchorKind, ASibling: TControl) =
  ColorBox_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TColorBox, ATheAlign: TAlign, ASpace: int32) =
  ColorBox_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TColorBox, ASpace: int32) =
  ColorBox_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TColorBox, ASize: int32): int32 =
  return ColorBox_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TColorBox, ASize: int32): int32 =
  return ColorBox_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TColorBox, ASize: int32): int32 =
  return ColorBox_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TColorBox, ASize: int32): int32 =
  return ColorBox_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TColorBox, ASize: int32): int32 =
  return ColorBox_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TColorBox, ASize: int32): int32 =
  return ColorBox_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TColorBox, ASize: int32): int32 =
  return ColorBox_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TColorBox, ASize: int32): int32 =
  return ColorBox_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TColorBox, ASize: int32): int32 =
  return ColorBox_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TColorBox, ASize: int32): int32 =
  return ColorBox_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TColorBox, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ColorBox_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TColorBox, ADesignTimePPI: int32) =
  ColorBox_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TColorBox, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ColorBox_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TColorBox): TAlign  =
  return ColorBox_GetAlign(this.Instance)

proc `Align=`*(this: TColorBox, AValue: TAlign)  =
  ColorBox_SetAlign(this.Instance, AValue)

proc AutoComplete*(this: TColorBox): bool  =
  return ColorBox_GetAutoComplete(this.Instance)

proc `AutoComplete=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetAutoComplete(this.Instance, AValue)

proc AutoDropDown*(this: TColorBox): bool  =
  return ColorBox_GetAutoDropDown(this.Instance)

proc `AutoDropDown=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetAutoDropDown(this.Instance, AValue)

proc DefaultColorColor*(this: TColorBox): TColor  =
  return ColorBox_GetDefaultColorColor(this.Instance)

proc `DefaultColorColor=`*(this: TColorBox, AValue: TColor)  =
  ColorBox_SetDefaultColorColor(this.Instance, AValue)

proc NoneColorColor*(this: TColorBox): TColor  =
  return ColorBox_GetNoneColorColor(this.Instance)

proc `NoneColorColor=`*(this: TColorBox, AValue: TColor)  =
  ColorBox_SetNoneColorColor(this.Instance, AValue)

proc Selected*(this: TColorBox): TColor  =
  return ColorBox_GetSelected(this.Instance)

proc `Selected=`*(this: TColorBox, AValue: TColor)  =
  ColorBox_SetSelected(this.Instance, AValue)

proc Style*(this: TColorBox): TColorBoxStyle  =
  return ColorBox_GetStyle(this.Instance)

proc `Style=`*(this: TColorBox, AValue: TColorBoxStyle)  =
  ColorBox_SetStyle(this.Instance, AValue)

proc Anchors*(this: TColorBox): TAnchors  =
  return ColorBox_GetAnchors(this.Instance)

proc `Anchors=`*(this: TColorBox, AValue: TAnchors)  =
  ColorBox_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TColorBox): TBiDiMode  =
  return ColorBox_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TColorBox, AValue: TBiDiMode)  =
  ColorBox_SetBiDiMode(this.Instance, AValue)

proc Color*(this: TColorBox): TColor  =
  return ColorBox_GetColor(this.Instance)

proc `Color=`*(this: TColorBox, AValue: TColor)  =
  ColorBox_SetColor(this.Instance, AValue)

proc Constraints*(this: TColorBox): TSizeConstraints  =
  return ColorBox_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TColorBox, AValue: TSizeConstraints)  =
  ColorBox_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TColorBox): bool  =
  return ColorBox_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetDoubleBuffered(this.Instance, AValue)

proc DropDownCount*(this: TColorBox): int32  =
  return ColorBox_GetDropDownCount(this.Instance)

proc `DropDownCount=`*(this: TColorBox, AValue: int32)  =
  ColorBox_SetDropDownCount(this.Instance, AValue)

proc Enabled*(this: TColorBox): bool  =
  return ColorBox_GetEnabled(this.Instance)

proc `Enabled=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetEnabled(this.Instance, AValue)

proc Font*(this: TColorBox): TFont  =
  return ColorBox_GetFont(this.Instance).AsFont

proc `Font=`*(this: TColorBox, AValue: TFont)  =
  ColorBox_SetFont(this.Instance, CheckPtr(AValue))

proc ItemHeight*(this: TColorBox): int32  =
  return ColorBox_GetItemHeight(this.Instance)

proc `ItemHeight=`*(this: TColorBox, AValue: int32)  =
  ColorBox_SetItemHeight(this.Instance, AValue)

proc ParentColor*(this: TColorBox): bool  =
  return ColorBox_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TColorBox): bool  =
  return ColorBox_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TColorBox): bool  =
  return ColorBox_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TColorBox): bool  =
  return ColorBox_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TColorBox): TPopupMenu  =
  return ColorBox_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TColorBox, AValue: TPopupMenu)  =
  ColorBox_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TColorBox): bool  =
  return ColorBox_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TColorBox): TTabOrder  =
  return ColorBox_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TColorBox, AValue: TTabOrder)  =
  ColorBox_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TColorBox): bool  =
  return ColorBox_GetTabStop(this.Instance)

proc `TabStop=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetTabStop(this.Instance, AValue)

proc Visible*(this: TColorBox): bool  =
  return ColorBox_GetVisible(this.Instance)

proc `Visible=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetVisible(this.Instance, AValue)

proc `OnChange=`*(this: TColorBox, AEventId: TNotifyEvent)  =
  ColorBox_SetOnChange(this.Instance, AEventId)

proc `OnClick=`*(this: TColorBox, AEventId: TNotifyEvent)  =
  ColorBox_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TColorBox, AEventId: TContextPopupEvent)  =
  ColorBox_SetOnContextPopup(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TColorBox, AEventId: TDragDropEvent)  =
  ColorBox_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TColorBox, AEventId: TDragOverEvent)  =
  ColorBox_SetOnDragOver(this.Instance, AEventId)

proc `OnDropDown=`*(this: TColorBox, AEventId: TNotifyEvent)  =
  ColorBox_SetOnDropDown(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TColorBox, AEventId: TEndDragEvent)  =
  ColorBox_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TColorBox, AEventId: TNotifyEvent)  =
  ColorBox_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TColorBox, AEventId: TNotifyEvent)  =
  ColorBox_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TColorBox, AEventId: TKeyEvent)  =
  ColorBox_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TColorBox, AEventId: TKeyPressEvent)  =
  ColorBox_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TColorBox, AEventId: TKeyEvent)  =
  ColorBox_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TColorBox, AEventId: TNotifyEvent)  =
  ColorBox_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TColorBox, AEventId: TNotifyEvent)  =
  ColorBox_SetOnMouseLeave(this.Instance, AEventId)

proc `OnSelect=`*(this: TColorBox, AEventId: TNotifyEvent)  =
  ColorBox_SetOnSelect(this.Instance, AEventId)

proc CharCase*(this: TColorBox): TEditCharCase  =
  return ColorBox_GetCharCase(this.Instance)

proc `CharCase=`*(this: TColorBox, AValue: TEditCharCase)  =
  ColorBox_SetCharCase(this.Instance, AValue)

proc SelText*(this: TColorBox): string  =
  return $ColorBox_GetSelText(this.Instance)

proc `SelText=`*(this: TColorBox, AValue: string)  =
  ColorBox_SetSelText(this.Instance, AValue)

proc Canvas*(this: TColorBox): TCanvas  =
  return ColorBox_GetCanvas(this.Instance).AsCanvas

proc DroppedDown*(this: TColorBox): bool  =
  return ColorBox_GetDroppedDown(this.Instance)

proc `DroppedDown=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetDroppedDown(this.Instance, AValue)

proc Items*(this: TColorBox): TStrings  =
  return ColorBox_GetItems(this.Instance).AsStrings

proc `Items=`*(this: TColorBox, AValue: TStrings)  =
  ColorBox_SetItems(this.Instance, CheckPtr(AValue))

proc SelLength*(this: TColorBox): int32  =
  return ColorBox_GetSelLength(this.Instance)

proc `SelLength=`*(this: TColorBox, AValue: int32)  =
  ColorBox_SetSelLength(this.Instance, AValue)

proc SelStart*(this: TColorBox): int32  =
  return ColorBox_GetSelStart(this.Instance)

proc `SelStart=`*(this: TColorBox, AValue: int32)  =
  ColorBox_SetSelStart(this.Instance, AValue)

proc ItemIndex*(this: TColorBox): int32  =
  return ColorBox_GetItemIndex(this.Instance)

proc `ItemIndex=`*(this: TColorBox, AValue: int32)  =
  ColorBox_SetItemIndex(this.Instance, AValue)

proc DockClientCount*(this: TColorBox): int32  =
  return ColorBox_GetDockClientCount(this.Instance)

proc DockSite*(this: TColorBox): bool  =
  return ColorBox_GetDockSite(this.Instance)

proc `DockSite=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TColorBox): bool  =
  return ColorBox_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TColorBox): int32  =
  return ColorBox_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TColorBox): TBrush  =
  return ColorBox_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TColorBox): int32  =
  return ColorBox_GetControlCount(this.Instance)

proc Handle*(this: TColorBox): HWND  =
  return ColorBox_GetHandle(this.Instance)

proc ParentWindow*(this: TColorBox): HWND  =
  return ColorBox_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TColorBox, AValue: HWND)  =
  ColorBox_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TColorBox): bool  =
  return ColorBox_GetShowing(this.Instance)

proc UseDockManager*(this: TColorBox): bool  =
  return ColorBox_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TColorBox, AValue: bool)  =
  ColorBox_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TColorBox): TAction  =
  return ColorBox_GetAction(this.Instance).AsAction

proc `Action=`*(this: TColorBox, AValue: TAction)  =
  ColorBox_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TColorBox): TRect  =
  ColorBox_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TColorBox, AValue: TRect)  =
  var ps1 = AValue
  ColorBox_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TColorBox): int32  =
  return ColorBox_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TColorBox, AValue: int32)  =
  ColorBox_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TColorBox): TPoint  =
  ColorBox_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TColorBox): TRect  =
  ColorBox_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TColorBox): int32  =
  return ColorBox_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TColorBox, AValue: int32)  =
  ColorBox_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TColorBox): TControlState  =
  return ColorBox_GetControlState(this.Instance)

proc `ControlState=`*(this: TColorBox, AValue: TControlState)  =
  ColorBox_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TColorBox): TControlStyle  =
  return ColorBox_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TColorBox, AValue: TControlStyle)  =
  ColorBox_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TColorBox): bool  =
  return ColorBox_GetFloating(this.Instance)

proc Parent*(this: TColorBox): TWinControl  =
  return ColorBox_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TColorBox, AValue: TWinControl)  =
  ColorBox_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TColorBox): int32  =
  return ColorBox_GetLeft(this.Instance)

proc `Left=`*(this: TColorBox, AValue: int32)  =
  ColorBox_SetLeft(this.Instance, AValue)

proc Top*(this: TColorBox): int32  =
  return ColorBox_GetTop(this.Instance)

proc `Top=`*(this: TColorBox, AValue: int32)  =
  ColorBox_SetTop(this.Instance, AValue)

proc Width*(this: TColorBox): int32  =
  return ColorBox_GetWidth(this.Instance)

proc `Width=`*(this: TColorBox, AValue: int32)  =
  ColorBox_SetWidth(this.Instance, AValue)

proc Height*(this: TColorBox): int32  =
  return ColorBox_GetHeight(this.Instance)

proc `Height=`*(this: TColorBox, AValue: int32)  =
  ColorBox_SetHeight(this.Instance, AValue)

proc Cursor*(this: TColorBox): TCursor  =
  return ColorBox_GetCursor(this.Instance)

proc `Cursor=`*(this: TColorBox, AValue: TCursor)  =
  ColorBox_SetCursor(this.Instance, AValue)

proc Hint*(this: TColorBox): string  =
  return $ColorBox_GetHint(this.Instance)

proc `Hint=`*(this: TColorBox, AValue: string)  =
  ColorBox_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TColorBox): int32  =
  return ColorBox_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TColorBox): int32  =
  return ColorBox_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TColorBox, AValue: int32)  =
  ColorBox_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TColorBox): TComponent  =
  return ColorBox_GetOwner(this.Instance).AsComponent

proc Name*(this: TColorBox): string  =
  return $ColorBox_GetName(this.Instance)

proc `Name=`*(this: TColorBox, AValue: string)  =
  ColorBox_SetName(this.Instance, AValue)

proc Tag*(this: TColorBox): int  =
  return ColorBox_GetTag(this.Instance)

proc `Tag=`*(this: TColorBox, AValue: int)  =
  ColorBox_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TColorBox): TAnchorSide  =
  return ColorBox_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TColorBox, AValue: TAnchorSide)  =
  ColorBox_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TColorBox): TAnchorSide  =
  return ColorBox_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TColorBox, AValue: TAnchorSide)  =
  ColorBox_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TColorBox): TAnchorSide  =
  return ColorBox_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TColorBox, AValue: TAnchorSide)  =
  ColorBox_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TColorBox): TAnchorSide  =
  return ColorBox_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TColorBox, AValue: TAnchorSide)  =
  ColorBox_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TColorBox): TControlChildSizing  =
  return ColorBox_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TColorBox, AValue: TControlChildSizing)  =
  ColorBox_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TColorBox): TControlBorderSpacing  =
  return ColorBox_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TColorBox, AValue: TControlBorderSpacing)  =
  ColorBox_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Colors*(this: TColorBox, Index: int32): TColor  =
  return ColorBox_GetColors(this.Instance, Index)

proc ColorNames*(this: TColorBox, Index: int32): string  =
  return $ColorBox_GetColorNames(this.Instance, Index)

proc DockClients*(this: TColorBox, Index: int32): TControl  =
  return ColorBox_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TColorBox, Index: int32): TControl  =
  return ColorBox_GetControls(this.Instance, Index).AsControl

proc Components*(this: TColorBox, AIndex: int32): TComponent  =
  return ColorBox_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TColorBox, AKind: TAnchorKind): TAnchorSide  =
  return ColorBox_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TColorBoxClass*(): TClass = ColorBox_StaticClassType()


#------------------------- TColorListBox -------------------------

proc Free*(this: TColorListBox) = defaultFree: ColorListBox_Free

proc NewColorListBox*(AOwner: TComponent): TColorListBox =
  new(result)
  result.Instance = ColorListBox_Create(CheckPtr(AOwner))

proc AddItem*(this: TColorListBox, Item: string, AObject: TObject)  =
  ColorListBox_AddItem(this.Instance, Item, CheckPtr(AObject))

proc Clear*(this: TColorListBox)  =
  ColorListBox_Clear(this.Instance)

proc ClearSelection*(this: TColorListBox)  =
  ColorListBox_ClearSelection(this.Instance)

proc DeleteSelected*(this: TColorListBox)  =
  ColorListBox_DeleteSelected(this.Instance)

proc ItemAtPos*(this: TColorListBox, Pos: TPoint, Existing: bool): int32  =
  var ps1 = Pos
  return ColorListBox_ItemAtPos(this.Instance, ps1, Existing)

proc ItemRect*(this: TColorListBox, Index: int32): TRect  =
  ColorListBox_ItemRect(this.Instance, Index, result)

proc SelectAll*(this: TColorListBox)  =
  ColorListBox_SelectAll(this.Instance)

proc CanFocus*(this: TColorListBox): bool =
  return ColorListBox_CanFocus(this.Instance)

proc ContainsControl*(this: TColorListBox, Control: TControl): bool =
  return ColorListBox_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TColorListBox, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return ColorListBox_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TColorListBox) =
  ColorListBox_DisableAlign(this.Instance)

proc EnableAlign*(this: TColorListBox) =
  ColorListBox_EnableAlign(this.Instance)

proc FindChildControl*(this: TColorListBox, ControlName: string): TControl =
  return ColorListBox_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TColorListBox, AllLevels: bool) =
  ColorListBox_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TColorListBox): bool =
  return ColorListBox_Focused(this.Instance)

proc HandleAllocated*(this: TColorListBox): bool =
  return ColorListBox_HandleAllocated(this.Instance)

proc InsertControl*(this: TColorListBox, AControl: TControl) =
  ColorListBox_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TColorListBox) =
  ColorListBox_Invalidate(this.Instance)

proc PaintTo*(this: TColorListBox, DC: HDC, X: int32, Y: int32) =
  ColorListBox_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TColorListBox, AControl: TControl) =
  ColorListBox_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TColorListBox) =
  ColorListBox_Realign(this.Instance)

proc Repaint*(this: TColorListBox) =
  ColorListBox_Repaint(this.Instance)

proc ScaleBy*(this: TColorListBox, M: int32, D: int32) =
  ColorListBox_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TColorListBox, DeltaX: int32, DeltaY: int32) =
  ColorListBox_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TColorListBox, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ColorListBox_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TColorListBox) =
  ColorListBox_SetFocus(this.Instance)

proc Update*(this: TColorListBox) =
  ColorListBox_Update(this.Instance)

proc BringToFront*(this: TColorListBox) =
  ColorListBox_BringToFront(this.Instance)

proc ClientToScreen*(this: TColorListBox, Point: TPoint): TPoint =
  var ps1 = Point
  ColorListBox_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TColorListBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ColorListBox_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TColorListBox): bool =
  return ColorListBox_Dragging(this.Instance)

proc HasParent*(this: TColorListBox): bool =
  return ColorListBox_HasParent(this.Instance)

proc Hide*(this: TColorListBox) =
  ColorListBox_Hide(this.Instance)

proc Perform*(this: TColorListBox, Msg: uint32, WParam: uint, LParam: int): int =
  return ColorListBox_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TColorListBox) =
  ColorListBox_Refresh(this.Instance)

proc ScreenToClient*(this: TColorListBox, Point: TPoint): TPoint =
  var ps1 = Point
  ColorListBox_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TColorListBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ColorListBox_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TColorListBox) =
  ColorListBox_SendToBack(this.Instance)

proc Show*(this: TColorListBox) =
  ColorListBox_Show(this.Instance)

proc GetTextBuf*(this: TColorListBox, Buffer: string, BufSize: int32): int32 =
  return ColorListBox_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TColorListBox): int32 =
  return ColorListBox_GetTextLen(this.Instance)

proc SetTextBuf*(this: TColorListBox, Buffer: string) =
  ColorListBox_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TColorListBox, AName: string): TComponent =
  return ColorListBox_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TColorListBox): string =
  return $ColorListBox_GetNamePath(this.Instance)

proc Assign*(this: TColorListBox, Source: TObject) =
  ColorListBox_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TColorListBox): TClass =
  return ColorListBox_ClassType(this.Instance)

proc ClassName*(this: TColorListBox): string =
  return $ColorListBox_ClassName(this.Instance)

proc InstanceSize*(this: TColorListBox): int32 =
  return ColorListBox_InstanceSize(this.Instance)

proc InheritsFrom*(this: TColorListBox, AClass: TClass): bool =
  return ColorListBox_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TColorListBox, Obj: TObject): bool =
  return ColorListBox_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TColorListBox): int32 =
  return ColorListBox_GetHashCode(this.Instance)

proc ToString*(this: TColorListBox): string =
  return $ColorListBox_ToString(this.Instance)

proc AnchorToNeighbour*(this: TColorListBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ColorListBox_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TColorListBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ColorListBox_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TColorListBox, ASibling: TControl) =
  ColorListBox_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TColorListBox, ASibling: TControl) =
  ColorListBox_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TColorListBox, ASide: TAnchorKind, ASibling: TControl) =
  ColorListBox_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TColorListBox, ATheAlign: TAlign, ASpace: int32) =
  ColorListBox_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TColorListBox, ASpace: int32) =
  ColorListBox_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TColorListBox, ASize: int32): int32 =
  return ColorListBox_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TColorListBox, ASize: int32): int32 =
  return ColorListBox_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TColorListBox, ASize: int32): int32 =
  return ColorListBox_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TColorListBox, ASize: int32): int32 =
  return ColorListBox_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TColorListBox, ASize: int32): int32 =
  return ColorListBox_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TColorListBox, ASize: int32): int32 =
  return ColorListBox_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TColorListBox, ASize: int32): int32 =
  return ColorListBox_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TColorListBox, ASize: int32): int32 =
  return ColorListBox_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TColorListBox, ASize: int32): int32 =
  return ColorListBox_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TColorListBox, ASize: int32): int32 =
  return ColorListBox_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TColorListBox, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ColorListBox_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TColorListBox, ADesignTimePPI: int32) =
  ColorListBox_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TColorListBox, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ColorListBox_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TColorListBox): TAlign  =
  return ColorListBox_GetAlign(this.Instance)

proc `Align=`*(this: TColorListBox, AValue: TAlign)  =
  ColorListBox_SetAlign(this.Instance, AValue)

proc DefaultColorColor*(this: TColorListBox): TColor  =
  return ColorListBox_GetDefaultColorColor(this.Instance)

proc `DefaultColorColor=`*(this: TColorListBox, AValue: TColor)  =
  ColorListBox_SetDefaultColorColor(this.Instance, AValue)

proc NoneColorColor*(this: TColorListBox): TColor  =
  return ColorListBox_GetNoneColorColor(this.Instance)

proc `NoneColorColor=`*(this: TColorListBox, AValue: TColor)  =
  ColorListBox_SetNoneColorColor(this.Instance, AValue)

proc Selected*(this: TColorListBox): TColor  =
  return ColorListBox_GetSelected(this.Instance)

proc `Selected=`*(this: TColorListBox, AValue: TColor)  =
  ColorListBox_SetSelected(this.Instance, AValue)

proc Style*(this: TColorListBox): TColorBoxStyle  =
  return ColorListBox_GetStyle(this.Instance)

proc `Style=`*(this: TColorListBox, AValue: TColorBoxStyle)  =
  ColorListBox_SetStyle(this.Instance, AValue)

proc Anchors*(this: TColorListBox): TAnchors  =
  return ColorListBox_GetAnchors(this.Instance)

proc `Anchors=`*(this: TColorListBox, AValue: TAnchors)  =
  ColorListBox_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TColorListBox): TBiDiMode  =
  return ColorListBox_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TColorListBox, AValue: TBiDiMode)  =
  ColorListBox_SetBiDiMode(this.Instance, AValue)

proc Color*(this: TColorListBox): TColor  =
  return ColorListBox_GetColor(this.Instance)

proc `Color=`*(this: TColorListBox, AValue: TColor)  =
  ColorListBox_SetColor(this.Instance, AValue)

proc Constraints*(this: TColorListBox): TSizeConstraints  =
  return ColorListBox_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TColorListBox, AValue: TSizeConstraints)  =
  ColorListBox_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TColorListBox): bool  =
  return ColorListBox_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TColorListBox, AValue: bool)  =
  ColorListBox_SetDoubleBuffered(this.Instance, AValue)

proc Enabled*(this: TColorListBox): bool  =
  return ColorListBox_GetEnabled(this.Instance)

proc `Enabled=`*(this: TColorListBox, AValue: bool)  =
  ColorListBox_SetEnabled(this.Instance, AValue)

proc Font*(this: TColorListBox): TFont  =
  return ColorListBox_GetFont(this.Instance).AsFont

proc `Font=`*(this: TColorListBox, AValue: TFont)  =
  ColorListBox_SetFont(this.Instance, CheckPtr(AValue))

proc ItemHeight*(this: TColorListBox): int32  =
  return ColorListBox_GetItemHeight(this.Instance)

proc `ItemHeight=`*(this: TColorListBox, AValue: int32)  =
  ColorListBox_SetItemHeight(this.Instance, AValue)

proc ParentColor*(this: TColorListBox): bool  =
  return ColorListBox_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TColorListBox, AValue: bool)  =
  ColorListBox_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TColorListBox): bool  =
  return ColorListBox_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TColorListBox, AValue: bool)  =
  ColorListBox_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TColorListBox): bool  =
  return ColorListBox_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TColorListBox, AValue: bool)  =
  ColorListBox_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TColorListBox): bool  =
  return ColorListBox_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TColorListBox, AValue: bool)  =
  ColorListBox_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TColorListBox): TPopupMenu  =
  return ColorListBox_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TColorListBox, AValue: TPopupMenu)  =
  ColorListBox_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TColorListBox): bool  =
  return ColorListBox_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TColorListBox, AValue: bool)  =
  ColorListBox_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TColorListBox): TTabOrder  =
  return ColorListBox_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TColorListBox, AValue: TTabOrder)  =
  ColorListBox_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TColorListBox): bool  =
  return ColorListBox_GetTabStop(this.Instance)

proc `TabStop=`*(this: TColorListBox, AValue: bool)  =
  ColorListBox_SetTabStop(this.Instance, AValue)

proc Visible*(this: TColorListBox): bool  =
  return ColorListBox_GetVisible(this.Instance)

proc `Visible=`*(this: TColorListBox, AValue: bool)  =
  ColorListBox_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TColorListBox, AEventId: TNotifyEvent)  =
  ColorListBox_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TColorListBox, AEventId: TContextPopupEvent)  =
  ColorListBox_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TColorListBox, AEventId: TNotifyEvent)  =
  ColorListBox_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TColorListBox, AEventId: TDragDropEvent)  =
  ColorListBox_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TColorListBox, AEventId: TDragOverEvent)  =
  ColorListBox_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TColorListBox, AEventId: TEndDragEvent)  =
  ColorListBox_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TColorListBox, AEventId: TNotifyEvent)  =
  ColorListBox_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TColorListBox, AEventId: TNotifyEvent)  =
  ColorListBox_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TColorListBox, AEventId: TKeyEvent)  =
  ColorListBox_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TColorListBox, AEventId: TKeyPressEvent)  =
  ColorListBox_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TColorListBox, AEventId: TKeyEvent)  =
  ColorListBox_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TColorListBox, AEventId: TMouseEvent)  =
  ColorListBox_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TColorListBox, AEventId: TNotifyEvent)  =
  ColorListBox_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TColorListBox, AEventId: TNotifyEvent)  =
  ColorListBox_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TColorListBox, AEventId: TMouseMoveEvent)  =
  ColorListBox_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TColorListBox, AEventId: TMouseEvent)  =
  ColorListBox_SetOnMouseUp(this.Instance, AEventId)

proc Canvas*(this: TColorListBox): TCanvas  =
  return ColorListBox_GetCanvas(this.Instance).AsCanvas

proc Count*(this: TColorListBox): int32  =
  return ColorListBox_GetCount(this.Instance)

proc Items*(this: TColorListBox): TStrings  =
  return ColorListBox_GetItems(this.Instance).AsStrings

proc `Items=`*(this: TColorListBox, AValue: TStrings)  =
  ColorListBox_SetItems(this.Instance, CheckPtr(AValue))

proc TopIndex*(this: TColorListBox): int32  =
  return ColorListBox_GetTopIndex(this.Instance)

proc `TopIndex=`*(this: TColorListBox, AValue: int32)  =
  ColorListBox_SetTopIndex(this.Instance, AValue)

proc MultiSelect*(this: TColorListBox): bool  =
  return ColorListBox_GetMultiSelect(this.Instance)

proc `MultiSelect=`*(this: TColorListBox, AValue: bool)  =
  ColorListBox_SetMultiSelect(this.Instance, AValue)

proc SelCount*(this: TColorListBox): int32  =
  return ColorListBox_GetSelCount(this.Instance)

proc ItemIndex*(this: TColorListBox): int32  =
  return ColorListBox_GetItemIndex(this.Instance)

proc `ItemIndex=`*(this: TColorListBox, AValue: int32)  =
  ColorListBox_SetItemIndex(this.Instance, AValue)

proc DockClientCount*(this: TColorListBox): int32  =
  return ColorListBox_GetDockClientCount(this.Instance)

proc DockSite*(this: TColorListBox): bool  =
  return ColorListBox_GetDockSite(this.Instance)

proc `DockSite=`*(this: TColorListBox, AValue: bool)  =
  ColorListBox_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TColorListBox): bool  =
  return ColorListBox_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TColorListBox): int32  =
  return ColorListBox_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TColorListBox): TBrush  =
  return ColorListBox_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TColorListBox): int32  =
  return ColorListBox_GetControlCount(this.Instance)

proc Handle*(this: TColorListBox): HWND  =
  return ColorListBox_GetHandle(this.Instance)

proc ParentWindow*(this: TColorListBox): HWND  =
  return ColorListBox_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TColorListBox, AValue: HWND)  =
  ColorListBox_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TColorListBox): bool  =
  return ColorListBox_GetShowing(this.Instance)

proc UseDockManager*(this: TColorListBox): bool  =
  return ColorListBox_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TColorListBox, AValue: bool)  =
  ColorListBox_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TColorListBox): TAction  =
  return ColorListBox_GetAction(this.Instance).AsAction

proc `Action=`*(this: TColorListBox, AValue: TAction)  =
  ColorListBox_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TColorListBox): TRect  =
  ColorListBox_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TColorListBox, AValue: TRect)  =
  var ps1 = AValue
  ColorListBox_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TColorListBox): int32  =
  return ColorListBox_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TColorListBox, AValue: int32)  =
  ColorListBox_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TColorListBox): TPoint  =
  ColorListBox_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TColorListBox): TRect  =
  ColorListBox_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TColorListBox): int32  =
  return ColorListBox_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TColorListBox, AValue: int32)  =
  ColorListBox_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TColorListBox): TControlState  =
  return ColorListBox_GetControlState(this.Instance)

proc `ControlState=`*(this: TColorListBox, AValue: TControlState)  =
  ColorListBox_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TColorListBox): TControlStyle  =
  return ColorListBox_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TColorListBox, AValue: TControlStyle)  =
  ColorListBox_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TColorListBox): bool  =
  return ColorListBox_GetFloating(this.Instance)

proc Parent*(this: TColorListBox): TWinControl  =
  return ColorListBox_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TColorListBox, AValue: TWinControl)  =
  ColorListBox_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TColorListBox): int32  =
  return ColorListBox_GetLeft(this.Instance)

proc `Left=`*(this: TColorListBox, AValue: int32)  =
  ColorListBox_SetLeft(this.Instance, AValue)

proc Top*(this: TColorListBox): int32  =
  return ColorListBox_GetTop(this.Instance)

proc `Top=`*(this: TColorListBox, AValue: int32)  =
  ColorListBox_SetTop(this.Instance, AValue)

proc Width*(this: TColorListBox): int32  =
  return ColorListBox_GetWidth(this.Instance)

proc `Width=`*(this: TColorListBox, AValue: int32)  =
  ColorListBox_SetWidth(this.Instance, AValue)

proc Height*(this: TColorListBox): int32  =
  return ColorListBox_GetHeight(this.Instance)

proc `Height=`*(this: TColorListBox, AValue: int32)  =
  ColorListBox_SetHeight(this.Instance, AValue)

proc Cursor*(this: TColorListBox): TCursor  =
  return ColorListBox_GetCursor(this.Instance)

proc `Cursor=`*(this: TColorListBox, AValue: TCursor)  =
  ColorListBox_SetCursor(this.Instance, AValue)

proc Hint*(this: TColorListBox): string  =
  return $ColorListBox_GetHint(this.Instance)

proc `Hint=`*(this: TColorListBox, AValue: string)  =
  ColorListBox_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TColorListBox): int32  =
  return ColorListBox_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TColorListBox): int32  =
  return ColorListBox_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TColorListBox, AValue: int32)  =
  ColorListBox_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TColorListBox): TComponent  =
  return ColorListBox_GetOwner(this.Instance).AsComponent

proc Name*(this: TColorListBox): string  =
  return $ColorListBox_GetName(this.Instance)

proc `Name=`*(this: TColorListBox, AValue: string)  =
  ColorListBox_SetName(this.Instance, AValue)

proc Tag*(this: TColorListBox): int  =
  return ColorListBox_GetTag(this.Instance)

proc `Tag=`*(this: TColorListBox, AValue: int)  =
  ColorListBox_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TColorListBox): TAnchorSide  =
  return ColorListBox_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TColorListBox, AValue: TAnchorSide)  =
  ColorListBox_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TColorListBox): TAnchorSide  =
  return ColorListBox_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TColorListBox, AValue: TAnchorSide)  =
  ColorListBox_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TColorListBox): TAnchorSide  =
  return ColorListBox_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TColorListBox, AValue: TAnchorSide)  =
  ColorListBox_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TColorListBox): TAnchorSide  =
  return ColorListBox_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TColorListBox, AValue: TAnchorSide)  =
  ColorListBox_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TColorListBox): TControlChildSizing  =
  return ColorListBox_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TColorListBox, AValue: TControlChildSizing)  =
  ColorListBox_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TColorListBox): TControlBorderSpacing  =
  return ColorListBox_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TColorListBox, AValue: TControlBorderSpacing)  =
  ColorListBox_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Colors*(this: TColorListBox, Index: int32): TColor  =
  return ColorListBox_GetColors(this.Instance, Index)

proc ColorNames*(this: TColorListBox, Index: int32): string  =
  return $ColorListBox_GetColorNames(this.Instance, Index)

proc DockClients*(this: TColorListBox, Index: int32): TControl  =
  return ColorListBox_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TColorListBox, Index: int32): TControl  =
  return ColorListBox_GetControls(this.Instance, Index).AsControl

proc Components*(this: TColorListBox, AIndex: int32): TComponent  =
  return ColorListBox_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TColorListBox, AKind: TAnchorKind): TAnchorSide  =
  return ColorListBox_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TColorListBoxClass*(): TClass = ColorListBox_StaticClassType()


#------------------------- TTrayIcon -------------------------

proc Free*(this: TTrayIcon) = defaultFree: TrayIcon_Free

proc NewTrayIcon*(AOwner: TComponent): TTrayIcon =
  new(result)
  result.Instance = TrayIcon_Create(CheckPtr(AOwner))

proc ShowBalloonHint*(this: TTrayIcon)  =
  TrayIcon_ShowBalloonHint(this.Instance)

proc FindComponent*(this: TTrayIcon, AName: string): TComponent =
  return TrayIcon_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TTrayIcon): string =
  return $TrayIcon_GetNamePath(this.Instance)

proc HasParent*(this: TTrayIcon): bool =
  return TrayIcon_HasParent(this.Instance)

proc Assign*(this: TTrayIcon, Source: TObject) =
  TrayIcon_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TTrayIcon): TClass =
  return TrayIcon_ClassType(this.Instance)

proc ClassName*(this: TTrayIcon): string =
  return $TrayIcon_ClassName(this.Instance)

proc InstanceSize*(this: TTrayIcon): int32 =
  return TrayIcon_InstanceSize(this.Instance)

proc InheritsFrom*(this: TTrayIcon, AClass: TClass): bool =
  return TrayIcon_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TTrayIcon, Obj: TObject): bool =
  return TrayIcon_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TTrayIcon): int32 =
  return TrayIcon_GetHashCode(this.Instance)

proc ToString*(this: TTrayIcon): string =
  return $TrayIcon_ToString(this.Instance)

proc AnimateInterval*(this: TTrayIcon): uint32  =
  return TrayIcon_GetAnimateInterval(this.Instance)

proc `AnimateInterval=`*(this: TTrayIcon, AValue: uint32)  =
  TrayIcon_SetAnimateInterval(this.Instance, AValue)

proc Hint*(this: TTrayIcon): string  =
  return $TrayIcon_GetHint(this.Instance)

proc `Hint=`*(this: TTrayIcon, AValue: string)  =
  TrayIcon_SetHint(this.Instance, AValue)

proc BalloonHint*(this: TTrayIcon): string  =
  return $TrayIcon_GetBalloonHint(this.Instance)

proc `BalloonHint=`*(this: TTrayIcon, AValue: string)  =
  TrayIcon_SetBalloonHint(this.Instance, AValue)

proc BalloonTitle*(this: TTrayIcon): string  =
  return $TrayIcon_GetBalloonTitle(this.Instance)

proc `BalloonTitle=`*(this: TTrayIcon, AValue: string)  =
  TrayIcon_SetBalloonTitle(this.Instance, AValue)

proc BalloonTimeout*(this: TTrayIcon): int32  =
  return TrayIcon_GetBalloonTimeout(this.Instance)

proc `BalloonTimeout=`*(this: TTrayIcon, AValue: int32)  =
  TrayIcon_SetBalloonTimeout(this.Instance, AValue)

proc BalloonFlags*(this: TTrayIcon): TBalloonFlags  =
  return TrayIcon_GetBalloonFlags(this.Instance)

proc `BalloonFlags=`*(this: TTrayIcon, AValue: TBalloonFlags)  =
  TrayIcon_SetBalloonFlags(this.Instance, AValue)

proc Icon*(this: TTrayIcon): TIcon  =
  return TrayIcon_GetIcon(this.Instance).AsIcon

proc `Icon=`*(this: TTrayIcon, AValue: TIcon)  =
  TrayIcon_SetIcon(this.Instance, CheckPtr(AValue))

proc PopupMenu*(this: TTrayIcon): TPopupMenu  =
  return TrayIcon_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TTrayIcon, AValue: TPopupMenu)  =
  TrayIcon_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc Visible*(this: TTrayIcon): bool  =
  return TrayIcon_GetVisible(this.Instance)

proc `Visible=`*(this: TTrayIcon, AValue: bool)  =
  TrayIcon_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TTrayIcon, AEventId: TNotifyEvent)  =
  TrayIcon_SetOnClick(this.Instance, AEventId)

proc `OnDblClick=`*(this: TTrayIcon, AEventId: TNotifyEvent)  =
  TrayIcon_SetOnDblClick(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TTrayIcon, AEventId: TMouseMoveEvent)  =
  TrayIcon_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TTrayIcon, AEventId: TMouseEvent)  =
  TrayIcon_SetOnMouseUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TTrayIcon, AEventId: TMouseEvent)  =
  TrayIcon_SetOnMouseDown(this.Instance, AEventId)

proc ComponentCount*(this: TTrayIcon): int32  =
  return TrayIcon_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TTrayIcon): int32  =
  return TrayIcon_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TTrayIcon, AValue: int32)  =
  TrayIcon_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TTrayIcon): TComponent  =
  return TrayIcon_GetOwner(this.Instance).AsComponent

proc Name*(this: TTrayIcon): string  =
  return $TrayIcon_GetName(this.Instance)

proc `Name=`*(this: TTrayIcon, AValue: string)  =
  TrayIcon_SetName(this.Instance, AValue)

proc Tag*(this: TTrayIcon): int  =
  return TrayIcon_GetTag(this.Instance)

proc `Tag=`*(this: TTrayIcon, AValue: int)  =
  TrayIcon_SetTag(this.Instance, AValue)

proc Components*(this: TTrayIcon, AIndex: int32): TComponent  =
  return TrayIcon_GetComponents(this.Instance, AIndex).AsComponent

proc TTrayIconClass*(): TClass = TrayIcon_StaticClassType()


#------------------------- TOpenDialog -------------------------

proc Free*(this: TOpenDialog) = defaultFree: OpenDialog_Free

proc NewOpenDialog*(AOwner: TComponent): TOpenDialog =
  new(result)
  result.Instance = OpenDialog_Create(CheckPtr(AOwner))

proc Execute*(this: TOpenDialog): bool  =
  return OpenDialog_Execute(this.Instance)

proc FindComponent*(this: TOpenDialog, AName: string): TComponent =
  return OpenDialog_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TOpenDialog): string =
  return $OpenDialog_GetNamePath(this.Instance)

proc HasParent*(this: TOpenDialog): bool =
  return OpenDialog_HasParent(this.Instance)

proc Assign*(this: TOpenDialog, Source: TObject) =
  OpenDialog_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TOpenDialog): TClass =
  return OpenDialog_ClassType(this.Instance)

proc ClassName*(this: TOpenDialog): string =
  return $OpenDialog_ClassName(this.Instance)

proc InstanceSize*(this: TOpenDialog): int32 =
  return OpenDialog_InstanceSize(this.Instance)

proc InheritsFrom*(this: TOpenDialog, AClass: TClass): bool =
  return OpenDialog_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TOpenDialog, Obj: TObject): bool =
  return OpenDialog_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TOpenDialog): int32 =
  return OpenDialog_GetHashCode(this.Instance)

proc ToString*(this: TOpenDialog): string =
  return $OpenDialog_ToString(this.Instance)

proc Files*(this: TOpenDialog): TStrings  =
  return OpenDialog_GetFiles(this.Instance).AsStrings

proc DefaultExt*(this: TOpenDialog): string  =
  return $OpenDialog_GetDefaultExt(this.Instance)

proc `DefaultExt=`*(this: TOpenDialog, AValue: string)  =
  OpenDialog_SetDefaultExt(this.Instance, AValue)

proc FileName*(this: TOpenDialog): string  =
  return $OpenDialog_GetFileName(this.Instance)

proc `FileName=`*(this: TOpenDialog, AValue: string)  =
  OpenDialog_SetFileName(this.Instance, AValue)

proc Filter*(this: TOpenDialog): string  =
  return $OpenDialog_GetFilter(this.Instance)

proc `Filter=`*(this: TOpenDialog, AValue: string)  =
  OpenDialog_SetFilter(this.Instance, AValue)

proc FilterIndex*(this: TOpenDialog): int32  =
  return OpenDialog_GetFilterIndex(this.Instance)

proc `FilterIndex=`*(this: TOpenDialog, AValue: int32)  =
  OpenDialog_SetFilterIndex(this.Instance, AValue)

proc InitialDir*(this: TOpenDialog): string  =
  return $OpenDialog_GetInitialDir(this.Instance)

proc `InitialDir=`*(this: TOpenDialog, AValue: string)  =
  OpenDialog_SetInitialDir(this.Instance, AValue)

proc Options*(this: TOpenDialog): TOpenOptions  =
  return OpenDialog_GetOptions(this.Instance)

proc `Options=`*(this: TOpenDialog, AValue: TOpenOptions)  =
  OpenDialog_SetOptions(this.Instance, AValue)

proc Title*(this: TOpenDialog): string  =
  return $OpenDialog_GetTitle(this.Instance)

proc `Title=`*(this: TOpenDialog, AValue: string)  =
  OpenDialog_SetTitle(this.Instance, AValue)

proc Handle*(this: TOpenDialog): HWND  =
  return OpenDialog_GetHandle(this.Instance)

proc `OnClose=`*(this: TOpenDialog, AEventId: TNotifyEvent)  =
  OpenDialog_SetOnClose(this.Instance, AEventId)

proc `OnShow=`*(this: TOpenDialog, AEventId: TNotifyEvent)  =
  OpenDialog_SetOnShow(this.Instance, AEventId)

proc ComponentCount*(this: TOpenDialog): int32  =
  return OpenDialog_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TOpenDialog): int32  =
  return OpenDialog_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TOpenDialog, AValue: int32)  =
  OpenDialog_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TOpenDialog): TComponent  =
  return OpenDialog_GetOwner(this.Instance).AsComponent

proc Name*(this: TOpenDialog): string  =
  return $OpenDialog_GetName(this.Instance)

proc `Name=`*(this: TOpenDialog, AValue: string)  =
  OpenDialog_SetName(this.Instance, AValue)

proc Tag*(this: TOpenDialog): int  =
  return OpenDialog_GetTag(this.Instance)

proc `Tag=`*(this: TOpenDialog, AValue: int)  =
  OpenDialog_SetTag(this.Instance, AValue)

proc Components*(this: TOpenDialog, AIndex: int32): TComponent  =
  return OpenDialog_GetComponents(this.Instance, AIndex).AsComponent

proc TOpenDialogClass*(): TClass = OpenDialog_StaticClassType()


#------------------------- TSaveDialog -------------------------

proc Free*(this: TSaveDialog) = defaultFree: SaveDialog_Free

proc NewSaveDialog*(AOwner: TComponent): TSaveDialog =
  new(result)
  result.Instance = SaveDialog_Create(CheckPtr(AOwner))

proc Execute*(this: TSaveDialog): bool  =
  return SaveDialog_Execute(this.Instance)

proc FindComponent*(this: TSaveDialog, AName: string): TComponent =
  return SaveDialog_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TSaveDialog): string =
  return $SaveDialog_GetNamePath(this.Instance)

proc HasParent*(this: TSaveDialog): bool =
  return SaveDialog_HasParent(this.Instance)

proc Assign*(this: TSaveDialog, Source: TObject) =
  SaveDialog_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TSaveDialog): TClass =
  return SaveDialog_ClassType(this.Instance)

proc ClassName*(this: TSaveDialog): string =
  return $SaveDialog_ClassName(this.Instance)

proc InstanceSize*(this: TSaveDialog): int32 =
  return SaveDialog_InstanceSize(this.Instance)

proc InheritsFrom*(this: TSaveDialog, AClass: TClass): bool =
  return SaveDialog_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TSaveDialog, Obj: TObject): bool =
  return SaveDialog_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TSaveDialog): int32 =
  return SaveDialog_GetHashCode(this.Instance)

proc ToString*(this: TSaveDialog): string =
  return $SaveDialog_ToString(this.Instance)

proc Files*(this: TSaveDialog): TStrings  =
  return SaveDialog_GetFiles(this.Instance).AsStrings

proc DefaultExt*(this: TSaveDialog): string  =
  return $SaveDialog_GetDefaultExt(this.Instance)

proc `DefaultExt=`*(this: TSaveDialog, AValue: string)  =
  SaveDialog_SetDefaultExt(this.Instance, AValue)

proc FileName*(this: TSaveDialog): string  =
  return $SaveDialog_GetFileName(this.Instance)

proc `FileName=`*(this: TSaveDialog, AValue: string)  =
  SaveDialog_SetFileName(this.Instance, AValue)

proc Filter*(this: TSaveDialog): string  =
  return $SaveDialog_GetFilter(this.Instance)

proc `Filter=`*(this: TSaveDialog, AValue: string)  =
  SaveDialog_SetFilter(this.Instance, AValue)

proc FilterIndex*(this: TSaveDialog): int32  =
  return SaveDialog_GetFilterIndex(this.Instance)

proc `FilterIndex=`*(this: TSaveDialog, AValue: int32)  =
  SaveDialog_SetFilterIndex(this.Instance, AValue)

proc InitialDir*(this: TSaveDialog): string  =
  return $SaveDialog_GetInitialDir(this.Instance)

proc `InitialDir=`*(this: TSaveDialog, AValue: string)  =
  SaveDialog_SetInitialDir(this.Instance, AValue)

proc Options*(this: TSaveDialog): TOpenOptions  =
  return SaveDialog_GetOptions(this.Instance)

proc `Options=`*(this: TSaveDialog, AValue: TOpenOptions)  =
  SaveDialog_SetOptions(this.Instance, AValue)

proc Title*(this: TSaveDialog): string  =
  return $SaveDialog_GetTitle(this.Instance)

proc `Title=`*(this: TSaveDialog, AValue: string)  =
  SaveDialog_SetTitle(this.Instance, AValue)

proc Handle*(this: TSaveDialog): HWND  =
  return SaveDialog_GetHandle(this.Instance)

proc `OnClose=`*(this: TSaveDialog, AEventId: TNotifyEvent)  =
  SaveDialog_SetOnClose(this.Instance, AEventId)

proc `OnShow=`*(this: TSaveDialog, AEventId: TNotifyEvent)  =
  SaveDialog_SetOnShow(this.Instance, AEventId)

proc ComponentCount*(this: TSaveDialog): int32  =
  return SaveDialog_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TSaveDialog): int32  =
  return SaveDialog_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TSaveDialog, AValue: int32)  =
  SaveDialog_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TSaveDialog): TComponent  =
  return SaveDialog_GetOwner(this.Instance).AsComponent

proc Name*(this: TSaveDialog): string  =
  return $SaveDialog_GetName(this.Instance)

proc `Name=`*(this: TSaveDialog, AValue: string)  =
  SaveDialog_SetName(this.Instance, AValue)

proc Tag*(this: TSaveDialog): int  =
  return SaveDialog_GetTag(this.Instance)

proc `Tag=`*(this: TSaveDialog, AValue: int)  =
  SaveDialog_SetTag(this.Instance, AValue)

proc Components*(this: TSaveDialog, AIndex: int32): TComponent  =
  return SaveDialog_GetComponents(this.Instance, AIndex).AsComponent

proc TSaveDialogClass*(): TClass = SaveDialog_StaticClassType()


#------------------------- TColorDialog -------------------------

proc Free*(this: TColorDialog) = defaultFree: ColorDialog_Free

proc NewColorDialog*(AOwner: TComponent): TColorDialog =
  new(result)
  result.Instance = ColorDialog_Create(CheckPtr(AOwner))

proc Execute*(this: TColorDialog): bool  =
  return ColorDialog_Execute(this.Instance)

proc FindComponent*(this: TColorDialog, AName: string): TComponent =
  return ColorDialog_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TColorDialog): string =
  return $ColorDialog_GetNamePath(this.Instance)

proc HasParent*(this: TColorDialog): bool =
  return ColorDialog_HasParent(this.Instance)

proc Assign*(this: TColorDialog, Source: TObject) =
  ColorDialog_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TColorDialog): TClass =
  return ColorDialog_ClassType(this.Instance)

proc ClassName*(this: TColorDialog): string =
  return $ColorDialog_ClassName(this.Instance)

proc InstanceSize*(this: TColorDialog): int32 =
  return ColorDialog_InstanceSize(this.Instance)

proc InheritsFrom*(this: TColorDialog, AClass: TClass): bool =
  return ColorDialog_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TColorDialog, Obj: TObject): bool =
  return ColorDialog_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TColorDialog): int32 =
  return ColorDialog_GetHashCode(this.Instance)

proc ToString*(this: TColorDialog): string =
  return $ColorDialog_ToString(this.Instance)

proc Color*(this: TColorDialog): TColor  =
  return ColorDialog_GetColor(this.Instance)

proc `Color=`*(this: TColorDialog, AValue: TColor)  =
  ColorDialog_SetColor(this.Instance, AValue)

proc CustomColors*(this: TColorDialog): TStrings  =
  return ColorDialog_GetCustomColors(this.Instance).AsStrings

proc `CustomColors=`*(this: TColorDialog, AValue: TStrings)  =
  ColorDialog_SetCustomColors(this.Instance, CheckPtr(AValue))

proc Handle*(this: TColorDialog): HWND  =
  return ColorDialog_GetHandle(this.Instance)

proc `OnClose=`*(this: TColorDialog, AEventId: TNotifyEvent)  =
  ColorDialog_SetOnClose(this.Instance, AEventId)

proc `OnShow=`*(this: TColorDialog, AEventId: TNotifyEvent)  =
  ColorDialog_SetOnShow(this.Instance, AEventId)

proc ComponentCount*(this: TColorDialog): int32  =
  return ColorDialog_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TColorDialog): int32  =
  return ColorDialog_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TColorDialog, AValue: int32)  =
  ColorDialog_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TColorDialog): TComponent  =
  return ColorDialog_GetOwner(this.Instance).AsComponent

proc Name*(this: TColorDialog): string  =
  return $ColorDialog_GetName(this.Instance)

proc `Name=`*(this: TColorDialog, AValue: string)  =
  ColorDialog_SetName(this.Instance, AValue)

proc Tag*(this: TColorDialog): int  =
  return ColorDialog_GetTag(this.Instance)

proc `Tag=`*(this: TColorDialog, AValue: int)  =
  ColorDialog_SetTag(this.Instance, AValue)

proc Components*(this: TColorDialog, AIndex: int32): TComponent  =
  return ColorDialog_GetComponents(this.Instance, AIndex).AsComponent

proc TColorDialogClass*(): TClass = ColorDialog_StaticClassType()


#------------------------- TFontDialog -------------------------

proc Free*(this: TFontDialog) = defaultFree: FontDialog_Free

proc NewFontDialog*(AOwner: TComponent): TFontDialog =
  new(result)
  result.Instance = FontDialog_Create(CheckPtr(AOwner))

proc Execute*(this: TFontDialog): bool  =
  return FontDialog_Execute(this.Instance)

proc FindComponent*(this: TFontDialog, AName: string): TComponent =
  return FontDialog_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TFontDialog): string =
  return $FontDialog_GetNamePath(this.Instance)

proc HasParent*(this: TFontDialog): bool =
  return FontDialog_HasParent(this.Instance)

proc Assign*(this: TFontDialog, Source: TObject) =
  FontDialog_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TFontDialog): TClass =
  return FontDialog_ClassType(this.Instance)

proc ClassName*(this: TFontDialog): string =
  return $FontDialog_ClassName(this.Instance)

proc InstanceSize*(this: TFontDialog): int32 =
  return FontDialog_InstanceSize(this.Instance)

proc InheritsFrom*(this: TFontDialog, AClass: TClass): bool =
  return FontDialog_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TFontDialog, Obj: TObject): bool =
  return FontDialog_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TFontDialog): int32 =
  return FontDialog_GetHashCode(this.Instance)

proc ToString*(this: TFontDialog): string =
  return $FontDialog_ToString(this.Instance)

proc Font*(this: TFontDialog): TFont  =
  return FontDialog_GetFont(this.Instance).AsFont

proc `Font=`*(this: TFontDialog, AValue: TFont)  =
  FontDialog_SetFont(this.Instance, CheckPtr(AValue))

proc Options*(this: TFontDialog): TFontDialogOptions  =
  return FontDialog_GetOptions(this.Instance)

proc `Options=`*(this: TFontDialog, AValue: TFontDialogOptions)  =
  FontDialog_SetOptions(this.Instance, AValue)

proc Handle*(this: TFontDialog): HWND  =
  return FontDialog_GetHandle(this.Instance)

proc `OnClose=`*(this: TFontDialog, AEventId: TNotifyEvent)  =
  FontDialog_SetOnClose(this.Instance, AEventId)

proc `OnShow=`*(this: TFontDialog, AEventId: TNotifyEvent)  =
  FontDialog_SetOnShow(this.Instance, AEventId)

proc ComponentCount*(this: TFontDialog): int32  =
  return FontDialog_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TFontDialog): int32  =
  return FontDialog_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TFontDialog, AValue: int32)  =
  FontDialog_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TFontDialog): TComponent  =
  return FontDialog_GetOwner(this.Instance).AsComponent

proc Name*(this: TFontDialog): string  =
  return $FontDialog_GetName(this.Instance)

proc `Name=`*(this: TFontDialog, AValue: string)  =
  FontDialog_SetName(this.Instance, AValue)

proc Tag*(this: TFontDialog): int  =
  return FontDialog_GetTag(this.Instance)

proc `Tag=`*(this: TFontDialog, AValue: int)  =
  FontDialog_SetTag(this.Instance, AValue)

proc Components*(this: TFontDialog, AIndex: int32): TComponent  =
  return FontDialog_GetComponents(this.Instance, AIndex).AsComponent

proc TFontDialogClass*(): TClass = FontDialog_StaticClassType()


#------------------------- TPrintDialog -------------------------

proc Free*(this: TPrintDialog) = defaultFree: PrintDialog_Free

proc NewPrintDialog*(AOwner: TComponent): TPrintDialog =
  new(result)
  result.Instance = PrintDialog_Create(CheckPtr(AOwner))

proc Execute*(this: TPrintDialog): bool  =
  return PrintDialog_Execute(this.Instance)

proc FindComponent*(this: TPrintDialog, AName: string): TComponent =
  return PrintDialog_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TPrintDialog): string =
  return $PrintDialog_GetNamePath(this.Instance)

proc HasParent*(this: TPrintDialog): bool =
  return PrintDialog_HasParent(this.Instance)

proc Assign*(this: TPrintDialog, Source: TObject) =
  PrintDialog_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TPrintDialog): TClass =
  return PrintDialog_ClassType(this.Instance)

proc ClassName*(this: TPrintDialog): string =
  return $PrintDialog_ClassName(this.Instance)

proc InstanceSize*(this: TPrintDialog): int32 =
  return PrintDialog_InstanceSize(this.Instance)

proc InheritsFrom*(this: TPrintDialog, AClass: TClass): bool =
  return PrintDialog_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TPrintDialog, Obj: TObject): bool =
  return PrintDialog_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TPrintDialog): int32 =
  return PrintDialog_GetHashCode(this.Instance)

proc ToString*(this: TPrintDialog): string =
  return $PrintDialog_ToString(this.Instance)

proc Collate*(this: TPrintDialog): bool  =
  return PrintDialog_GetCollate(this.Instance)

proc `Collate=`*(this: TPrintDialog, AValue: bool)  =
  PrintDialog_SetCollate(this.Instance, AValue)

proc Copies*(this: TPrintDialog): int32  =
  return PrintDialog_GetCopies(this.Instance)

proc `Copies=`*(this: TPrintDialog, AValue: int32)  =
  PrintDialog_SetCopies(this.Instance, AValue)

proc FromPage*(this: TPrintDialog): int32  =
  return PrintDialog_GetFromPage(this.Instance)

proc `FromPage=`*(this: TPrintDialog, AValue: int32)  =
  PrintDialog_SetFromPage(this.Instance, AValue)

proc MinPage*(this: TPrintDialog): int32  =
  return PrintDialog_GetMinPage(this.Instance)

proc `MinPage=`*(this: TPrintDialog, AValue: int32)  =
  PrintDialog_SetMinPage(this.Instance, AValue)

proc MaxPage*(this: TPrintDialog): int32  =
  return PrintDialog_GetMaxPage(this.Instance)

proc `MaxPage=`*(this: TPrintDialog, AValue: int32)  =
  PrintDialog_SetMaxPage(this.Instance, AValue)

proc Options*(this: TPrintDialog): TPrintDialogOptions  =
  return PrintDialog_GetOptions(this.Instance)

proc `Options=`*(this: TPrintDialog, AValue: TPrintDialogOptions)  =
  PrintDialog_SetOptions(this.Instance, AValue)

proc PrintToFile*(this: TPrintDialog): bool  =
  return PrintDialog_GetPrintToFile(this.Instance)

proc `PrintToFile=`*(this: TPrintDialog, AValue: bool)  =
  PrintDialog_SetPrintToFile(this.Instance, AValue)

proc PrintRange*(this: TPrintDialog): TPrintRange  =
  return PrintDialog_GetPrintRange(this.Instance)

proc `PrintRange=`*(this: TPrintDialog, AValue: TPrintRange)  =
  PrintDialog_SetPrintRange(this.Instance, AValue)

proc ToPage*(this: TPrintDialog): int32  =
  return PrintDialog_GetToPage(this.Instance)

proc `ToPage=`*(this: TPrintDialog, AValue: int32)  =
  PrintDialog_SetToPage(this.Instance, AValue)

proc Handle*(this: TPrintDialog): HWND  =
  return PrintDialog_GetHandle(this.Instance)

proc `OnClose=`*(this: TPrintDialog, AEventId: TNotifyEvent)  =
  PrintDialog_SetOnClose(this.Instance, AEventId)

proc `OnShow=`*(this: TPrintDialog, AEventId: TNotifyEvent)  =
  PrintDialog_SetOnShow(this.Instance, AEventId)

proc ComponentCount*(this: TPrintDialog): int32  =
  return PrintDialog_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TPrintDialog): int32  =
  return PrintDialog_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TPrintDialog, AValue: int32)  =
  PrintDialog_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TPrintDialog): TComponent  =
  return PrintDialog_GetOwner(this.Instance).AsComponent

proc Name*(this: TPrintDialog): string  =
  return $PrintDialog_GetName(this.Instance)

proc `Name=`*(this: TPrintDialog, AValue: string)  =
  PrintDialog_SetName(this.Instance, AValue)

proc Tag*(this: TPrintDialog): int  =
  return PrintDialog_GetTag(this.Instance)

proc `Tag=`*(this: TPrintDialog, AValue: int)  =
  PrintDialog_SetTag(this.Instance, AValue)

proc Components*(this: TPrintDialog, AIndex: int32): TComponent  =
  return PrintDialog_GetComponents(this.Instance, AIndex).AsComponent

proc TPrintDialogClass*(): TClass = PrintDialog_StaticClassType()


#------------------------- TOpenPictureDialog -------------------------

proc Free*(this: TOpenPictureDialog) = defaultFree: OpenPictureDialog_Free

proc NewOpenPictureDialog*(AOwner: TComponent): TOpenPictureDialog =
  new(result)
  result.Instance = OpenPictureDialog_Create(CheckPtr(AOwner))

proc Execute*(this: TOpenPictureDialog): bool  =
  return OpenPictureDialog_Execute(this.Instance)

proc FindComponent*(this: TOpenPictureDialog, AName: string): TComponent =
  return OpenPictureDialog_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TOpenPictureDialog): string =
  return $OpenPictureDialog_GetNamePath(this.Instance)

proc HasParent*(this: TOpenPictureDialog): bool =
  return OpenPictureDialog_HasParent(this.Instance)

proc Assign*(this: TOpenPictureDialog, Source: TObject) =
  OpenPictureDialog_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TOpenPictureDialog): TClass =
  return OpenPictureDialog_ClassType(this.Instance)

proc ClassName*(this: TOpenPictureDialog): string =
  return $OpenPictureDialog_ClassName(this.Instance)

proc InstanceSize*(this: TOpenPictureDialog): int32 =
  return OpenPictureDialog_InstanceSize(this.Instance)

proc InheritsFrom*(this: TOpenPictureDialog, AClass: TClass): bool =
  return OpenPictureDialog_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TOpenPictureDialog, Obj: TObject): bool =
  return OpenPictureDialog_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TOpenPictureDialog): int32 =
  return OpenPictureDialog_GetHashCode(this.Instance)

proc ToString*(this: TOpenPictureDialog): string =
  return $OpenPictureDialog_ToString(this.Instance)

proc Filter*(this: TOpenPictureDialog): string  =
  return $OpenPictureDialog_GetFilter(this.Instance)

proc `Filter=`*(this: TOpenPictureDialog, AValue: string)  =
  OpenPictureDialog_SetFilter(this.Instance, AValue)

proc Files*(this: TOpenPictureDialog): TStrings  =
  return OpenPictureDialog_GetFiles(this.Instance).AsStrings

proc DefaultExt*(this: TOpenPictureDialog): string  =
  return $OpenPictureDialog_GetDefaultExt(this.Instance)

proc `DefaultExt=`*(this: TOpenPictureDialog, AValue: string)  =
  OpenPictureDialog_SetDefaultExt(this.Instance, AValue)

proc FileName*(this: TOpenPictureDialog): string  =
  return $OpenPictureDialog_GetFileName(this.Instance)

proc `FileName=`*(this: TOpenPictureDialog, AValue: string)  =
  OpenPictureDialog_SetFileName(this.Instance, AValue)

proc FilterIndex*(this: TOpenPictureDialog): int32  =
  return OpenPictureDialog_GetFilterIndex(this.Instance)

proc `FilterIndex=`*(this: TOpenPictureDialog, AValue: int32)  =
  OpenPictureDialog_SetFilterIndex(this.Instance, AValue)

proc InitialDir*(this: TOpenPictureDialog): string  =
  return $OpenPictureDialog_GetInitialDir(this.Instance)

proc `InitialDir=`*(this: TOpenPictureDialog, AValue: string)  =
  OpenPictureDialog_SetInitialDir(this.Instance, AValue)

proc Options*(this: TOpenPictureDialog): TOpenOptions  =
  return OpenPictureDialog_GetOptions(this.Instance)

proc `Options=`*(this: TOpenPictureDialog, AValue: TOpenOptions)  =
  OpenPictureDialog_SetOptions(this.Instance, AValue)

proc Title*(this: TOpenPictureDialog): string  =
  return $OpenPictureDialog_GetTitle(this.Instance)

proc `Title=`*(this: TOpenPictureDialog, AValue: string)  =
  OpenPictureDialog_SetTitle(this.Instance, AValue)

proc Handle*(this: TOpenPictureDialog): HWND  =
  return OpenPictureDialog_GetHandle(this.Instance)

proc `OnClose=`*(this: TOpenPictureDialog, AEventId: TNotifyEvent)  =
  OpenPictureDialog_SetOnClose(this.Instance, AEventId)

proc `OnShow=`*(this: TOpenPictureDialog, AEventId: TNotifyEvent)  =
  OpenPictureDialog_SetOnShow(this.Instance, AEventId)

proc ComponentCount*(this: TOpenPictureDialog): int32  =
  return OpenPictureDialog_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TOpenPictureDialog): int32  =
  return OpenPictureDialog_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TOpenPictureDialog, AValue: int32)  =
  OpenPictureDialog_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TOpenPictureDialog): TComponent  =
  return OpenPictureDialog_GetOwner(this.Instance).AsComponent

proc Name*(this: TOpenPictureDialog): string  =
  return $OpenPictureDialog_GetName(this.Instance)

proc `Name=`*(this: TOpenPictureDialog, AValue: string)  =
  OpenPictureDialog_SetName(this.Instance, AValue)

proc Tag*(this: TOpenPictureDialog): int  =
  return OpenPictureDialog_GetTag(this.Instance)

proc `Tag=`*(this: TOpenPictureDialog, AValue: int)  =
  OpenPictureDialog_SetTag(this.Instance, AValue)

proc Components*(this: TOpenPictureDialog, AIndex: int32): TComponent  =
  return OpenPictureDialog_GetComponents(this.Instance, AIndex).AsComponent

proc TOpenPictureDialogClass*(): TClass = OpenPictureDialog_StaticClassType()


#------------------------- TSavePictureDialog -------------------------

proc Free*(this: TSavePictureDialog) = defaultFree: SavePictureDialog_Free

proc NewSavePictureDialog*(AOwner: TComponent): TSavePictureDialog =
  new(result)
  result.Instance = SavePictureDialog_Create(CheckPtr(AOwner))

proc Execute*(this: TSavePictureDialog): bool  =
  return SavePictureDialog_Execute(this.Instance)

proc FindComponent*(this: TSavePictureDialog, AName: string): TComponent =
  return SavePictureDialog_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TSavePictureDialog): string =
  return $SavePictureDialog_GetNamePath(this.Instance)

proc HasParent*(this: TSavePictureDialog): bool =
  return SavePictureDialog_HasParent(this.Instance)

proc Assign*(this: TSavePictureDialog, Source: TObject) =
  SavePictureDialog_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TSavePictureDialog): TClass =
  return SavePictureDialog_ClassType(this.Instance)

proc ClassName*(this: TSavePictureDialog): string =
  return $SavePictureDialog_ClassName(this.Instance)

proc InstanceSize*(this: TSavePictureDialog): int32 =
  return SavePictureDialog_InstanceSize(this.Instance)

proc InheritsFrom*(this: TSavePictureDialog, AClass: TClass): bool =
  return SavePictureDialog_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TSavePictureDialog, Obj: TObject): bool =
  return SavePictureDialog_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TSavePictureDialog): int32 =
  return SavePictureDialog_GetHashCode(this.Instance)

proc ToString*(this: TSavePictureDialog): string =
  return $SavePictureDialog_ToString(this.Instance)

proc Filter*(this: TSavePictureDialog): string  =
  return $SavePictureDialog_GetFilter(this.Instance)

proc `Filter=`*(this: TSavePictureDialog, AValue: string)  =
  SavePictureDialog_SetFilter(this.Instance, AValue)

proc Files*(this: TSavePictureDialog): TStrings  =
  return SavePictureDialog_GetFiles(this.Instance).AsStrings

proc DefaultExt*(this: TSavePictureDialog): string  =
  return $SavePictureDialog_GetDefaultExt(this.Instance)

proc `DefaultExt=`*(this: TSavePictureDialog, AValue: string)  =
  SavePictureDialog_SetDefaultExt(this.Instance, AValue)

proc FileName*(this: TSavePictureDialog): string  =
  return $SavePictureDialog_GetFileName(this.Instance)

proc `FileName=`*(this: TSavePictureDialog, AValue: string)  =
  SavePictureDialog_SetFileName(this.Instance, AValue)

proc FilterIndex*(this: TSavePictureDialog): int32  =
  return SavePictureDialog_GetFilterIndex(this.Instance)

proc `FilterIndex=`*(this: TSavePictureDialog, AValue: int32)  =
  SavePictureDialog_SetFilterIndex(this.Instance, AValue)

proc InitialDir*(this: TSavePictureDialog): string  =
  return $SavePictureDialog_GetInitialDir(this.Instance)

proc `InitialDir=`*(this: TSavePictureDialog, AValue: string)  =
  SavePictureDialog_SetInitialDir(this.Instance, AValue)

proc Options*(this: TSavePictureDialog): TOpenOptions  =
  return SavePictureDialog_GetOptions(this.Instance)

proc `Options=`*(this: TSavePictureDialog, AValue: TOpenOptions)  =
  SavePictureDialog_SetOptions(this.Instance, AValue)

proc Title*(this: TSavePictureDialog): string  =
  return $SavePictureDialog_GetTitle(this.Instance)

proc `Title=`*(this: TSavePictureDialog, AValue: string)  =
  SavePictureDialog_SetTitle(this.Instance, AValue)

proc Handle*(this: TSavePictureDialog): HWND  =
  return SavePictureDialog_GetHandle(this.Instance)

proc `OnClose=`*(this: TSavePictureDialog, AEventId: TNotifyEvent)  =
  SavePictureDialog_SetOnClose(this.Instance, AEventId)

proc `OnShow=`*(this: TSavePictureDialog, AEventId: TNotifyEvent)  =
  SavePictureDialog_SetOnShow(this.Instance, AEventId)

proc ComponentCount*(this: TSavePictureDialog): int32  =
  return SavePictureDialog_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TSavePictureDialog): int32  =
  return SavePictureDialog_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TSavePictureDialog, AValue: int32)  =
  SavePictureDialog_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TSavePictureDialog): TComponent  =
  return SavePictureDialog_GetOwner(this.Instance).AsComponent

proc Name*(this: TSavePictureDialog): string  =
  return $SavePictureDialog_GetName(this.Instance)

proc `Name=`*(this: TSavePictureDialog, AValue: string)  =
  SavePictureDialog_SetName(this.Instance, AValue)

proc Tag*(this: TSavePictureDialog): int  =
  return SavePictureDialog_GetTag(this.Instance)

proc `Tag=`*(this: TSavePictureDialog, AValue: int)  =
  SavePictureDialog_SetTag(this.Instance, AValue)

proc Components*(this: TSavePictureDialog, AIndex: int32): TComponent  =
  return SavePictureDialog_GetComponents(this.Instance, AIndex).AsComponent

proc TSavePictureDialogClass*(): TClass = SavePictureDialog_StaticClassType()


#------------------------- TSelectDirectoryDialog -------------------------

proc Free*(this: TSelectDirectoryDialog) = defaultFree: SelectDirectoryDialog_Free

proc NewSelectDirectoryDialog*(AOwner: TComponent): TSelectDirectoryDialog =
  new(result)
  result.Instance = SelectDirectoryDialog_Create(CheckPtr(AOwner))

proc Execute*(this: TSelectDirectoryDialog): bool  =
  return SelectDirectoryDialog_Execute(this.Instance)

proc FindComponent*(this: TSelectDirectoryDialog, AName: string): TComponent =
  return SelectDirectoryDialog_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TSelectDirectoryDialog): string =
  return $SelectDirectoryDialog_GetNamePath(this.Instance)

proc HasParent*(this: TSelectDirectoryDialog): bool =
  return SelectDirectoryDialog_HasParent(this.Instance)

proc Assign*(this: TSelectDirectoryDialog, Source: TObject) =
  SelectDirectoryDialog_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TSelectDirectoryDialog): TClass =
  return SelectDirectoryDialog_ClassType(this.Instance)

proc ClassName*(this: TSelectDirectoryDialog): string =
  return $SelectDirectoryDialog_ClassName(this.Instance)

proc InstanceSize*(this: TSelectDirectoryDialog): int32 =
  return SelectDirectoryDialog_InstanceSize(this.Instance)

proc InheritsFrom*(this: TSelectDirectoryDialog, AClass: TClass): bool =
  return SelectDirectoryDialog_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TSelectDirectoryDialog, Obj: TObject): bool =
  return SelectDirectoryDialog_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TSelectDirectoryDialog): int32 =
  return SelectDirectoryDialog_GetHashCode(this.Instance)

proc ToString*(this: TSelectDirectoryDialog): string =
  return $SelectDirectoryDialog_ToString(this.Instance)

proc Files*(this: TSelectDirectoryDialog): TStrings  =
  return SelectDirectoryDialog_GetFiles(this.Instance).AsStrings

proc DefaultExt*(this: TSelectDirectoryDialog): string  =
  return $SelectDirectoryDialog_GetDefaultExt(this.Instance)

proc `DefaultExt=`*(this: TSelectDirectoryDialog, AValue: string)  =
  SelectDirectoryDialog_SetDefaultExt(this.Instance, AValue)

proc FileName*(this: TSelectDirectoryDialog): string  =
  return $SelectDirectoryDialog_GetFileName(this.Instance)

proc `FileName=`*(this: TSelectDirectoryDialog, AValue: string)  =
  SelectDirectoryDialog_SetFileName(this.Instance, AValue)

proc Filter*(this: TSelectDirectoryDialog): string  =
  return $SelectDirectoryDialog_GetFilter(this.Instance)

proc `Filter=`*(this: TSelectDirectoryDialog, AValue: string)  =
  SelectDirectoryDialog_SetFilter(this.Instance, AValue)

proc FilterIndex*(this: TSelectDirectoryDialog): int32  =
  return SelectDirectoryDialog_GetFilterIndex(this.Instance)

proc `FilterIndex=`*(this: TSelectDirectoryDialog, AValue: int32)  =
  SelectDirectoryDialog_SetFilterIndex(this.Instance, AValue)

proc InitialDir*(this: TSelectDirectoryDialog): string  =
  return $SelectDirectoryDialog_GetInitialDir(this.Instance)

proc `InitialDir=`*(this: TSelectDirectoryDialog, AValue: string)  =
  SelectDirectoryDialog_SetInitialDir(this.Instance, AValue)

proc Options*(this: TSelectDirectoryDialog): TOpenOptions  =
  return SelectDirectoryDialog_GetOptions(this.Instance)

proc `Options=`*(this: TSelectDirectoryDialog, AValue: TOpenOptions)  =
  SelectDirectoryDialog_SetOptions(this.Instance, AValue)

proc Title*(this: TSelectDirectoryDialog): string  =
  return $SelectDirectoryDialog_GetTitle(this.Instance)

proc `Title=`*(this: TSelectDirectoryDialog, AValue: string)  =
  SelectDirectoryDialog_SetTitle(this.Instance, AValue)

proc Handle*(this: TSelectDirectoryDialog): HWND  =
  return SelectDirectoryDialog_GetHandle(this.Instance)

proc `OnClose=`*(this: TSelectDirectoryDialog, AEventId: TNotifyEvent)  =
  SelectDirectoryDialog_SetOnClose(this.Instance, AEventId)

proc `OnShow=`*(this: TSelectDirectoryDialog, AEventId: TNotifyEvent)  =
  SelectDirectoryDialog_SetOnShow(this.Instance, AEventId)

proc ComponentCount*(this: TSelectDirectoryDialog): int32  =
  return SelectDirectoryDialog_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TSelectDirectoryDialog): int32  =
  return SelectDirectoryDialog_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TSelectDirectoryDialog, AValue: int32)  =
  SelectDirectoryDialog_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TSelectDirectoryDialog): TComponent  =
  return SelectDirectoryDialog_GetOwner(this.Instance).AsComponent

proc Name*(this: TSelectDirectoryDialog): string  =
  return $SelectDirectoryDialog_GetName(this.Instance)

proc `Name=`*(this: TSelectDirectoryDialog, AValue: string)  =
  SelectDirectoryDialog_SetName(this.Instance, AValue)

proc Tag*(this: TSelectDirectoryDialog): int  =
  return SelectDirectoryDialog_GetTag(this.Instance)

proc `Tag=`*(this: TSelectDirectoryDialog, AValue: int)  =
  SelectDirectoryDialog_SetTag(this.Instance, AValue)

proc Components*(this: TSelectDirectoryDialog, AIndex: int32): TComponent  =
  return SelectDirectoryDialog_GetComponents(this.Instance, AIndex).AsComponent

proc TSelectDirectoryDialogClass*(): TClass = SelectDirectoryDialog_StaticClassType()


#------------------------- TRichEdit -------------------------

proc Free*(this: TRichEdit) = defaultFree: RichEdit_Free

proc NewRichEdit*(AOwner: TComponent): TRichEdit =
  new(result)
  result.Instance = RichEdit_Create(CheckPtr(AOwner))

proc Clear*(this: TRichEdit)  =
  RichEdit_Clear(this.Instance)

proc FindText*(this: TRichEdit, SearchStr: string, StartPos: int32, Length: int32, Options: TSearchTypes): int32  =
  return RichEdit_FindText(this.Instance, SearchStr, StartPos, Length, Options)

proc ClearSelection*(this: TRichEdit)  =
  RichEdit_ClearSelection(this.Instance)

proc CopyToClipboard*(this: TRichEdit)  =
  RichEdit_CopyToClipboard(this.Instance)

proc CutToClipboard*(this: TRichEdit)  =
  RichEdit_CutToClipboard(this.Instance)

proc PasteFromClipboard*(this: TRichEdit)  =
  RichEdit_PasteFromClipboard(this.Instance)

proc Undo*(this: TRichEdit)  =
  RichEdit_Undo(this.Instance)

proc SelectAll*(this: TRichEdit)  =
  RichEdit_SelectAll(this.Instance)

proc CanFocus*(this: TRichEdit): bool =
  return RichEdit_CanFocus(this.Instance)

proc ContainsControl*(this: TRichEdit, Control: TControl): bool =
  return RichEdit_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TRichEdit, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return RichEdit_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TRichEdit) =
  RichEdit_DisableAlign(this.Instance)

proc EnableAlign*(this: TRichEdit) =
  RichEdit_EnableAlign(this.Instance)

proc FindChildControl*(this: TRichEdit, ControlName: string): TControl =
  return RichEdit_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TRichEdit, AllLevels: bool) =
  RichEdit_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TRichEdit): bool =
  return RichEdit_Focused(this.Instance)

proc HandleAllocated*(this: TRichEdit): bool =
  return RichEdit_HandleAllocated(this.Instance)

proc InsertControl*(this: TRichEdit, AControl: TControl) =
  RichEdit_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TRichEdit) =
  RichEdit_Invalidate(this.Instance)

proc PaintTo*(this: TRichEdit, DC: HDC, X: int32, Y: int32) =
  RichEdit_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TRichEdit, AControl: TControl) =
  RichEdit_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TRichEdit) =
  RichEdit_Realign(this.Instance)

proc Repaint*(this: TRichEdit) =
  RichEdit_Repaint(this.Instance)

proc ScaleBy*(this: TRichEdit, M: int32, D: int32) =
  RichEdit_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TRichEdit, DeltaX: int32, DeltaY: int32) =
  RichEdit_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TRichEdit, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  RichEdit_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TRichEdit) =
  RichEdit_SetFocus(this.Instance)

proc Update*(this: TRichEdit) =
  RichEdit_Update(this.Instance)

proc BringToFront*(this: TRichEdit) =
  RichEdit_BringToFront(this.Instance)

proc ClientToScreen*(this: TRichEdit, Point: TPoint): TPoint =
  var ps1 = Point
  RichEdit_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TRichEdit, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  RichEdit_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TRichEdit): bool =
  return RichEdit_Dragging(this.Instance)

proc HasParent*(this: TRichEdit): bool =
  return RichEdit_HasParent(this.Instance)

proc Hide*(this: TRichEdit) =
  RichEdit_Hide(this.Instance)

proc Perform*(this: TRichEdit, Msg: uint32, WParam: uint, LParam: int): int =
  return RichEdit_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TRichEdit) =
  RichEdit_Refresh(this.Instance)

proc ScreenToClient*(this: TRichEdit, Point: TPoint): TPoint =
  var ps1 = Point
  RichEdit_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TRichEdit, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  RichEdit_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TRichEdit) =
  RichEdit_SendToBack(this.Instance)

proc Show*(this: TRichEdit) =
  RichEdit_Show(this.Instance)

proc GetTextBuf*(this: TRichEdit, Buffer: string, BufSize: int32): int32 =
  return RichEdit_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TRichEdit): int32 =
  return RichEdit_GetTextLen(this.Instance)

proc SetTextBuf*(this: TRichEdit, Buffer: string) =
  RichEdit_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TRichEdit, AName: string): TComponent =
  return RichEdit_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TRichEdit): string =
  return $RichEdit_GetNamePath(this.Instance)

proc Assign*(this: TRichEdit, Source: TObject) =
  RichEdit_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TRichEdit): TClass =
  return RichEdit_ClassType(this.Instance)

proc ClassName*(this: TRichEdit): string =
  return $RichEdit_ClassName(this.Instance)

proc InstanceSize*(this: TRichEdit): int32 =
  return RichEdit_InstanceSize(this.Instance)

proc InheritsFrom*(this: TRichEdit, AClass: TClass): bool =
  return RichEdit_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TRichEdit, Obj: TObject): bool =
  return RichEdit_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TRichEdit): int32 =
  return RichEdit_GetHashCode(this.Instance)

proc ToString*(this: TRichEdit): string =
  return $RichEdit_ToString(this.Instance)

proc AnchorToNeighbour*(this: TRichEdit, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  RichEdit_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TRichEdit, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  RichEdit_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TRichEdit, ASibling: TControl) =
  RichEdit_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TRichEdit, ASibling: TControl) =
  RichEdit_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TRichEdit, ASide: TAnchorKind, ASibling: TControl) =
  RichEdit_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TRichEdit, ATheAlign: TAlign, ASpace: int32) =
  RichEdit_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TRichEdit, ASpace: int32) =
  RichEdit_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TRichEdit, ASize: int32): int32 =
  return RichEdit_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TRichEdit, ASize: int32): int32 =
  return RichEdit_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TRichEdit, ASize: int32): int32 =
  return RichEdit_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TRichEdit, ASize: int32): int32 =
  return RichEdit_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TRichEdit, ASize: int32): int32 =
  return RichEdit_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TRichEdit, ASize: int32): int32 =
  return RichEdit_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TRichEdit, ASize: int32): int32 =
  return RichEdit_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TRichEdit, ASize: int32): int32 =
  return RichEdit_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TRichEdit, ASize: int32): int32 =
  return RichEdit_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TRichEdit, ASize: int32): int32 =
  return RichEdit_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TRichEdit, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  RichEdit_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TRichEdit, ADesignTimePPI: int32) =
  RichEdit_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TRichEdit, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  RichEdit_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TRichEdit): TAlign  =
  return RichEdit_GetAlign(this.Instance)

proc `Align=`*(this: TRichEdit, AValue: TAlign)  =
  RichEdit_SetAlign(this.Instance, AValue)

proc Alignment*(this: TRichEdit): TAlignment  =
  return RichEdit_GetAlignment(this.Instance)

proc `Alignment=`*(this: TRichEdit, AValue: TAlignment)  =
  RichEdit_SetAlignment(this.Instance, AValue)

proc Anchors*(this: TRichEdit): TAnchors  =
  return RichEdit_GetAnchors(this.Instance)

proc `Anchors=`*(this: TRichEdit, AValue: TAnchors)  =
  RichEdit_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TRichEdit): TBiDiMode  =
  return RichEdit_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TRichEdit, AValue: TBiDiMode)  =
  RichEdit_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TRichEdit): TBorderStyle  =
  return RichEdit_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TRichEdit, AValue: TBorderStyle)  =
  RichEdit_SetBorderStyle(this.Instance, AValue)

proc BorderWidth*(this: TRichEdit): int32  =
  return RichEdit_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TRichEdit, AValue: int32)  =
  RichEdit_SetBorderWidth(this.Instance, AValue)

proc Color*(this: TRichEdit): TColor  =
  return RichEdit_GetColor(this.Instance)

proc `Color=`*(this: TRichEdit, AValue: TColor)  =
  RichEdit_SetColor(this.Instance, AValue)

proc DragCursor*(this: TRichEdit): TCursor  =
  return RichEdit_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TRichEdit, AValue: TCursor)  =
  RichEdit_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TRichEdit): TDragKind  =
  return RichEdit_GetDragKind(this.Instance)

proc `DragKind=`*(this: TRichEdit, AValue: TDragKind)  =
  RichEdit_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TRichEdit): TDragMode  =
  return RichEdit_GetDragMode(this.Instance)

proc `DragMode=`*(this: TRichEdit, AValue: TDragMode)  =
  RichEdit_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TRichEdit): bool  =
  return RichEdit_GetEnabled(this.Instance)

proc `Enabled=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetEnabled(this.Instance, AValue)

proc Font*(this: TRichEdit): TFont  =
  return RichEdit_GetFont(this.Instance).AsFont

proc `Font=`*(this: TRichEdit, AValue: TFont)  =
  RichEdit_SetFont(this.Instance, CheckPtr(AValue))

proc HideSelection*(this: TRichEdit): bool  =
  return RichEdit_GetHideSelection(this.Instance)

proc `HideSelection=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetHideSelection(this.Instance, AValue)

proc Constraints*(this: TRichEdit): TSizeConstraints  =
  return RichEdit_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TRichEdit, AValue: TSizeConstraints)  =
  RichEdit_SetConstraints(this.Instance, CheckPtr(AValue))

proc Lines*(this: TRichEdit): TStrings  =
  return RichEdit_GetLines(this.Instance).AsStrings

proc `Lines=`*(this: TRichEdit, AValue: TStrings)  =
  RichEdit_SetLines(this.Instance, CheckPtr(AValue))

proc MaxLength*(this: TRichEdit): int32  =
  return RichEdit_GetMaxLength(this.Instance)

proc `MaxLength=`*(this: TRichEdit, AValue: int32)  =
  RichEdit_SetMaxLength(this.Instance, AValue)

proc ParentColor*(this: TRichEdit): bool  =
  return RichEdit_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetParentColor(this.Instance, AValue)

proc ParentFont*(this: TRichEdit): bool  =
  return RichEdit_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TRichEdit): bool  =
  return RichEdit_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TRichEdit): TPopupMenu  =
  return RichEdit_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TRichEdit, AValue: TPopupMenu)  =
  RichEdit_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ReadOnly*(this: TRichEdit): bool  =
  return RichEdit_GetReadOnly(this.Instance)

proc `ReadOnly=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetReadOnly(this.Instance, AValue)

proc ScrollBars*(this: TRichEdit): TScrollStyle  =
  return RichEdit_GetScrollBars(this.Instance)

proc `ScrollBars=`*(this: TRichEdit, AValue: TScrollStyle)  =
  RichEdit_SetScrollBars(this.Instance, AValue)

proc ShowHint*(this: TRichEdit): bool  =
  return RichEdit_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TRichEdit): TTabOrder  =
  return RichEdit_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TRichEdit, AValue: TTabOrder)  =
  RichEdit_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TRichEdit): bool  =
  return RichEdit_GetTabStop(this.Instance)

proc `TabStop=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetTabStop(this.Instance, AValue)

proc Visible*(this: TRichEdit): bool  =
  return RichEdit_GetVisible(this.Instance)

proc `Visible=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetVisible(this.Instance, AValue)

proc WantTabs*(this: TRichEdit): bool  =
  return RichEdit_GetWantTabs(this.Instance)

proc `WantTabs=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetWantTabs(this.Instance, AValue)

proc WantReturns*(this: TRichEdit): bool  =
  return RichEdit_GetWantReturns(this.Instance)

proc `WantReturns=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetWantReturns(this.Instance, AValue)

proc WordWrap*(this: TRichEdit): bool  =
  return RichEdit_GetWordWrap(this.Instance)

proc `WordWrap=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetWordWrap(this.Instance, AValue)

proc Zoom*(this: TRichEdit): int32  =
  return RichEdit_GetZoom(this.Instance)

proc `Zoom=`*(this: TRichEdit, AValue: int32)  =
  RichEdit_SetZoom(this.Instance, AValue)

proc `OnChange=`*(this: TRichEdit, AEventId: TNotifyEvent)  =
  RichEdit_SetOnChange(this.Instance, AEventId)

proc `OnClick=`*(this: TRichEdit, AEventId: TNotifyEvent)  =
  RichEdit_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TRichEdit, AEventId: TContextPopupEvent)  =
  RichEdit_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TRichEdit, AEventId: TNotifyEvent)  =
  RichEdit_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TRichEdit, AEventId: TDragDropEvent)  =
  RichEdit_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TRichEdit, AEventId: TDragOverEvent)  =
  RichEdit_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TRichEdit, AEventId: TEndDragEvent)  =
  RichEdit_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TRichEdit, AEventId: TNotifyEvent)  =
  RichEdit_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TRichEdit, AEventId: TNotifyEvent)  =
  RichEdit_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TRichEdit, AEventId: TKeyEvent)  =
  RichEdit_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TRichEdit, AEventId: TKeyPressEvent)  =
  RichEdit_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TRichEdit, AEventId: TKeyEvent)  =
  RichEdit_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TRichEdit, AEventId: TMouseEvent)  =
  RichEdit_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TRichEdit, AEventId: TNotifyEvent)  =
  RichEdit_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TRichEdit, AEventId: TNotifyEvent)  =
  RichEdit_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TRichEdit, AEventId: TMouseMoveEvent)  =
  RichEdit_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TRichEdit, AEventId: TMouseEvent)  =
  RichEdit_SetOnMouseUp(this.Instance, AEventId)

proc `OnMouseWheel=`*(this: TRichEdit, AEventId: TMouseWheelEvent)  =
  RichEdit_SetOnMouseWheel(this.Instance, AEventId)

proc `OnMouseWheelDown=`*(this: TRichEdit, AEventId: TMouseWheelUpDownEvent)  =
  RichEdit_SetOnMouseWheelDown(this.Instance, AEventId)

proc `OnMouseWheelUp=`*(this: TRichEdit, AEventId: TMouseWheelUpDownEvent)  =
  RichEdit_SetOnMouseWheelUp(this.Instance, AEventId)

proc DefAttributes*(this: TRichEdit): TTextAttributes  =
  return RichEdit_GetDefAttributes(this.Instance).AsTextAttributes

proc `DefAttributes=`*(this: TRichEdit, AValue: TTextAttributes)  =
  RichEdit_SetDefAttributes(this.Instance, CheckPtr(AValue))

proc SelAttributes*(this: TRichEdit): TTextAttributes  =
  return RichEdit_GetSelAttributes(this.Instance).AsTextAttributes

proc `SelAttributes=`*(this: TRichEdit, AValue: TTextAttributes)  =
  RichEdit_SetSelAttributes(this.Instance, CheckPtr(AValue))

proc Paragraph*(this: TRichEdit): TParaAttributes  =
  return RichEdit_GetParagraph(this.Instance).AsParaAttributes

proc CaretPos*(this: TRichEdit): TPoint  =
  RichEdit_GetCaretPos(this.Instance, result)

proc `CaretPos=`*(this: TRichEdit, AValue: TPoint)  =
  var ps1 = AValue
  RichEdit_SetCaretPos(this.Instance, ps1)

proc CanUndo*(this: TRichEdit): bool  =
  return RichEdit_GetCanUndo(this.Instance)

proc Modified*(this: TRichEdit): bool  =
  return RichEdit_GetModified(this.Instance)

proc `Modified=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetModified(this.Instance, AValue)

proc SelLength*(this: TRichEdit): int32  =
  return RichEdit_GetSelLength(this.Instance)

proc `SelLength=`*(this: TRichEdit, AValue: int32)  =
  RichEdit_SetSelLength(this.Instance, AValue)

proc SelStart*(this: TRichEdit): int32  =
  return RichEdit_GetSelStart(this.Instance)

proc `SelStart=`*(this: TRichEdit, AValue: int32)  =
  RichEdit_SetSelStart(this.Instance, AValue)

proc SelText*(this: TRichEdit): string  =
  return $RichEdit_GetSelText(this.Instance)

proc `SelText=`*(this: TRichEdit, AValue: string)  =
  RichEdit_SetSelText(this.Instance, AValue)

proc Text*(this: TRichEdit): string  =
  return $RichEdit_GetText(this.Instance)

proc `Text=`*(this: TRichEdit, AValue: string)  =
  RichEdit_SetText(this.Instance, AValue)

proc TextHint*(this: TRichEdit): string  =
  return $RichEdit_GetTextHint(this.Instance)

proc `TextHint=`*(this: TRichEdit, AValue: string)  =
  RichEdit_SetTextHint(this.Instance, AValue)

proc DockClientCount*(this: TRichEdit): int32  =
  return RichEdit_GetDockClientCount(this.Instance)

proc DockSite*(this: TRichEdit): bool  =
  return RichEdit_GetDockSite(this.Instance)

proc `DockSite=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetDockSite(this.Instance, AValue)

proc DoubleBuffered*(this: TRichEdit): bool  =
  return RichEdit_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetDoubleBuffered(this.Instance, AValue)

proc MouseInClient*(this: TRichEdit): bool  =
  return RichEdit_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TRichEdit): int32  =
  return RichEdit_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TRichEdit): TBrush  =
  return RichEdit_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TRichEdit): int32  =
  return RichEdit_GetControlCount(this.Instance)

proc Handle*(this: TRichEdit): HWND  =
  return RichEdit_GetHandle(this.Instance)

proc ParentDoubleBuffered*(this: TRichEdit): bool  =
  return RichEdit_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentWindow*(this: TRichEdit): HWND  =
  return RichEdit_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TRichEdit, AValue: HWND)  =
  RichEdit_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TRichEdit): bool  =
  return RichEdit_GetShowing(this.Instance)

proc UseDockManager*(this: TRichEdit): bool  =
  return RichEdit_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TRichEdit, AValue: bool)  =
  RichEdit_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TRichEdit): TAction  =
  return RichEdit_GetAction(this.Instance).AsAction

proc `Action=`*(this: TRichEdit, AValue: TAction)  =
  RichEdit_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TRichEdit): TRect  =
  RichEdit_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TRichEdit, AValue: TRect)  =
  var ps1 = AValue
  RichEdit_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TRichEdit): int32  =
  return RichEdit_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TRichEdit, AValue: int32)  =
  RichEdit_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TRichEdit): TPoint  =
  RichEdit_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TRichEdit): TRect  =
  RichEdit_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TRichEdit): int32  =
  return RichEdit_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TRichEdit, AValue: int32)  =
  RichEdit_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TRichEdit): TControlState  =
  return RichEdit_GetControlState(this.Instance)

proc `ControlState=`*(this: TRichEdit, AValue: TControlState)  =
  RichEdit_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TRichEdit): TControlStyle  =
  return RichEdit_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TRichEdit, AValue: TControlStyle)  =
  RichEdit_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TRichEdit): bool  =
  return RichEdit_GetFloating(this.Instance)

proc Parent*(this: TRichEdit): TWinControl  =
  return RichEdit_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TRichEdit, AValue: TWinControl)  =
  RichEdit_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TRichEdit): int32  =
  return RichEdit_GetLeft(this.Instance)

proc `Left=`*(this: TRichEdit, AValue: int32)  =
  RichEdit_SetLeft(this.Instance, AValue)

proc Top*(this: TRichEdit): int32  =
  return RichEdit_GetTop(this.Instance)

proc `Top=`*(this: TRichEdit, AValue: int32)  =
  RichEdit_SetTop(this.Instance, AValue)

proc Width*(this: TRichEdit): int32  =
  return RichEdit_GetWidth(this.Instance)

proc `Width=`*(this: TRichEdit, AValue: int32)  =
  RichEdit_SetWidth(this.Instance, AValue)

proc Height*(this: TRichEdit): int32  =
  return RichEdit_GetHeight(this.Instance)

proc `Height=`*(this: TRichEdit, AValue: int32)  =
  RichEdit_SetHeight(this.Instance, AValue)

proc Cursor*(this: TRichEdit): TCursor  =
  return RichEdit_GetCursor(this.Instance)

proc `Cursor=`*(this: TRichEdit, AValue: TCursor)  =
  RichEdit_SetCursor(this.Instance, AValue)

proc Hint*(this: TRichEdit): string  =
  return $RichEdit_GetHint(this.Instance)

proc `Hint=`*(this: TRichEdit, AValue: string)  =
  RichEdit_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TRichEdit): int32  =
  return RichEdit_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TRichEdit): int32  =
  return RichEdit_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TRichEdit, AValue: int32)  =
  RichEdit_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TRichEdit): TComponent  =
  return RichEdit_GetOwner(this.Instance).AsComponent

proc Name*(this: TRichEdit): string  =
  return $RichEdit_GetName(this.Instance)

proc `Name=`*(this: TRichEdit, AValue: string)  =
  RichEdit_SetName(this.Instance, AValue)

proc Tag*(this: TRichEdit): int  =
  return RichEdit_GetTag(this.Instance)

proc `Tag=`*(this: TRichEdit, AValue: int)  =
  RichEdit_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TRichEdit): TAnchorSide  =
  return RichEdit_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TRichEdit, AValue: TAnchorSide)  =
  RichEdit_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TRichEdit): TAnchorSide  =
  return RichEdit_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TRichEdit, AValue: TAnchorSide)  =
  RichEdit_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TRichEdit): TAnchorSide  =
  return RichEdit_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TRichEdit, AValue: TAnchorSide)  =
  RichEdit_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TRichEdit): TAnchorSide  =
  return RichEdit_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TRichEdit, AValue: TAnchorSide)  =
  RichEdit_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TRichEdit): TControlChildSizing  =
  return RichEdit_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TRichEdit, AValue: TControlChildSizing)  =
  RichEdit_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TRichEdit): TControlBorderSpacing  =
  return RichEdit_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TRichEdit, AValue: TControlBorderSpacing)  =
  RichEdit_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TRichEdit, Index: int32): TControl  =
  return RichEdit_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TRichEdit, Index: int32): TControl  =
  return RichEdit_GetControls(this.Instance, Index).AsControl

proc Components*(this: TRichEdit, AIndex: int32): TComponent  =
  return RichEdit_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TRichEdit, AKind: TAnchorKind): TAnchorSide  =
  return RichEdit_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TRichEditClass*(): TClass = RichEdit_StaticClassType()


#------------------------- TTrackBar -------------------------

proc Free*(this: TTrackBar) = defaultFree: TrackBar_Free

proc NewTrackBar*(AOwner: TComponent): TTrackBar =
  new(result)
  result.Instance = TrackBar_Create(CheckPtr(AOwner))

proc SetTick*(this: TTrackBar, Value: int32)  =
  TrackBar_SetTick(this.Instance, Value)

proc CanFocus*(this: TTrackBar): bool =
  return TrackBar_CanFocus(this.Instance)

proc ContainsControl*(this: TTrackBar, Control: TControl): bool =
  return TrackBar_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TTrackBar, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return TrackBar_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TTrackBar) =
  TrackBar_DisableAlign(this.Instance)

proc EnableAlign*(this: TTrackBar) =
  TrackBar_EnableAlign(this.Instance)

proc FindChildControl*(this: TTrackBar, ControlName: string): TControl =
  return TrackBar_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TTrackBar, AllLevels: bool) =
  TrackBar_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TTrackBar): bool =
  return TrackBar_Focused(this.Instance)

proc HandleAllocated*(this: TTrackBar): bool =
  return TrackBar_HandleAllocated(this.Instance)

proc InsertControl*(this: TTrackBar, AControl: TControl) =
  TrackBar_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TTrackBar) =
  TrackBar_Invalidate(this.Instance)

proc PaintTo*(this: TTrackBar, DC: HDC, X: int32, Y: int32) =
  TrackBar_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TTrackBar, AControl: TControl) =
  TrackBar_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TTrackBar) =
  TrackBar_Realign(this.Instance)

proc Repaint*(this: TTrackBar) =
  TrackBar_Repaint(this.Instance)

proc ScaleBy*(this: TTrackBar, M: int32, D: int32) =
  TrackBar_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TTrackBar, DeltaX: int32, DeltaY: int32) =
  TrackBar_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TTrackBar, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  TrackBar_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TTrackBar) =
  TrackBar_SetFocus(this.Instance)

proc Update*(this: TTrackBar) =
  TrackBar_Update(this.Instance)

proc BringToFront*(this: TTrackBar) =
  TrackBar_BringToFront(this.Instance)

proc ClientToScreen*(this: TTrackBar, Point: TPoint): TPoint =
  var ps1 = Point
  TrackBar_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TTrackBar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  TrackBar_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TTrackBar): bool =
  return TrackBar_Dragging(this.Instance)

proc HasParent*(this: TTrackBar): bool =
  return TrackBar_HasParent(this.Instance)

proc Hide*(this: TTrackBar) =
  TrackBar_Hide(this.Instance)

proc Perform*(this: TTrackBar, Msg: uint32, WParam: uint, LParam: int): int =
  return TrackBar_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TTrackBar) =
  TrackBar_Refresh(this.Instance)

proc ScreenToClient*(this: TTrackBar, Point: TPoint): TPoint =
  var ps1 = Point
  TrackBar_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TTrackBar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  TrackBar_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TTrackBar) =
  TrackBar_SendToBack(this.Instance)

proc Show*(this: TTrackBar) =
  TrackBar_Show(this.Instance)

proc GetTextBuf*(this: TTrackBar, Buffer: string, BufSize: int32): int32 =
  return TrackBar_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TTrackBar): int32 =
  return TrackBar_GetTextLen(this.Instance)

proc SetTextBuf*(this: TTrackBar, Buffer: string) =
  TrackBar_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TTrackBar, AName: string): TComponent =
  return TrackBar_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TTrackBar): string =
  return $TrackBar_GetNamePath(this.Instance)

proc Assign*(this: TTrackBar, Source: TObject) =
  TrackBar_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TTrackBar): TClass =
  return TrackBar_ClassType(this.Instance)

proc ClassName*(this: TTrackBar): string =
  return $TrackBar_ClassName(this.Instance)

proc InstanceSize*(this: TTrackBar): int32 =
  return TrackBar_InstanceSize(this.Instance)

proc InheritsFrom*(this: TTrackBar, AClass: TClass): bool =
  return TrackBar_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TTrackBar, Obj: TObject): bool =
  return TrackBar_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TTrackBar): int32 =
  return TrackBar_GetHashCode(this.Instance)

proc ToString*(this: TTrackBar): string =
  return $TrackBar_ToString(this.Instance)

proc AnchorToNeighbour*(this: TTrackBar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  TrackBar_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TTrackBar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  TrackBar_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TTrackBar, ASibling: TControl) =
  TrackBar_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TTrackBar, ASibling: TControl) =
  TrackBar_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TTrackBar, ASide: TAnchorKind, ASibling: TControl) =
  TrackBar_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TTrackBar, ATheAlign: TAlign, ASpace: int32) =
  TrackBar_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TTrackBar, ASpace: int32) =
  TrackBar_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TTrackBar, ASize: int32): int32 =
  return TrackBar_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TTrackBar, ASize: int32): int32 =
  return TrackBar_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TTrackBar, ASize: int32): int32 =
  return TrackBar_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TTrackBar, ASize: int32): int32 =
  return TrackBar_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TTrackBar, ASize: int32): int32 =
  return TrackBar_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TTrackBar, ASize: int32): int32 =
  return TrackBar_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TTrackBar, ASize: int32): int32 =
  return TrackBar_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TTrackBar, ASize: int32): int32 =
  return TrackBar_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TTrackBar, ASize: int32): int32 =
  return TrackBar_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TTrackBar, ASize: int32): int32 =
  return TrackBar_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TTrackBar, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  TrackBar_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TTrackBar, ADesignTimePPI: int32) =
  TrackBar_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TTrackBar, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  TrackBar_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TTrackBar): TAlign  =
  return TrackBar_GetAlign(this.Instance)

proc `Align=`*(this: TTrackBar, AValue: TAlign)  =
  TrackBar_SetAlign(this.Instance, AValue)

proc Anchors*(this: TTrackBar): TAnchors  =
  return TrackBar_GetAnchors(this.Instance)

proc `Anchors=`*(this: TTrackBar, AValue: TAnchors)  =
  TrackBar_SetAnchors(this.Instance, AValue)

proc BorderWidth*(this: TTrackBar): int32  =
  return TrackBar_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetBorderWidth(this.Instance, AValue)

proc DoubleBuffered*(this: TTrackBar): bool  =
  return TrackBar_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TTrackBar, AValue: bool)  =
  TrackBar_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TTrackBar): TCursor  =
  return TrackBar_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TTrackBar, AValue: TCursor)  =
  TrackBar_SetDragCursor(this.Instance, AValue)

proc DragMode*(this: TTrackBar): TDragMode  =
  return TrackBar_GetDragMode(this.Instance)

proc `DragMode=`*(this: TTrackBar, AValue: TDragMode)  =
  TrackBar_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TTrackBar): bool  =
  return TrackBar_GetEnabled(this.Instance)

proc `Enabled=`*(this: TTrackBar, AValue: bool)  =
  TrackBar_SetEnabled(this.Instance, AValue)

proc Constraints*(this: TTrackBar): TSizeConstraints  =
  return TrackBar_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TTrackBar, AValue: TSizeConstraints)  =
  TrackBar_SetConstraints(this.Instance, CheckPtr(AValue))

proc LineSize*(this: TTrackBar): int32  =
  return TrackBar_GetLineSize(this.Instance)

proc `LineSize=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetLineSize(this.Instance, AValue)

proc Max*(this: TTrackBar): int32  =
  return TrackBar_GetMax(this.Instance)

proc `Max=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetMax(this.Instance, AValue)

proc Min*(this: TTrackBar): int32  =
  return TrackBar_GetMin(this.Instance)

proc `Min=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetMin(this.Instance, AValue)

proc Orientation*(this: TTrackBar): TTrackBarOrientation  =
  return TrackBar_GetOrientation(this.Instance)

proc `Orientation=`*(this: TTrackBar, AValue: TTrackBarOrientation)  =
  TrackBar_SetOrientation(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TTrackBar): bool  =
  return TrackBar_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TTrackBar, AValue: bool)  =
  TrackBar_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentShowHint*(this: TTrackBar): bool  =
  return TrackBar_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TTrackBar, AValue: bool)  =
  TrackBar_SetParentShowHint(this.Instance, AValue)

proc PageSize*(this: TTrackBar): int32  =
  return TrackBar_GetPageSize(this.Instance)

proc `PageSize=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetPageSize(this.Instance, AValue)

proc PopupMenu*(this: TTrackBar): TPopupMenu  =
  return TrackBar_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TTrackBar, AValue: TPopupMenu)  =
  TrackBar_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc Frequency*(this: TTrackBar): int32  =
  return TrackBar_GetFrequency(this.Instance)

proc `Frequency=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetFrequency(this.Instance, AValue)

proc Position*(this: TTrackBar): int32  =
  return TrackBar_GetPosition(this.Instance)

proc `Position=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetPosition(this.Instance, AValue)

proc SelEnd*(this: TTrackBar): int32  =
  return TrackBar_GetSelEnd(this.Instance)

proc `SelEnd=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetSelEnd(this.Instance, AValue)

proc SelStart*(this: TTrackBar): int32  =
  return TrackBar_GetSelStart(this.Instance)

proc `SelStart=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetSelStart(this.Instance, AValue)

proc ShowHint*(this: TTrackBar): bool  =
  return TrackBar_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TTrackBar, AValue: bool)  =
  TrackBar_SetShowHint(this.Instance, AValue)

proc ShowSelRange*(this: TTrackBar): bool  =
  return TrackBar_GetShowSelRange(this.Instance)

proc `ShowSelRange=`*(this: TTrackBar, AValue: bool)  =
  TrackBar_SetShowSelRange(this.Instance, AValue)

proc TabOrder*(this: TTrackBar): TTabOrder  =
  return TrackBar_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TTrackBar, AValue: TTabOrder)  =
  TrackBar_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TTrackBar): bool  =
  return TrackBar_GetTabStop(this.Instance)

proc `TabStop=`*(this: TTrackBar, AValue: bool)  =
  TrackBar_SetTabStop(this.Instance, AValue)

proc TickMarks*(this: TTrackBar): TTickMark  =
  return TrackBar_GetTickMarks(this.Instance)

proc `TickMarks=`*(this: TTrackBar, AValue: TTickMark)  =
  TrackBar_SetTickMarks(this.Instance, AValue)

proc TickStyle*(this: TTrackBar): TTickStyle  =
  return TrackBar_GetTickStyle(this.Instance)

proc `TickStyle=`*(this: TTrackBar, AValue: TTickStyle)  =
  TrackBar_SetTickStyle(this.Instance, AValue)

proc Visible*(this: TTrackBar): bool  =
  return TrackBar_GetVisible(this.Instance)

proc `Visible=`*(this: TTrackBar, AValue: bool)  =
  TrackBar_SetVisible(this.Instance, AValue)

proc `OnContextPopup=`*(this: TTrackBar, AEventId: TContextPopupEvent)  =
  TrackBar_SetOnContextPopup(this.Instance, AEventId)

proc `OnChange=`*(this: TTrackBar, AEventId: TNotifyEvent)  =
  TrackBar_SetOnChange(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TTrackBar, AEventId: TDragDropEvent)  =
  TrackBar_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TTrackBar, AEventId: TDragOverEvent)  =
  TrackBar_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TTrackBar, AEventId: TEndDragEvent)  =
  TrackBar_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TTrackBar, AEventId: TNotifyEvent)  =
  TrackBar_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TTrackBar, AEventId: TNotifyEvent)  =
  TrackBar_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TTrackBar, AEventId: TKeyEvent)  =
  TrackBar_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TTrackBar, AEventId: TKeyPressEvent)  =
  TrackBar_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TTrackBar, AEventId: TKeyEvent)  =
  TrackBar_SetOnKeyUp(this.Instance, AEventId)

proc DockClientCount*(this: TTrackBar): int32  =
  return TrackBar_GetDockClientCount(this.Instance)

proc DockSite*(this: TTrackBar): bool  =
  return TrackBar_GetDockSite(this.Instance)

proc `DockSite=`*(this: TTrackBar, AValue: bool)  =
  TrackBar_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TTrackBar): bool  =
  return TrackBar_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TTrackBar): int32  =
  return TrackBar_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TTrackBar): TBrush  =
  return TrackBar_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TTrackBar): int32  =
  return TrackBar_GetControlCount(this.Instance)

proc Handle*(this: TTrackBar): HWND  =
  return TrackBar_GetHandle(this.Instance)

proc ParentWindow*(this: TTrackBar): HWND  =
  return TrackBar_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TTrackBar, AValue: HWND)  =
  TrackBar_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TTrackBar): bool  =
  return TrackBar_GetShowing(this.Instance)

proc UseDockManager*(this: TTrackBar): bool  =
  return TrackBar_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TTrackBar, AValue: bool)  =
  TrackBar_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TTrackBar): TAction  =
  return TrackBar_GetAction(this.Instance).AsAction

proc `Action=`*(this: TTrackBar, AValue: TAction)  =
  TrackBar_SetAction(this.Instance, CheckPtr(AValue))

proc BiDiMode*(this: TTrackBar): TBiDiMode  =
  return TrackBar_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TTrackBar, AValue: TBiDiMode)  =
  TrackBar_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TTrackBar): TRect  =
  TrackBar_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TTrackBar, AValue: TRect)  =
  var ps1 = AValue
  TrackBar_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TTrackBar): int32  =
  return TrackBar_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TTrackBar): TPoint  =
  TrackBar_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TTrackBar): TRect  =
  TrackBar_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TTrackBar): int32  =
  return TrackBar_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TTrackBar): TControlState  =
  return TrackBar_GetControlState(this.Instance)

proc `ControlState=`*(this: TTrackBar, AValue: TControlState)  =
  TrackBar_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TTrackBar): TControlStyle  =
  return TrackBar_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TTrackBar, AValue: TControlStyle)  =
  TrackBar_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TTrackBar): bool  =
  return TrackBar_GetFloating(this.Instance)

proc Parent*(this: TTrackBar): TWinControl  =
  return TrackBar_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TTrackBar, AValue: TWinControl)  =
  TrackBar_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TTrackBar): int32  =
  return TrackBar_GetLeft(this.Instance)

proc `Left=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetLeft(this.Instance, AValue)

proc Top*(this: TTrackBar): int32  =
  return TrackBar_GetTop(this.Instance)

proc `Top=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetTop(this.Instance, AValue)

proc Width*(this: TTrackBar): int32  =
  return TrackBar_GetWidth(this.Instance)

proc `Width=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetWidth(this.Instance, AValue)

proc Height*(this: TTrackBar): int32  =
  return TrackBar_GetHeight(this.Instance)

proc `Height=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetHeight(this.Instance, AValue)

proc Cursor*(this: TTrackBar): TCursor  =
  return TrackBar_GetCursor(this.Instance)

proc `Cursor=`*(this: TTrackBar, AValue: TCursor)  =
  TrackBar_SetCursor(this.Instance, AValue)

proc Hint*(this: TTrackBar): string  =
  return $TrackBar_GetHint(this.Instance)

proc `Hint=`*(this: TTrackBar, AValue: string)  =
  TrackBar_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TTrackBar): int32  =
  return TrackBar_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TTrackBar): int32  =
  return TrackBar_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TTrackBar, AValue: int32)  =
  TrackBar_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TTrackBar): TComponent  =
  return TrackBar_GetOwner(this.Instance).AsComponent

proc Name*(this: TTrackBar): string  =
  return $TrackBar_GetName(this.Instance)

proc `Name=`*(this: TTrackBar, AValue: string)  =
  TrackBar_SetName(this.Instance, AValue)

proc Tag*(this: TTrackBar): int  =
  return TrackBar_GetTag(this.Instance)

proc `Tag=`*(this: TTrackBar, AValue: int)  =
  TrackBar_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TTrackBar): TAnchorSide  =
  return TrackBar_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TTrackBar, AValue: TAnchorSide)  =
  TrackBar_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TTrackBar): TAnchorSide  =
  return TrackBar_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TTrackBar, AValue: TAnchorSide)  =
  TrackBar_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TTrackBar): TAnchorSide  =
  return TrackBar_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TTrackBar, AValue: TAnchorSide)  =
  TrackBar_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TTrackBar): TAnchorSide  =
  return TrackBar_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TTrackBar, AValue: TAnchorSide)  =
  TrackBar_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TTrackBar): TControlChildSizing  =
  return TrackBar_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TTrackBar, AValue: TControlChildSizing)  =
  TrackBar_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TTrackBar): TControlBorderSpacing  =
  return TrackBar_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TTrackBar, AValue: TControlBorderSpacing)  =
  TrackBar_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TTrackBar, Index: int32): TControl  =
  return TrackBar_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TTrackBar, Index: int32): TControl  =
  return TrackBar_GetControls(this.Instance, Index).AsControl

proc Components*(this: TTrackBar, AIndex: int32): TComponent  =
  return TrackBar_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TTrackBar, AKind: TAnchorKind): TAnchorSide  =
  return TrackBar_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TTrackBarClass*(): TClass = TrackBar_StaticClassType()


#------------------------- TImageList -------------------------

proc Free*(this: TImageList) = defaultFree: ImageList_Free

proc NewImageList*(AOwner: TComponent): TImageList =
  new(result)
  result.Instance = ImageList_Create(CheckPtr(AOwner))

proc StretchDraw*(this: TImageList, ACanvas: TCanvas, AIndex: int32, ARect: TRect, AEnabled: bool)  =
  var ps3 = ARect
  ImageList_StretchDraw(this.Instance, CheckPtr(ACanvas), AIndex, ps3, AEnabled)

proc AddSliced*(this: TImageList, Image: TBitmap, AHorizontalCount: int32, AVerticalCount: int32): int32  =
  return ImageList_AddSliced(this.Instance, CheckPtr(Image), AHorizontalCount, AVerticalCount)

proc GetHotSpot*(this: TImageList): TPoint  =
  ImageList_GetHotSpot(this.Instance, result)

proc HideDragImage*(this: TImageList)  =
  ImageList_HideDragImage(this.Instance)

proc ShowDragImage*(this: TImageList)  =
  ImageList_ShowDragImage(this.Instance)

proc Assign*(this: TImageList, Source: TObject) =
  ImageList_Assign(this.Instance, CheckPtr(Source))

proc Add*(this: TImageList, Image: TBitmap, Mask: TBitmap): int32  =
  return ImageList_Add(this.Instance, CheckPtr(Image), CheckPtr(Mask))

proc AddIcon*(this: TImageList, Image: TIcon): int32  =
  return ImageList_AddIcon(this.Instance, CheckPtr(Image))

proc AddImages*(this: TImageList, Value: TImageList)  =
  ImageList_AddImages(this.Instance, CheckPtr(Value))

proc AddMasked*(this: TImageList, Image: TBitmap, MaskColor: TColor): int32  =
  return ImageList_AddMasked(this.Instance, CheckPtr(Image), MaskColor)

proc Clear*(this: TImageList)  =
  ImageList_Clear(this.Instance)

proc Delete*(this: TImageList, Index: int32)  =
  ImageList_Delete(this.Instance, Index)

proc Insert*(this: TImageList, Index: int32, Image: TBitmap, Mask: TBitmap)  =
  ImageList_Insert(this.Instance, Index, CheckPtr(Image), CheckPtr(Mask))

proc InsertIcon*(this: TImageList, Index: int32, Image: TIcon)  =
  ImageList_InsertIcon(this.Instance, Index, CheckPtr(Image))

proc InsertMasked*(this: TImageList, Index: int32, Image: TBitmap, MaskColor: TColor)  =
  ImageList_InsertMasked(this.Instance, Index, CheckPtr(Image), MaskColor)

proc Move*(this: TImageList, CurIndex: int32, NewIndex: int32)  =
  ImageList_Move(this.Instance, CurIndex, NewIndex)

proc Replace*(this: TImageList, Index: int32, Image: TBitmap, Mask: TBitmap)  =
  ImageList_Replace(this.Instance, Index, CheckPtr(Image), CheckPtr(Mask))

proc ReplaceMasked*(this: TImageList, Index: int32, NewImage: TBitmap, MaskColor: TColor)  =
  ImageList_ReplaceMasked(this.Instance, Index, CheckPtr(NewImage), MaskColor)

proc BeginUpdate*(this: TImageList)  =
  ImageList_BeginUpdate(this.Instance)

proc EndUpdate*(this: TImageList)  =
  ImageList_EndUpdate(this.Instance)

proc FindComponent*(this: TImageList, AName: string): TComponent =
  return ImageList_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TImageList): string =
  return $ImageList_GetNamePath(this.Instance)

proc HasParent*(this: TImageList): bool =
  return ImageList_HasParent(this.Instance)

proc ClassType*(this: TImageList): TClass =
  return ImageList_ClassType(this.Instance)

proc ClassName*(this: TImageList): string =
  return $ImageList_ClassName(this.Instance)

proc InstanceSize*(this: TImageList): int32 =
  return ImageList_InstanceSize(this.Instance)

proc InheritsFrom*(this: TImageList, AClass: TClass): bool =
  return ImageList_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TImageList, Obj: TObject): bool =
  return ImageList_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TImageList): int32 =
  return ImageList_GetHashCode(this.Instance)

proc ToString*(this: TImageList): string =
  return $ImageList_ToString(this.Instance)

proc BlendColor*(this: TImageList): TColor  =
  return ImageList_GetBlendColor(this.Instance)

proc `BlendColor=`*(this: TImageList, AValue: TColor)  =
  ImageList_SetBlendColor(this.Instance, AValue)

proc BkColor*(this: TImageList): TColor  =
  return ImageList_GetBkColor(this.Instance)

proc `BkColor=`*(this: TImageList, AValue: TColor)  =
  ImageList_SetBkColor(this.Instance, AValue)

proc AllocBy*(this: TImageList): int32  =
  return ImageList_GetAllocBy(this.Instance)

proc `AllocBy=`*(this: TImageList, AValue: int32)  =
  ImageList_SetAllocBy(this.Instance, AValue)

proc DrawingStyle*(this: TImageList): TDrawingStyle  =
  return ImageList_GetDrawingStyle(this.Instance)

proc `DrawingStyle=`*(this: TImageList, AValue: TDrawingStyle)  =
  ImageList_SetDrawingStyle(this.Instance, AValue)

proc Height*(this: TImageList): int32  =
  return ImageList_GetHeight(this.Instance)

proc `Height=`*(this: TImageList, AValue: int32)  =
  ImageList_SetHeight(this.Instance, AValue)

proc ImageType*(this: TImageList): TImageType  =
  return ImageList_GetImageType(this.Instance)

proc `ImageType=`*(this: TImageList, AValue: TImageType)  =
  ImageList_SetImageType(this.Instance, AValue)

proc Masked*(this: TImageList): bool  =
  return ImageList_GetMasked(this.Instance)

proc `Masked=`*(this: TImageList, AValue: bool)  =
  ImageList_SetMasked(this.Instance, AValue)

proc `OnChange=`*(this: TImageList, AEventId: TNotifyEvent)  =
  ImageList_SetOnChange(this.Instance, AEventId)

proc ShareImages*(this: TImageList): bool  =
  return ImageList_GetShareImages(this.Instance)

proc `ShareImages=`*(this: TImageList, AValue: bool)  =
  ImageList_SetShareImages(this.Instance, AValue)

proc Width*(this: TImageList): int32  =
  return ImageList_GetWidth(this.Instance)

proc `Width=`*(this: TImageList, AValue: int32)  =
  ImageList_SetWidth(this.Instance, AValue)

proc DragCursor*(this: TImageList): TCursor  =
  return ImageList_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TImageList, AValue: TCursor)  =
  ImageList_SetDragCursor(this.Instance, AValue)

proc Dragging*(this: TImageList): bool  =
  return ImageList_GetDragging(this.Instance)

proc Count*(this: TImageList): int32  =
  return ImageList_GetCount(this.Instance)

proc ComponentCount*(this: TImageList): int32  =
  return ImageList_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TImageList): int32  =
  return ImageList_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TImageList, AValue: int32)  =
  ImageList_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TImageList): TComponent  =
  return ImageList_GetOwner(this.Instance).AsComponent

proc Name*(this: TImageList): string  =
  return $ImageList_GetName(this.Instance)

proc `Name=`*(this: TImageList, AValue: string)  =
  ImageList_SetName(this.Instance, AValue)

proc Tag*(this: TImageList): int  =
  return ImageList_GetTag(this.Instance)

proc `Tag=`*(this: TImageList, AValue: int)  =
  ImageList_SetTag(this.Instance, AValue)

proc Components*(this: TImageList, AIndex: int32): TComponent  =
  return ImageList_GetComponents(this.Instance, AIndex).AsComponent

proc TImageListClass*(): TClass = ImageList_StaticClassType()


proc Draw*(this: TImageList, Canvas: TCanvas, X: int32, Y: int32, Index: int32, Enabled: bool)  =
  ImageList_Draw1(this.Instance, CheckPtr(Canvas), X, Y, Index, Enabled)

proc DrawOverlay*(this: TImageList, Canvas: TCanvas, X: int32, Y: int32, ImageIndex: int32, Overlay: uint8, Enabled: bool)  =
  ImageList_DrawOverlay1(this.Instance, CheckPtr(Canvas), X, Y, ImageIndex, Overlay, Enabled)

proc GetIcon*(this: TImageList, Index: int32, Image: TIcon)  =
  ImageList_GetIcon1(this.Instance, Index, CheckPtr(Image))

#------------------------- TUpDown -------------------------

proc Free*(this: TUpDown) = defaultFree: UpDown_Free

proc NewUpDown*(AOwner: TComponent): TUpDown =
  new(result)
  result.Instance = UpDown_Create(CheckPtr(AOwner))

proc CanFocus*(this: TUpDown): bool =
  return UpDown_CanFocus(this.Instance)

proc ContainsControl*(this: TUpDown, Control: TControl): bool =
  return UpDown_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TUpDown, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return UpDown_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TUpDown) =
  UpDown_DisableAlign(this.Instance)

proc EnableAlign*(this: TUpDown) =
  UpDown_EnableAlign(this.Instance)

proc FindChildControl*(this: TUpDown, ControlName: string): TControl =
  return UpDown_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TUpDown, AllLevels: bool) =
  UpDown_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TUpDown): bool =
  return UpDown_Focused(this.Instance)

proc HandleAllocated*(this: TUpDown): bool =
  return UpDown_HandleAllocated(this.Instance)

proc InsertControl*(this: TUpDown, AControl: TControl) =
  UpDown_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TUpDown) =
  UpDown_Invalidate(this.Instance)

proc PaintTo*(this: TUpDown, DC: HDC, X: int32, Y: int32) =
  UpDown_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TUpDown, AControl: TControl) =
  UpDown_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TUpDown) =
  UpDown_Realign(this.Instance)

proc Repaint*(this: TUpDown) =
  UpDown_Repaint(this.Instance)

proc ScaleBy*(this: TUpDown, M: int32, D: int32) =
  UpDown_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TUpDown, DeltaX: int32, DeltaY: int32) =
  UpDown_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TUpDown, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  UpDown_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TUpDown) =
  UpDown_SetFocus(this.Instance)

proc Update*(this: TUpDown) =
  UpDown_Update(this.Instance)

proc BringToFront*(this: TUpDown) =
  UpDown_BringToFront(this.Instance)

proc ClientToScreen*(this: TUpDown, Point: TPoint): TPoint =
  var ps1 = Point
  UpDown_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TUpDown, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  UpDown_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TUpDown): bool =
  return UpDown_Dragging(this.Instance)

proc HasParent*(this: TUpDown): bool =
  return UpDown_HasParent(this.Instance)

proc Hide*(this: TUpDown) =
  UpDown_Hide(this.Instance)

proc Perform*(this: TUpDown, Msg: uint32, WParam: uint, LParam: int): int =
  return UpDown_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TUpDown) =
  UpDown_Refresh(this.Instance)

proc ScreenToClient*(this: TUpDown, Point: TPoint): TPoint =
  var ps1 = Point
  UpDown_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TUpDown, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  UpDown_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TUpDown) =
  UpDown_SendToBack(this.Instance)

proc Show*(this: TUpDown) =
  UpDown_Show(this.Instance)

proc GetTextBuf*(this: TUpDown, Buffer: string, BufSize: int32): int32 =
  return UpDown_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TUpDown): int32 =
  return UpDown_GetTextLen(this.Instance)

proc SetTextBuf*(this: TUpDown, Buffer: string) =
  UpDown_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TUpDown, AName: string): TComponent =
  return UpDown_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TUpDown): string =
  return $UpDown_GetNamePath(this.Instance)

proc Assign*(this: TUpDown, Source: TObject) =
  UpDown_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TUpDown): TClass =
  return UpDown_ClassType(this.Instance)

proc ClassName*(this: TUpDown): string =
  return $UpDown_ClassName(this.Instance)

proc InstanceSize*(this: TUpDown): int32 =
  return UpDown_InstanceSize(this.Instance)

proc InheritsFrom*(this: TUpDown, AClass: TClass): bool =
  return UpDown_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TUpDown, Obj: TObject): bool =
  return UpDown_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TUpDown): int32 =
  return UpDown_GetHashCode(this.Instance)

proc ToString*(this: TUpDown): string =
  return $UpDown_ToString(this.Instance)

proc AnchorToNeighbour*(this: TUpDown, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  UpDown_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TUpDown, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  UpDown_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TUpDown, ASibling: TControl) =
  UpDown_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TUpDown, ASibling: TControl) =
  UpDown_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TUpDown, ASide: TAnchorKind, ASibling: TControl) =
  UpDown_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TUpDown, ATheAlign: TAlign, ASpace: int32) =
  UpDown_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TUpDown, ASpace: int32) =
  UpDown_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TUpDown, ASize: int32): int32 =
  return UpDown_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TUpDown, ASize: int32): int32 =
  return UpDown_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TUpDown, ASize: int32): int32 =
  return UpDown_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TUpDown, ASize: int32): int32 =
  return UpDown_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TUpDown, ASize: int32): int32 =
  return UpDown_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TUpDown, ASize: int32): int32 =
  return UpDown_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TUpDown, ASize: int32): int32 =
  return UpDown_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TUpDown, ASize: int32): int32 =
  return UpDown_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TUpDown, ASize: int32): int32 =
  return UpDown_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TUpDown, ASize: int32): int32 =
  return UpDown_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TUpDown, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  UpDown_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TUpDown, ADesignTimePPI: int32) =
  UpDown_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TUpDown, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  UpDown_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Anchors*(this: TUpDown): TAnchors  =
  return UpDown_GetAnchors(this.Instance)

proc `Anchors=`*(this: TUpDown, AValue: TAnchors)  =
  UpDown_SetAnchors(this.Instance, AValue)

proc DoubleBuffered*(this: TUpDown): bool  =
  return UpDown_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TUpDown, AValue: bool)  =
  UpDown_SetDoubleBuffered(this.Instance, AValue)

proc Enabled*(this: TUpDown): bool  =
  return UpDown_GetEnabled(this.Instance)

proc `Enabled=`*(this: TUpDown, AValue: bool)  =
  UpDown_SetEnabled(this.Instance, AValue)

proc Hint*(this: TUpDown): string  =
  return $UpDown_GetHint(this.Instance)

proc `Hint=`*(this: TUpDown, AValue: string)  =
  UpDown_SetHint(this.Instance, AValue)

proc Min*(this: TUpDown): int32  =
  return UpDown_GetMin(this.Instance)

proc `Min=`*(this: TUpDown, AValue: int32)  =
  UpDown_SetMin(this.Instance, AValue)

proc Max*(this: TUpDown): int32  =
  return UpDown_GetMax(this.Instance)

proc `Max=`*(this: TUpDown, AValue: int32)  =
  UpDown_SetMax(this.Instance, AValue)

proc Increment*(this: TUpDown): int32  =
  return UpDown_GetIncrement(this.Instance)

proc `Increment=`*(this: TUpDown, AValue: int32)  =
  UpDown_SetIncrement(this.Instance, AValue)

proc Constraints*(this: TUpDown): TSizeConstraints  =
  return UpDown_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TUpDown, AValue: TSizeConstraints)  =
  UpDown_SetConstraints(this.Instance, CheckPtr(AValue))

proc Orientation*(this: TUpDown): TUDOrientation  =
  return UpDown_GetOrientation(this.Instance)

proc `Orientation=`*(this: TUpDown, AValue: TUDOrientation)  =
  UpDown_SetOrientation(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TUpDown): bool  =
  return UpDown_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TUpDown, AValue: bool)  =
  UpDown_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentShowHint*(this: TUpDown): bool  =
  return UpDown_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TUpDown, AValue: bool)  =
  UpDown_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TUpDown): TPopupMenu  =
  return UpDown_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TUpDown, AValue: TPopupMenu)  =
  UpDown_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc Position*(this: TUpDown): int32  =
  return UpDown_GetPosition(this.Instance)

proc `Position=`*(this: TUpDown, AValue: int32)  =
  UpDown_SetPosition(this.Instance, AValue)

proc ShowHint*(this: TUpDown): bool  =
  return UpDown_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TUpDown, AValue: bool)  =
  UpDown_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TUpDown): TTabOrder  =
  return UpDown_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TUpDown, AValue: TTabOrder)  =
  UpDown_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TUpDown): bool  =
  return UpDown_GetTabStop(this.Instance)

proc `TabStop=`*(this: TUpDown, AValue: bool)  =
  UpDown_SetTabStop(this.Instance, AValue)

proc Visible*(this: TUpDown): bool  =
  return UpDown_GetVisible(this.Instance)

proc `Visible=`*(this: TUpDown, AValue: bool)  =
  UpDown_SetVisible(this.Instance, AValue)

proc Wrap*(this: TUpDown): bool  =
  return UpDown_GetWrap(this.Instance)

proc `Wrap=`*(this: TUpDown, AValue: bool)  =
  UpDown_SetWrap(this.Instance, AValue)

proc `OnChanging=`*(this: TUpDown, AEventId: TUDChangingEvent)  =
  UpDown_SetOnChanging(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TUpDown, AEventId: TContextPopupEvent)  =
  UpDown_SetOnContextPopup(this.Instance, AEventId)

proc `OnClick=`*(this: TUpDown, AEventId: TUDClickEvent)  =
  UpDown_SetOnClick(this.Instance, AEventId)

proc `OnEnter=`*(this: TUpDown, AEventId: TNotifyEvent)  =
  UpDown_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TUpDown, AEventId: TNotifyEvent)  =
  UpDown_SetOnExit(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TUpDown, AEventId: TMouseEvent)  =
  UpDown_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TUpDown, AEventId: TNotifyEvent)  =
  UpDown_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TUpDown, AEventId: TNotifyEvent)  =
  UpDown_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TUpDown, AEventId: TMouseMoveEvent)  =
  UpDown_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TUpDown, AEventId: TMouseEvent)  =
  UpDown_SetOnMouseUp(this.Instance, AEventId)

proc DockClientCount*(this: TUpDown): int32  =
  return UpDown_GetDockClientCount(this.Instance)

proc DockSite*(this: TUpDown): bool  =
  return UpDown_GetDockSite(this.Instance)

proc `DockSite=`*(this: TUpDown, AValue: bool)  =
  UpDown_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TUpDown): bool  =
  return UpDown_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TUpDown): int32  =
  return UpDown_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TUpDown): TBrush  =
  return UpDown_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TUpDown): int32  =
  return UpDown_GetControlCount(this.Instance)

proc Handle*(this: TUpDown): HWND  =
  return UpDown_GetHandle(this.Instance)

proc ParentWindow*(this: TUpDown): HWND  =
  return UpDown_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TUpDown, AValue: HWND)  =
  UpDown_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TUpDown): bool  =
  return UpDown_GetShowing(this.Instance)

proc UseDockManager*(this: TUpDown): bool  =
  return UpDown_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TUpDown, AValue: bool)  =
  UpDown_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TUpDown): TAction  =
  return UpDown_GetAction(this.Instance).AsAction

proc `Action=`*(this: TUpDown, AValue: TAction)  =
  UpDown_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TUpDown): TAlign  =
  return UpDown_GetAlign(this.Instance)

proc `Align=`*(this: TUpDown, AValue: TAlign)  =
  UpDown_SetAlign(this.Instance, AValue)

proc BiDiMode*(this: TUpDown): TBiDiMode  =
  return UpDown_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TUpDown, AValue: TBiDiMode)  =
  UpDown_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TUpDown): TRect  =
  UpDown_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TUpDown, AValue: TRect)  =
  var ps1 = AValue
  UpDown_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TUpDown): int32  =
  return UpDown_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TUpDown, AValue: int32)  =
  UpDown_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TUpDown): TPoint  =
  UpDown_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TUpDown): TRect  =
  UpDown_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TUpDown): int32  =
  return UpDown_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TUpDown, AValue: int32)  =
  UpDown_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TUpDown): TControlState  =
  return UpDown_GetControlState(this.Instance)

proc `ControlState=`*(this: TUpDown, AValue: TControlState)  =
  UpDown_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TUpDown): TControlStyle  =
  return UpDown_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TUpDown, AValue: TControlStyle)  =
  UpDown_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TUpDown): bool  =
  return UpDown_GetFloating(this.Instance)

proc Parent*(this: TUpDown): TWinControl  =
  return UpDown_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TUpDown, AValue: TWinControl)  =
  UpDown_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TUpDown): int32  =
  return UpDown_GetLeft(this.Instance)

proc `Left=`*(this: TUpDown, AValue: int32)  =
  UpDown_SetLeft(this.Instance, AValue)

proc Top*(this: TUpDown): int32  =
  return UpDown_GetTop(this.Instance)

proc `Top=`*(this: TUpDown, AValue: int32)  =
  UpDown_SetTop(this.Instance, AValue)

proc Width*(this: TUpDown): int32  =
  return UpDown_GetWidth(this.Instance)

proc `Width=`*(this: TUpDown, AValue: int32)  =
  UpDown_SetWidth(this.Instance, AValue)

proc Height*(this: TUpDown): int32  =
  return UpDown_GetHeight(this.Instance)

proc `Height=`*(this: TUpDown, AValue: int32)  =
  UpDown_SetHeight(this.Instance, AValue)

proc Cursor*(this: TUpDown): TCursor  =
  return UpDown_GetCursor(this.Instance)

proc `Cursor=`*(this: TUpDown, AValue: TCursor)  =
  UpDown_SetCursor(this.Instance, AValue)

proc ComponentCount*(this: TUpDown): int32  =
  return UpDown_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TUpDown): int32  =
  return UpDown_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TUpDown, AValue: int32)  =
  UpDown_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TUpDown): TComponent  =
  return UpDown_GetOwner(this.Instance).AsComponent

proc Name*(this: TUpDown): string  =
  return $UpDown_GetName(this.Instance)

proc `Name=`*(this: TUpDown, AValue: string)  =
  UpDown_SetName(this.Instance, AValue)

proc Tag*(this: TUpDown): int  =
  return UpDown_GetTag(this.Instance)

proc `Tag=`*(this: TUpDown, AValue: int)  =
  UpDown_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TUpDown): TAnchorSide  =
  return UpDown_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TUpDown, AValue: TAnchorSide)  =
  UpDown_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TUpDown): TAnchorSide  =
  return UpDown_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TUpDown, AValue: TAnchorSide)  =
  UpDown_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TUpDown): TAnchorSide  =
  return UpDown_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TUpDown, AValue: TAnchorSide)  =
  UpDown_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TUpDown): TAnchorSide  =
  return UpDown_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TUpDown, AValue: TAnchorSide)  =
  UpDown_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TUpDown): TControlChildSizing  =
  return UpDown_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TUpDown, AValue: TControlChildSizing)  =
  UpDown_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TUpDown): TControlBorderSpacing  =
  return UpDown_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TUpDown, AValue: TControlBorderSpacing)  =
  UpDown_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TUpDown, Index: int32): TControl  =
  return UpDown_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TUpDown, Index: int32): TControl  =
  return UpDown_GetControls(this.Instance, Index).AsControl

proc Components*(this: TUpDown, AIndex: int32): TComponent  =
  return UpDown_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TUpDown, AKind: TAnchorKind): TAnchorSide  =
  return UpDown_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TUpDownClass*(): TClass = UpDown_StaticClassType()


#------------------------- TProgressBar -------------------------

proc Free*(this: TProgressBar) = defaultFree: ProgressBar_Free

proc NewProgressBar*(AOwner: TComponent): TProgressBar =
  new(result)
  result.Instance = ProgressBar_Create(CheckPtr(AOwner))

proc StepIt*(this: TProgressBar)  =
  ProgressBar_StepIt(this.Instance)

proc StepBy*(this: TProgressBar, Delta: int32)  =
  ProgressBar_StepBy(this.Instance, Delta)

proc CanFocus*(this: TProgressBar): bool =
  return ProgressBar_CanFocus(this.Instance)

proc ContainsControl*(this: TProgressBar, Control: TControl): bool =
  return ProgressBar_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TProgressBar, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return ProgressBar_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TProgressBar) =
  ProgressBar_DisableAlign(this.Instance)

proc EnableAlign*(this: TProgressBar) =
  ProgressBar_EnableAlign(this.Instance)

proc FindChildControl*(this: TProgressBar, ControlName: string): TControl =
  return ProgressBar_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TProgressBar, AllLevels: bool) =
  ProgressBar_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TProgressBar): bool =
  return ProgressBar_Focused(this.Instance)

proc HandleAllocated*(this: TProgressBar): bool =
  return ProgressBar_HandleAllocated(this.Instance)

proc InsertControl*(this: TProgressBar, AControl: TControl) =
  ProgressBar_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TProgressBar) =
  ProgressBar_Invalidate(this.Instance)

proc PaintTo*(this: TProgressBar, DC: HDC, X: int32, Y: int32) =
  ProgressBar_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TProgressBar, AControl: TControl) =
  ProgressBar_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TProgressBar) =
  ProgressBar_Realign(this.Instance)

proc Repaint*(this: TProgressBar) =
  ProgressBar_Repaint(this.Instance)

proc ScaleBy*(this: TProgressBar, M: int32, D: int32) =
  ProgressBar_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TProgressBar, DeltaX: int32, DeltaY: int32) =
  ProgressBar_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TProgressBar, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ProgressBar_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TProgressBar) =
  ProgressBar_SetFocus(this.Instance)

proc Update*(this: TProgressBar) =
  ProgressBar_Update(this.Instance)

proc BringToFront*(this: TProgressBar) =
  ProgressBar_BringToFront(this.Instance)

proc ClientToScreen*(this: TProgressBar, Point: TPoint): TPoint =
  var ps1 = Point
  ProgressBar_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TProgressBar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ProgressBar_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TProgressBar): bool =
  return ProgressBar_Dragging(this.Instance)

proc HasParent*(this: TProgressBar): bool =
  return ProgressBar_HasParent(this.Instance)

proc Hide*(this: TProgressBar) =
  ProgressBar_Hide(this.Instance)

proc Perform*(this: TProgressBar, Msg: uint32, WParam: uint, LParam: int): int =
  return ProgressBar_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TProgressBar) =
  ProgressBar_Refresh(this.Instance)

proc ScreenToClient*(this: TProgressBar, Point: TPoint): TPoint =
  var ps1 = Point
  ProgressBar_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TProgressBar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ProgressBar_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TProgressBar) =
  ProgressBar_SendToBack(this.Instance)

proc Show*(this: TProgressBar) =
  ProgressBar_Show(this.Instance)

proc GetTextBuf*(this: TProgressBar, Buffer: string, BufSize: int32): int32 =
  return ProgressBar_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TProgressBar): int32 =
  return ProgressBar_GetTextLen(this.Instance)

proc SetTextBuf*(this: TProgressBar, Buffer: string) =
  ProgressBar_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TProgressBar, AName: string): TComponent =
  return ProgressBar_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TProgressBar): string =
  return $ProgressBar_GetNamePath(this.Instance)

proc Assign*(this: TProgressBar, Source: TObject) =
  ProgressBar_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TProgressBar): TClass =
  return ProgressBar_ClassType(this.Instance)

proc ClassName*(this: TProgressBar): string =
  return $ProgressBar_ClassName(this.Instance)

proc InstanceSize*(this: TProgressBar): int32 =
  return ProgressBar_InstanceSize(this.Instance)

proc InheritsFrom*(this: TProgressBar, AClass: TClass): bool =
  return ProgressBar_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TProgressBar, Obj: TObject): bool =
  return ProgressBar_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TProgressBar): int32 =
  return ProgressBar_GetHashCode(this.Instance)

proc ToString*(this: TProgressBar): string =
  return $ProgressBar_ToString(this.Instance)

proc AnchorToNeighbour*(this: TProgressBar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ProgressBar_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TProgressBar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ProgressBar_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TProgressBar, ASibling: TControl) =
  ProgressBar_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TProgressBar, ASibling: TControl) =
  ProgressBar_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TProgressBar, ASide: TAnchorKind, ASibling: TControl) =
  ProgressBar_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TProgressBar, ATheAlign: TAlign, ASpace: int32) =
  ProgressBar_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TProgressBar, ASpace: int32) =
  ProgressBar_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TProgressBar, ASize: int32): int32 =
  return ProgressBar_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TProgressBar, ASize: int32): int32 =
  return ProgressBar_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TProgressBar, ASize: int32): int32 =
  return ProgressBar_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TProgressBar, ASize: int32): int32 =
  return ProgressBar_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TProgressBar, ASize: int32): int32 =
  return ProgressBar_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TProgressBar, ASize: int32): int32 =
  return ProgressBar_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TProgressBar, ASize: int32): int32 =
  return ProgressBar_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TProgressBar, ASize: int32): int32 =
  return ProgressBar_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TProgressBar, ASize: int32): int32 =
  return ProgressBar_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TProgressBar, ASize: int32): int32 =
  return ProgressBar_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TProgressBar, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ProgressBar_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TProgressBar, ADesignTimePPI: int32) =
  ProgressBar_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TProgressBar, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ProgressBar_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TProgressBar): TAlign  =
  return ProgressBar_GetAlign(this.Instance)

proc `Align=`*(this: TProgressBar, AValue: TAlign)  =
  ProgressBar_SetAlign(this.Instance, AValue)

proc Anchors*(this: TProgressBar): TAnchors  =
  return ProgressBar_GetAnchors(this.Instance)

proc `Anchors=`*(this: TProgressBar, AValue: TAnchors)  =
  ProgressBar_SetAnchors(this.Instance, AValue)

proc BorderWidth*(this: TProgressBar): int32  =
  return ProgressBar_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TProgressBar, AValue: int32)  =
  ProgressBar_SetBorderWidth(this.Instance, AValue)

proc DoubleBuffered*(this: TProgressBar): bool  =
  return ProgressBar_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TProgressBar, AValue: bool)  =
  ProgressBar_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TProgressBar): TCursor  =
  return ProgressBar_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TProgressBar, AValue: TCursor)  =
  ProgressBar_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TProgressBar): TDragKind  =
  return ProgressBar_GetDragKind(this.Instance)

proc `DragKind=`*(this: TProgressBar, AValue: TDragKind)  =
  ProgressBar_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TProgressBar): TDragMode  =
  return ProgressBar_GetDragMode(this.Instance)

proc `DragMode=`*(this: TProgressBar, AValue: TDragMode)  =
  ProgressBar_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TProgressBar): bool  =
  return ProgressBar_GetEnabled(this.Instance)

proc `Enabled=`*(this: TProgressBar, AValue: bool)  =
  ProgressBar_SetEnabled(this.Instance, AValue)

proc Hint*(this: TProgressBar): string  =
  return $ProgressBar_GetHint(this.Instance)

proc `Hint=`*(this: TProgressBar, AValue: string)  =
  ProgressBar_SetHint(this.Instance, AValue)

proc Constraints*(this: TProgressBar): TSizeConstraints  =
  return ProgressBar_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TProgressBar, AValue: TSizeConstraints)  =
  ProgressBar_SetConstraints(this.Instance, CheckPtr(AValue))

proc Min*(this: TProgressBar): int32  =
  return ProgressBar_GetMin(this.Instance)

proc `Min=`*(this: TProgressBar, AValue: int32)  =
  ProgressBar_SetMin(this.Instance, AValue)

proc Max*(this: TProgressBar): int32  =
  return ProgressBar_GetMax(this.Instance)

proc `Max=`*(this: TProgressBar, AValue: int32)  =
  ProgressBar_SetMax(this.Instance, AValue)

proc Orientation*(this: TProgressBar): TProgressBarOrientation  =
  return ProgressBar_GetOrientation(this.Instance)

proc `Orientation=`*(this: TProgressBar, AValue: TProgressBarOrientation)  =
  ProgressBar_SetOrientation(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TProgressBar): bool  =
  return ProgressBar_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TProgressBar, AValue: bool)  =
  ProgressBar_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentShowHint*(this: TProgressBar): bool  =
  return ProgressBar_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TProgressBar, AValue: bool)  =
  ProgressBar_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TProgressBar): TPopupMenu  =
  return ProgressBar_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TProgressBar, AValue: TPopupMenu)  =
  ProgressBar_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc Position*(this: TProgressBar): int32  =
  return ProgressBar_GetPosition(this.Instance)

proc `Position=`*(this: TProgressBar, AValue: int32)  =
  ProgressBar_SetPosition(this.Instance, AValue)

proc Smooth*(this: TProgressBar): bool  =
  return ProgressBar_GetSmooth(this.Instance)

proc `Smooth=`*(this: TProgressBar, AValue: bool)  =
  ProgressBar_SetSmooth(this.Instance, AValue)

proc Style*(this: TProgressBar): TProgressBarStyle  =
  return ProgressBar_GetStyle(this.Instance)

proc `Style=`*(this: TProgressBar, AValue: TProgressBarStyle)  =
  ProgressBar_SetStyle(this.Instance, AValue)

proc Step*(this: TProgressBar): int32  =
  return ProgressBar_GetStep(this.Instance)

proc `Step=`*(this: TProgressBar, AValue: int32)  =
  ProgressBar_SetStep(this.Instance, AValue)

proc ShowHint*(this: TProgressBar): bool  =
  return ProgressBar_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TProgressBar, AValue: bool)  =
  ProgressBar_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TProgressBar): TTabOrder  =
  return ProgressBar_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TProgressBar, AValue: TTabOrder)  =
  ProgressBar_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TProgressBar): bool  =
  return ProgressBar_GetTabStop(this.Instance)

proc `TabStop=`*(this: TProgressBar, AValue: bool)  =
  ProgressBar_SetTabStop(this.Instance, AValue)

proc Visible*(this: TProgressBar): bool  =
  return ProgressBar_GetVisible(this.Instance)

proc `Visible=`*(this: TProgressBar, AValue: bool)  =
  ProgressBar_SetVisible(this.Instance, AValue)

proc `OnContextPopup=`*(this: TProgressBar, AEventId: TContextPopupEvent)  =
  ProgressBar_SetOnContextPopup(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TProgressBar, AEventId: TDragDropEvent)  =
  ProgressBar_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TProgressBar, AEventId: TDragOverEvent)  =
  ProgressBar_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TProgressBar, AEventId: TEndDragEvent)  =
  ProgressBar_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TProgressBar, AEventId: TNotifyEvent)  =
  ProgressBar_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TProgressBar, AEventId: TNotifyEvent)  =
  ProgressBar_SetOnExit(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TProgressBar, AEventId: TMouseEvent)  =
  ProgressBar_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TProgressBar, AEventId: TNotifyEvent)  =
  ProgressBar_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TProgressBar, AEventId: TNotifyEvent)  =
  ProgressBar_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TProgressBar, AEventId: TMouseMoveEvent)  =
  ProgressBar_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TProgressBar, AEventId: TMouseEvent)  =
  ProgressBar_SetOnMouseUp(this.Instance, AEventId)

proc DockClientCount*(this: TProgressBar): int32  =
  return ProgressBar_GetDockClientCount(this.Instance)

proc DockSite*(this: TProgressBar): bool  =
  return ProgressBar_GetDockSite(this.Instance)

proc `DockSite=`*(this: TProgressBar, AValue: bool)  =
  ProgressBar_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TProgressBar): bool  =
  return ProgressBar_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TProgressBar): int32  =
  return ProgressBar_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TProgressBar): TBrush  =
  return ProgressBar_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TProgressBar): int32  =
  return ProgressBar_GetControlCount(this.Instance)

proc Handle*(this: TProgressBar): HWND  =
  return ProgressBar_GetHandle(this.Instance)

proc ParentWindow*(this: TProgressBar): HWND  =
  return ProgressBar_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TProgressBar, AValue: HWND)  =
  ProgressBar_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TProgressBar): bool  =
  return ProgressBar_GetShowing(this.Instance)

proc UseDockManager*(this: TProgressBar): bool  =
  return ProgressBar_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TProgressBar, AValue: bool)  =
  ProgressBar_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TProgressBar): TAction  =
  return ProgressBar_GetAction(this.Instance).AsAction

proc `Action=`*(this: TProgressBar, AValue: TAction)  =
  ProgressBar_SetAction(this.Instance, CheckPtr(AValue))

proc BiDiMode*(this: TProgressBar): TBiDiMode  =
  return ProgressBar_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TProgressBar, AValue: TBiDiMode)  =
  ProgressBar_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TProgressBar): TRect  =
  ProgressBar_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TProgressBar, AValue: TRect)  =
  var ps1 = AValue
  ProgressBar_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TProgressBar): int32  =
  return ProgressBar_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TProgressBar, AValue: int32)  =
  ProgressBar_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TProgressBar): TPoint  =
  ProgressBar_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TProgressBar): TRect  =
  ProgressBar_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TProgressBar): int32  =
  return ProgressBar_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TProgressBar, AValue: int32)  =
  ProgressBar_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TProgressBar): TControlState  =
  return ProgressBar_GetControlState(this.Instance)

proc `ControlState=`*(this: TProgressBar, AValue: TControlState)  =
  ProgressBar_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TProgressBar): TControlStyle  =
  return ProgressBar_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TProgressBar, AValue: TControlStyle)  =
  ProgressBar_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TProgressBar): bool  =
  return ProgressBar_GetFloating(this.Instance)

proc Parent*(this: TProgressBar): TWinControl  =
  return ProgressBar_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TProgressBar, AValue: TWinControl)  =
  ProgressBar_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TProgressBar): int32  =
  return ProgressBar_GetLeft(this.Instance)

proc `Left=`*(this: TProgressBar, AValue: int32)  =
  ProgressBar_SetLeft(this.Instance, AValue)

proc Top*(this: TProgressBar): int32  =
  return ProgressBar_GetTop(this.Instance)

proc `Top=`*(this: TProgressBar, AValue: int32)  =
  ProgressBar_SetTop(this.Instance, AValue)

proc Width*(this: TProgressBar): int32  =
  return ProgressBar_GetWidth(this.Instance)

proc `Width=`*(this: TProgressBar, AValue: int32)  =
  ProgressBar_SetWidth(this.Instance, AValue)

proc Height*(this: TProgressBar): int32  =
  return ProgressBar_GetHeight(this.Instance)

proc `Height=`*(this: TProgressBar, AValue: int32)  =
  ProgressBar_SetHeight(this.Instance, AValue)

proc Cursor*(this: TProgressBar): TCursor  =
  return ProgressBar_GetCursor(this.Instance)

proc `Cursor=`*(this: TProgressBar, AValue: TCursor)  =
  ProgressBar_SetCursor(this.Instance, AValue)

proc ComponentCount*(this: TProgressBar): int32  =
  return ProgressBar_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TProgressBar): int32  =
  return ProgressBar_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TProgressBar, AValue: int32)  =
  ProgressBar_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TProgressBar): TComponent  =
  return ProgressBar_GetOwner(this.Instance).AsComponent

proc Name*(this: TProgressBar): string  =
  return $ProgressBar_GetName(this.Instance)

proc `Name=`*(this: TProgressBar, AValue: string)  =
  ProgressBar_SetName(this.Instance, AValue)

proc Tag*(this: TProgressBar): int  =
  return ProgressBar_GetTag(this.Instance)

proc `Tag=`*(this: TProgressBar, AValue: int)  =
  ProgressBar_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TProgressBar): TAnchorSide  =
  return ProgressBar_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TProgressBar, AValue: TAnchorSide)  =
  ProgressBar_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TProgressBar): TAnchorSide  =
  return ProgressBar_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TProgressBar, AValue: TAnchorSide)  =
  ProgressBar_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TProgressBar): TAnchorSide  =
  return ProgressBar_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TProgressBar, AValue: TAnchorSide)  =
  ProgressBar_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TProgressBar): TAnchorSide  =
  return ProgressBar_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TProgressBar, AValue: TAnchorSide)  =
  ProgressBar_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TProgressBar): TControlChildSizing  =
  return ProgressBar_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TProgressBar, AValue: TControlChildSizing)  =
  ProgressBar_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TProgressBar): TControlBorderSpacing  =
  return ProgressBar_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TProgressBar, AValue: TControlBorderSpacing)  =
  ProgressBar_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TProgressBar, Index: int32): TControl  =
  return ProgressBar_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TProgressBar, Index: int32): TControl  =
  return ProgressBar_GetControls(this.Instance, Index).AsControl

proc Components*(this: TProgressBar, AIndex: int32): TComponent  =
  return ProgressBar_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TProgressBar, AKind: TAnchorKind): TAnchorSide  =
  return ProgressBar_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TProgressBarClass*(): TClass = ProgressBar_StaticClassType()


#------------------------- TDateTimePicker -------------------------

proc Free*(this: TDateTimePicker) = defaultFree: DateTimePicker_Free

proc NewDateTimePicker*(AOwner: TComponent): TDateTimePicker =
  new(result)
  result.Instance = DateTimePicker_Create(CheckPtr(AOwner))

proc DateIsNull*(this: TDateTimePicker): bool  =
  return DateTimePicker_DateIsNull(this.Instance)

proc SelectDate*(this: TDateTimePicker)  =
  DateTimePicker_SelectDate(this.Instance)

proc SelectTime*(this: TDateTimePicker)  =
  DateTimePicker_SelectTime(this.Instance)

proc CanFocus*(this: TDateTimePicker): bool =
  return DateTimePicker_CanFocus(this.Instance)

proc ContainsControl*(this: TDateTimePicker, Control: TControl): bool =
  return DateTimePicker_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TDateTimePicker, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return DateTimePicker_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TDateTimePicker) =
  DateTimePicker_DisableAlign(this.Instance)

proc EnableAlign*(this: TDateTimePicker) =
  DateTimePicker_EnableAlign(this.Instance)

proc FindChildControl*(this: TDateTimePicker, ControlName: string): TControl =
  return DateTimePicker_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TDateTimePicker, AllLevels: bool) =
  DateTimePicker_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TDateTimePicker): bool =
  return DateTimePicker_Focused(this.Instance)

proc HandleAllocated*(this: TDateTimePicker): bool =
  return DateTimePicker_HandleAllocated(this.Instance)

proc InsertControl*(this: TDateTimePicker, AControl: TControl) =
  DateTimePicker_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TDateTimePicker) =
  DateTimePicker_Invalidate(this.Instance)

proc PaintTo*(this: TDateTimePicker, DC: HDC, X: int32, Y: int32) =
  DateTimePicker_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TDateTimePicker, AControl: TControl) =
  DateTimePicker_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TDateTimePicker) =
  DateTimePicker_Realign(this.Instance)

proc Repaint*(this: TDateTimePicker) =
  DateTimePicker_Repaint(this.Instance)

proc ScaleBy*(this: TDateTimePicker, M: int32, D: int32) =
  DateTimePicker_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TDateTimePicker, DeltaX: int32, DeltaY: int32) =
  DateTimePicker_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TDateTimePicker, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  DateTimePicker_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TDateTimePicker) =
  DateTimePicker_SetFocus(this.Instance)

proc Update*(this: TDateTimePicker) =
  DateTimePicker_Update(this.Instance)

proc BringToFront*(this: TDateTimePicker) =
  DateTimePicker_BringToFront(this.Instance)

proc ClientToScreen*(this: TDateTimePicker, Point: TPoint): TPoint =
  var ps1 = Point
  DateTimePicker_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TDateTimePicker, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  DateTimePicker_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TDateTimePicker): bool =
  return DateTimePicker_Dragging(this.Instance)

proc HasParent*(this: TDateTimePicker): bool =
  return DateTimePicker_HasParent(this.Instance)

proc Hide*(this: TDateTimePicker) =
  DateTimePicker_Hide(this.Instance)

proc Perform*(this: TDateTimePicker, Msg: uint32, WParam: uint, LParam: int): int =
  return DateTimePicker_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TDateTimePicker) =
  DateTimePicker_Refresh(this.Instance)

proc ScreenToClient*(this: TDateTimePicker, Point: TPoint): TPoint =
  var ps1 = Point
  DateTimePicker_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TDateTimePicker, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  DateTimePicker_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TDateTimePicker) =
  DateTimePicker_SendToBack(this.Instance)

proc Show*(this: TDateTimePicker) =
  DateTimePicker_Show(this.Instance)

proc GetTextBuf*(this: TDateTimePicker, Buffer: string, BufSize: int32): int32 =
  return DateTimePicker_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TDateTimePicker): int32 =
  return DateTimePicker_GetTextLen(this.Instance)

proc SetTextBuf*(this: TDateTimePicker, Buffer: string) =
  DateTimePicker_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TDateTimePicker, AName: string): TComponent =
  return DateTimePicker_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TDateTimePicker): string =
  return $DateTimePicker_GetNamePath(this.Instance)

proc Assign*(this: TDateTimePicker, Source: TObject) =
  DateTimePicker_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TDateTimePicker): TClass =
  return DateTimePicker_ClassType(this.Instance)

proc ClassName*(this: TDateTimePicker): string =
  return $DateTimePicker_ClassName(this.Instance)

proc InstanceSize*(this: TDateTimePicker): int32 =
  return DateTimePicker_InstanceSize(this.Instance)

proc InheritsFrom*(this: TDateTimePicker, AClass: TClass): bool =
  return DateTimePicker_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TDateTimePicker, Obj: TObject): bool =
  return DateTimePicker_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TDateTimePicker): int32 =
  return DateTimePicker_GetHashCode(this.Instance)

proc ToString*(this: TDateTimePicker): string =
  return $DateTimePicker_ToString(this.Instance)

proc AnchorToNeighbour*(this: TDateTimePicker, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  DateTimePicker_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TDateTimePicker, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  DateTimePicker_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TDateTimePicker, ASibling: TControl) =
  DateTimePicker_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TDateTimePicker, ASibling: TControl) =
  DateTimePicker_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TDateTimePicker, ASide: TAnchorKind, ASibling: TControl) =
  DateTimePicker_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TDateTimePicker, ATheAlign: TAlign, ASpace: int32) =
  DateTimePicker_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TDateTimePicker, ASpace: int32) =
  DateTimePicker_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TDateTimePicker, ASize: int32): int32 =
  return DateTimePicker_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TDateTimePicker, ASize: int32): int32 =
  return DateTimePicker_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TDateTimePicker, ASize: int32): int32 =
  return DateTimePicker_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TDateTimePicker, ASize: int32): int32 =
  return DateTimePicker_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TDateTimePicker, ASize: int32): int32 =
  return DateTimePicker_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TDateTimePicker, ASize: int32): int32 =
  return DateTimePicker_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TDateTimePicker, ASize: int32): int32 =
  return DateTimePicker_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TDateTimePicker, ASize: int32): int32 =
  return DateTimePicker_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TDateTimePicker, ASize: int32): int32 =
  return DateTimePicker_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TDateTimePicker, ASize: int32): int32 =
  return DateTimePicker_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TDateTimePicker, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  DateTimePicker_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TDateTimePicker, ADesignTimePPI: int32) =
  DateTimePicker_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TDateTimePicker, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  DateTimePicker_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc ArrowShape*(this: TDateTimePicker): TArrowShape  =
  return DateTimePicker_GetArrowShape(this.Instance)

proc `ArrowShape=`*(this: TDateTimePicker, AValue: TArrowShape)  =
  DateTimePicker_SetArrowShape(this.Instance, AValue)

proc AutoAdvance*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetAutoAdvance(this.Instance)

proc `AutoAdvance=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetAutoAdvance(this.Instance, AValue)

proc AutoButtonSize*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetAutoButtonSize(this.Instance)

proc `AutoButtonSize=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetAutoButtonSize(this.Instance, AValue)

proc Cascade*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetCascade(this.Instance)

proc `Cascade=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetCascade(this.Instance, AValue)

proc CenturyFrom*(this: TDateTimePicker): uint16  =
  return DateTimePicker_GetCenturyFrom(this.Instance)

proc `CenturyFrom=`*(this: TDateTimePicker, AValue: uint16)  =
  DateTimePicker_SetCenturyFrom(this.Instance, AValue)

proc DateDisplayOrder*(this: TDateTimePicker): TDateDisplayOrder  =
  return DateTimePicker_GetDateDisplayOrder(this.Instance)

proc `DateDisplayOrder=`*(this: TDateTimePicker, AValue: TDateDisplayOrder)  =
  DateTimePicker_SetDateDisplayOrder(this.Instance, AValue)

proc DateSeparator*(this: TDateTimePicker): string  =
  return $DateTimePicker_GetDateSeparator(this.Instance)

proc `DateSeparator=`*(this: TDateTimePicker, AValue: string)  =
  DateTimePicker_SetDateSeparator(this.Instance, AValue)

proc LeadingZeros*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetLeadingZeros(this.Instance)

proc `LeadingZeros=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetLeadingZeros(this.Instance, AValue)

proc MonthNames*(this: TDateTimePicker): string  =
  return $DateTimePicker_GetMonthNames(this.Instance)

proc `MonthNames=`*(this: TDateTimePicker, AValue: string)  =
  DateTimePicker_SetMonthNames(this.Instance, AValue)

proc ShowMonthNames*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetShowMonthNames(this.Instance)

proc `ShowMonthNames=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetShowMonthNames(this.Instance, AValue)

proc NullInputAllowed*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetNullInputAllowed(this.Instance)

proc `NullInputAllowed=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetNullInputAllowed(this.Instance, AValue)

proc Options*(this: TDateTimePicker): TDateTimePickerOptions  =
  return DateTimePicker_GetOptions(this.Instance)

proc `Options=`*(this: TDateTimePicker, AValue: TDateTimePickerOptions)  =
  DateTimePicker_SetOptions(this.Instance, AValue)

proc ShowCheckBox*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetShowCheckBox(this.Instance)

proc `ShowCheckBox=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetShowCheckBox(this.Instance, AValue)

proc ReadOnly*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetReadOnly(this.Instance)

proc `ReadOnly=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetReadOnly(this.Instance, AValue)

proc TextForNullDate*(this: TDateTimePicker): string  =
  return $DateTimePicker_GetTextForNullDate(this.Instance)

proc `TextForNullDate=`*(this: TDateTimePicker, AValue: string)  =
  DateTimePicker_SetTextForNullDate(this.Instance, AValue)

proc TimeDisplay*(this: TDateTimePicker): TTimeDisplay  =
  return DateTimePicker_GetTimeDisplay(this.Instance)

proc `TimeDisplay=`*(this: TDateTimePicker, AValue: TTimeDisplay)  =
  DateTimePicker_SetTimeDisplay(this.Instance, AValue)

proc TimeSeparator*(this: TDateTimePicker): string  =
  return $DateTimePicker_GetTimeSeparator(this.Instance)

proc `TimeSeparator=`*(this: TDateTimePicker, AValue: string)  =
  DateTimePicker_SetTimeSeparator(this.Instance, AValue)

proc TrailingSeparator*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetTrailingSeparator(this.Instance)

proc `TrailingSeparator=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetTrailingSeparator(this.Instance, AValue)

proc UseDefaultSeparators*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetUseDefaultSeparators(this.Instance)

proc `UseDefaultSeparators=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetUseDefaultSeparators(this.Instance, AValue)

proc DroppedDown*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetDroppedDown(this.Instance)

proc DateTime*(this: TDateTimePicker): uint32  =
  return DateTimePicker_GetDateTime(this.Instance)

proc `DateTime=`*(this: TDateTimePicker, AValue: uint32)  =
  DateTimePicker_SetDateTime(this.Instance, AValue)

proc Align*(this: TDateTimePicker): TAlign  =
  return DateTimePicker_GetAlign(this.Instance)

proc `Align=`*(this: TDateTimePicker, AValue: TAlign)  =
  DateTimePicker_SetAlign(this.Instance, AValue)

proc Anchors*(this: TDateTimePicker): TAnchors  =
  return DateTimePicker_GetAnchors(this.Instance)

proc `Anchors=`*(this: TDateTimePicker, AValue: TAnchors)  =
  DateTimePicker_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TDateTimePicker): TBiDiMode  =
  return DateTimePicker_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TDateTimePicker, AValue: TBiDiMode)  =
  DateTimePicker_SetBiDiMode(this.Instance, AValue)

proc CalAlignment*(this: TDateTimePicker): TDTCalAlignment  =
  return DateTimePicker_GetCalAlignment(this.Instance)

proc `CalAlignment=`*(this: TDateTimePicker, AValue: TDTCalAlignment)  =
  DateTimePicker_SetCalAlignment(this.Instance, AValue)

proc Constraints*(this: TDateTimePicker): TSizeConstraints  =
  return DateTimePicker_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TDateTimePicker, AValue: TSizeConstraints)  =
  DateTimePicker_SetConstraints(this.Instance, CheckPtr(AValue))

proc Date*(this: TDateTimePicker): uint32  =
  return DateTimePicker_GetDate(this.Instance)

proc `Date=`*(this: TDateTimePicker, AValue: uint32)  =
  DateTimePicker_SetDate(this.Instance, AValue)

proc Time*(this: TDateTimePicker): uint32  =
  return DateTimePicker_GetTime(this.Instance)

proc `Time=`*(this: TDateTimePicker, AValue: uint32)  =
  DateTimePicker_SetTime(this.Instance, AValue)

proc Checked*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetChecked(this.Instance)

proc `Checked=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetChecked(this.Instance, AValue)

proc Color*(this: TDateTimePicker): TColor  =
  return DateTimePicker_GetColor(this.Instance)

proc `Color=`*(this: TDateTimePicker, AValue: TColor)  =
  DateTimePicker_SetColor(this.Instance, AValue)

proc DateMode*(this: TDateTimePicker): TDTDateMode  =
  return DateTimePicker_GetDateMode(this.Instance)

proc `DateMode=`*(this: TDateTimePicker, AValue: TDTDateMode)  =
  DateTimePicker_SetDateMode(this.Instance, AValue)

proc DoubleBuffered*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetDoubleBuffered(this.Instance, AValue)

proc Enabled*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetEnabled(this.Instance)

proc `Enabled=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetEnabled(this.Instance, AValue)

proc Font*(this: TDateTimePicker): TFont  =
  return DateTimePicker_GetFont(this.Instance).AsFont

proc `Font=`*(this: TDateTimePicker, AValue: TFont)  =
  DateTimePicker_SetFont(this.Instance, CheckPtr(AValue))

proc MaxDate*(this: TDateTimePicker): uint32  =
  return DateTimePicker_GetMaxDate(this.Instance)

proc `MaxDate=`*(this: TDateTimePicker, AValue: uint32)  =
  DateTimePicker_SetMaxDate(this.Instance, AValue)

proc MinDate*(this: TDateTimePicker): uint32  =
  return DateTimePicker_GetMinDate(this.Instance)

proc `MinDate=`*(this: TDateTimePicker, AValue: uint32)  =
  DateTimePicker_SetMinDate(this.Instance, AValue)

proc ParentColor*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TDateTimePicker): TPopupMenu  =
  return DateTimePicker_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TDateTimePicker, AValue: TPopupMenu)  =
  DateTimePicker_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TDateTimePicker): TTabOrder  =
  return DateTimePicker_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TDateTimePicker, AValue: TTabOrder)  =
  DateTimePicker_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetTabStop(this.Instance)

proc `TabStop=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetTabStop(this.Instance, AValue)

proc Visible*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetVisible(this.Instance)

proc `Visible=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TDateTimePicker, AEventId: TNotifyEvent)  =
  DateTimePicker_SetOnClick(this.Instance, AEventId)

proc `OnChange=`*(this: TDateTimePicker, AEventId: TNotifyEvent)  =
  DateTimePicker_SetOnChange(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TDateTimePicker, AEventId: TContextPopupEvent)  =
  DateTimePicker_SetOnContextPopup(this.Instance, AEventId)

proc `OnDropDown=`*(this: TDateTimePicker, AEventId: TNotifyEvent)  =
  DateTimePicker_SetOnDropDown(this.Instance, AEventId)

proc `OnEnter=`*(this: TDateTimePicker, AEventId: TNotifyEvent)  =
  DateTimePicker_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TDateTimePicker, AEventId: TNotifyEvent)  =
  DateTimePicker_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TDateTimePicker, AEventId: TKeyEvent)  =
  DateTimePicker_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TDateTimePicker, AEventId: TKeyPressEvent)  =
  DateTimePicker_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TDateTimePicker, AEventId: TKeyEvent)  =
  DateTimePicker_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TDateTimePicker, AEventId: TNotifyEvent)  =
  DateTimePicker_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TDateTimePicker, AEventId: TNotifyEvent)  =
  DateTimePicker_SetOnMouseLeave(this.Instance, AEventId)

proc DockClientCount*(this: TDateTimePicker): int32  =
  return DateTimePicker_GetDockClientCount(this.Instance)

proc DockSite*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetDockSite(this.Instance)

proc `DockSite=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TDateTimePicker): int32  =
  return DateTimePicker_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TDateTimePicker): TBrush  =
  return DateTimePicker_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TDateTimePicker): int32  =
  return DateTimePicker_GetControlCount(this.Instance)

proc Handle*(this: TDateTimePicker): HWND  =
  return DateTimePicker_GetHandle(this.Instance)

proc ParentWindow*(this: TDateTimePicker): HWND  =
  return DateTimePicker_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TDateTimePicker, AValue: HWND)  =
  DateTimePicker_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetShowing(this.Instance)

proc UseDockManager*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TDateTimePicker, AValue: bool)  =
  DateTimePicker_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TDateTimePicker): TAction  =
  return DateTimePicker_GetAction(this.Instance).AsAction

proc `Action=`*(this: TDateTimePicker, AValue: TAction)  =
  DateTimePicker_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TDateTimePicker): TRect  =
  DateTimePicker_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TDateTimePicker, AValue: TRect)  =
  var ps1 = AValue
  DateTimePicker_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TDateTimePicker): int32  =
  return DateTimePicker_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TDateTimePicker, AValue: int32)  =
  DateTimePicker_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TDateTimePicker): TPoint  =
  DateTimePicker_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TDateTimePicker): TRect  =
  DateTimePicker_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TDateTimePicker): int32  =
  return DateTimePicker_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TDateTimePicker, AValue: int32)  =
  DateTimePicker_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TDateTimePicker): TControlState  =
  return DateTimePicker_GetControlState(this.Instance)

proc `ControlState=`*(this: TDateTimePicker, AValue: TControlState)  =
  DateTimePicker_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TDateTimePicker): TControlStyle  =
  return DateTimePicker_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TDateTimePicker, AValue: TControlStyle)  =
  DateTimePicker_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TDateTimePicker): bool  =
  return DateTimePicker_GetFloating(this.Instance)

proc Parent*(this: TDateTimePicker): TWinControl  =
  return DateTimePicker_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TDateTimePicker, AValue: TWinControl)  =
  DateTimePicker_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TDateTimePicker): int32  =
  return DateTimePicker_GetLeft(this.Instance)

proc `Left=`*(this: TDateTimePicker, AValue: int32)  =
  DateTimePicker_SetLeft(this.Instance, AValue)

proc Top*(this: TDateTimePicker): int32  =
  return DateTimePicker_GetTop(this.Instance)

proc `Top=`*(this: TDateTimePicker, AValue: int32)  =
  DateTimePicker_SetTop(this.Instance, AValue)

proc Width*(this: TDateTimePicker): int32  =
  return DateTimePicker_GetWidth(this.Instance)

proc `Width=`*(this: TDateTimePicker, AValue: int32)  =
  DateTimePicker_SetWidth(this.Instance, AValue)

proc Height*(this: TDateTimePicker): int32  =
  return DateTimePicker_GetHeight(this.Instance)

proc `Height=`*(this: TDateTimePicker, AValue: int32)  =
  DateTimePicker_SetHeight(this.Instance, AValue)

proc Cursor*(this: TDateTimePicker): TCursor  =
  return DateTimePicker_GetCursor(this.Instance)

proc `Cursor=`*(this: TDateTimePicker, AValue: TCursor)  =
  DateTimePicker_SetCursor(this.Instance, AValue)

proc Hint*(this: TDateTimePicker): string  =
  return $DateTimePicker_GetHint(this.Instance)

proc `Hint=`*(this: TDateTimePicker, AValue: string)  =
  DateTimePicker_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TDateTimePicker): int32  =
  return DateTimePicker_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TDateTimePicker): int32  =
  return DateTimePicker_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TDateTimePicker, AValue: int32)  =
  DateTimePicker_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TDateTimePicker): TComponent  =
  return DateTimePicker_GetOwner(this.Instance).AsComponent

proc Name*(this: TDateTimePicker): string  =
  return $DateTimePicker_GetName(this.Instance)

proc `Name=`*(this: TDateTimePicker, AValue: string)  =
  DateTimePicker_SetName(this.Instance, AValue)

proc Tag*(this: TDateTimePicker): int  =
  return DateTimePicker_GetTag(this.Instance)

proc `Tag=`*(this: TDateTimePicker, AValue: int)  =
  DateTimePicker_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TDateTimePicker): TAnchorSide  =
  return DateTimePicker_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TDateTimePicker, AValue: TAnchorSide)  =
  DateTimePicker_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TDateTimePicker): TAnchorSide  =
  return DateTimePicker_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TDateTimePicker, AValue: TAnchorSide)  =
  DateTimePicker_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TDateTimePicker): TAnchorSide  =
  return DateTimePicker_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TDateTimePicker, AValue: TAnchorSide)  =
  DateTimePicker_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TDateTimePicker): TAnchorSide  =
  return DateTimePicker_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TDateTimePicker, AValue: TAnchorSide)  =
  DateTimePicker_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TDateTimePicker): TControlChildSizing  =
  return DateTimePicker_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TDateTimePicker, AValue: TControlChildSizing)  =
  DateTimePicker_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TDateTimePicker): TControlBorderSpacing  =
  return DateTimePicker_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TDateTimePicker, AValue: TControlBorderSpacing)  =
  DateTimePicker_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TDateTimePicker, Index: int32): TControl  =
  return DateTimePicker_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TDateTimePicker, Index: int32): TControl  =
  return DateTimePicker_GetControls(this.Instance, Index).AsControl

proc Components*(this: TDateTimePicker, AIndex: int32): TComponent  =
  return DateTimePicker_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TDateTimePicker, AKind: TAnchorKind): TAnchorSide  =
  return DateTimePicker_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TDateTimePickerClass*(): TClass = DateTimePicker_StaticClassType()


#------------------------- TMonthCalendar -------------------------

proc Free*(this: TMonthCalendar) = defaultFree: MonthCalendar_Free

proc NewMonthCalendar*(AOwner: TComponent): TMonthCalendar =
  new(result)
  result.Instance = MonthCalendar_Create(CheckPtr(AOwner))

proc CanFocus*(this: TMonthCalendar): bool =
  return MonthCalendar_CanFocus(this.Instance)

proc ContainsControl*(this: TMonthCalendar, Control: TControl): bool =
  return MonthCalendar_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TMonthCalendar, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return MonthCalendar_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TMonthCalendar) =
  MonthCalendar_DisableAlign(this.Instance)

proc EnableAlign*(this: TMonthCalendar) =
  MonthCalendar_EnableAlign(this.Instance)

proc FindChildControl*(this: TMonthCalendar, ControlName: string): TControl =
  return MonthCalendar_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TMonthCalendar, AllLevels: bool) =
  MonthCalendar_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TMonthCalendar): bool =
  return MonthCalendar_Focused(this.Instance)

proc HandleAllocated*(this: TMonthCalendar): bool =
  return MonthCalendar_HandleAllocated(this.Instance)

proc InsertControl*(this: TMonthCalendar, AControl: TControl) =
  MonthCalendar_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TMonthCalendar) =
  MonthCalendar_Invalidate(this.Instance)

proc PaintTo*(this: TMonthCalendar, DC: HDC, X: int32, Y: int32) =
  MonthCalendar_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TMonthCalendar, AControl: TControl) =
  MonthCalendar_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TMonthCalendar) =
  MonthCalendar_Realign(this.Instance)

proc Repaint*(this: TMonthCalendar) =
  MonthCalendar_Repaint(this.Instance)

proc ScaleBy*(this: TMonthCalendar, M: int32, D: int32) =
  MonthCalendar_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TMonthCalendar, DeltaX: int32, DeltaY: int32) =
  MonthCalendar_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TMonthCalendar, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  MonthCalendar_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TMonthCalendar) =
  MonthCalendar_SetFocus(this.Instance)

proc Update*(this: TMonthCalendar) =
  MonthCalendar_Update(this.Instance)

proc BringToFront*(this: TMonthCalendar) =
  MonthCalendar_BringToFront(this.Instance)

proc ClientToScreen*(this: TMonthCalendar, Point: TPoint): TPoint =
  var ps1 = Point
  MonthCalendar_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TMonthCalendar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  MonthCalendar_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TMonthCalendar): bool =
  return MonthCalendar_Dragging(this.Instance)

proc HasParent*(this: TMonthCalendar): bool =
  return MonthCalendar_HasParent(this.Instance)

proc Hide*(this: TMonthCalendar) =
  MonthCalendar_Hide(this.Instance)

proc Perform*(this: TMonthCalendar, Msg: uint32, WParam: uint, LParam: int): int =
  return MonthCalendar_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TMonthCalendar) =
  MonthCalendar_Refresh(this.Instance)

proc ScreenToClient*(this: TMonthCalendar, Point: TPoint): TPoint =
  var ps1 = Point
  MonthCalendar_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TMonthCalendar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  MonthCalendar_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TMonthCalendar) =
  MonthCalendar_SendToBack(this.Instance)

proc Show*(this: TMonthCalendar) =
  MonthCalendar_Show(this.Instance)

proc GetTextBuf*(this: TMonthCalendar, Buffer: string, BufSize: int32): int32 =
  return MonthCalendar_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TMonthCalendar): int32 =
  return MonthCalendar_GetTextLen(this.Instance)

proc SetTextBuf*(this: TMonthCalendar, Buffer: string) =
  MonthCalendar_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TMonthCalendar, AName: string): TComponent =
  return MonthCalendar_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TMonthCalendar): string =
  return $MonthCalendar_GetNamePath(this.Instance)

proc Assign*(this: TMonthCalendar, Source: TObject) =
  MonthCalendar_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TMonthCalendar): TClass =
  return MonthCalendar_ClassType(this.Instance)

proc ClassName*(this: TMonthCalendar): string =
  return $MonthCalendar_ClassName(this.Instance)

proc InstanceSize*(this: TMonthCalendar): int32 =
  return MonthCalendar_InstanceSize(this.Instance)

proc InheritsFrom*(this: TMonthCalendar, AClass: TClass): bool =
  return MonthCalendar_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TMonthCalendar, Obj: TObject): bool =
  return MonthCalendar_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TMonthCalendar): int32 =
  return MonthCalendar_GetHashCode(this.Instance)

proc ToString*(this: TMonthCalendar): string =
  return $MonthCalendar_ToString(this.Instance)

proc AnchorToNeighbour*(this: TMonthCalendar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  MonthCalendar_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TMonthCalendar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  MonthCalendar_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TMonthCalendar, ASibling: TControl) =
  MonthCalendar_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TMonthCalendar, ASibling: TControl) =
  MonthCalendar_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TMonthCalendar, ASide: TAnchorKind, ASibling: TControl) =
  MonthCalendar_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TMonthCalendar, ATheAlign: TAlign, ASpace: int32) =
  MonthCalendar_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TMonthCalendar, ASpace: int32) =
  MonthCalendar_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TMonthCalendar, ASize: int32): int32 =
  return MonthCalendar_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TMonthCalendar, ASize: int32): int32 =
  return MonthCalendar_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TMonthCalendar, ASize: int32): int32 =
  return MonthCalendar_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TMonthCalendar, ASize: int32): int32 =
  return MonthCalendar_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TMonthCalendar, ASize: int32): int32 =
  return MonthCalendar_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TMonthCalendar, ASize: int32): int32 =
  return MonthCalendar_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TMonthCalendar, ASize: int32): int32 =
  return MonthCalendar_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TMonthCalendar, ASize: int32): int32 =
  return MonthCalendar_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TMonthCalendar, ASize: int32): int32 =
  return MonthCalendar_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TMonthCalendar, ASize: int32): int32 =
  return MonthCalendar_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TMonthCalendar, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  MonthCalendar_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TMonthCalendar, ADesignTimePPI: int32) =
  MonthCalendar_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TMonthCalendar, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  MonthCalendar_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc DateTime*(this: TMonthCalendar): uint32  =
  return MonthCalendar_GetDateTime(this.Instance)

proc `DateTime=`*(this: TMonthCalendar, AValue: uint32)  =
  MonthCalendar_SetDateTime(this.Instance, AValue)

proc Align*(this: TMonthCalendar): TAlign  =
  return MonthCalendar_GetAlign(this.Instance)

proc `Align=`*(this: TMonthCalendar, AValue: TAlign)  =
  MonthCalendar_SetAlign(this.Instance, AValue)

proc Anchors*(this: TMonthCalendar): TAnchors  =
  return MonthCalendar_GetAnchors(this.Instance)

proc `Anchors=`*(this: TMonthCalendar, AValue: TAnchors)  =
  MonthCalendar_SetAnchors(this.Instance, AValue)

proc AutoSize*(this: TMonthCalendar): bool  =
  return MonthCalendar_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TMonthCalendar, AValue: bool)  =
  MonthCalendar_SetAutoSize(this.Instance, AValue)

proc BorderWidth*(this: TMonthCalendar): int32  =
  return MonthCalendar_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TMonthCalendar, AValue: int32)  =
  MonthCalendar_SetBorderWidth(this.Instance, AValue)

proc BiDiMode*(this: TMonthCalendar): TBiDiMode  =
  return MonthCalendar_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TMonthCalendar, AValue: TBiDiMode)  =
  MonthCalendar_SetBiDiMode(this.Instance, AValue)

proc Constraints*(this: TMonthCalendar): TSizeConstraints  =
  return MonthCalendar_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TMonthCalendar, AValue: TSizeConstraints)  =
  MonthCalendar_SetConstraints(this.Instance, CheckPtr(AValue))

proc Date*(this: TMonthCalendar): uint32  =
  return MonthCalendar_GetDate(this.Instance)

proc `Date=`*(this: TMonthCalendar, AValue: uint32)  =
  MonthCalendar_SetDate(this.Instance, AValue)

proc DoubleBuffered*(this: TMonthCalendar): bool  =
  return MonthCalendar_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TMonthCalendar, AValue: bool)  =
  MonthCalendar_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TMonthCalendar): TCursor  =
  return MonthCalendar_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TMonthCalendar, AValue: TCursor)  =
  MonthCalendar_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TMonthCalendar): TDragKind  =
  return MonthCalendar_GetDragKind(this.Instance)

proc `DragKind=`*(this: TMonthCalendar, AValue: TDragKind)  =
  MonthCalendar_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TMonthCalendar): TDragMode  =
  return MonthCalendar_GetDragMode(this.Instance)

proc `DragMode=`*(this: TMonthCalendar, AValue: TDragMode)  =
  MonthCalendar_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TMonthCalendar): bool  =
  return MonthCalendar_GetEnabled(this.Instance)

proc `Enabled=`*(this: TMonthCalendar, AValue: bool)  =
  MonthCalendar_SetEnabled(this.Instance, AValue)

proc Font*(this: TMonthCalendar): TFont  =
  return MonthCalendar_GetFont(this.Instance).AsFont

proc `Font=`*(this: TMonthCalendar, AValue: TFont)  =
  MonthCalendar_SetFont(this.Instance, CheckPtr(AValue))

proc ParentDoubleBuffered*(this: TMonthCalendar): bool  =
  return MonthCalendar_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TMonthCalendar, AValue: bool)  =
  MonthCalendar_SetParentDoubleBuffered(this.Instance, AValue)

proc PopupMenu*(this: TMonthCalendar): TPopupMenu  =
  return MonthCalendar_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TMonthCalendar, AValue: TPopupMenu)  =
  MonthCalendar_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TMonthCalendar): bool  =
  return MonthCalendar_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TMonthCalendar, AValue: bool)  =
  MonthCalendar_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TMonthCalendar): TTabOrder  =
  return MonthCalendar_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TMonthCalendar, AValue: TTabOrder)  =
  MonthCalendar_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TMonthCalendar): bool  =
  return MonthCalendar_GetTabStop(this.Instance)

proc `TabStop=`*(this: TMonthCalendar, AValue: bool)  =
  MonthCalendar_SetTabStop(this.Instance, AValue)

proc Visible*(this: TMonthCalendar): bool  =
  return MonthCalendar_GetVisible(this.Instance)

proc `Visible=`*(this: TMonthCalendar, AValue: bool)  =
  MonthCalendar_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TMonthCalendar, AEventId: TNotifyEvent)  =
  MonthCalendar_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TMonthCalendar, AEventId: TContextPopupEvent)  =
  MonthCalendar_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TMonthCalendar, AEventId: TNotifyEvent)  =
  MonthCalendar_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TMonthCalendar, AEventId: TDragDropEvent)  =
  MonthCalendar_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TMonthCalendar, AEventId: TDragOverEvent)  =
  MonthCalendar_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDock=`*(this: TMonthCalendar, AEventId: TEndDragEvent)  =
  MonthCalendar_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TMonthCalendar, AEventId: TEndDragEvent)  =
  MonthCalendar_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TMonthCalendar, AEventId: TNotifyEvent)  =
  MonthCalendar_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TMonthCalendar, AEventId: TNotifyEvent)  =
  MonthCalendar_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TMonthCalendar, AEventId: TKeyEvent)  =
  MonthCalendar_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TMonthCalendar, AEventId: TKeyPressEvent)  =
  MonthCalendar_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TMonthCalendar, AEventId: TKeyEvent)  =
  MonthCalendar_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TMonthCalendar, AEventId: TNotifyEvent)  =
  MonthCalendar_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TMonthCalendar, AEventId: TNotifyEvent)  =
  MonthCalendar_SetOnMouseLeave(this.Instance, AEventId)

proc `OnStartDock=`*(this: TMonthCalendar, AEventId: TStartDockEvent)  =
  MonthCalendar_SetOnStartDock(this.Instance, AEventId)

proc DockClientCount*(this: TMonthCalendar): int32  =
  return MonthCalendar_GetDockClientCount(this.Instance)

proc DockSite*(this: TMonthCalendar): bool  =
  return MonthCalendar_GetDockSite(this.Instance)

proc `DockSite=`*(this: TMonthCalendar, AValue: bool)  =
  MonthCalendar_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TMonthCalendar): bool  =
  return MonthCalendar_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TMonthCalendar): int32  =
  return MonthCalendar_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TMonthCalendar): TBrush  =
  return MonthCalendar_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TMonthCalendar): int32  =
  return MonthCalendar_GetControlCount(this.Instance)

proc Handle*(this: TMonthCalendar): HWND  =
  return MonthCalendar_GetHandle(this.Instance)

proc ParentWindow*(this: TMonthCalendar): HWND  =
  return MonthCalendar_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TMonthCalendar, AValue: HWND)  =
  MonthCalendar_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TMonthCalendar): bool  =
  return MonthCalendar_GetShowing(this.Instance)

proc UseDockManager*(this: TMonthCalendar): bool  =
  return MonthCalendar_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TMonthCalendar, AValue: bool)  =
  MonthCalendar_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TMonthCalendar): TAction  =
  return MonthCalendar_GetAction(this.Instance).AsAction

proc `Action=`*(this: TMonthCalendar, AValue: TAction)  =
  MonthCalendar_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TMonthCalendar): TRect  =
  MonthCalendar_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TMonthCalendar, AValue: TRect)  =
  var ps1 = AValue
  MonthCalendar_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TMonthCalendar): int32  =
  return MonthCalendar_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TMonthCalendar, AValue: int32)  =
  MonthCalendar_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TMonthCalendar): TPoint  =
  MonthCalendar_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TMonthCalendar): TRect  =
  MonthCalendar_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TMonthCalendar): int32  =
  return MonthCalendar_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TMonthCalendar, AValue: int32)  =
  MonthCalendar_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TMonthCalendar): TControlState  =
  return MonthCalendar_GetControlState(this.Instance)

proc `ControlState=`*(this: TMonthCalendar, AValue: TControlState)  =
  MonthCalendar_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TMonthCalendar): TControlStyle  =
  return MonthCalendar_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TMonthCalendar, AValue: TControlStyle)  =
  MonthCalendar_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TMonthCalendar): bool  =
  return MonthCalendar_GetFloating(this.Instance)

proc Parent*(this: TMonthCalendar): TWinControl  =
  return MonthCalendar_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TMonthCalendar, AValue: TWinControl)  =
  MonthCalendar_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TMonthCalendar): int32  =
  return MonthCalendar_GetLeft(this.Instance)

proc `Left=`*(this: TMonthCalendar, AValue: int32)  =
  MonthCalendar_SetLeft(this.Instance, AValue)

proc Top*(this: TMonthCalendar): int32  =
  return MonthCalendar_GetTop(this.Instance)

proc `Top=`*(this: TMonthCalendar, AValue: int32)  =
  MonthCalendar_SetTop(this.Instance, AValue)

proc Width*(this: TMonthCalendar): int32  =
  return MonthCalendar_GetWidth(this.Instance)

proc `Width=`*(this: TMonthCalendar, AValue: int32)  =
  MonthCalendar_SetWidth(this.Instance, AValue)

proc Height*(this: TMonthCalendar): int32  =
  return MonthCalendar_GetHeight(this.Instance)

proc `Height=`*(this: TMonthCalendar, AValue: int32)  =
  MonthCalendar_SetHeight(this.Instance, AValue)

proc Cursor*(this: TMonthCalendar): TCursor  =
  return MonthCalendar_GetCursor(this.Instance)

proc `Cursor=`*(this: TMonthCalendar, AValue: TCursor)  =
  MonthCalendar_SetCursor(this.Instance, AValue)

proc Hint*(this: TMonthCalendar): string  =
  return $MonthCalendar_GetHint(this.Instance)

proc `Hint=`*(this: TMonthCalendar, AValue: string)  =
  MonthCalendar_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TMonthCalendar): int32  =
  return MonthCalendar_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TMonthCalendar): int32  =
  return MonthCalendar_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TMonthCalendar, AValue: int32)  =
  MonthCalendar_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TMonthCalendar): TComponent  =
  return MonthCalendar_GetOwner(this.Instance).AsComponent

proc Name*(this: TMonthCalendar): string  =
  return $MonthCalendar_GetName(this.Instance)

proc `Name=`*(this: TMonthCalendar, AValue: string)  =
  MonthCalendar_SetName(this.Instance, AValue)

proc Tag*(this: TMonthCalendar): int  =
  return MonthCalendar_GetTag(this.Instance)

proc `Tag=`*(this: TMonthCalendar, AValue: int)  =
  MonthCalendar_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TMonthCalendar): TAnchorSide  =
  return MonthCalendar_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TMonthCalendar, AValue: TAnchorSide)  =
  MonthCalendar_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TMonthCalendar): TAnchorSide  =
  return MonthCalendar_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TMonthCalendar, AValue: TAnchorSide)  =
  MonthCalendar_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TMonthCalendar): TAnchorSide  =
  return MonthCalendar_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TMonthCalendar, AValue: TAnchorSide)  =
  MonthCalendar_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TMonthCalendar): TAnchorSide  =
  return MonthCalendar_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TMonthCalendar, AValue: TAnchorSide)  =
  MonthCalendar_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TMonthCalendar): TControlChildSizing  =
  return MonthCalendar_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TMonthCalendar, AValue: TControlChildSizing)  =
  MonthCalendar_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TMonthCalendar): TControlBorderSpacing  =
  return MonthCalendar_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TMonthCalendar, AValue: TControlBorderSpacing)  =
  MonthCalendar_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TMonthCalendar, Index: int32): TControl  =
  return MonthCalendar_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TMonthCalendar, Index: int32): TControl  =
  return MonthCalendar_GetControls(this.Instance, Index).AsControl

proc Components*(this: TMonthCalendar, AIndex: int32): TComponent  =
  return MonthCalendar_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TMonthCalendar, AKind: TAnchorKind): TAnchorSide  =
  return MonthCalendar_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TMonthCalendarClass*(): TClass = MonthCalendar_StaticClassType()


#------------------------- TListView -------------------------

proc Free*(this: TListView) = defaultFree: ListView_Free

proc NewListView*(AOwner: TComponent): TListView =
  new(result)
  result.Instance = ListView_Create(CheckPtr(AOwner))

proc AddItem*(this: TListView, Item: string, AObject: TObject)  =
  ListView_AddItem(this.Instance, Item, CheckPtr(AObject))

proc AlphaSort*(this: TListView): bool  =
  return ListView_AlphaSort(this.Instance)

proc Clear*(this: TListView)  =
  ListView_Clear(this.Instance)

proc ClearSelection*(this: TListView)  =
  ListView_ClearSelection(this.Instance)

proc DeleteSelected*(this: TListView)  =
  ListView_DeleteSelected(this.Instance)

proc GetHitTestInfoAt*(this: TListView, X: int32, Y: int32): THitTests  =
  return ListView_GetHitTestInfoAt(this.Instance, X, Y)

proc GetItemAt*(this: TListView, X: int32, Y: int32): TListItem  =
  return ListView_GetItemAt(this.Instance, X, Y).AsListItem

proc GetNearestItem*(this: TListView, Point: TPoint, Direction: TSearchDirection): TListItem  =
  var ps1 = Point
  return ListView_GetNearestItem(this.Instance, ps1, Direction).AsListItem

proc GetNextItem*(this: TListView, StartItem: TListItem, Direction: TSearchDirection, States: TListItemStates): TListItem  =
  return ListView_GetNextItem(this.Instance, CheckPtr(StartItem), Direction, States).AsListItem

proc IsEditing*(this: TListView): bool  =
  return ListView_IsEditing(this.Instance)

proc SelectAll*(this: TListView)  =
  ListView_SelectAll(this.Instance)

proc CustomSort*(this: TListView, SortProc: PFNLVCOMPARE, lParam: int): bool  =
  return ListView_CustomSort(this.Instance, SortProc, lParam)

proc CanFocus*(this: TListView): bool =
  return ListView_CanFocus(this.Instance)

proc ContainsControl*(this: TListView, Control: TControl): bool =
  return ListView_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TListView, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return ListView_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TListView) =
  ListView_DisableAlign(this.Instance)

proc EnableAlign*(this: TListView) =
  ListView_EnableAlign(this.Instance)

proc FindChildControl*(this: TListView, ControlName: string): TControl =
  return ListView_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TListView, AllLevels: bool) =
  ListView_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TListView): bool =
  return ListView_Focused(this.Instance)

proc HandleAllocated*(this: TListView): bool =
  return ListView_HandleAllocated(this.Instance)

proc InsertControl*(this: TListView, AControl: TControl) =
  ListView_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TListView) =
  ListView_Invalidate(this.Instance)

proc PaintTo*(this: TListView, DC: HDC, X: int32, Y: int32) =
  ListView_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TListView, AControl: TControl) =
  ListView_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TListView) =
  ListView_Realign(this.Instance)

proc Repaint*(this: TListView) =
  ListView_Repaint(this.Instance)

proc ScaleBy*(this: TListView, M: int32, D: int32) =
  ListView_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TListView, DeltaX: int32, DeltaY: int32) =
  ListView_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TListView, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ListView_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TListView) =
  ListView_SetFocus(this.Instance)

proc Update*(this: TListView) =
  ListView_Update(this.Instance)

proc BringToFront*(this: TListView) =
  ListView_BringToFront(this.Instance)

proc ClientToScreen*(this: TListView, Point: TPoint): TPoint =
  var ps1 = Point
  ListView_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TListView, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ListView_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TListView): bool =
  return ListView_Dragging(this.Instance)

proc HasParent*(this: TListView): bool =
  return ListView_HasParent(this.Instance)

proc Hide*(this: TListView) =
  ListView_Hide(this.Instance)

proc Perform*(this: TListView, Msg: uint32, WParam: uint, LParam: int): int =
  return ListView_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TListView) =
  ListView_Refresh(this.Instance)

proc ScreenToClient*(this: TListView, Point: TPoint): TPoint =
  var ps1 = Point
  ListView_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TListView, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ListView_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TListView) =
  ListView_SendToBack(this.Instance)

proc Show*(this: TListView) =
  ListView_Show(this.Instance)

proc GetTextBuf*(this: TListView, Buffer: string, BufSize: int32): int32 =
  return ListView_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TListView): int32 =
  return ListView_GetTextLen(this.Instance)

proc SetTextBuf*(this: TListView, Buffer: string) =
  ListView_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TListView, AName: string): TComponent =
  return ListView_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TListView): string =
  return $ListView_GetNamePath(this.Instance)

proc Assign*(this: TListView, Source: TObject) =
  ListView_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TListView): TClass =
  return ListView_ClassType(this.Instance)

proc ClassName*(this: TListView): string =
  return $ListView_ClassName(this.Instance)

proc InstanceSize*(this: TListView): int32 =
  return ListView_InstanceSize(this.Instance)

proc InheritsFrom*(this: TListView, AClass: TClass): bool =
  return ListView_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TListView, Obj: TObject): bool =
  return ListView_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TListView): int32 =
  return ListView_GetHashCode(this.Instance)

proc ToString*(this: TListView): string =
  return $ListView_ToString(this.Instance)

proc AnchorToNeighbour*(this: TListView, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ListView_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TListView, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ListView_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TListView, ASibling: TControl) =
  ListView_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TListView, ASibling: TControl) =
  ListView_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TListView, ASide: TAnchorKind, ASibling: TControl) =
  ListView_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TListView, ATheAlign: TAlign, ASpace: int32) =
  ListView_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TListView, ASpace: int32) =
  ListView_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TListView, ASize: int32): int32 =
  return ListView_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TListView, ASize: int32): int32 =
  return ListView_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TListView, ASize: int32): int32 =
  return ListView_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TListView, ASize: int32): int32 =
  return ListView_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TListView, ASize: int32): int32 =
  return ListView_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TListView, ASize: int32): int32 =
  return ListView_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TListView, ASize: int32): int32 =
  return ListView_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TListView, ASize: int32): int32 =
  return ListView_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TListView, ASize: int32): int32 =
  return ListView_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TListView, ASize: int32): int32 =
  return ListView_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TListView, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ListView_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TListView, ADesignTimePPI: int32) =
  ListView_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TListView, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ListView_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc AutoSort*(this: TListView): bool  =
  return ListView_GetAutoSort(this.Instance)

proc `AutoSort=`*(this: TListView, AValue: bool)  =
  ListView_SetAutoSort(this.Instance, AValue)

proc AutoSortIndicator*(this: TListView): bool  =
  return ListView_GetAutoSortIndicator(this.Instance)

proc `AutoSortIndicator=`*(this: TListView, AValue: bool)  =
  ListView_SetAutoSortIndicator(this.Instance, AValue)

proc AutoWidthLastColumn*(this: TListView): bool  =
  return ListView_GetAutoWidthLastColumn(this.Instance)

proc `AutoWidthLastColumn=`*(this: TListView, AValue: bool)  =
  ListView_SetAutoWidthLastColumn(this.Instance, AValue)

proc SmallImagesWidth*(this: TListView): int32  =
  return ListView_GetSmallImagesWidth(this.Instance)

proc `SmallImagesWidth=`*(this: TListView, AValue: int32)  =
  ListView_SetSmallImagesWidth(this.Instance, AValue)

proc SortColumn*(this: TListView): int32  =
  return ListView_GetSortColumn(this.Instance)

proc `SortColumn=`*(this: TListView, AValue: int32)  =
  ListView_SetSortColumn(this.Instance, AValue)

proc SortDirection*(this: TListView): TSortDirection  =
  return ListView_GetSortDirection(this.Instance)

proc `SortDirection=`*(this: TListView, AValue: TSortDirection)  =
  ListView_SetSortDirection(this.Instance, AValue)

proc LargeImagesWidth*(this: TListView): int32  =
  return ListView_GetLargeImagesWidth(this.Instance)

proc `LargeImagesWidth=`*(this: TListView, AValue: int32)  =
  ListView_SetLargeImagesWidth(this.Instance, AValue)

proc StateImagesWidth*(this: TListView): int32  =
  return ListView_GetStateImagesWidth(this.Instance)

proc `StateImagesWidth=`*(this: TListView, AValue: int32)  =
  ListView_SetStateImagesWidth(this.Instance, AValue)

proc ToolTips*(this: TListView): bool  =
  return ListView_GetToolTips(this.Instance)

proc `ToolTips=`*(this: TListView, AValue: bool)  =
  ListView_SetToolTips(this.Instance, AValue)

proc ScrollBars*(this: TListView): TScrollStyle  =
  return ListView_GetScrollBars(this.Instance)

proc `ScrollBars=`*(this: TListView, AValue: TScrollStyle)  =
  ListView_SetScrollBars(this.Instance, AValue)

proc ColumnCount*(this: TListView): int32  =
  return ListView_GetColumnCount(this.Instance)

proc Action*(this: TListView): TAction  =
  return ListView_GetAction(this.Instance).AsAction

proc `Action=`*(this: TListView, AValue: TAction)  =
  ListView_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TListView): TAlign  =
  return ListView_GetAlign(this.Instance)

proc `Align=`*(this: TListView, AValue: TAlign)  =
  ListView_SetAlign(this.Instance, AValue)

proc AllocBy*(this: TListView): int32  =
  return ListView_GetAllocBy(this.Instance)

proc `AllocBy=`*(this: TListView, AValue: int32)  =
  ListView_SetAllocBy(this.Instance, AValue)

proc Anchors*(this: TListView): TAnchors  =
  return ListView_GetAnchors(this.Instance)

proc `Anchors=`*(this: TListView, AValue: TAnchors)  =
  ListView_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TListView): TBiDiMode  =
  return ListView_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TListView, AValue: TBiDiMode)  =
  ListView_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TListView): TBorderStyle  =
  return ListView_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TListView, AValue: TBorderStyle)  =
  ListView_SetBorderStyle(this.Instance, AValue)

proc BorderWidth*(this: TListView): int32  =
  return ListView_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TListView, AValue: int32)  =
  ListView_SetBorderWidth(this.Instance, AValue)

proc Checkboxes*(this: TListView): bool  =
  return ListView_GetCheckboxes(this.Instance)

proc `Checkboxes=`*(this: TListView, AValue: bool)  =
  ListView_SetCheckboxes(this.Instance, AValue)

proc Color*(this: TListView): TColor  =
  return ListView_GetColor(this.Instance)

proc `Color=`*(this: TListView, AValue: TColor)  =
  ListView_SetColor(this.Instance, AValue)

proc Columns*(this: TListView): TListColumns  =
  return ListView_GetColumns(this.Instance).AsListColumns

proc `Columns=`*(this: TListView, AValue: TListColumns)  =
  ListView_SetColumns(this.Instance, CheckPtr(AValue))

proc ColumnClick*(this: TListView): bool  =
  return ListView_GetColumnClick(this.Instance)

proc `ColumnClick=`*(this: TListView, AValue: bool)  =
  ListView_SetColumnClick(this.Instance, AValue)

proc Constraints*(this: TListView): TSizeConstraints  =
  return ListView_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TListView, AValue: TSizeConstraints)  =
  ListView_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TListView): bool  =
  return ListView_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TListView, AValue: bool)  =
  ListView_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TListView): TCursor  =
  return ListView_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TListView, AValue: TCursor)  =
  ListView_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TListView): TDragKind  =
  return ListView_GetDragKind(this.Instance)

proc `DragKind=`*(this: TListView, AValue: TDragKind)  =
  ListView_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TListView): TDragMode  =
  return ListView_GetDragMode(this.Instance)

proc `DragMode=`*(this: TListView, AValue: TDragMode)  =
  ListView_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TListView): bool  =
  return ListView_GetEnabled(this.Instance)

proc `Enabled=`*(this: TListView, AValue: bool)  =
  ListView_SetEnabled(this.Instance, AValue)

proc Font*(this: TListView): TFont  =
  return ListView_GetFont(this.Instance).AsFont

proc `Font=`*(this: TListView, AValue: TFont)  =
  ListView_SetFont(this.Instance, CheckPtr(AValue))

proc FlatScrollBars*(this: TListView): bool  =
  return ListView_GetFlatScrollBars(this.Instance)

proc `FlatScrollBars=`*(this: TListView, AValue: bool)  =
  ListView_SetFlatScrollBars(this.Instance, AValue)

proc FullDrag*(this: TListView): bool  =
  return ListView_GetFullDrag(this.Instance)

proc `FullDrag=`*(this: TListView, AValue: bool)  =
  ListView_SetFullDrag(this.Instance, AValue)

proc GridLines*(this: TListView): bool  =
  return ListView_GetGridLines(this.Instance)

proc `GridLines=`*(this: TListView, AValue: bool)  =
  ListView_SetGridLines(this.Instance, AValue)

proc HideSelection*(this: TListView): bool  =
  return ListView_GetHideSelection(this.Instance)

proc `HideSelection=`*(this: TListView, AValue: bool)  =
  ListView_SetHideSelection(this.Instance, AValue)

proc HotTrack*(this: TListView): bool  =
  return ListView_GetHotTrack(this.Instance)

proc `HotTrack=`*(this: TListView, AValue: bool)  =
  ListView_SetHotTrack(this.Instance, AValue)

proc IconOptions*(this: TListView): TIconOptions  =
  return ListView_GetIconOptions(this.Instance).AsIconOptions

proc `IconOptions=`*(this: TListView, AValue: TIconOptions)  =
  ListView_SetIconOptions(this.Instance, CheckPtr(AValue))

proc Items*(this: TListView): TListItems  =
  return ListView_GetItems(this.Instance).AsListItems

proc `Items=`*(this: TListView, AValue: TListItems)  =
  ListView_SetItems(this.Instance, CheckPtr(AValue))

proc LargeImages*(this: TListView): TImageList  =
  return ListView_GetLargeImages(this.Instance).AsImageList

proc `LargeImages=`*(this: TListView, AValue: TImageList)  =
  ListView_SetLargeImages(this.Instance, CheckPtr(AValue))

proc MultiSelect*(this: TListView): bool  =
  return ListView_GetMultiSelect(this.Instance)

proc `MultiSelect=`*(this: TListView, AValue: bool)  =
  ListView_SetMultiSelect(this.Instance, AValue)

proc OwnerData*(this: TListView): bool  =
  return ListView_GetOwnerData(this.Instance)

proc `OwnerData=`*(this: TListView, AValue: bool)  =
  ListView_SetOwnerData(this.Instance, AValue)

proc OwnerDraw*(this: TListView): bool  =
  return ListView_GetOwnerDraw(this.Instance)

proc `OwnerDraw=`*(this: TListView, AValue: bool)  =
  ListView_SetOwnerDraw(this.Instance, AValue)

proc ReadOnly*(this: TListView): bool  =
  return ListView_GetReadOnly(this.Instance)

proc `ReadOnly=`*(this: TListView, AValue: bool)  =
  ListView_SetReadOnly(this.Instance, AValue)

proc RowSelect*(this: TListView): bool  =
  return ListView_GetRowSelect(this.Instance)

proc `RowSelect=`*(this: TListView, AValue: bool)  =
  ListView_SetRowSelect(this.Instance, AValue)

proc ParentColor*(this: TListView): bool  =
  return ListView_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TListView, AValue: bool)  =
  ListView_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TListView): bool  =
  return ListView_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TListView, AValue: bool)  =
  ListView_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TListView): bool  =
  return ListView_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TListView, AValue: bool)  =
  ListView_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TListView): bool  =
  return ListView_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TListView, AValue: bool)  =
  ListView_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TListView): TPopupMenu  =
  return ListView_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TListView, AValue: TPopupMenu)  =
  ListView_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowColumnHeaders*(this: TListView): bool  =
  return ListView_GetShowColumnHeaders(this.Instance)

proc `ShowColumnHeaders=`*(this: TListView, AValue: bool)  =
  ListView_SetShowColumnHeaders(this.Instance, AValue)

proc ShowHint*(this: TListView): bool  =
  return ListView_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TListView, AValue: bool)  =
  ListView_SetShowHint(this.Instance, AValue)

proc SmallImages*(this: TListView): TImageList  =
  return ListView_GetSmallImages(this.Instance).AsImageList

proc `SmallImages=`*(this: TListView, AValue: TImageList)  =
  ListView_SetSmallImages(this.Instance, CheckPtr(AValue))

proc SortType*(this: TListView): TSortType  =
  return ListView_GetSortType(this.Instance)

proc `SortType=`*(this: TListView, AValue: TSortType)  =
  ListView_SetSortType(this.Instance, AValue)

proc StateImages*(this: TListView): TImageList  =
  return ListView_GetStateImages(this.Instance).AsImageList

proc `StateImages=`*(this: TListView, AValue: TImageList)  =
  ListView_SetStateImages(this.Instance, CheckPtr(AValue))

proc TabOrder*(this: TListView): TTabOrder  =
  return ListView_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TListView, AValue: TTabOrder)  =
  ListView_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TListView): bool  =
  return ListView_GetTabStop(this.Instance)

proc `TabStop=`*(this: TListView, AValue: bool)  =
  ListView_SetTabStop(this.Instance, AValue)

proc ViewStyle*(this: TListView): TViewStyle  =
  return ListView_GetViewStyle(this.Instance)

proc `ViewStyle=`*(this: TListView, AValue: TViewStyle)  =
  ListView_SetViewStyle(this.Instance, AValue)

proc Visible*(this: TListView): bool  =
  return ListView_GetVisible(this.Instance)

proc `Visible=`*(this: TListView, AValue: bool)  =
  ListView_SetVisible(this.Instance, AValue)

proc `OnAdvancedCustomDraw=`*(this: TListView, AEventId: TLVAdvancedCustomDrawEvent)  =
  ListView_SetOnAdvancedCustomDraw(this.Instance, AEventId)

proc `OnAdvancedCustomDrawItem=`*(this: TListView, AEventId: TLVAdvancedCustomDrawItemEvent)  =
  ListView_SetOnAdvancedCustomDrawItem(this.Instance, AEventId)

proc `OnAdvancedCustomDrawSubItem=`*(this: TListView, AEventId: TLVAdvancedCustomDrawSubItemEvent)  =
  ListView_SetOnAdvancedCustomDrawSubItem(this.Instance, AEventId)

proc `OnChange=`*(this: TListView, AEventId: TLVChangeEvent)  =
  ListView_SetOnChange(this.Instance, AEventId)

proc `OnClick=`*(this: TListView, AEventId: TNotifyEvent)  =
  ListView_SetOnClick(this.Instance, AEventId)

proc `OnColumnClick=`*(this: TListView, AEventId: TLVColumnClickEvent)  =
  ListView_SetOnColumnClick(this.Instance, AEventId)

proc `OnCompare=`*(this: TListView, AEventId: TLVCompareEvent)  =
  ListView_SetOnCompare(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TListView, AEventId: TContextPopupEvent)  =
  ListView_SetOnContextPopup(this.Instance, AEventId)

proc `OnCustomDraw=`*(this: TListView, AEventId: TLVCustomDrawEvent)  =
  ListView_SetOnCustomDraw(this.Instance, AEventId)

proc `OnCustomDrawItem=`*(this: TListView, AEventId: TLVCustomDrawItemEvent)  =
  ListView_SetOnCustomDrawItem(this.Instance, AEventId)

proc `OnCustomDrawSubItem=`*(this: TListView, AEventId: TLVCustomDrawSubItemEvent)  =
  ListView_SetOnCustomDrawSubItem(this.Instance, AEventId)

proc `OnData=`*(this: TListView, AEventId: TLVDataEvent)  =
  ListView_SetOnData(this.Instance, AEventId)

proc `OnDataFind=`*(this: TListView, AEventId: TLVDataFindEvent)  =
  ListView_SetOnDataFind(this.Instance, AEventId)

proc `OnDataHint=`*(this: TListView, AEventId: TLVDataHintEvent)  =
  ListView_SetOnDataHint(this.Instance, AEventId)

proc `OnDblClick=`*(this: TListView, AEventId: TNotifyEvent)  =
  ListView_SetOnDblClick(this.Instance, AEventId)

proc `OnDeletion=`*(this: TListView, AEventId: TLVDeletedEvent)  =
  ListView_SetOnDeletion(this.Instance, AEventId)

proc `OnEdited=`*(this: TListView, AEventId: TLVEditedEvent)  =
  ListView_SetOnEdited(this.Instance, AEventId)

proc `OnEditing=`*(this: TListView, AEventId: TLVEditingEvent)  =
  ListView_SetOnEditing(this.Instance, AEventId)

proc `OnEndDock=`*(this: TListView, AEventId: TEndDragEvent)  =
  ListView_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TListView, AEventId: TEndDragEvent)  =
  ListView_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TListView, AEventId: TNotifyEvent)  =
  ListView_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TListView, AEventId: TNotifyEvent)  =
  ListView_SetOnExit(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TListView, AEventId: TDragDropEvent)  =
  ListView_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TListView, AEventId: TDragOverEvent)  =
  ListView_SetOnDragOver(this.Instance, AEventId)

proc `OnInsert=`*(this: TListView, AEventId: TLVDeletedEvent)  =
  ListView_SetOnInsert(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TListView, AEventId: TKeyEvent)  =
  ListView_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TListView, AEventId: TKeyPressEvent)  =
  ListView_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TListView, AEventId: TKeyEvent)  =
  ListView_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TListView, AEventId: TMouseEvent)  =
  ListView_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TListView, AEventId: TNotifyEvent)  =
  ListView_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TListView, AEventId: TNotifyEvent)  =
  ListView_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TListView, AEventId: TMouseMoveEvent)  =
  ListView_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TListView, AEventId: TMouseEvent)  =
  ListView_SetOnMouseUp(this.Instance, AEventId)

proc `OnResize=`*(this: TListView, AEventId: TNotifyEvent)  =
  ListView_SetOnResize(this.Instance, AEventId)

proc `OnSelectItem=`*(this: TListView, AEventId: TLVSelectItemEvent)  =
  ListView_SetOnSelectItem(this.Instance, AEventId)

proc `OnItemChecked=`*(this: TListView, AEventId: TLVCheckedItemEvent)  =
  ListView_SetOnItemChecked(this.Instance, AEventId)

proc `OnStartDock=`*(this: TListView, AEventId: TStartDockEvent)  =
  ListView_SetOnStartDock(this.Instance, AEventId)

proc Canvas*(this: TListView): TCanvas  =
  return ListView_GetCanvas(this.Instance).AsCanvas

proc DropTarget*(this: TListView): TListItem  =
  return ListView_GetDropTarget(this.Instance).AsListItem

proc `DropTarget=`*(this: TListView, AValue: TListItem)  =
  ListView_SetDropTarget(this.Instance, CheckPtr(AValue))

proc ItemFocused*(this: TListView): TListItem  =
  return ListView_GetItemFocused(this.Instance).AsListItem

proc `ItemFocused=`*(this: TListView, AValue: TListItem)  =
  ListView_SetItemFocused(this.Instance, CheckPtr(AValue))

proc SelCount*(this: TListView): int32  =
  return ListView_GetSelCount(this.Instance)

proc Selected*(this: TListView): TListItem  =
  return ListView_GetSelected(this.Instance).AsListItem

proc `Selected=`*(this: TListView, AValue: TListItem)  =
  ListView_SetSelected(this.Instance, CheckPtr(AValue))

proc TopItem*(this: TListView): TListItem  =
  return ListView_GetTopItem(this.Instance).AsListItem

proc VisibleRowCount*(this: TListView): int32  =
  return ListView_GetVisibleRowCount(this.Instance)

proc ItemIndex*(this: TListView): int32  =
  return ListView_GetItemIndex(this.Instance)

proc `ItemIndex=`*(this: TListView, AValue: int32)  =
  ListView_SetItemIndex(this.Instance, AValue)

proc DockClientCount*(this: TListView): int32  =
  return ListView_GetDockClientCount(this.Instance)

proc DockSite*(this: TListView): bool  =
  return ListView_GetDockSite(this.Instance)

proc `DockSite=`*(this: TListView, AValue: bool)  =
  ListView_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TListView): bool  =
  return ListView_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TListView): int32  =
  return ListView_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TListView): TBrush  =
  return ListView_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TListView): int32  =
  return ListView_GetControlCount(this.Instance)

proc Handle*(this: TListView): HWND  =
  return ListView_GetHandle(this.Instance)

proc ParentWindow*(this: TListView): HWND  =
  return ListView_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TListView, AValue: HWND)  =
  ListView_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TListView): bool  =
  return ListView_GetShowing(this.Instance)

proc UseDockManager*(this: TListView): bool  =
  return ListView_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TListView, AValue: bool)  =
  ListView_SetUseDockManager(this.Instance, AValue)

proc BoundsRect*(this: TListView): TRect  =
  ListView_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TListView, AValue: TRect)  =
  var ps1 = AValue
  ListView_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TListView): int32  =
  return ListView_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TListView, AValue: int32)  =
  ListView_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TListView): TPoint  =
  ListView_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TListView): TRect  =
  ListView_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TListView): int32  =
  return ListView_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TListView, AValue: int32)  =
  ListView_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TListView): TControlState  =
  return ListView_GetControlState(this.Instance)

proc `ControlState=`*(this: TListView, AValue: TControlState)  =
  ListView_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TListView): TControlStyle  =
  return ListView_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TListView, AValue: TControlStyle)  =
  ListView_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TListView): bool  =
  return ListView_GetFloating(this.Instance)

proc Parent*(this: TListView): TWinControl  =
  return ListView_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TListView, AValue: TWinControl)  =
  ListView_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TListView): int32  =
  return ListView_GetLeft(this.Instance)

proc `Left=`*(this: TListView, AValue: int32)  =
  ListView_SetLeft(this.Instance, AValue)

proc Top*(this: TListView): int32  =
  return ListView_GetTop(this.Instance)

proc `Top=`*(this: TListView, AValue: int32)  =
  ListView_SetTop(this.Instance, AValue)

proc Width*(this: TListView): int32  =
  return ListView_GetWidth(this.Instance)

proc `Width=`*(this: TListView, AValue: int32)  =
  ListView_SetWidth(this.Instance, AValue)

proc Height*(this: TListView): int32  =
  return ListView_GetHeight(this.Instance)

proc `Height=`*(this: TListView, AValue: int32)  =
  ListView_SetHeight(this.Instance, AValue)

proc Cursor*(this: TListView): TCursor  =
  return ListView_GetCursor(this.Instance)

proc `Cursor=`*(this: TListView, AValue: TCursor)  =
  ListView_SetCursor(this.Instance, AValue)

proc Hint*(this: TListView): string  =
  return $ListView_GetHint(this.Instance)

proc `Hint=`*(this: TListView, AValue: string)  =
  ListView_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TListView): int32  =
  return ListView_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TListView): int32  =
  return ListView_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TListView, AValue: int32)  =
  ListView_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TListView): TComponent  =
  return ListView_GetOwner(this.Instance).AsComponent

proc Name*(this: TListView): string  =
  return $ListView_GetName(this.Instance)

proc `Name=`*(this: TListView, AValue: string)  =
  ListView_SetName(this.Instance, AValue)

proc Tag*(this: TListView): int  =
  return ListView_GetTag(this.Instance)

proc `Tag=`*(this: TListView, AValue: int)  =
  ListView_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TListView): TAnchorSide  =
  return ListView_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TListView, AValue: TAnchorSide)  =
  ListView_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TListView): TAnchorSide  =
  return ListView_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TListView, AValue: TAnchorSide)  =
  ListView_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TListView): TAnchorSide  =
  return ListView_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TListView, AValue: TAnchorSide)  =
  ListView_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TListView): TAnchorSide  =
  return ListView_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TListView, AValue: TAnchorSide)  =
  ListView_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TListView): TControlChildSizing  =
  return ListView_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TListView, AValue: TControlChildSizing)  =
  ListView_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TListView): TControlBorderSpacing  =
  return ListView_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TListView, AValue: TControlBorderSpacing)  =
  ListView_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Column*(this: TListView, Index: int32): TListColumn  =
  return ListView_GetColumn(this.Instance, Index).AsListColumn

proc DockClients*(this: TListView, Index: int32): TControl  =
  return ListView_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TListView, Index: int32): TControl  =
  return ListView_GetControls(this.Instance, Index).AsControl

proc Components*(this: TListView, AIndex: int32): TComponent  =
  return ListView_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TListView, AKind: TAnchorKind): TAnchorSide  =
  return ListView_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TListViewClass*(): TClass = ListView_StaticClassType()


#------------------------- TTreeView -------------------------

proc Free*(this: TTreeView) = defaultFree: TreeView_Free

proc NewTreeView*(AOwner: TComponent): TTreeView =
  new(result)
  result.Instance = TreeView_Create(CheckPtr(AOwner))

proc AlphaSort*(this: TTreeView, ARecurse: bool): bool  =
  return TreeView_AlphaSort(this.Instance, ARecurse)

proc FullCollapse*(this: TTreeView)  =
  TreeView_FullCollapse(this.Instance)

proc FullExpand*(this: TTreeView)  =
  TreeView_FullExpand(this.Instance)

proc GetHitTestInfoAt*(this: TTreeView, X: int32, Y: int32): THitTests  =
  return TreeView_GetHitTestInfoAt(this.Instance, X, Y)

proc GetNodeAt*(this: TTreeView, X: int32, Y: int32): TTreeNode  =
  return TreeView_GetNodeAt(this.Instance, X, Y).AsTreeNode

proc IsEditing*(this: TTreeView): bool  =
  return TreeView_IsEditing(this.Instance)

proc LoadFromFile*(this: TTreeView, FileName: string)  =
  TreeView_LoadFromFile(this.Instance, FileName)

proc LoadFromStream*(this: TTreeView, Stream: TStream)  =
  TreeView_LoadFromStream(this.Instance, CheckPtr(Stream))

proc SaveToFile*(this: TTreeView, FileName: string)  =
  TreeView_SaveToFile(this.Instance, FileName)

proc SaveToStream*(this: TTreeView, Stream: TStream)  =
  TreeView_SaveToStream(this.Instance, CheckPtr(Stream))

proc ClearSelection*(this: TTreeView, KeepPrimary: bool)  =
  TreeView_ClearSelection(this.Instance, KeepPrimary)

proc CustomSort*(this: TTreeView, SortProc: PFNTVCOMPARE, Data: int, ARecurse: bool): bool  =
  return TreeView_CustomSort(this.Instance, SortProc, Data, ARecurse)

proc CanFocus*(this: TTreeView): bool =
  return TreeView_CanFocus(this.Instance)

proc ContainsControl*(this: TTreeView, Control: TControl): bool =
  return TreeView_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TTreeView, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return TreeView_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TTreeView) =
  TreeView_DisableAlign(this.Instance)

proc EnableAlign*(this: TTreeView) =
  TreeView_EnableAlign(this.Instance)

proc FindChildControl*(this: TTreeView, ControlName: string): TControl =
  return TreeView_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TTreeView, AllLevels: bool) =
  TreeView_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TTreeView): bool =
  return TreeView_Focused(this.Instance)

proc HandleAllocated*(this: TTreeView): bool =
  return TreeView_HandleAllocated(this.Instance)

proc InsertControl*(this: TTreeView, AControl: TControl) =
  TreeView_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TTreeView) =
  TreeView_Invalidate(this.Instance)

proc PaintTo*(this: TTreeView, DC: HDC, X: int32, Y: int32) =
  TreeView_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TTreeView, AControl: TControl) =
  TreeView_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TTreeView) =
  TreeView_Realign(this.Instance)

proc Repaint*(this: TTreeView) =
  TreeView_Repaint(this.Instance)

proc ScaleBy*(this: TTreeView, M: int32, D: int32) =
  TreeView_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TTreeView, DeltaX: int32, DeltaY: int32) =
  TreeView_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TTreeView, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  TreeView_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TTreeView) =
  TreeView_SetFocus(this.Instance)

proc Update*(this: TTreeView) =
  TreeView_Update(this.Instance)

proc BringToFront*(this: TTreeView) =
  TreeView_BringToFront(this.Instance)

proc ClientToScreen*(this: TTreeView, Point: TPoint): TPoint =
  var ps1 = Point
  TreeView_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TTreeView, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  TreeView_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TTreeView): bool =
  return TreeView_Dragging(this.Instance)

proc HasParent*(this: TTreeView): bool =
  return TreeView_HasParent(this.Instance)

proc Hide*(this: TTreeView) =
  TreeView_Hide(this.Instance)

proc Perform*(this: TTreeView, Msg: uint32, WParam: uint, LParam: int): int =
  return TreeView_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TTreeView) =
  TreeView_Refresh(this.Instance)

proc ScreenToClient*(this: TTreeView, Point: TPoint): TPoint =
  var ps1 = Point
  TreeView_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TTreeView, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  TreeView_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TTreeView) =
  TreeView_SendToBack(this.Instance)

proc Show*(this: TTreeView) =
  TreeView_Show(this.Instance)

proc GetTextBuf*(this: TTreeView, Buffer: string, BufSize: int32): int32 =
  return TreeView_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TTreeView): int32 =
  return TreeView_GetTextLen(this.Instance)

proc SetTextBuf*(this: TTreeView, Buffer: string) =
  TreeView_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TTreeView, AName: string): TComponent =
  return TreeView_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TTreeView): string =
  return $TreeView_GetNamePath(this.Instance)

proc Assign*(this: TTreeView, Source: TObject) =
  TreeView_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TTreeView): TClass =
  return TreeView_ClassType(this.Instance)

proc ClassName*(this: TTreeView): string =
  return $TreeView_ClassName(this.Instance)

proc InstanceSize*(this: TTreeView): int32 =
  return TreeView_InstanceSize(this.Instance)

proc InheritsFrom*(this: TTreeView, AClass: TClass): bool =
  return TreeView_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TTreeView, Obj: TObject): bool =
  return TreeView_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TTreeView): int32 =
  return TreeView_GetHashCode(this.Instance)

proc ToString*(this: TTreeView): string =
  return $TreeView_ToString(this.Instance)

proc AnchorToNeighbour*(this: TTreeView, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  TreeView_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TTreeView, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  TreeView_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TTreeView, ASibling: TControl) =
  TreeView_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TTreeView, ASibling: TControl) =
  TreeView_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TTreeView, ASide: TAnchorKind, ASibling: TControl) =
  TreeView_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TTreeView, ATheAlign: TAlign, ASpace: int32) =
  TreeView_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TTreeView, ASpace: int32) =
  TreeView_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TTreeView, ASize: int32): int32 =
  return TreeView_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TTreeView, ASize: int32): int32 =
  return TreeView_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TTreeView, ASize: int32): int32 =
  return TreeView_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TTreeView, ASize: int32): int32 =
  return TreeView_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TTreeView, ASize: int32): int32 =
  return TreeView_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TTreeView, ASize: int32): int32 =
  return TreeView_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TTreeView, ASize: int32): int32 =
  return TreeView_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TTreeView, ASize: int32): int32 =
  return TreeView_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TTreeView, ASize: int32): int32 =
  return TreeView_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TTreeView, ASize: int32): int32 =
  return TreeView_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TTreeView, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  TreeView_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TTreeView, ADesignTimePPI: int32) =
  TreeView_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TTreeView, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  TreeView_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc DefaultItemHeight*(this: TTreeView): int32  =
  return TreeView_GetDefaultItemHeight(this.Instance)

proc `DefaultItemHeight=`*(this: TTreeView, AValue: int32)  =
  TreeView_SetDefaultItemHeight(this.Instance, AValue)

proc ExpandSignColor*(this: TTreeView): TColor  =
  return TreeView_GetExpandSignColor(this.Instance)

proc `ExpandSignColor=`*(this: TTreeView, AValue: TColor)  =
  TreeView_SetExpandSignColor(this.Instance, AValue)

proc ExpandSignSize*(this: TTreeView): int32  =
  return TreeView_GetExpandSignSize(this.Instance)

proc `ExpandSignSize=`*(this: TTreeView, AValue: int32)  =
  TreeView_SetExpandSignSize(this.Instance, AValue)

proc ExpandSignType*(this: TTreeView): TTreeViewExpandSignType  =
  return TreeView_GetExpandSignType(this.Instance)

proc `ExpandSignType=`*(this: TTreeView, AValue: TTreeViewExpandSignType)  =
  TreeView_SetExpandSignType(this.Instance, AValue)

proc HotTrackColor*(this: TTreeView): TColor  =
  return TreeView_GetHotTrackColor(this.Instance)

proc `HotTrackColor=`*(this: TTreeView, AValue: TColor)  =
  TreeView_SetHotTrackColor(this.Instance, AValue)

proc ImagesWidth*(this: TTreeView): int32  =
  return TreeView_GetImagesWidth(this.Instance)

proc `ImagesWidth=`*(this: TTreeView, AValue: int32)  =
  TreeView_SetImagesWidth(this.Instance, AValue)

proc Options*(this: TTreeView): TTreeViewOptions  =
  return TreeView_GetOptions(this.Instance)

proc `Options=`*(this: TTreeView, AValue: TTreeViewOptions)  =
  TreeView_SetOptions(this.Instance, AValue)

proc ScrollBars*(this: TTreeView): TScrollStyle  =
  return TreeView_GetScrollBars(this.Instance)

proc `ScrollBars=`*(this: TTreeView, AValue: TScrollStyle)  =
  TreeView_SetScrollBars(this.Instance, AValue)

proc SelectionColor*(this: TTreeView): TColor  =
  return TreeView_GetSelectionColor(this.Instance)

proc `SelectionColor=`*(this: TTreeView, AValue: TColor)  =
  TreeView_SetSelectionColor(this.Instance, AValue)

proc SelectionFontColor*(this: TTreeView): TColor  =
  return TreeView_GetSelectionFontColor(this.Instance)

proc `SelectionFontColor=`*(this: TTreeView, AValue: TColor)  =
  TreeView_SetSelectionFontColor(this.Instance, AValue)

proc SelectionFontColorUsed*(this: TTreeView): bool  =
  return TreeView_GetSelectionFontColorUsed(this.Instance)

proc `SelectionFontColorUsed=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetSelectionFontColorUsed(this.Instance, AValue)

proc SeparatorColor*(this: TTreeView): TColor  =
  return TreeView_GetSeparatorColor(this.Instance)

proc `SeparatorColor=`*(this: TTreeView, AValue: TColor)  =
  TreeView_SetSeparatorColor(this.Instance, AValue)

proc StateImagesWidth*(this: TTreeView): int32  =
  return TreeView_GetStateImagesWidth(this.Instance)

proc `StateImagesWidth=`*(this: TTreeView, AValue: int32)  =
  TreeView_SetStateImagesWidth(this.Instance, AValue)

proc ToolTips*(this: TTreeView): bool  =
  return TreeView_GetToolTips(this.Instance)

proc `ToolTips=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetToolTips(this.Instance, AValue)

proc TreeLineColor*(this: TTreeView): TColor  =
  return TreeView_GetTreeLineColor(this.Instance)

proc `TreeLineColor=`*(this: TTreeView, AValue: TColor)  =
  TreeView_SetTreeLineColor(this.Instance, AValue)

proc TreeLinePenStyle*(this: TTreeView): TPenStyle  =
  return TreeView_GetTreeLinePenStyle(this.Instance)

proc `TreeLinePenStyle=`*(this: TTreeView, AValue: TPenStyle)  =
  TreeView_SetTreeLinePenStyle(this.Instance, AValue)

proc Align*(this: TTreeView): TAlign  =
  return TreeView_GetAlign(this.Instance)

proc `Align=`*(this: TTreeView, AValue: TAlign)  =
  TreeView_SetAlign(this.Instance, AValue)

proc Anchors*(this: TTreeView): TAnchors  =
  return TreeView_GetAnchors(this.Instance)

proc `Anchors=`*(this: TTreeView, AValue: TAnchors)  =
  TreeView_SetAnchors(this.Instance, AValue)

proc AutoExpand*(this: TTreeView): bool  =
  return TreeView_GetAutoExpand(this.Instance)

proc `AutoExpand=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetAutoExpand(this.Instance, AValue)

proc BiDiMode*(this: TTreeView): TBiDiMode  =
  return TreeView_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TTreeView, AValue: TBiDiMode)  =
  TreeView_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TTreeView): TBorderStyle  =
  return TreeView_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TTreeView, AValue: TBorderStyle)  =
  TreeView_SetBorderStyle(this.Instance, AValue)

proc BorderWidth*(this: TTreeView): int32  =
  return TreeView_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TTreeView, AValue: int32)  =
  TreeView_SetBorderWidth(this.Instance, AValue)

proc Color*(this: TTreeView): TColor  =
  return TreeView_GetColor(this.Instance)

proc `Color=`*(this: TTreeView, AValue: TColor)  =
  TreeView_SetColor(this.Instance, AValue)

proc Constraints*(this: TTreeView): TSizeConstraints  =
  return TreeView_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TTreeView, AValue: TSizeConstraints)  =
  TreeView_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TTreeView): bool  =
  return TreeView_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetDoubleBuffered(this.Instance, AValue)

proc DragKind*(this: TTreeView): TDragKind  =
  return TreeView_GetDragKind(this.Instance)

proc `DragKind=`*(this: TTreeView, AValue: TDragKind)  =
  TreeView_SetDragKind(this.Instance, AValue)

proc DragCursor*(this: TTreeView): TCursor  =
  return TreeView_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TTreeView, AValue: TCursor)  =
  TreeView_SetDragCursor(this.Instance, AValue)

proc DragMode*(this: TTreeView): TDragMode  =
  return TreeView_GetDragMode(this.Instance)

proc `DragMode=`*(this: TTreeView, AValue: TDragMode)  =
  TreeView_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TTreeView): bool  =
  return TreeView_GetEnabled(this.Instance)

proc `Enabled=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetEnabled(this.Instance, AValue)

proc Font*(this: TTreeView): TFont  =
  return TreeView_GetFont(this.Instance).AsFont

proc `Font=`*(this: TTreeView, AValue: TFont)  =
  TreeView_SetFont(this.Instance, CheckPtr(AValue))

proc HideSelection*(this: TTreeView): bool  =
  return TreeView_GetHideSelection(this.Instance)

proc `HideSelection=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetHideSelection(this.Instance, AValue)

proc HotTrack*(this: TTreeView): bool  =
  return TreeView_GetHotTrack(this.Instance)

proc `HotTrack=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetHotTrack(this.Instance, AValue)

proc Images*(this: TTreeView): TImageList  =
  return TreeView_GetImages(this.Instance).AsImageList

proc `Images=`*(this: TTreeView, AValue: TImageList)  =
  TreeView_SetImages(this.Instance, CheckPtr(AValue))

proc Indent*(this: TTreeView): int32  =
  return TreeView_GetIndent(this.Instance)

proc `Indent=`*(this: TTreeView, AValue: int32)  =
  TreeView_SetIndent(this.Instance, AValue)

proc MultiSelect*(this: TTreeView): bool  =
  return TreeView_GetMultiSelect(this.Instance)

proc `MultiSelect=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetMultiSelect(this.Instance, AValue)

proc MultiSelectStyle*(this: TTreeView): TMultiSelectStyle  =
  return TreeView_GetMultiSelectStyle(this.Instance)

proc `MultiSelectStyle=`*(this: TTreeView, AValue: TMultiSelectStyle)  =
  TreeView_SetMultiSelectStyle(this.Instance, AValue)

proc ParentColor*(this: TTreeView): bool  =
  return TreeView_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TTreeView): bool  =
  return TreeView_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TTreeView): bool  =
  return TreeView_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TTreeView): bool  =
  return TreeView_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TTreeView): TPopupMenu  =
  return TreeView_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TTreeView, AValue: TPopupMenu)  =
  TreeView_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ReadOnly*(this: TTreeView): bool  =
  return TreeView_GetReadOnly(this.Instance)

proc `ReadOnly=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetReadOnly(this.Instance, AValue)

proc RightClickSelect*(this: TTreeView): bool  =
  return TreeView_GetRightClickSelect(this.Instance)

proc `RightClickSelect=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetRightClickSelect(this.Instance, AValue)

proc RowSelect*(this: TTreeView): bool  =
  return TreeView_GetRowSelect(this.Instance)

proc `RowSelect=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetRowSelect(this.Instance, AValue)

proc ShowButtons*(this: TTreeView): bool  =
  return TreeView_GetShowButtons(this.Instance)

proc `ShowButtons=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetShowButtons(this.Instance, AValue)

proc ShowHint*(this: TTreeView): bool  =
  return TreeView_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetShowHint(this.Instance, AValue)

proc ShowLines*(this: TTreeView): bool  =
  return TreeView_GetShowLines(this.Instance)

proc `ShowLines=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetShowLines(this.Instance, AValue)

proc ShowRoot*(this: TTreeView): bool  =
  return TreeView_GetShowRoot(this.Instance)

proc `ShowRoot=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetShowRoot(this.Instance, AValue)

proc SortType*(this: TTreeView): TSortType  =
  return TreeView_GetSortType(this.Instance)

proc `SortType=`*(this: TTreeView, AValue: TSortType)  =
  TreeView_SetSortType(this.Instance, AValue)

proc StateImages*(this: TTreeView): TImageList  =
  return TreeView_GetStateImages(this.Instance).AsImageList

proc `StateImages=`*(this: TTreeView, AValue: TImageList)  =
  TreeView_SetStateImages(this.Instance, CheckPtr(AValue))

proc TabOrder*(this: TTreeView): TTabOrder  =
  return TreeView_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TTreeView, AValue: TTabOrder)  =
  TreeView_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TTreeView): bool  =
  return TreeView_GetTabStop(this.Instance)

proc `TabStop=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetTabStop(this.Instance, AValue)

proc Visible*(this: TTreeView): bool  =
  return TreeView_GetVisible(this.Instance)

proc `Visible=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetVisible(this.Instance, AValue)

proc `OnAddition=`*(this: TTreeView, AEventId: TTVExpandedEvent)  =
  TreeView_SetOnAddition(this.Instance, AEventId)

proc `OnAdvancedCustomDraw=`*(this: TTreeView, AEventId: TTVAdvancedCustomDrawEvent)  =
  TreeView_SetOnAdvancedCustomDraw(this.Instance, AEventId)

proc `OnAdvancedCustomDrawItem=`*(this: TTreeView, AEventId: TTVAdvancedCustomDrawItemEvent)  =
  TreeView_SetOnAdvancedCustomDrawItem(this.Instance, AEventId)

proc `OnChange=`*(this: TTreeView, AEventId: TTVChangedEvent)  =
  TreeView_SetOnChange(this.Instance, AEventId)

proc `OnChanging=`*(this: TTreeView, AEventId: TTVChangingEvent)  =
  TreeView_SetOnChanging(this.Instance, AEventId)

proc `OnClick=`*(this: TTreeView, AEventId: TNotifyEvent)  =
  TreeView_SetOnClick(this.Instance, AEventId)

proc `OnCollapsed=`*(this: TTreeView, AEventId: TTVExpandedEvent)  =
  TreeView_SetOnCollapsed(this.Instance, AEventId)

proc `OnCollapsing=`*(this: TTreeView, AEventId: TTVCollapsingEvent)  =
  TreeView_SetOnCollapsing(this.Instance, AEventId)

proc `OnCompare=`*(this: TTreeView, AEventId: TTVCompareEvent)  =
  TreeView_SetOnCompare(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TTreeView, AEventId: TContextPopupEvent)  =
  TreeView_SetOnContextPopup(this.Instance, AEventId)

proc `OnCustomDraw=`*(this: TTreeView, AEventId: TTVCustomDrawEvent)  =
  TreeView_SetOnCustomDraw(this.Instance, AEventId)

proc `OnCustomDrawItem=`*(this: TTreeView, AEventId: TTVCustomDrawItemEvent)  =
  TreeView_SetOnCustomDrawItem(this.Instance, AEventId)

proc `OnDblClick=`*(this: TTreeView, AEventId: TNotifyEvent)  =
  TreeView_SetOnDblClick(this.Instance, AEventId)

proc `OnDeletion=`*(this: TTreeView, AEventId: TTVExpandedEvent)  =
  TreeView_SetOnDeletion(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TTreeView, AEventId: TDragDropEvent)  =
  TreeView_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TTreeView, AEventId: TDragOverEvent)  =
  TreeView_SetOnDragOver(this.Instance, AEventId)

proc `OnEdited=`*(this: TTreeView, AEventId: TTVEditedEvent)  =
  TreeView_SetOnEdited(this.Instance, AEventId)

proc `OnEditing=`*(this: TTreeView, AEventId: TTVEditingEvent)  =
  TreeView_SetOnEditing(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TTreeView, AEventId: TEndDragEvent)  =
  TreeView_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TTreeView, AEventId: TNotifyEvent)  =
  TreeView_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TTreeView, AEventId: TNotifyEvent)  =
  TreeView_SetOnExit(this.Instance, AEventId)

proc `OnExpanding=`*(this: TTreeView, AEventId: TTVExpandingEvent)  =
  TreeView_SetOnExpanding(this.Instance, AEventId)

proc `OnExpanded=`*(this: TTreeView, AEventId: TTVExpandedEvent)  =
  TreeView_SetOnExpanded(this.Instance, AEventId)

proc `OnGetSelectedIndex=`*(this: TTreeView, AEventId: TTVExpandedEvent)  =
  TreeView_SetOnGetSelectedIndex(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TTreeView, AEventId: TKeyEvent)  =
  TreeView_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TTreeView, AEventId: TKeyPressEvent)  =
  TreeView_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TTreeView, AEventId: TKeyEvent)  =
  TreeView_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TTreeView, AEventId: TMouseEvent)  =
  TreeView_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TTreeView, AEventId: TNotifyEvent)  =
  TreeView_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TTreeView, AEventId: TNotifyEvent)  =
  TreeView_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TTreeView, AEventId: TMouseMoveEvent)  =
  TreeView_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TTreeView, AEventId: TMouseEvent)  =
  TreeView_SetOnMouseUp(this.Instance, AEventId)

proc Items*(this: TTreeView): TTreeNodes  =
  return TreeView_GetItems(this.Instance).AsTreeNodes

proc `Items=`*(this: TTreeView, AValue: TTreeNodes)  =
  TreeView_SetItems(this.Instance, CheckPtr(AValue))

proc Canvas*(this: TTreeView): TCanvas  =
  return TreeView_GetCanvas(this.Instance).AsCanvas

proc DropTarget*(this: TTreeView): TTreeNode  =
  return TreeView_GetDropTarget(this.Instance).AsTreeNode

proc `DropTarget=`*(this: TTreeView, AValue: TTreeNode)  =
  TreeView_SetDropTarget(this.Instance, CheckPtr(AValue))

proc Selected*(this: TTreeView): TTreeNode  =
  return TreeView_GetSelected(this.Instance).AsTreeNode

proc `Selected=`*(this: TTreeView, AValue: TTreeNode)  =
  TreeView_SetSelected(this.Instance, CheckPtr(AValue))

proc TopItem*(this: TTreeView): TTreeNode  =
  return TreeView_GetTopItem(this.Instance).AsTreeNode

proc `TopItem=`*(this: TTreeView, AValue: TTreeNode)  =
  TreeView_SetTopItem(this.Instance, CheckPtr(AValue))

proc SelectionCount*(this: TTreeView): uint32  =
  return TreeView_GetSelectionCount(this.Instance)

proc DockClientCount*(this: TTreeView): int32  =
  return TreeView_GetDockClientCount(this.Instance)

proc DockSite*(this: TTreeView): bool  =
  return TreeView_GetDockSite(this.Instance)

proc `DockSite=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TTreeView): bool  =
  return TreeView_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TTreeView): int32  =
  return TreeView_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TTreeView): TBrush  =
  return TreeView_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TTreeView): int32  =
  return TreeView_GetControlCount(this.Instance)

proc Handle*(this: TTreeView): HWND  =
  return TreeView_GetHandle(this.Instance)

proc ParentWindow*(this: TTreeView): HWND  =
  return TreeView_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TTreeView, AValue: HWND)  =
  TreeView_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TTreeView): bool  =
  return TreeView_GetShowing(this.Instance)

proc UseDockManager*(this: TTreeView): bool  =
  return TreeView_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TTreeView, AValue: bool)  =
  TreeView_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TTreeView): TAction  =
  return TreeView_GetAction(this.Instance).AsAction

proc `Action=`*(this: TTreeView, AValue: TAction)  =
  TreeView_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TTreeView): TRect  =
  TreeView_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TTreeView, AValue: TRect)  =
  var ps1 = AValue
  TreeView_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TTreeView): int32  =
  return TreeView_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TTreeView, AValue: int32)  =
  TreeView_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TTreeView): TPoint  =
  TreeView_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TTreeView): TRect  =
  TreeView_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TTreeView): int32  =
  return TreeView_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TTreeView, AValue: int32)  =
  TreeView_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TTreeView): TControlState  =
  return TreeView_GetControlState(this.Instance)

proc `ControlState=`*(this: TTreeView, AValue: TControlState)  =
  TreeView_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TTreeView): TControlStyle  =
  return TreeView_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TTreeView, AValue: TControlStyle)  =
  TreeView_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TTreeView): bool  =
  return TreeView_GetFloating(this.Instance)

proc Parent*(this: TTreeView): TWinControl  =
  return TreeView_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TTreeView, AValue: TWinControl)  =
  TreeView_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TTreeView): int32  =
  return TreeView_GetLeft(this.Instance)

proc `Left=`*(this: TTreeView, AValue: int32)  =
  TreeView_SetLeft(this.Instance, AValue)

proc Top*(this: TTreeView): int32  =
  return TreeView_GetTop(this.Instance)

proc `Top=`*(this: TTreeView, AValue: int32)  =
  TreeView_SetTop(this.Instance, AValue)

proc Width*(this: TTreeView): int32  =
  return TreeView_GetWidth(this.Instance)

proc `Width=`*(this: TTreeView, AValue: int32)  =
  TreeView_SetWidth(this.Instance, AValue)

proc Height*(this: TTreeView): int32  =
  return TreeView_GetHeight(this.Instance)

proc `Height=`*(this: TTreeView, AValue: int32)  =
  TreeView_SetHeight(this.Instance, AValue)

proc Cursor*(this: TTreeView): TCursor  =
  return TreeView_GetCursor(this.Instance)

proc `Cursor=`*(this: TTreeView, AValue: TCursor)  =
  TreeView_SetCursor(this.Instance, AValue)

proc Hint*(this: TTreeView): string  =
  return $TreeView_GetHint(this.Instance)

proc `Hint=`*(this: TTreeView, AValue: string)  =
  TreeView_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TTreeView): int32  =
  return TreeView_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TTreeView): int32  =
  return TreeView_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TTreeView, AValue: int32)  =
  TreeView_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TTreeView): TComponent  =
  return TreeView_GetOwner(this.Instance).AsComponent

proc Name*(this: TTreeView): string  =
  return $TreeView_GetName(this.Instance)

proc `Name=`*(this: TTreeView, AValue: string)  =
  TreeView_SetName(this.Instance, AValue)

proc Tag*(this: TTreeView): int  =
  return TreeView_GetTag(this.Instance)

proc `Tag=`*(this: TTreeView, AValue: int)  =
  TreeView_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TTreeView): TAnchorSide  =
  return TreeView_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TTreeView, AValue: TAnchorSide)  =
  TreeView_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TTreeView): TAnchorSide  =
  return TreeView_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TTreeView, AValue: TAnchorSide)  =
  TreeView_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TTreeView): TAnchorSide  =
  return TreeView_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TTreeView, AValue: TAnchorSide)  =
  TreeView_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TTreeView): TAnchorSide  =
  return TreeView_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TTreeView, AValue: TAnchorSide)  =
  TreeView_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TTreeView): TControlChildSizing  =
  return TreeView_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TTreeView, AValue: TControlChildSizing)  =
  TreeView_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TTreeView): TControlBorderSpacing  =
  return TreeView_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TTreeView, AValue: TControlBorderSpacing)  =
  TreeView_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Selections*(this: TTreeView, Index: int32): TTreeNode  =
  return TreeView_GetSelections(this.Instance, Index).AsTreeNode

proc DockClients*(this: TTreeView, Index: int32): TControl  =
  return TreeView_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TTreeView, Index: int32): TControl  =
  return TreeView_GetControls(this.Instance, Index).AsControl

proc Components*(this: TTreeView, AIndex: int32): TComponent  =
  return TreeView_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TTreeView, AKind: TAnchorKind): TAnchorSide  =
  return TreeView_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TTreeViewClass*(): TClass = TreeView_StaticClassType()


#------------------------- TStatusBar -------------------------

proc Free*(this: TStatusBar) = defaultFree: StatusBar_Free

proc NewStatusBar*(AOwner: TComponent): TStatusBar =
  new(result)
  result.Instance = StatusBar_Create(CheckPtr(AOwner))

proc FlipChildren*(this: TStatusBar, AllLevels: bool) =
  StatusBar_FlipChildren(this.Instance, AllLevels)

proc SetBounds*(this: TStatusBar, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  StatusBar_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc CanFocus*(this: TStatusBar): bool =
  return StatusBar_CanFocus(this.Instance)

proc ContainsControl*(this: TStatusBar, Control: TControl): bool =
  return StatusBar_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TStatusBar, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return StatusBar_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TStatusBar) =
  StatusBar_DisableAlign(this.Instance)

proc EnableAlign*(this: TStatusBar) =
  StatusBar_EnableAlign(this.Instance)

proc FindChildControl*(this: TStatusBar, ControlName: string): TControl =
  return StatusBar_FindChildControl(this.Instance, ControlName).AsControl

proc Focused*(this: TStatusBar): bool =
  return StatusBar_Focused(this.Instance)

proc HandleAllocated*(this: TStatusBar): bool =
  return StatusBar_HandleAllocated(this.Instance)

proc InsertControl*(this: TStatusBar, AControl: TControl) =
  StatusBar_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TStatusBar) =
  StatusBar_Invalidate(this.Instance)

proc PaintTo*(this: TStatusBar, DC: HDC, X: int32, Y: int32) =
  StatusBar_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TStatusBar, AControl: TControl) =
  StatusBar_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TStatusBar) =
  StatusBar_Realign(this.Instance)

proc Repaint*(this: TStatusBar) =
  StatusBar_Repaint(this.Instance)

proc ScaleBy*(this: TStatusBar, M: int32, D: int32) =
  StatusBar_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TStatusBar, DeltaX: int32, DeltaY: int32) =
  StatusBar_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetFocus*(this: TStatusBar) =
  StatusBar_SetFocus(this.Instance)

proc Update*(this: TStatusBar) =
  StatusBar_Update(this.Instance)

proc BringToFront*(this: TStatusBar) =
  StatusBar_BringToFront(this.Instance)

proc ClientToScreen*(this: TStatusBar, Point: TPoint): TPoint =
  var ps1 = Point
  StatusBar_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TStatusBar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  StatusBar_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TStatusBar): bool =
  return StatusBar_Dragging(this.Instance)

proc HasParent*(this: TStatusBar): bool =
  return StatusBar_HasParent(this.Instance)

proc Hide*(this: TStatusBar) =
  StatusBar_Hide(this.Instance)

proc Perform*(this: TStatusBar, Msg: uint32, WParam: uint, LParam: int): int =
  return StatusBar_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TStatusBar) =
  StatusBar_Refresh(this.Instance)

proc ScreenToClient*(this: TStatusBar, Point: TPoint): TPoint =
  var ps1 = Point
  StatusBar_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TStatusBar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  StatusBar_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TStatusBar) =
  StatusBar_SendToBack(this.Instance)

proc Show*(this: TStatusBar) =
  StatusBar_Show(this.Instance)

proc GetTextBuf*(this: TStatusBar, Buffer: string, BufSize: int32): int32 =
  return StatusBar_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TStatusBar): int32 =
  return StatusBar_GetTextLen(this.Instance)

proc SetTextBuf*(this: TStatusBar, Buffer: string) =
  StatusBar_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TStatusBar, AName: string): TComponent =
  return StatusBar_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TStatusBar): string =
  return $StatusBar_GetNamePath(this.Instance)

proc Assign*(this: TStatusBar, Source: TObject) =
  StatusBar_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TStatusBar): TClass =
  return StatusBar_ClassType(this.Instance)

proc ClassName*(this: TStatusBar): string =
  return $StatusBar_ClassName(this.Instance)

proc InstanceSize*(this: TStatusBar): int32 =
  return StatusBar_InstanceSize(this.Instance)

proc InheritsFrom*(this: TStatusBar, AClass: TClass): bool =
  return StatusBar_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TStatusBar, Obj: TObject): bool =
  return StatusBar_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TStatusBar): int32 =
  return StatusBar_GetHashCode(this.Instance)

proc ToString*(this: TStatusBar): string =
  return $StatusBar_ToString(this.Instance)

proc AnchorToNeighbour*(this: TStatusBar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  StatusBar_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TStatusBar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  StatusBar_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TStatusBar, ASibling: TControl) =
  StatusBar_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TStatusBar, ASibling: TControl) =
  StatusBar_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TStatusBar, ASide: TAnchorKind, ASibling: TControl) =
  StatusBar_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TStatusBar, ATheAlign: TAlign, ASpace: int32) =
  StatusBar_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TStatusBar, ASpace: int32) =
  StatusBar_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TStatusBar, ASize: int32): int32 =
  return StatusBar_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TStatusBar, ASize: int32): int32 =
  return StatusBar_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TStatusBar, ASize: int32): int32 =
  return StatusBar_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TStatusBar, ASize: int32): int32 =
  return StatusBar_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TStatusBar, ASize: int32): int32 =
  return StatusBar_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TStatusBar, ASize: int32): int32 =
  return StatusBar_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TStatusBar, ASize: int32): int32 =
  return StatusBar_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TStatusBar, ASize: int32): int32 =
  return StatusBar_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TStatusBar, ASize: int32): int32 =
  return StatusBar_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TStatusBar, ASize: int32): int32 =
  return StatusBar_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TStatusBar, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  StatusBar_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TStatusBar, ADesignTimePPI: int32) =
  StatusBar_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TStatusBar, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  StatusBar_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Action*(this: TStatusBar): TAction  =
  return StatusBar_GetAction(this.Instance).AsAction

proc `Action=`*(this: TStatusBar, AValue: TAction)  =
  StatusBar_SetAction(this.Instance, CheckPtr(AValue))

proc AutoHint*(this: TStatusBar): bool  =
  return StatusBar_GetAutoHint(this.Instance)

proc `AutoHint=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetAutoHint(this.Instance, AValue)

proc Align*(this: TStatusBar): TAlign  =
  return StatusBar_GetAlign(this.Instance)

proc `Align=`*(this: TStatusBar, AValue: TAlign)  =
  StatusBar_SetAlign(this.Instance, AValue)

proc Anchors*(this: TStatusBar): TAnchors  =
  return StatusBar_GetAnchors(this.Instance)

proc `Anchors=`*(this: TStatusBar, AValue: TAnchors)  =
  StatusBar_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TStatusBar): TBiDiMode  =
  return StatusBar_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TStatusBar, AValue: TBiDiMode)  =
  StatusBar_SetBiDiMode(this.Instance, AValue)

proc BorderWidth*(this: TStatusBar): int32  =
  return StatusBar_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TStatusBar, AValue: int32)  =
  StatusBar_SetBorderWidth(this.Instance, AValue)

proc Color*(this: TStatusBar): TColor  =
  return StatusBar_GetColor(this.Instance)

proc `Color=`*(this: TStatusBar, AValue: TColor)  =
  StatusBar_SetColor(this.Instance, AValue)

proc DoubleBuffered*(this: TStatusBar): bool  =
  return StatusBar_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TStatusBar): TCursor  =
  return StatusBar_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TStatusBar, AValue: TCursor)  =
  StatusBar_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TStatusBar): TDragKind  =
  return StatusBar_GetDragKind(this.Instance)

proc `DragKind=`*(this: TStatusBar, AValue: TDragKind)  =
  StatusBar_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TStatusBar): TDragMode  =
  return StatusBar_GetDragMode(this.Instance)

proc `DragMode=`*(this: TStatusBar, AValue: TDragMode)  =
  StatusBar_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TStatusBar): bool  =
  return StatusBar_GetEnabled(this.Instance)

proc `Enabled=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetEnabled(this.Instance, AValue)

proc Font*(this: TStatusBar): TFont  =
  return StatusBar_GetFont(this.Instance).AsFont

proc `Font=`*(this: TStatusBar, AValue: TFont)  =
  StatusBar_SetFont(this.Instance, CheckPtr(AValue))

proc Constraints*(this: TStatusBar): TSizeConstraints  =
  return StatusBar_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TStatusBar, AValue: TSizeConstraints)  =
  StatusBar_SetConstraints(this.Instance, CheckPtr(AValue))

proc Panels*(this: TStatusBar): TStatusPanels  =
  return StatusBar_GetPanels(this.Instance).AsStatusPanels

proc `Panels=`*(this: TStatusBar, AValue: TStatusPanels)  =
  StatusBar_SetPanels(this.Instance, CheckPtr(AValue))

proc ParentColor*(this: TStatusBar): bool  =
  return StatusBar_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TStatusBar): bool  =
  return StatusBar_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TStatusBar): bool  =
  return StatusBar_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TStatusBar): bool  =
  return StatusBar_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TStatusBar): TPopupMenu  =
  return StatusBar_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TStatusBar, AValue: TPopupMenu)  =
  StatusBar_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TStatusBar): bool  =
  return StatusBar_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetShowHint(this.Instance, AValue)

proc SimplePanel*(this: TStatusBar): bool  =
  return StatusBar_GetSimplePanel(this.Instance)

proc `SimplePanel=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetSimplePanel(this.Instance, AValue)

proc SimpleText*(this: TStatusBar): string  =
  return $StatusBar_GetSimpleText(this.Instance)

proc `SimpleText=`*(this: TStatusBar, AValue: string)  =
  StatusBar_SetSimpleText(this.Instance, AValue)

proc SizeGrip*(this: TStatusBar): bool  =
  return StatusBar_GetSizeGrip(this.Instance)

proc `SizeGrip=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetSizeGrip(this.Instance, AValue)

proc UseSystemFont*(this: TStatusBar): bool  =
  return StatusBar_GetUseSystemFont(this.Instance)

proc `UseSystemFont=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetUseSystemFont(this.Instance, AValue)

proc Visible*(this: TStatusBar): bool  =
  return StatusBar_GetVisible(this.Instance)

proc `Visible=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TStatusBar, AEventId: TNotifyEvent)  =
  StatusBar_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TStatusBar, AEventId: TContextPopupEvent)  =
  StatusBar_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TStatusBar, AEventId: TNotifyEvent)  =
  StatusBar_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TStatusBar, AEventId: TDragDropEvent)  =
  StatusBar_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TStatusBar, AEventId: TDragOverEvent)  =
  StatusBar_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDock=`*(this: TStatusBar, AEventId: TEndDragEvent)  =
  StatusBar_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TStatusBar, AEventId: TEndDragEvent)  =
  StatusBar_SetOnEndDrag(this.Instance, AEventId)

proc `OnHint=`*(this: TStatusBar, AEventId: TNotifyEvent)  =
  StatusBar_SetOnHint(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TStatusBar, AEventId: TMouseEvent)  =
  StatusBar_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TStatusBar, AEventId: TNotifyEvent)  =
  StatusBar_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TStatusBar, AEventId: TNotifyEvent)  =
  StatusBar_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TStatusBar, AEventId: TMouseMoveEvent)  =
  StatusBar_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TStatusBar, AEventId: TMouseEvent)  =
  StatusBar_SetOnMouseUp(this.Instance, AEventId)

proc `OnResize=`*(this: TStatusBar, AEventId: TNotifyEvent)  =
  StatusBar_SetOnResize(this.Instance, AEventId)

proc `OnStartDock=`*(this: TStatusBar, AEventId: TStartDockEvent)  =
  StatusBar_SetOnStartDock(this.Instance, AEventId)

proc Canvas*(this: TStatusBar): TCanvas  =
  return StatusBar_GetCanvas(this.Instance).AsCanvas

proc DockClientCount*(this: TStatusBar): int32  =
  return StatusBar_GetDockClientCount(this.Instance)

proc DockSite*(this: TStatusBar): bool  =
  return StatusBar_GetDockSite(this.Instance)

proc `DockSite=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TStatusBar): bool  =
  return StatusBar_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TStatusBar): int32  =
  return StatusBar_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TStatusBar): TBrush  =
  return StatusBar_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TStatusBar): int32  =
  return StatusBar_GetControlCount(this.Instance)

proc Handle*(this: TStatusBar): HWND  =
  return StatusBar_GetHandle(this.Instance)

proc ParentWindow*(this: TStatusBar): HWND  =
  return StatusBar_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TStatusBar, AValue: HWND)  =
  StatusBar_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TStatusBar): bool  =
  return StatusBar_GetShowing(this.Instance)

proc TabOrder*(this: TStatusBar): TTabOrder  =
  return StatusBar_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TStatusBar, AValue: TTabOrder)  =
  StatusBar_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TStatusBar): bool  =
  return StatusBar_GetTabStop(this.Instance)

proc `TabStop=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetTabStop(this.Instance, AValue)

proc UseDockManager*(this: TStatusBar): bool  =
  return StatusBar_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TStatusBar, AValue: bool)  =
  StatusBar_SetUseDockManager(this.Instance, AValue)

proc BoundsRect*(this: TStatusBar): TRect  =
  StatusBar_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TStatusBar, AValue: TRect)  =
  var ps1 = AValue
  StatusBar_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TStatusBar): int32  =
  return StatusBar_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TStatusBar, AValue: int32)  =
  StatusBar_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TStatusBar): TPoint  =
  StatusBar_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TStatusBar): TRect  =
  StatusBar_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TStatusBar): int32  =
  return StatusBar_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TStatusBar, AValue: int32)  =
  StatusBar_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TStatusBar): TControlState  =
  return StatusBar_GetControlState(this.Instance)

proc `ControlState=`*(this: TStatusBar, AValue: TControlState)  =
  StatusBar_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TStatusBar): TControlStyle  =
  return StatusBar_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TStatusBar, AValue: TControlStyle)  =
  StatusBar_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TStatusBar): bool  =
  return StatusBar_GetFloating(this.Instance)

proc Parent*(this: TStatusBar): TWinControl  =
  return StatusBar_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TStatusBar, AValue: TWinControl)  =
  StatusBar_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TStatusBar): int32  =
  return StatusBar_GetLeft(this.Instance)

proc `Left=`*(this: TStatusBar, AValue: int32)  =
  StatusBar_SetLeft(this.Instance, AValue)

proc Top*(this: TStatusBar): int32  =
  return StatusBar_GetTop(this.Instance)

proc `Top=`*(this: TStatusBar, AValue: int32)  =
  StatusBar_SetTop(this.Instance, AValue)

proc Width*(this: TStatusBar): int32  =
  return StatusBar_GetWidth(this.Instance)

proc `Width=`*(this: TStatusBar, AValue: int32)  =
  StatusBar_SetWidth(this.Instance, AValue)

proc Height*(this: TStatusBar): int32  =
  return StatusBar_GetHeight(this.Instance)

proc `Height=`*(this: TStatusBar, AValue: int32)  =
  StatusBar_SetHeight(this.Instance, AValue)

proc Cursor*(this: TStatusBar): TCursor  =
  return StatusBar_GetCursor(this.Instance)

proc `Cursor=`*(this: TStatusBar, AValue: TCursor)  =
  StatusBar_SetCursor(this.Instance, AValue)

proc Hint*(this: TStatusBar): string  =
  return $StatusBar_GetHint(this.Instance)

proc `Hint=`*(this: TStatusBar, AValue: string)  =
  StatusBar_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TStatusBar): int32  =
  return StatusBar_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TStatusBar): int32  =
  return StatusBar_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TStatusBar, AValue: int32)  =
  StatusBar_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TStatusBar): TComponent  =
  return StatusBar_GetOwner(this.Instance).AsComponent

proc Name*(this: TStatusBar): string  =
  return $StatusBar_GetName(this.Instance)

proc `Name=`*(this: TStatusBar, AValue: string)  =
  StatusBar_SetName(this.Instance, AValue)

proc Tag*(this: TStatusBar): int  =
  return StatusBar_GetTag(this.Instance)

proc `Tag=`*(this: TStatusBar, AValue: int)  =
  StatusBar_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TStatusBar): TAnchorSide  =
  return StatusBar_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TStatusBar, AValue: TAnchorSide)  =
  StatusBar_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TStatusBar): TAnchorSide  =
  return StatusBar_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TStatusBar, AValue: TAnchorSide)  =
  StatusBar_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TStatusBar): TAnchorSide  =
  return StatusBar_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TStatusBar, AValue: TAnchorSide)  =
  StatusBar_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TStatusBar): TAnchorSide  =
  return StatusBar_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TStatusBar, AValue: TAnchorSide)  =
  StatusBar_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TStatusBar): TControlChildSizing  =
  return StatusBar_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TStatusBar, AValue: TControlChildSizing)  =
  StatusBar_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TStatusBar): TControlBorderSpacing  =
  return StatusBar_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TStatusBar, AValue: TControlBorderSpacing)  =
  StatusBar_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TStatusBar, Index: int32): TControl  =
  return StatusBar_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TStatusBar, Index: int32): TControl  =
  return StatusBar_GetControls(this.Instance, Index).AsControl

proc Components*(this: TStatusBar, AIndex: int32): TComponent  =
  return StatusBar_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TStatusBar, AKind: TAnchorKind): TAnchorSide  =
  return StatusBar_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TStatusBarClass*(): TClass = StatusBar_StaticClassType()


#------------------------- TToolBar -------------------------

proc Free*(this: TToolBar) = defaultFree: ToolBar_Free

proc NewToolBar*(AOwner: TComponent): TToolBar =
  new(result)
  result.Instance = ToolBar_Create(CheckPtr(AOwner))

proc FlipChildren*(this: TToolBar, AllLevels: bool) =
  ToolBar_FlipChildren(this.Instance, AllLevels)

proc CanFocus*(this: TToolBar): bool =
  return ToolBar_CanFocus(this.Instance)

proc ContainsControl*(this: TToolBar, Control: TControl): bool =
  return ToolBar_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TToolBar, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return ToolBar_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TToolBar) =
  ToolBar_DisableAlign(this.Instance)

proc EnableAlign*(this: TToolBar) =
  ToolBar_EnableAlign(this.Instance)

proc FindChildControl*(this: TToolBar, ControlName: string): TControl =
  return ToolBar_FindChildControl(this.Instance, ControlName).AsControl

proc Focused*(this: TToolBar): bool =
  return ToolBar_Focused(this.Instance)

proc HandleAllocated*(this: TToolBar): bool =
  return ToolBar_HandleAllocated(this.Instance)

proc InsertControl*(this: TToolBar, AControl: TControl) =
  ToolBar_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TToolBar) =
  ToolBar_Invalidate(this.Instance)

proc PaintTo*(this: TToolBar, DC: HDC, X: int32, Y: int32) =
  ToolBar_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TToolBar, AControl: TControl) =
  ToolBar_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TToolBar) =
  ToolBar_Realign(this.Instance)

proc Repaint*(this: TToolBar) =
  ToolBar_Repaint(this.Instance)

proc ScaleBy*(this: TToolBar, M: int32, D: int32) =
  ToolBar_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TToolBar, DeltaX: int32, DeltaY: int32) =
  ToolBar_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TToolBar, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ToolBar_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TToolBar) =
  ToolBar_SetFocus(this.Instance)

proc Update*(this: TToolBar) =
  ToolBar_Update(this.Instance)

proc BringToFront*(this: TToolBar) =
  ToolBar_BringToFront(this.Instance)

proc ClientToScreen*(this: TToolBar, Point: TPoint): TPoint =
  var ps1 = Point
  ToolBar_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TToolBar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ToolBar_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TToolBar): bool =
  return ToolBar_Dragging(this.Instance)

proc HasParent*(this: TToolBar): bool =
  return ToolBar_HasParent(this.Instance)

proc Hide*(this: TToolBar) =
  ToolBar_Hide(this.Instance)

proc Perform*(this: TToolBar, Msg: uint32, WParam: uint, LParam: int): int =
  return ToolBar_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TToolBar) =
  ToolBar_Refresh(this.Instance)

proc ScreenToClient*(this: TToolBar, Point: TPoint): TPoint =
  var ps1 = Point
  ToolBar_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TToolBar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ToolBar_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TToolBar) =
  ToolBar_SendToBack(this.Instance)

proc Show*(this: TToolBar) =
  ToolBar_Show(this.Instance)

proc GetTextBuf*(this: TToolBar, Buffer: string, BufSize: int32): int32 =
  return ToolBar_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TToolBar): int32 =
  return ToolBar_GetTextLen(this.Instance)

proc SetTextBuf*(this: TToolBar, Buffer: string) =
  ToolBar_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TToolBar, AName: string): TComponent =
  return ToolBar_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TToolBar): string =
  return $ToolBar_GetNamePath(this.Instance)

proc Assign*(this: TToolBar, Source: TObject) =
  ToolBar_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TToolBar): TClass =
  return ToolBar_ClassType(this.Instance)

proc ClassName*(this: TToolBar): string =
  return $ToolBar_ClassName(this.Instance)

proc InstanceSize*(this: TToolBar): int32 =
  return ToolBar_InstanceSize(this.Instance)

proc InheritsFrom*(this: TToolBar, AClass: TClass): bool =
  return ToolBar_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TToolBar, Obj: TObject): bool =
  return ToolBar_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TToolBar): int32 =
  return ToolBar_GetHashCode(this.Instance)

proc ToString*(this: TToolBar): string =
  return $ToolBar_ToString(this.Instance)

proc AnchorToNeighbour*(this: TToolBar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ToolBar_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TToolBar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ToolBar_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TToolBar, ASibling: TControl) =
  ToolBar_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TToolBar, ASibling: TControl) =
  ToolBar_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TToolBar, ASide: TAnchorKind, ASibling: TControl) =
  ToolBar_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TToolBar, ATheAlign: TAlign, ASpace: int32) =
  ToolBar_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TToolBar, ASpace: int32) =
  ToolBar_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TToolBar, ASize: int32): int32 =
  return ToolBar_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TToolBar, ASize: int32): int32 =
  return ToolBar_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TToolBar, ASize: int32): int32 =
  return ToolBar_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TToolBar, ASize: int32): int32 =
  return ToolBar_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TToolBar, ASize: int32): int32 =
  return ToolBar_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TToolBar, ASize: int32): int32 =
  return ToolBar_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TToolBar, ASize: int32): int32 =
  return ToolBar_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TToolBar, ASize: int32): int32 =
  return ToolBar_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TToolBar, ASize: int32): int32 =
  return ToolBar_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TToolBar, ASize: int32): int32 =
  return ToolBar_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TToolBar, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ToolBar_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TToolBar, ADesignTimePPI: int32) =
  ToolBar_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TToolBar, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ToolBar_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc ButtonCount*(this: TToolBar): int32  =
  return ToolBar_GetButtonCount(this.Instance)

proc Canvas*(this: TToolBar): TCanvas  =
  return ToolBar_GetCanvas(this.Instance).AsCanvas

proc RowCount*(this: TToolBar): int32  =
  return ToolBar_GetRowCount(this.Instance)

proc Align*(this: TToolBar): TAlign  =
  return ToolBar_GetAlign(this.Instance)

proc `Align=`*(this: TToolBar, AValue: TAlign)  =
  ToolBar_SetAlign(this.Instance, AValue)

proc Anchors*(this: TToolBar): TAnchors  =
  return ToolBar_GetAnchors(this.Instance)

proc `Anchors=`*(this: TToolBar, AValue: TAnchors)  =
  ToolBar_SetAnchors(this.Instance, AValue)

proc AutoSize*(this: TToolBar): bool  =
  return ToolBar_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetAutoSize(this.Instance, AValue)

proc BorderWidth*(this: TToolBar): int32  =
  return ToolBar_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TToolBar, AValue: int32)  =
  ToolBar_SetBorderWidth(this.Instance, AValue)

proc ButtonHeight*(this: TToolBar): int32  =
  return ToolBar_GetButtonHeight(this.Instance)

proc `ButtonHeight=`*(this: TToolBar, AValue: int32)  =
  ToolBar_SetButtonHeight(this.Instance, AValue)

proc ButtonWidth*(this: TToolBar): int32  =
  return ToolBar_GetButtonWidth(this.Instance)

proc `ButtonWidth=`*(this: TToolBar, AValue: int32)  =
  ToolBar_SetButtonWidth(this.Instance, AValue)

proc Caption*(this: TToolBar): string  =
  return $ToolBar_GetCaption(this.Instance)

proc `Caption=`*(this: TToolBar, AValue: string)  =
  ToolBar_SetCaption(this.Instance, AValue)

proc Color*(this: TToolBar): TColor  =
  return ToolBar_GetColor(this.Instance)

proc `Color=`*(this: TToolBar, AValue: TColor)  =
  ToolBar_SetColor(this.Instance, AValue)

proc Constraints*(this: TToolBar): TSizeConstraints  =
  return ToolBar_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TToolBar, AValue: TSizeConstraints)  =
  ToolBar_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TToolBar): bool  =
  return ToolBar_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetDoubleBuffered(this.Instance, AValue)

proc DockSite*(this: TToolBar): bool  =
  return ToolBar_GetDockSite(this.Instance)

proc `DockSite=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetDockSite(this.Instance, AValue)

proc DragCursor*(this: TToolBar): TCursor  =
  return ToolBar_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TToolBar, AValue: TCursor)  =
  ToolBar_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TToolBar): TDragKind  =
  return ToolBar_GetDragKind(this.Instance)

proc `DragKind=`*(this: TToolBar, AValue: TDragKind)  =
  ToolBar_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TToolBar): TDragMode  =
  return ToolBar_GetDragMode(this.Instance)

proc `DragMode=`*(this: TToolBar, AValue: TDragMode)  =
  ToolBar_SetDragMode(this.Instance, AValue)

proc EdgeBorders*(this: TToolBar): TEdgeBorders  =
  return ToolBar_GetEdgeBorders(this.Instance)

proc `EdgeBorders=`*(this: TToolBar, AValue: TEdgeBorders)  =
  ToolBar_SetEdgeBorders(this.Instance, AValue)

proc EdgeInner*(this: TToolBar): TEdgeStyle  =
  return ToolBar_GetEdgeInner(this.Instance)

proc `EdgeInner=`*(this: TToolBar, AValue: TEdgeStyle)  =
  ToolBar_SetEdgeInner(this.Instance, AValue)

proc EdgeOuter*(this: TToolBar): TEdgeStyle  =
  return ToolBar_GetEdgeOuter(this.Instance)

proc `EdgeOuter=`*(this: TToolBar, AValue: TEdgeStyle)  =
  ToolBar_SetEdgeOuter(this.Instance, AValue)

proc Enabled*(this: TToolBar): bool  =
  return ToolBar_GetEnabled(this.Instance)

proc `Enabled=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetEnabled(this.Instance, AValue)

proc Flat*(this: TToolBar): bool  =
  return ToolBar_GetFlat(this.Instance)

proc `Flat=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetFlat(this.Instance, AValue)

proc Font*(this: TToolBar): TFont  =
  return ToolBar_GetFont(this.Instance).AsFont

proc `Font=`*(this: TToolBar, AValue: TFont)  =
  ToolBar_SetFont(this.Instance, CheckPtr(AValue))

proc Height*(this: TToolBar): int32  =
  return ToolBar_GetHeight(this.Instance)

proc `Height=`*(this: TToolBar, AValue: int32)  =
  ToolBar_SetHeight(this.Instance, AValue)

proc HotImages*(this: TToolBar): TImageList  =
  return ToolBar_GetHotImages(this.Instance).AsImageList

proc `HotImages=`*(this: TToolBar, AValue: TImageList)  =
  ToolBar_SetHotImages(this.Instance, CheckPtr(AValue))

proc Images*(this: TToolBar): TImageList  =
  return ToolBar_GetImages(this.Instance).AsImageList

proc `Images=`*(this: TToolBar, AValue: TImageList)  =
  ToolBar_SetImages(this.Instance, CheckPtr(AValue))

proc Indent*(this: TToolBar): int32  =
  return ToolBar_GetIndent(this.Instance)

proc `Indent=`*(this: TToolBar, AValue: int32)  =
  ToolBar_SetIndent(this.Instance, AValue)

proc List*(this: TToolBar): bool  =
  return ToolBar_GetList(this.Instance)

proc `List=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetList(this.Instance, AValue)

proc ParentColor*(this: TToolBar): bool  =
  return ToolBar_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TToolBar): bool  =
  return ToolBar_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TToolBar): bool  =
  return ToolBar_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TToolBar): bool  =
  return ToolBar_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TToolBar): TPopupMenu  =
  return ToolBar_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TToolBar, AValue: TPopupMenu)  =
  ToolBar_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowCaptions*(this: TToolBar): bool  =
  return ToolBar_GetShowCaptions(this.Instance)

proc `ShowCaptions=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetShowCaptions(this.Instance, AValue)

proc ShowHint*(this: TToolBar): bool  =
  return ToolBar_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TToolBar): TTabOrder  =
  return ToolBar_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TToolBar, AValue: TTabOrder)  =
  ToolBar_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TToolBar): bool  =
  return ToolBar_GetTabStop(this.Instance)

proc `TabStop=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetTabStop(this.Instance, AValue)

proc Transparent*(this: TToolBar): bool  =
  return ToolBar_GetTransparent(this.Instance)

proc `Transparent=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetTransparent(this.Instance, AValue)

proc Visible*(this: TToolBar): bool  =
  return ToolBar_GetVisible(this.Instance)

proc `Visible=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetVisible(this.Instance, AValue)

proc Wrapable*(this: TToolBar): bool  =
  return ToolBar_GetWrapable(this.Instance)

proc `Wrapable=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetWrapable(this.Instance, AValue)

proc `OnClick=`*(this: TToolBar, AEventId: TNotifyEvent)  =
  ToolBar_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TToolBar, AEventId: TContextPopupEvent)  =
  ToolBar_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TToolBar, AEventId: TNotifyEvent)  =
  ToolBar_SetOnDblClick(this.Instance, AEventId)

proc `OnDockDrop=`*(this: TToolBar, AEventId: TDockDropEvent)  =
  ToolBar_SetOnDockDrop(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TToolBar, AEventId: TDragDropEvent)  =
  ToolBar_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TToolBar, AEventId: TDragOverEvent)  =
  ToolBar_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TToolBar, AEventId: TEndDragEvent)  =
  ToolBar_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TToolBar, AEventId: TNotifyEvent)  =
  ToolBar_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TToolBar, AEventId: TNotifyEvent)  =
  ToolBar_SetOnExit(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TToolBar, AEventId: TMouseEvent)  =
  ToolBar_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TToolBar, AEventId: TNotifyEvent)  =
  ToolBar_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TToolBar, AEventId: TNotifyEvent)  =
  ToolBar_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TToolBar, AEventId: TMouseMoveEvent)  =
  ToolBar_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TToolBar, AEventId: TMouseEvent)  =
  ToolBar_SetOnMouseUp(this.Instance, AEventId)

proc `OnResize=`*(this: TToolBar, AEventId: TNotifyEvent)  =
  ToolBar_SetOnResize(this.Instance, AEventId)

proc `OnUnDock=`*(this: TToolBar, AEventId: TUnDockEvent)  =
  ToolBar_SetOnUnDock(this.Instance, AEventId)

proc DockClientCount*(this: TToolBar): int32  =
  return ToolBar_GetDockClientCount(this.Instance)

proc MouseInClient*(this: TToolBar): bool  =
  return ToolBar_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TToolBar): int32  =
  return ToolBar_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TToolBar): TBrush  =
  return ToolBar_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TToolBar): int32  =
  return ToolBar_GetControlCount(this.Instance)

proc Handle*(this: TToolBar): HWND  =
  return ToolBar_GetHandle(this.Instance)

proc ParentWindow*(this: TToolBar): HWND  =
  return ToolBar_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TToolBar, AValue: HWND)  =
  ToolBar_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TToolBar): bool  =
  return ToolBar_GetShowing(this.Instance)

proc UseDockManager*(this: TToolBar): bool  =
  return ToolBar_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TToolBar, AValue: bool)  =
  ToolBar_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TToolBar): TAction  =
  return ToolBar_GetAction(this.Instance).AsAction

proc `Action=`*(this: TToolBar, AValue: TAction)  =
  ToolBar_SetAction(this.Instance, CheckPtr(AValue))

proc BiDiMode*(this: TToolBar): TBiDiMode  =
  return ToolBar_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TToolBar, AValue: TBiDiMode)  =
  ToolBar_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TToolBar): TRect  =
  ToolBar_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TToolBar, AValue: TRect)  =
  var ps1 = AValue
  ToolBar_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TToolBar): int32  =
  return ToolBar_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TToolBar, AValue: int32)  =
  ToolBar_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TToolBar): TPoint  =
  ToolBar_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TToolBar): TRect  =
  ToolBar_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TToolBar): int32  =
  return ToolBar_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TToolBar, AValue: int32)  =
  ToolBar_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TToolBar): TControlState  =
  return ToolBar_GetControlState(this.Instance)

proc `ControlState=`*(this: TToolBar, AValue: TControlState)  =
  ToolBar_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TToolBar): TControlStyle  =
  return ToolBar_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TToolBar, AValue: TControlStyle)  =
  ToolBar_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TToolBar): bool  =
  return ToolBar_GetFloating(this.Instance)

proc Parent*(this: TToolBar): TWinControl  =
  return ToolBar_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TToolBar, AValue: TWinControl)  =
  ToolBar_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TToolBar): int32  =
  return ToolBar_GetLeft(this.Instance)

proc `Left=`*(this: TToolBar, AValue: int32)  =
  ToolBar_SetLeft(this.Instance, AValue)

proc Top*(this: TToolBar): int32  =
  return ToolBar_GetTop(this.Instance)

proc `Top=`*(this: TToolBar, AValue: int32)  =
  ToolBar_SetTop(this.Instance, AValue)

proc Width*(this: TToolBar): int32  =
  return ToolBar_GetWidth(this.Instance)

proc `Width=`*(this: TToolBar, AValue: int32)  =
  ToolBar_SetWidth(this.Instance, AValue)

proc Cursor*(this: TToolBar): TCursor  =
  return ToolBar_GetCursor(this.Instance)

proc `Cursor=`*(this: TToolBar, AValue: TCursor)  =
  ToolBar_SetCursor(this.Instance, AValue)

proc Hint*(this: TToolBar): string  =
  return $ToolBar_GetHint(this.Instance)

proc `Hint=`*(this: TToolBar, AValue: string)  =
  ToolBar_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TToolBar): int32  =
  return ToolBar_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TToolBar): int32  =
  return ToolBar_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TToolBar, AValue: int32)  =
  ToolBar_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TToolBar): TComponent  =
  return ToolBar_GetOwner(this.Instance).AsComponent

proc Name*(this: TToolBar): string  =
  return $ToolBar_GetName(this.Instance)

proc `Name=`*(this: TToolBar, AValue: string)  =
  ToolBar_SetName(this.Instance, AValue)

proc Tag*(this: TToolBar): int  =
  return ToolBar_GetTag(this.Instance)

proc `Tag=`*(this: TToolBar, AValue: int)  =
  ToolBar_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TToolBar): TAnchorSide  =
  return ToolBar_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TToolBar, AValue: TAnchorSide)  =
  ToolBar_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TToolBar): TAnchorSide  =
  return ToolBar_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TToolBar, AValue: TAnchorSide)  =
  ToolBar_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TToolBar): TAnchorSide  =
  return ToolBar_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TToolBar, AValue: TAnchorSide)  =
  ToolBar_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TToolBar): TAnchorSide  =
  return ToolBar_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TToolBar, AValue: TAnchorSide)  =
  ToolBar_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TToolBar): TControlChildSizing  =
  return ToolBar_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TToolBar, AValue: TControlChildSizing)  =
  ToolBar_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TToolBar): TControlBorderSpacing  =
  return ToolBar_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TToolBar, AValue: TControlBorderSpacing)  =
  ToolBar_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Buttons*(this: TToolBar, Index: int32): TToolButton  =
  return ToolBar_GetButtons(this.Instance, Index).AsToolButton

proc DockClients*(this: TToolBar, Index: int32): TControl  =
  return ToolBar_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TToolBar, Index: int32): TControl  =
  return ToolBar_GetControls(this.Instance, Index).AsControl

proc Components*(this: TToolBar, AIndex: int32): TComponent  =
  return ToolBar_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TToolBar, AKind: TAnchorKind): TAnchorSide  =
  return ToolBar_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TToolBarClass*(): TClass = ToolBar_StaticClassType()


#------------------------- TBitBtn -------------------------

proc Free*(this: TBitBtn) = defaultFree: BitBtn_Free

proc NewBitBtn*(AOwner: TComponent): TBitBtn =
  new(result)
  result.Instance = BitBtn_Create(CheckPtr(AOwner))

proc Click*(this: TBitBtn)  =
  BitBtn_Click(this.Instance)

proc CanFocus*(this: TBitBtn): bool =
  return BitBtn_CanFocus(this.Instance)

proc ContainsControl*(this: TBitBtn, Control: TControl): bool =
  return BitBtn_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TBitBtn, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return BitBtn_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TBitBtn) =
  BitBtn_DisableAlign(this.Instance)

proc EnableAlign*(this: TBitBtn) =
  BitBtn_EnableAlign(this.Instance)

proc FindChildControl*(this: TBitBtn, ControlName: string): TControl =
  return BitBtn_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TBitBtn, AllLevels: bool) =
  BitBtn_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TBitBtn): bool =
  return BitBtn_Focused(this.Instance)

proc HandleAllocated*(this: TBitBtn): bool =
  return BitBtn_HandleAllocated(this.Instance)

proc InsertControl*(this: TBitBtn, AControl: TControl) =
  BitBtn_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TBitBtn) =
  BitBtn_Invalidate(this.Instance)

proc PaintTo*(this: TBitBtn, DC: HDC, X: int32, Y: int32) =
  BitBtn_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TBitBtn, AControl: TControl) =
  BitBtn_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TBitBtn) =
  BitBtn_Realign(this.Instance)

proc Repaint*(this: TBitBtn) =
  BitBtn_Repaint(this.Instance)

proc ScaleBy*(this: TBitBtn, M: int32, D: int32) =
  BitBtn_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TBitBtn, DeltaX: int32, DeltaY: int32) =
  BitBtn_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TBitBtn, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  BitBtn_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TBitBtn) =
  BitBtn_SetFocus(this.Instance)

proc Update*(this: TBitBtn) =
  BitBtn_Update(this.Instance)

proc BringToFront*(this: TBitBtn) =
  BitBtn_BringToFront(this.Instance)

proc ClientToScreen*(this: TBitBtn, Point: TPoint): TPoint =
  var ps1 = Point
  BitBtn_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TBitBtn, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  BitBtn_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TBitBtn): bool =
  return BitBtn_Dragging(this.Instance)

proc HasParent*(this: TBitBtn): bool =
  return BitBtn_HasParent(this.Instance)

proc Hide*(this: TBitBtn) =
  BitBtn_Hide(this.Instance)

proc Perform*(this: TBitBtn, Msg: uint32, WParam: uint, LParam: int): int =
  return BitBtn_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TBitBtn) =
  BitBtn_Refresh(this.Instance)

proc ScreenToClient*(this: TBitBtn, Point: TPoint): TPoint =
  var ps1 = Point
  BitBtn_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TBitBtn, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  BitBtn_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TBitBtn) =
  BitBtn_SendToBack(this.Instance)

proc Show*(this: TBitBtn) =
  BitBtn_Show(this.Instance)

proc GetTextBuf*(this: TBitBtn, Buffer: string, BufSize: int32): int32 =
  return BitBtn_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TBitBtn): int32 =
  return BitBtn_GetTextLen(this.Instance)

proc SetTextBuf*(this: TBitBtn, Buffer: string) =
  BitBtn_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TBitBtn, AName: string): TComponent =
  return BitBtn_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TBitBtn): string =
  return $BitBtn_GetNamePath(this.Instance)

proc Assign*(this: TBitBtn, Source: TObject) =
  BitBtn_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TBitBtn): TClass =
  return BitBtn_ClassType(this.Instance)

proc ClassName*(this: TBitBtn): string =
  return $BitBtn_ClassName(this.Instance)

proc InstanceSize*(this: TBitBtn): int32 =
  return BitBtn_InstanceSize(this.Instance)

proc InheritsFrom*(this: TBitBtn, AClass: TClass): bool =
  return BitBtn_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TBitBtn, Obj: TObject): bool =
  return BitBtn_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TBitBtn): int32 =
  return BitBtn_GetHashCode(this.Instance)

proc ToString*(this: TBitBtn): string =
  return $BitBtn_ToString(this.Instance)

proc AnchorToNeighbour*(this: TBitBtn, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  BitBtn_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TBitBtn, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  BitBtn_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TBitBtn, ASibling: TControl) =
  BitBtn_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TBitBtn, ASibling: TControl) =
  BitBtn_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TBitBtn, ASide: TAnchorKind, ASibling: TControl) =
  BitBtn_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TBitBtn, ATheAlign: TAlign, ASpace: int32) =
  BitBtn_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TBitBtn, ASpace: int32) =
  BitBtn_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TBitBtn, ASize: int32): int32 =
  return BitBtn_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TBitBtn, ASize: int32): int32 =
  return BitBtn_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TBitBtn, ASize: int32): int32 =
  return BitBtn_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TBitBtn, ASize: int32): int32 =
  return BitBtn_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TBitBtn, ASize: int32): int32 =
  return BitBtn_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TBitBtn, ASize: int32): int32 =
  return BitBtn_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TBitBtn, ASize: int32): int32 =
  return BitBtn_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TBitBtn, ASize: int32): int32 =
  return BitBtn_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TBitBtn, ASize: int32): int32 =
  return BitBtn_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TBitBtn, ASize: int32): int32 =
  return BitBtn_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TBitBtn, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  BitBtn_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TBitBtn, ADesignTimePPI: int32) =
  BitBtn_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TBitBtn, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  BitBtn_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc DefaultCaption*(this: TBitBtn): bool  =
  return BitBtn_GetDefaultCaption(this.Instance)

proc `DefaultCaption=`*(this: TBitBtn, AValue: bool)  =
  BitBtn_SetDefaultCaption(this.Instance, AValue)

proc GlyphShowMode*(this: TBitBtn): TGlyphShowMode  =
  return BitBtn_GetGlyphShowMode(this.Instance)

proc `GlyphShowMode=`*(this: TBitBtn, AValue: TGlyphShowMode)  =
  BitBtn_SetGlyphShowMode(this.Instance, AValue)

proc ImageWidth*(this: TBitBtn): int32  =
  return BitBtn_GetImageWidth(this.Instance)

proc `ImageWidth=`*(this: TBitBtn, AValue: int32)  =
  BitBtn_SetImageWidth(this.Instance, AValue)

proc Action*(this: TBitBtn): TAction  =
  return BitBtn_GetAction(this.Instance).AsAction

proc `Action=`*(this: TBitBtn, AValue: TAction)  =
  BitBtn_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TBitBtn): TAlign  =
  return BitBtn_GetAlign(this.Instance)

proc `Align=`*(this: TBitBtn, AValue: TAlign)  =
  BitBtn_SetAlign(this.Instance, AValue)

proc Anchors*(this: TBitBtn): TAnchors  =
  return BitBtn_GetAnchors(this.Instance)

proc `Anchors=`*(this: TBitBtn, AValue: TAnchors)  =
  BitBtn_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TBitBtn): TBiDiMode  =
  return BitBtn_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TBitBtn, AValue: TBiDiMode)  =
  BitBtn_SetBiDiMode(this.Instance, AValue)

proc Cancel*(this: TBitBtn): bool  =
  return BitBtn_GetCancel(this.Instance)

proc `Cancel=`*(this: TBitBtn, AValue: bool)  =
  BitBtn_SetCancel(this.Instance, AValue)

proc Caption*(this: TBitBtn): string  =
  return $BitBtn_GetCaption(this.Instance)

proc `Caption=`*(this: TBitBtn, AValue: string)  =
  BitBtn_SetCaption(this.Instance, AValue)

proc Constraints*(this: TBitBtn): TSizeConstraints  =
  return BitBtn_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TBitBtn, AValue: TSizeConstraints)  =
  BitBtn_SetConstraints(this.Instance, CheckPtr(AValue))

proc Default*(this: TBitBtn): bool  =
  return BitBtn_GetDefault(this.Instance)

proc `Default=`*(this: TBitBtn, AValue: bool)  =
  BitBtn_SetDefault(this.Instance, AValue)

proc DoubleBuffered*(this: TBitBtn): bool  =
  return BitBtn_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TBitBtn, AValue: bool)  =
  BitBtn_SetDoubleBuffered(this.Instance, AValue)

proc Enabled*(this: TBitBtn): bool  =
  return BitBtn_GetEnabled(this.Instance)

proc `Enabled=`*(this: TBitBtn, AValue: bool)  =
  BitBtn_SetEnabled(this.Instance, AValue)

proc Font*(this: TBitBtn): TFont  =
  return BitBtn_GetFont(this.Instance).AsFont

proc `Font=`*(this: TBitBtn, AValue: TFont)  =
  BitBtn_SetFont(this.Instance, CheckPtr(AValue))

proc Glyph*(this: TBitBtn): TBitmap  =
  return BitBtn_GetGlyph(this.Instance).AsBitmap

proc `Glyph=`*(this: TBitBtn, AValue: TBitmap)  =
  BitBtn_SetGlyph(this.Instance, CheckPtr(AValue))

proc Layout*(this: TBitBtn): TButtonLayout  =
  return BitBtn_GetLayout(this.Instance)

proc `Layout=`*(this: TBitBtn, AValue: TButtonLayout)  =
  BitBtn_SetLayout(this.Instance, AValue)

proc ModalResult*(this: TBitBtn): TModalResult  =
  return BitBtn_GetModalResult(this.Instance)

proc `ModalResult=`*(this: TBitBtn, AValue: TModalResult)  =
  BitBtn_SetModalResult(this.Instance, AValue)

proc NumGlyphs*(this: TBitBtn): TNumGlyphs  =
  return BitBtn_GetNumGlyphs(this.Instance)

proc `NumGlyphs=`*(this: TBitBtn, AValue: TNumGlyphs)  =
  BitBtn_SetNumGlyphs(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TBitBtn): bool  =
  return BitBtn_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TBitBtn, AValue: bool)  =
  BitBtn_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TBitBtn): bool  =
  return BitBtn_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TBitBtn, AValue: bool)  =
  BitBtn_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TBitBtn): bool  =
  return BitBtn_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TBitBtn, AValue: bool)  =
  BitBtn_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TBitBtn): TPopupMenu  =
  return BitBtn_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TBitBtn, AValue: TPopupMenu)  =
  BitBtn_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TBitBtn): bool  =
  return BitBtn_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TBitBtn, AValue: bool)  =
  BitBtn_SetShowHint(this.Instance, AValue)

proc Spacing*(this: TBitBtn): int32  =
  return BitBtn_GetSpacing(this.Instance)

proc `Spacing=`*(this: TBitBtn, AValue: int32)  =
  BitBtn_SetSpacing(this.Instance, AValue)

proc TabOrder*(this: TBitBtn): TTabOrder  =
  return BitBtn_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TBitBtn, AValue: TTabOrder)  =
  BitBtn_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TBitBtn): bool  =
  return BitBtn_GetTabStop(this.Instance)

proc `TabStop=`*(this: TBitBtn, AValue: bool)  =
  BitBtn_SetTabStop(this.Instance, AValue)

proc Visible*(this: TBitBtn): bool  =
  return BitBtn_GetVisible(this.Instance)

proc `Visible=`*(this: TBitBtn, AValue: bool)  =
  BitBtn_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TBitBtn, AEventId: TNotifyEvent)  =
  BitBtn_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TBitBtn, AEventId: TContextPopupEvent)  =
  BitBtn_SetOnContextPopup(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TBitBtn, AEventId: TDragDropEvent)  =
  BitBtn_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TBitBtn, AEventId: TDragOverEvent)  =
  BitBtn_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TBitBtn, AEventId: TEndDragEvent)  =
  BitBtn_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TBitBtn, AEventId: TNotifyEvent)  =
  BitBtn_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TBitBtn, AEventId: TNotifyEvent)  =
  BitBtn_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TBitBtn, AEventId: TKeyEvent)  =
  BitBtn_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TBitBtn, AEventId: TKeyPressEvent)  =
  BitBtn_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TBitBtn, AEventId: TKeyEvent)  =
  BitBtn_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TBitBtn, AEventId: TMouseEvent)  =
  BitBtn_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TBitBtn, AEventId: TNotifyEvent)  =
  BitBtn_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TBitBtn, AEventId: TNotifyEvent)  =
  BitBtn_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TBitBtn, AEventId: TMouseMoveEvent)  =
  BitBtn_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TBitBtn, AEventId: TMouseEvent)  =
  BitBtn_SetOnMouseUp(this.Instance, AEventId)

proc DockClientCount*(this: TBitBtn): int32  =
  return BitBtn_GetDockClientCount(this.Instance)

proc DockSite*(this: TBitBtn): bool  =
  return BitBtn_GetDockSite(this.Instance)

proc `DockSite=`*(this: TBitBtn, AValue: bool)  =
  BitBtn_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TBitBtn): bool  =
  return BitBtn_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TBitBtn): int32  =
  return BitBtn_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TBitBtn): TBrush  =
  return BitBtn_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TBitBtn): int32  =
  return BitBtn_GetControlCount(this.Instance)

proc Handle*(this: TBitBtn): HWND  =
  return BitBtn_GetHandle(this.Instance)

proc ParentWindow*(this: TBitBtn): HWND  =
  return BitBtn_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TBitBtn, AValue: HWND)  =
  BitBtn_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TBitBtn): bool  =
  return BitBtn_GetShowing(this.Instance)

proc UseDockManager*(this: TBitBtn): bool  =
  return BitBtn_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TBitBtn, AValue: bool)  =
  BitBtn_SetUseDockManager(this.Instance, AValue)

proc BoundsRect*(this: TBitBtn): TRect  =
  BitBtn_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TBitBtn, AValue: TRect)  =
  var ps1 = AValue
  BitBtn_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TBitBtn): int32  =
  return BitBtn_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TBitBtn, AValue: int32)  =
  BitBtn_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TBitBtn): TPoint  =
  BitBtn_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TBitBtn): TRect  =
  BitBtn_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TBitBtn): int32  =
  return BitBtn_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TBitBtn, AValue: int32)  =
  BitBtn_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TBitBtn): TControlState  =
  return BitBtn_GetControlState(this.Instance)

proc `ControlState=`*(this: TBitBtn, AValue: TControlState)  =
  BitBtn_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TBitBtn): TControlStyle  =
  return BitBtn_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TBitBtn, AValue: TControlStyle)  =
  BitBtn_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TBitBtn): bool  =
  return BitBtn_GetFloating(this.Instance)

proc Parent*(this: TBitBtn): TWinControl  =
  return BitBtn_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TBitBtn, AValue: TWinControl)  =
  BitBtn_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TBitBtn): int32  =
  return BitBtn_GetLeft(this.Instance)

proc `Left=`*(this: TBitBtn, AValue: int32)  =
  BitBtn_SetLeft(this.Instance, AValue)

proc Top*(this: TBitBtn): int32  =
  return BitBtn_GetTop(this.Instance)

proc `Top=`*(this: TBitBtn, AValue: int32)  =
  BitBtn_SetTop(this.Instance, AValue)

proc Width*(this: TBitBtn): int32  =
  return BitBtn_GetWidth(this.Instance)

proc `Width=`*(this: TBitBtn, AValue: int32)  =
  BitBtn_SetWidth(this.Instance, AValue)

proc Height*(this: TBitBtn): int32  =
  return BitBtn_GetHeight(this.Instance)

proc `Height=`*(this: TBitBtn, AValue: int32)  =
  BitBtn_SetHeight(this.Instance, AValue)

proc Cursor*(this: TBitBtn): TCursor  =
  return BitBtn_GetCursor(this.Instance)

proc `Cursor=`*(this: TBitBtn, AValue: TCursor)  =
  BitBtn_SetCursor(this.Instance, AValue)

proc Hint*(this: TBitBtn): string  =
  return $BitBtn_GetHint(this.Instance)

proc `Hint=`*(this: TBitBtn, AValue: string)  =
  BitBtn_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TBitBtn): int32  =
  return BitBtn_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TBitBtn): int32  =
  return BitBtn_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TBitBtn, AValue: int32)  =
  BitBtn_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TBitBtn): TComponent  =
  return BitBtn_GetOwner(this.Instance).AsComponent

proc Name*(this: TBitBtn): string  =
  return $BitBtn_GetName(this.Instance)

proc `Name=`*(this: TBitBtn, AValue: string)  =
  BitBtn_SetName(this.Instance, AValue)

proc Tag*(this: TBitBtn): int  =
  return BitBtn_GetTag(this.Instance)

proc `Tag=`*(this: TBitBtn, AValue: int)  =
  BitBtn_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TBitBtn): TAnchorSide  =
  return BitBtn_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TBitBtn, AValue: TAnchorSide)  =
  BitBtn_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TBitBtn): TAnchorSide  =
  return BitBtn_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TBitBtn, AValue: TAnchorSide)  =
  BitBtn_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TBitBtn): TAnchorSide  =
  return BitBtn_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TBitBtn, AValue: TAnchorSide)  =
  BitBtn_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TBitBtn): TAnchorSide  =
  return BitBtn_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TBitBtn, AValue: TAnchorSide)  =
  BitBtn_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TBitBtn): TControlChildSizing  =
  return BitBtn_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TBitBtn, AValue: TControlChildSizing)  =
  BitBtn_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TBitBtn): TControlBorderSpacing  =
  return BitBtn_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TBitBtn, AValue: TControlBorderSpacing)  =
  BitBtn_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TBitBtn, Index: int32): TControl  =
  return BitBtn_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TBitBtn, Index: int32): TControl  =
  return BitBtn_GetControls(this.Instance, Index).AsControl

proc Components*(this: TBitBtn, AIndex: int32): TComponent  =
  return BitBtn_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TBitBtn, AKind: TAnchorKind): TAnchorSide  =
  return BitBtn_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TBitBtnClass*(): TClass = BitBtn_StaticClassType()


#------------------------- TIcon -------------------------

proc Free*(this: TIcon) = defaultFree: Icon_Free

proc NewIcon*(): TIcon =
  new(result, Free)
  result.Instance = Icon_Create()

proc Assign*(this: TIcon, Source: TObject) =
  Icon_Assign(this.Instance, CheckPtr(Source))

proc HandleAllocated*(this: TIcon): bool  =
  return Icon_HandleAllocated(this.Instance)

proc LoadFromStream*(this: TIcon, Stream: TStream) =
  Icon_LoadFromStream(this.Instance, CheckPtr(Stream))

proc SaveToStream*(this: TIcon, Stream: TStream) =
  Icon_SaveToStream(this.Instance, CheckPtr(Stream))

proc SetSize*(this: TIcon, AWidth: int32, AHeight: int32)  =
  Icon_SetSize(this.Instance, AWidth, AHeight)

proc LoadFromResourceName*(this: TIcon, Instance: uint, ResName: string)  =
  Icon_LoadFromResourceName(this.Instance, Instance, ResName)

proc LoadFromResourceID*(this: TIcon, Instance: uint, ResID: int32)  =
  Icon_LoadFromResourceID(this.Instance, Instance, ResID)

proc Equals*(this: TIcon, Obj: TObject): bool =
  return Icon_Equals(this.Instance, CheckPtr(Obj))

proc LoadFromFile*(this: TIcon, Filename: string) =
  Icon_LoadFromFile(this.Instance, Filename)

proc SaveToFile*(this: TIcon, Filename: string) =
  Icon_SaveToFile(this.Instance, Filename)

proc GetNamePath*(this: TIcon): string =
  return $Icon_GetNamePath(this.Instance)

proc ClassType*(this: TIcon): TClass =
  return Icon_ClassType(this.Instance)

proc ClassName*(this: TIcon): string =
  return $Icon_ClassName(this.Instance)

proc InstanceSize*(this: TIcon): int32 =
  return Icon_InstanceSize(this.Instance)

proc InheritsFrom*(this: TIcon, AClass: TClass): bool =
  return Icon_InheritsFrom(this.Instance, AClass)

proc GetHashCode*(this: TIcon): int32 =
  return Icon_GetHashCode(this.Instance)

proc ToString*(this: TIcon): string =
  return $Icon_ToString(this.Instance)

proc Handle*(this: TIcon): HICON  =
  return Icon_GetHandle(this.Instance)

proc `Handle=`*(this: TIcon, AValue: HICON)  =
  Icon_SetHandle(this.Instance, AValue)

proc Empty*(this: TIcon): bool  =
  return Icon_GetEmpty(this.Instance)

proc Height*(this: TIcon): int32  =
  return Icon_GetHeight(this.Instance)

proc `Height=`*(this: TIcon, AValue: int32)  =
  Icon_SetHeight(this.Instance, AValue)

proc Modified*(this: TIcon): bool  =
  return Icon_GetModified(this.Instance)

proc `Modified=`*(this: TIcon, AValue: bool)  =
  Icon_SetModified(this.Instance, AValue)

proc Palette*(this: TIcon): HPALETTE  =
  return Icon_GetPalette(this.Instance)

proc `Palette=`*(this: TIcon, AValue: HPALETTE)  =
  Icon_SetPalette(this.Instance, AValue)

proc PaletteModified*(this: TIcon): bool  =
  return Icon_GetPaletteModified(this.Instance)

proc `PaletteModified=`*(this: TIcon, AValue: bool)  =
  Icon_SetPaletteModified(this.Instance, AValue)

proc Transparent*(this: TIcon): bool  =
  return Icon_GetTransparent(this.Instance)

proc `Transparent=`*(this: TIcon, AValue: bool)  =
  Icon_SetTransparent(this.Instance, AValue)

proc Width*(this: TIcon): int32  =
  return Icon_GetWidth(this.Instance)

proc `Width=`*(this: TIcon, AValue: int32)  =
  Icon_SetWidth(this.Instance, AValue)

proc `OnChange=`*(this: TIcon, AEventId: TNotifyEvent)  =
  Icon_SetOnChange(this.Instance, AEventId)

proc TIconClass*(): TClass = Icon_StaticClassType()


#------------------------- TBitmap -------------------------

proc Free*(this: TBitmap) = defaultFree: Bitmap_Free

proc NewBitmap*(): TBitmap =
  new(result, Free)
  result.Instance = Bitmap_Create()

proc LoadFromDevice*(this: TBitmap, ADc: HDC)  =
  Bitmap_LoadFromDevice(this.Instance, ADc)

proc EndUpdate*(this: TBitmap, AStreamIsValid: bool)  =
  Bitmap_EndUpdate(this.Instance, AStreamIsValid)

proc BeginUpdate*(this: TBitmap, ACanvasOnly: bool)  =
  Bitmap_BeginUpdate(this.Instance, ACanvasOnly)

proc Clear*(this: TBitmap)  =
  Bitmap_Clear(this.Instance)

proc Assign*(this: TBitmap, Source: TObject) =
  Bitmap_Assign(this.Instance, CheckPtr(Source))

proc FreeImage*(this: TBitmap)  =
  Bitmap_FreeImage(this.Instance)

proc HandleAllocated*(this: TBitmap): bool  =
  return Bitmap_HandleAllocated(this.Instance)

proc LoadFromStream*(this: TBitmap, Stream: TStream) =
  Bitmap_LoadFromStream(this.Instance, CheckPtr(Stream))

proc SaveToStream*(this: TBitmap, Stream: TStream) =
  Bitmap_SaveToStream(this.Instance, CheckPtr(Stream))

proc SetSize*(this: TBitmap, AWidth: int32, AHeight: int32)  =
  Bitmap_SetSize(this.Instance, AWidth, AHeight)

proc LoadFromResourceName*(this: TBitmap, Instance: uint, ResName: string)  =
  Bitmap_LoadFromResourceName(this.Instance, Instance, ResName)

proc LoadFromResourceID*(this: TBitmap, Instance: uint, ResID: int32)  =
  Bitmap_LoadFromResourceID(this.Instance, Instance, ResID)

proc Equals*(this: TBitmap, Obj: TObject): bool =
  return Bitmap_Equals(this.Instance, CheckPtr(Obj))

proc LoadFromFile*(this: TBitmap, Filename: string) =
  Bitmap_LoadFromFile(this.Instance, Filename)

proc SaveToFile*(this: TBitmap, Filename: string) =
  Bitmap_SaveToFile(this.Instance, Filename)

proc GetNamePath*(this: TBitmap): string =
  return $Bitmap_GetNamePath(this.Instance)

proc ClassType*(this: TBitmap): TClass =
  return Bitmap_ClassType(this.Instance)

proc ClassName*(this: TBitmap): string =
  return $Bitmap_ClassName(this.Instance)

proc InstanceSize*(this: TBitmap): int32 =
  return Bitmap_InstanceSize(this.Instance)

proc InheritsFrom*(this: TBitmap, AClass: TClass): bool =
  return Bitmap_InheritsFrom(this.Instance, AClass)

proc GetHashCode*(this: TBitmap): int32 =
  return Bitmap_GetHashCode(this.Instance)

proc ToString*(this: TBitmap): string =
  return $Bitmap_ToString(this.Instance)

proc Canvas*(this: TBitmap): TCanvas  =
  return Bitmap_GetCanvas(this.Instance).AsCanvas

proc Handle*(this: TBitmap): HBITMAP  =
  return Bitmap_GetHandle(this.Instance)

proc `Handle=`*(this: TBitmap, AValue: HBITMAP)  =
  Bitmap_SetHandle(this.Instance, AValue)

proc HandleType*(this: TBitmap): TBitmapHandleType  =
  return Bitmap_GetHandleType(this.Instance)

proc `HandleType=`*(this: TBitmap, AValue: TBitmapHandleType)  =
  Bitmap_SetHandleType(this.Instance, AValue)

proc MaskHandle*(this: TBitmap): HBITMAP  =
  return Bitmap_GetMaskHandle(this.Instance)

proc `MaskHandle=`*(this: TBitmap, AValue: HBITMAP)  =
  Bitmap_SetMaskHandle(this.Instance, AValue)

proc PixelFormat*(this: TBitmap): TPixelFormat  =
  return Bitmap_GetPixelFormat(this.Instance)

proc `PixelFormat=`*(this: TBitmap, AValue: TPixelFormat)  =
  Bitmap_SetPixelFormat(this.Instance, AValue)

proc TransparentMode*(this: TBitmap): TTransparentMode  =
  return Bitmap_GetTransparentMode(this.Instance)

proc `TransparentMode=`*(this: TBitmap, AValue: TTransparentMode)  =
  Bitmap_SetTransparentMode(this.Instance, AValue)

proc Empty*(this: TBitmap): bool  =
  return Bitmap_GetEmpty(this.Instance)

proc Height*(this: TBitmap): int32  =
  return Bitmap_GetHeight(this.Instance)

proc `Height=`*(this: TBitmap, AValue: int32)  =
  Bitmap_SetHeight(this.Instance, AValue)

proc Modified*(this: TBitmap): bool  =
  return Bitmap_GetModified(this.Instance)

proc `Modified=`*(this: TBitmap, AValue: bool)  =
  Bitmap_SetModified(this.Instance, AValue)

proc Palette*(this: TBitmap): HPALETTE  =
  return Bitmap_GetPalette(this.Instance)

proc `Palette=`*(this: TBitmap, AValue: HPALETTE)  =
  Bitmap_SetPalette(this.Instance, AValue)

proc PaletteModified*(this: TBitmap): bool  =
  return Bitmap_GetPaletteModified(this.Instance)

proc `PaletteModified=`*(this: TBitmap, AValue: bool)  =
  Bitmap_SetPaletteModified(this.Instance, AValue)

proc Transparent*(this: TBitmap): bool  =
  return Bitmap_GetTransparent(this.Instance)

proc `Transparent=`*(this: TBitmap, AValue: bool)  =
  Bitmap_SetTransparent(this.Instance, AValue)

proc Width*(this: TBitmap): int32  =
  return Bitmap_GetWidth(this.Instance)

proc `Width=`*(this: TBitmap, AValue: int32)  =
  Bitmap_SetWidth(this.Instance, AValue)

proc `OnChange=`*(this: TBitmap, AEventId: TNotifyEvent)  =
  Bitmap_SetOnChange(this.Instance, AEventId)

proc ScanLine*(this: TBitmap, Row: int32): pointer  =
  return Bitmap_GetScanLine(this.Instance, Row)

proc TBitmapClass*(): TClass = Bitmap_StaticClassType()


#------------------------- TMemo -------------------------

proc Free*(this: TMemo) = defaultFree: Memo_Free

proc NewMemo*(AOwner: TComponent): TMemo =
  new(result)
  result.Instance = Memo_Create(CheckPtr(AOwner))

proc Append*(this: TMemo, Value: string)  =
  Memo_Append(this.Instance, Value)

proc Clear*(this: TMemo)  =
  Memo_Clear(this.Instance)

proc ClearSelection*(this: TMemo)  =
  Memo_ClearSelection(this.Instance)

proc CopyToClipboard*(this: TMemo)  =
  Memo_CopyToClipboard(this.Instance)

proc CutToClipboard*(this: TMemo)  =
  Memo_CutToClipboard(this.Instance)

proc PasteFromClipboard*(this: TMemo)  =
  Memo_PasteFromClipboard(this.Instance)

proc Undo*(this: TMemo)  =
  Memo_Undo(this.Instance)

proc SelectAll*(this: TMemo)  =
  Memo_SelectAll(this.Instance)

proc CanFocus*(this: TMemo): bool =
  return Memo_CanFocus(this.Instance)

proc ContainsControl*(this: TMemo, Control: TControl): bool =
  return Memo_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TMemo, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return Memo_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TMemo) =
  Memo_DisableAlign(this.Instance)

proc EnableAlign*(this: TMemo) =
  Memo_EnableAlign(this.Instance)

proc FindChildControl*(this: TMemo, ControlName: string): TControl =
  return Memo_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TMemo, AllLevels: bool) =
  Memo_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TMemo): bool =
  return Memo_Focused(this.Instance)

proc HandleAllocated*(this: TMemo): bool =
  return Memo_HandleAllocated(this.Instance)

proc InsertControl*(this: TMemo, AControl: TControl) =
  Memo_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TMemo) =
  Memo_Invalidate(this.Instance)

proc PaintTo*(this: TMemo, DC: HDC, X: int32, Y: int32) =
  Memo_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TMemo, AControl: TControl) =
  Memo_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TMemo) =
  Memo_Realign(this.Instance)

proc Repaint*(this: TMemo) =
  Memo_Repaint(this.Instance)

proc ScaleBy*(this: TMemo, M: int32, D: int32) =
  Memo_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TMemo, DeltaX: int32, DeltaY: int32) =
  Memo_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TMemo, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  Memo_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TMemo) =
  Memo_SetFocus(this.Instance)

proc Update*(this: TMemo) =
  Memo_Update(this.Instance)

proc BringToFront*(this: TMemo) =
  Memo_BringToFront(this.Instance)

proc ClientToScreen*(this: TMemo, Point: TPoint): TPoint =
  var ps1 = Point
  Memo_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TMemo, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Memo_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TMemo): bool =
  return Memo_Dragging(this.Instance)

proc HasParent*(this: TMemo): bool =
  return Memo_HasParent(this.Instance)

proc Hide*(this: TMemo) =
  Memo_Hide(this.Instance)

proc Perform*(this: TMemo, Msg: uint32, WParam: uint, LParam: int): int =
  return Memo_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TMemo) =
  Memo_Refresh(this.Instance)

proc ScreenToClient*(this: TMemo, Point: TPoint): TPoint =
  var ps1 = Point
  Memo_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TMemo, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Memo_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TMemo) =
  Memo_SendToBack(this.Instance)

proc Show*(this: TMemo) =
  Memo_Show(this.Instance)

proc GetTextBuf*(this: TMemo, Buffer: string, BufSize: int32): int32 =
  return Memo_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TMemo): int32 =
  return Memo_GetTextLen(this.Instance)

proc SetTextBuf*(this: TMemo, Buffer: string) =
  Memo_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TMemo, AName: string): TComponent =
  return Memo_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TMemo): string =
  return $Memo_GetNamePath(this.Instance)

proc Assign*(this: TMemo, Source: TObject) =
  Memo_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TMemo): TClass =
  return Memo_ClassType(this.Instance)

proc ClassName*(this: TMemo): string =
  return $Memo_ClassName(this.Instance)

proc InstanceSize*(this: TMemo): int32 =
  return Memo_InstanceSize(this.Instance)

proc InheritsFrom*(this: TMemo, AClass: TClass): bool =
  return Memo_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TMemo, Obj: TObject): bool =
  return Memo_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TMemo): int32 =
  return Memo_GetHashCode(this.Instance)

proc ToString*(this: TMemo): string =
  return $Memo_ToString(this.Instance)

proc AnchorToNeighbour*(this: TMemo, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Memo_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TMemo, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Memo_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TMemo, ASibling: TControl) =
  Memo_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TMemo, ASibling: TControl) =
  Memo_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TMemo, ASide: TAnchorKind, ASibling: TControl) =
  Memo_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TMemo, ATheAlign: TAlign, ASpace: int32) =
  Memo_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TMemo, ASpace: int32) =
  Memo_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TMemo, ASize: int32): int32 =
  return Memo_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TMemo, ASize: int32): int32 =
  return Memo_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TMemo, ASize: int32): int32 =
  return Memo_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TMemo, ASize: int32): int32 =
  return Memo_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TMemo, ASize: int32): int32 =
  return Memo_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TMemo, ASize: int32): int32 =
  return Memo_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TMemo, ASize: int32): int32 =
  return Memo_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TMemo, ASize: int32): int32 =
  return Memo_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TMemo, ASize: int32): int32 =
  return Memo_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TMemo, ASize: int32): int32 =
  return Memo_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TMemo, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  Memo_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TMemo, ADesignTimePPI: int32) =
  Memo_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TMemo, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  Memo_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TMemo): TAlign  =
  return Memo_GetAlign(this.Instance)

proc `Align=`*(this: TMemo, AValue: TAlign)  =
  Memo_SetAlign(this.Instance, AValue)

proc Alignment*(this: TMemo): TAlignment  =
  return Memo_GetAlignment(this.Instance)

proc `Alignment=`*(this: TMemo, AValue: TAlignment)  =
  Memo_SetAlignment(this.Instance, AValue)

proc Anchors*(this: TMemo): TAnchors  =
  return Memo_GetAnchors(this.Instance)

proc `Anchors=`*(this: TMemo, AValue: TAnchors)  =
  Memo_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TMemo): TBiDiMode  =
  return Memo_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TMemo, AValue: TBiDiMode)  =
  Memo_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TMemo): TBorderStyle  =
  return Memo_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TMemo, AValue: TBorderStyle)  =
  Memo_SetBorderStyle(this.Instance, AValue)

proc CharCase*(this: TMemo): TEditCharCase  =
  return Memo_GetCharCase(this.Instance)

proc `CharCase=`*(this: TMemo, AValue: TEditCharCase)  =
  Memo_SetCharCase(this.Instance, AValue)

proc Color*(this: TMemo): TColor  =
  return Memo_GetColor(this.Instance)

proc `Color=`*(this: TMemo, AValue: TColor)  =
  Memo_SetColor(this.Instance, AValue)

proc Constraints*(this: TMemo): TSizeConstraints  =
  return Memo_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TMemo, AValue: TSizeConstraints)  =
  Memo_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TMemo): bool  =
  return Memo_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TMemo, AValue: bool)  =
  Memo_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TMemo): TCursor  =
  return Memo_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TMemo, AValue: TCursor)  =
  Memo_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TMemo): TDragKind  =
  return Memo_GetDragKind(this.Instance)

proc `DragKind=`*(this: TMemo, AValue: TDragKind)  =
  Memo_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TMemo): TDragMode  =
  return Memo_GetDragMode(this.Instance)

proc `DragMode=`*(this: TMemo, AValue: TDragMode)  =
  Memo_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TMemo): bool  =
  return Memo_GetEnabled(this.Instance)

proc `Enabled=`*(this: TMemo, AValue: bool)  =
  Memo_SetEnabled(this.Instance, AValue)

proc Font*(this: TMemo): TFont  =
  return Memo_GetFont(this.Instance).AsFont

proc `Font=`*(this: TMemo, AValue: TFont)  =
  Memo_SetFont(this.Instance, CheckPtr(AValue))

proc HideSelection*(this: TMemo): bool  =
  return Memo_GetHideSelection(this.Instance)

proc `HideSelection=`*(this: TMemo, AValue: bool)  =
  Memo_SetHideSelection(this.Instance, AValue)

proc Lines*(this: TMemo): TStrings  =
  return Memo_GetLines(this.Instance).AsStrings

proc `Lines=`*(this: TMemo, AValue: TStrings)  =
  Memo_SetLines(this.Instance, CheckPtr(AValue))

proc MaxLength*(this: TMemo): int32  =
  return Memo_GetMaxLength(this.Instance)

proc `MaxLength=`*(this: TMemo, AValue: int32)  =
  Memo_SetMaxLength(this.Instance, AValue)

proc ParentColor*(this: TMemo): bool  =
  return Memo_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TMemo, AValue: bool)  =
  Memo_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TMemo): bool  =
  return Memo_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TMemo, AValue: bool)  =
  Memo_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TMemo): bool  =
  return Memo_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TMemo, AValue: bool)  =
  Memo_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TMemo): bool  =
  return Memo_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TMemo, AValue: bool)  =
  Memo_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TMemo): TPopupMenu  =
  return Memo_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TMemo, AValue: TPopupMenu)  =
  Memo_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ReadOnly*(this: TMemo): bool  =
  return Memo_GetReadOnly(this.Instance)

proc `ReadOnly=`*(this: TMemo, AValue: bool)  =
  Memo_SetReadOnly(this.Instance, AValue)

proc ScrollBars*(this: TMemo): TScrollStyle  =
  return Memo_GetScrollBars(this.Instance)

proc `ScrollBars=`*(this: TMemo, AValue: TScrollStyle)  =
  Memo_SetScrollBars(this.Instance, AValue)

proc ShowHint*(this: TMemo): bool  =
  return Memo_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TMemo, AValue: bool)  =
  Memo_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TMemo): TTabOrder  =
  return Memo_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TMemo, AValue: TTabOrder)  =
  Memo_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TMemo): bool  =
  return Memo_GetTabStop(this.Instance)

proc `TabStop=`*(this: TMemo, AValue: bool)  =
  Memo_SetTabStop(this.Instance, AValue)

proc Visible*(this: TMemo): bool  =
  return Memo_GetVisible(this.Instance)

proc `Visible=`*(this: TMemo, AValue: bool)  =
  Memo_SetVisible(this.Instance, AValue)

proc WantReturns*(this: TMemo): bool  =
  return Memo_GetWantReturns(this.Instance)

proc `WantReturns=`*(this: TMemo, AValue: bool)  =
  Memo_SetWantReturns(this.Instance, AValue)

proc WantTabs*(this: TMemo): bool  =
  return Memo_GetWantTabs(this.Instance)

proc `WantTabs=`*(this: TMemo, AValue: bool)  =
  Memo_SetWantTabs(this.Instance, AValue)

proc WordWrap*(this: TMemo): bool  =
  return Memo_GetWordWrap(this.Instance)

proc `WordWrap=`*(this: TMemo, AValue: bool)  =
  Memo_SetWordWrap(this.Instance, AValue)

proc `OnChange=`*(this: TMemo, AEventId: TNotifyEvent)  =
  Memo_SetOnChange(this.Instance, AEventId)

proc `OnClick=`*(this: TMemo, AEventId: TNotifyEvent)  =
  Memo_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TMemo, AEventId: TContextPopupEvent)  =
  Memo_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TMemo, AEventId: TNotifyEvent)  =
  Memo_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TMemo, AEventId: TDragDropEvent)  =
  Memo_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TMemo, AEventId: TDragOverEvent)  =
  Memo_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TMemo, AEventId: TEndDragEvent)  =
  Memo_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TMemo, AEventId: TNotifyEvent)  =
  Memo_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TMemo, AEventId: TNotifyEvent)  =
  Memo_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TMemo, AEventId: TKeyEvent)  =
  Memo_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TMemo, AEventId: TKeyPressEvent)  =
  Memo_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TMemo, AEventId: TKeyEvent)  =
  Memo_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TMemo, AEventId: TMouseEvent)  =
  Memo_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TMemo, AEventId: TNotifyEvent)  =
  Memo_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TMemo, AEventId: TNotifyEvent)  =
  Memo_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TMemo, AEventId: TMouseMoveEvent)  =
  Memo_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TMemo, AEventId: TMouseEvent)  =
  Memo_SetOnMouseUp(this.Instance, AEventId)

proc CaretPos*(this: TMemo): TPoint  =
  Memo_GetCaretPos(this.Instance, result)

proc `CaretPos=`*(this: TMemo, AValue: TPoint)  =
  var ps1 = AValue
  Memo_SetCaretPos(this.Instance, ps1)

proc CanUndo*(this: TMemo): bool  =
  return Memo_GetCanUndo(this.Instance)

proc Modified*(this: TMemo): bool  =
  return Memo_GetModified(this.Instance)

proc `Modified=`*(this: TMemo, AValue: bool)  =
  Memo_SetModified(this.Instance, AValue)

proc SelLength*(this: TMemo): int32  =
  return Memo_GetSelLength(this.Instance)

proc `SelLength=`*(this: TMemo, AValue: int32)  =
  Memo_SetSelLength(this.Instance, AValue)

proc SelStart*(this: TMemo): int32  =
  return Memo_GetSelStart(this.Instance)

proc `SelStart=`*(this: TMemo, AValue: int32)  =
  Memo_SetSelStart(this.Instance, AValue)

proc SelText*(this: TMemo): string  =
  return $Memo_GetSelText(this.Instance)

proc `SelText=`*(this: TMemo, AValue: string)  =
  Memo_SetSelText(this.Instance, AValue)

proc Text*(this: TMemo): string  =
  return $Memo_GetText(this.Instance)

proc `Text=`*(this: TMemo, AValue: string)  =
  Memo_SetText(this.Instance, AValue)

proc TextHint*(this: TMemo): string  =
  return $Memo_GetTextHint(this.Instance)

proc `TextHint=`*(this: TMemo, AValue: string)  =
  Memo_SetTextHint(this.Instance, AValue)

proc DockClientCount*(this: TMemo): int32  =
  return Memo_GetDockClientCount(this.Instance)

proc DockSite*(this: TMemo): bool  =
  return Memo_GetDockSite(this.Instance)

proc `DockSite=`*(this: TMemo, AValue: bool)  =
  Memo_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TMemo): bool  =
  return Memo_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TMemo): int32  =
  return Memo_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TMemo): TBrush  =
  return Memo_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TMemo): int32  =
  return Memo_GetControlCount(this.Instance)

proc Handle*(this: TMemo): HWND  =
  return Memo_GetHandle(this.Instance)

proc ParentWindow*(this: TMemo): HWND  =
  return Memo_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TMemo, AValue: HWND)  =
  Memo_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TMemo): bool  =
  return Memo_GetShowing(this.Instance)

proc UseDockManager*(this: TMemo): bool  =
  return Memo_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TMemo, AValue: bool)  =
  Memo_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TMemo): TAction  =
  return Memo_GetAction(this.Instance).AsAction

proc `Action=`*(this: TMemo, AValue: TAction)  =
  Memo_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TMemo): TRect  =
  Memo_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TMemo, AValue: TRect)  =
  var ps1 = AValue
  Memo_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TMemo): int32  =
  return Memo_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TMemo, AValue: int32)  =
  Memo_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TMemo): TPoint  =
  Memo_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TMemo): TRect  =
  Memo_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TMemo): int32  =
  return Memo_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TMemo, AValue: int32)  =
  Memo_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TMemo): TControlState  =
  return Memo_GetControlState(this.Instance)

proc `ControlState=`*(this: TMemo, AValue: TControlState)  =
  Memo_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TMemo): TControlStyle  =
  return Memo_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TMemo, AValue: TControlStyle)  =
  Memo_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TMemo): bool  =
  return Memo_GetFloating(this.Instance)

proc Parent*(this: TMemo): TWinControl  =
  return Memo_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TMemo, AValue: TWinControl)  =
  Memo_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TMemo): int32  =
  return Memo_GetLeft(this.Instance)

proc `Left=`*(this: TMemo, AValue: int32)  =
  Memo_SetLeft(this.Instance, AValue)

proc Top*(this: TMemo): int32  =
  return Memo_GetTop(this.Instance)

proc `Top=`*(this: TMemo, AValue: int32)  =
  Memo_SetTop(this.Instance, AValue)

proc Width*(this: TMemo): int32  =
  return Memo_GetWidth(this.Instance)

proc `Width=`*(this: TMemo, AValue: int32)  =
  Memo_SetWidth(this.Instance, AValue)

proc Height*(this: TMemo): int32  =
  return Memo_GetHeight(this.Instance)

proc `Height=`*(this: TMemo, AValue: int32)  =
  Memo_SetHeight(this.Instance, AValue)

proc Cursor*(this: TMemo): TCursor  =
  return Memo_GetCursor(this.Instance)

proc `Cursor=`*(this: TMemo, AValue: TCursor)  =
  Memo_SetCursor(this.Instance, AValue)

proc Hint*(this: TMemo): string  =
  return $Memo_GetHint(this.Instance)

proc `Hint=`*(this: TMemo, AValue: string)  =
  Memo_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TMemo): int32  =
  return Memo_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TMemo): int32  =
  return Memo_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TMemo, AValue: int32)  =
  Memo_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TMemo): TComponent  =
  return Memo_GetOwner(this.Instance).AsComponent

proc Name*(this: TMemo): string  =
  return $Memo_GetName(this.Instance)

proc `Name=`*(this: TMemo, AValue: string)  =
  Memo_SetName(this.Instance, AValue)

proc Tag*(this: TMemo): int  =
  return Memo_GetTag(this.Instance)

proc `Tag=`*(this: TMemo, AValue: int)  =
  Memo_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TMemo): TAnchorSide  =
  return Memo_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TMemo, AValue: TAnchorSide)  =
  Memo_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TMemo): TAnchorSide  =
  return Memo_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TMemo, AValue: TAnchorSide)  =
  Memo_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TMemo): TAnchorSide  =
  return Memo_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TMemo, AValue: TAnchorSide)  =
  Memo_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TMemo): TAnchorSide  =
  return Memo_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TMemo, AValue: TAnchorSide)  =
  Memo_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TMemo): TControlChildSizing  =
  return Memo_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TMemo, AValue: TControlChildSizing)  =
  Memo_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TMemo): TControlBorderSpacing  =
  return Memo_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TMemo, AValue: TControlBorderSpacing)  =
  Memo_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TMemo, Index: int32): TControl  =
  return Memo_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TMemo, Index: int32): TControl  =
  return Memo_GetControls(this.Instance, Index).AsControl

proc Components*(this: TMemo, AIndex: int32): TComponent  =
  return Memo_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TMemo, AKind: TAnchorKind): TAnchorSide  =
  return Memo_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TMemoClass*(): TClass = Memo_StaticClassType()


#------------------------- TMemoryStream -------------------------

proc Free*(this: TMemoryStream)  = defaultFree: MemoryStream_Free

proc NewMemoryStream*(): TMemoryStream =
  new(result, Free)
  result.Instance = MemoryStream_Create()

proc Clear*(this: TMemoryStream)  =
  MemoryStream_Clear(this.Instance)

proc LoadFromStream*(this: TMemoryStream, Stream: TStream)  =
  MemoryStream_LoadFromStream(this.Instance, CheckPtr(Stream))

proc LoadFromFile*(this: TMemoryStream, FileName: string)  =
  MemoryStream_LoadFromFile(this.Instance, FileName)

proc Seek*(this: TMemoryStream, Offset: int64, Origin: TSeekOrigin): int64  =
  var ps1 = Offset
  MemoryStream_Seek(this.Instance, ps1, Origin, result)

proc SaveToStream*(this: TMemoryStream, Stream: TStream)  =
  MemoryStream_SaveToStream(this.Instance, CheckPtr(Stream))

proc SaveToFile*(this: TMemoryStream, FileName: string)  =
  MemoryStream_SaveToFile(this.Instance, FileName)

proc CopyFrom*(this: TMemoryStream, Source: TStream, Count: int64): int64  =
  var ps2 = Count
  MemoryStream_CopyFrom(this.Instance, CheckPtr(Source), ps2, result)

proc ClassType*(this: TMemoryStream): TClass  =
  return MemoryStream_ClassType(this.Instance)

proc ClassName*(this: TMemoryStream): string  =
  return $MemoryStream_ClassName(this.Instance)

proc InstanceSize*(this: TMemoryStream): int32  =
  return MemoryStream_InstanceSize(this.Instance)

proc InheritsFrom*(this: TMemoryStream, AClass: TClass): bool  =
  return MemoryStream_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TMemoryStream, Obj: TObject): bool  =
  return MemoryStream_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TMemoryStream): int32  =
  return MemoryStream_GetHashCode(this.Instance)

proc ToString*(this: TMemoryStream): string  =
  return $MemoryStream_ToString(this.Instance)

proc Memory*(this: TMemoryStream): pointer  =
  return MemoryStream_GetMemory(this.Instance)

proc Position*(this: TMemoryStream): int64  =
  MemoryStream_GetPosition(this.Instance, result)

proc `Position=`*(this: TMemoryStream, AValue: int64)  =
  var ps1 = AValue
  MemoryStream_SetPosition(this.Instance, ps1)

proc Size*(this: TMemoryStream): int64  =
  MemoryStream_GetSize(this.Instance, result)

proc `Size=`*(this: TMemoryStream, AValue: int64)  =
  var ps1 = AValue
  MemoryStream_SetSize(this.Instance, ps1)

proc TMemoryStreamClass*(): TClass = MemoryStream_StaticClassType()


proc Write*(this: TMemoryStream, Buffer: pointer, Count: int32): int32  =
  return MemoryStream_Write(this.Instance, Buffer, Count)

proc Read*(this: TMemoryStream, Buffer: pointer, Count: int32): int32  =
  return MemoryStream_Read(this.Instance, Buffer, Count)

#------------------------- TFont -------------------------

proc Free*(this: TFont) = defaultFree: Font_Free

proc NewFont*(): TFont =
  new(result, Free)
  result.Instance = Font_Create()

proc Assign*(this: TFont, Source: TObject)  =
  Font_Assign(this.Instance, CheckPtr(Source))

proc HandleAllocated*(this: TFont): bool  =
  return Font_HandleAllocated(this.Instance)

proc GetNamePath*(this: TFont): string  =
  return $Font_GetNamePath(this.Instance)

proc ClassType*(this: TFont): TClass =
  return Font_ClassType(this.Instance)

proc ClassName*(this: TFont): string =
  return $Font_ClassName(this.Instance)

proc InstanceSize*(this: TFont): int32 =
  return Font_InstanceSize(this.Instance)

proc InheritsFrom*(this: TFont, AClass: TClass): bool =
  return Font_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TFont, Obj: TObject): bool =
  return Font_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TFont): int32 =
  return Font_GetHashCode(this.Instance)

proc ToString*(this: TFont): string =
  return $Font_ToString(this.Instance)

proc Handle*(this: TFont): HFONT  =
  return Font_GetHandle(this.Instance)

proc `Handle=`*(this: TFont, AValue: HFONT)  =
  Font_SetHandle(this.Instance, AValue)

proc PixelsPerInch*(this: TFont): int32  =
  return Font_GetPixelsPerInch(this.Instance)

proc `PixelsPerInch=`*(this: TFont, AValue: int32)  =
  Font_SetPixelsPerInch(this.Instance, AValue)

proc Charset*(this: TFont): TFontCharset  =
  return Font_GetCharset(this.Instance)

proc `Charset=`*(this: TFont, AValue: TFontCharset)  =
  Font_SetCharset(this.Instance, AValue)

proc Color*(this: TFont): TColor  =
  return Font_GetColor(this.Instance)

proc `Color=`*(this: TFont, AValue: TColor)  =
  Font_SetColor(this.Instance, AValue)

proc Height*(this: TFont): int32  =
  return Font_GetHeight(this.Instance)

proc `Height=`*(this: TFont, AValue: int32)  =
  Font_SetHeight(this.Instance, AValue)

proc Name*(this: TFont): string  =
  return $Font_GetName(this.Instance)

proc `Name=`*(this: TFont, AValue: string)  =
  Font_SetName(this.Instance, AValue)

proc Orientation*(this: TFont): int32  =
  return Font_GetOrientation(this.Instance)

proc `Orientation=`*(this: TFont, AValue: int32)  =
  Font_SetOrientation(this.Instance, AValue)

proc Pitch*(this: TFont): TFontPitch  =
  return Font_GetPitch(this.Instance)

proc `Pitch=`*(this: TFont, AValue: TFontPitch)  =
  Font_SetPitch(this.Instance, AValue)

proc Size*(this: TFont): int32  =
  return Font_GetSize(this.Instance)

proc `Size=`*(this: TFont, AValue: int32)  =
  Font_SetSize(this.Instance, AValue)

proc Style*(this: TFont): TFontStyles  =
  return Font_GetStyle(this.Instance)

proc `Style=`*(this: TFont, AValue: TFontStyles)  =
  Font_SetStyle(this.Instance, AValue)

proc Quality*(this: TFont): TFontQuality  =
  return Font_GetQuality(this.Instance)

proc `Quality=`*(this: TFont, AValue: TFontQuality)  =
  Font_SetQuality(this.Instance, AValue)

proc `OnChange=`*(this: TFont, AEventId: TNotifyEvent)  =
  Font_SetOnChange(this.Instance, AEventId)

proc TFontClass*(): TClass = Font_StaticClassType()


#------------------------- TPopupMenu -------------------------

proc Free*(this: TPopupMenu) = defaultFree: PopupMenu_Free

proc NewPopupMenu*(AOwner: TComponent): TPopupMenu =
  new(result)
  result.Instance = PopupMenu_Create(CheckPtr(AOwner))

proc CloseMenu*(this: TPopupMenu)  =
  PopupMenu_CloseMenu(this.Instance)

proc Popup*(this: TPopupMenu, X: int32, Y: int32)  =
  PopupMenu_Popup(this.Instance, X, Y)

proc FindComponent*(this: TPopupMenu, AName: string): TComponent =
  return PopupMenu_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TPopupMenu): string =
  return $PopupMenu_GetNamePath(this.Instance)

proc HasParent*(this: TPopupMenu): bool =
  return PopupMenu_HasParent(this.Instance)

proc Assign*(this: TPopupMenu, Source: TObject) =
  PopupMenu_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TPopupMenu): TClass =
  return PopupMenu_ClassType(this.Instance)

proc ClassName*(this: TPopupMenu): string =
  return $PopupMenu_ClassName(this.Instance)

proc InstanceSize*(this: TPopupMenu): int32 =
  return PopupMenu_InstanceSize(this.Instance)

proc InheritsFrom*(this: TPopupMenu, AClass: TClass): bool =
  return PopupMenu_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TPopupMenu, Obj: TObject): bool =
  return PopupMenu_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TPopupMenu): int32 =
  return PopupMenu_GetHashCode(this.Instance)

proc ToString*(this: TPopupMenu): string =
  return $PopupMenu_ToString(this.Instance)

proc ImagesWidth*(this: TPopupMenu): int32  =
  return PopupMenu_GetImagesWidth(this.Instance)

proc `ImagesWidth=`*(this: TPopupMenu, AValue: int32)  =
  PopupMenu_SetImagesWidth(this.Instance, AValue)

proc PopupComponent*(this: TPopupMenu): TComponent  =
  return PopupMenu_GetPopupComponent(this.Instance).AsComponent

proc `PopupComponent=`*(this: TPopupMenu, AValue: TComponent)  =
  PopupMenu_SetPopupComponent(this.Instance, CheckPtr(AValue))

proc PopupPoint*(this: TPopupMenu): TPoint  =
  PopupMenu_GetPopupPoint(this.Instance, result)

proc Alignment*(this: TPopupMenu): TPopupAlignment  =
  return PopupMenu_GetAlignment(this.Instance)

proc `Alignment=`*(this: TPopupMenu, AValue: TPopupAlignment)  =
  PopupMenu_SetAlignment(this.Instance, AValue)

proc BiDiMode*(this: TPopupMenu): TBiDiMode  =
  return PopupMenu_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TPopupMenu, AValue: TBiDiMode)  =
  PopupMenu_SetBiDiMode(this.Instance, AValue)

proc Images*(this: TPopupMenu): TImageList  =
  return PopupMenu_GetImages(this.Instance).AsImageList

proc `Images=`*(this: TPopupMenu, AValue: TImageList)  =
  PopupMenu_SetImages(this.Instance, CheckPtr(AValue))

proc OwnerDraw*(this: TPopupMenu): bool  =
  return PopupMenu_GetOwnerDraw(this.Instance)

proc `OwnerDraw=`*(this: TPopupMenu, AValue: bool)  =
  PopupMenu_SetOwnerDraw(this.Instance, AValue)

proc `OnPopup=`*(this: TPopupMenu, AEventId: TNotifyEvent)  =
  PopupMenu_SetOnPopup(this.Instance, AEventId)

proc Handle*(this: TPopupMenu): HMENU  =
  return PopupMenu_GetHandle(this.Instance)

proc Items*(this: TPopupMenu): TMenuItem  =
  return PopupMenu_GetItems(this.Instance).AsMenuItem

proc ComponentCount*(this: TPopupMenu): int32  =
  return PopupMenu_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TPopupMenu): int32  =
  return PopupMenu_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TPopupMenu, AValue: int32)  =
  PopupMenu_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TPopupMenu): TComponent  =
  return PopupMenu_GetOwner(this.Instance).AsComponent

proc Name*(this: TPopupMenu): string  =
  return $PopupMenu_GetName(this.Instance)

proc `Name=`*(this: TPopupMenu, AValue: string)  =
  PopupMenu_SetName(this.Instance, AValue)

proc Tag*(this: TPopupMenu): int  =
  return PopupMenu_GetTag(this.Instance)

proc `Tag=`*(this: TPopupMenu, AValue: int)  =
  PopupMenu_SetTag(this.Instance, AValue)

proc Components*(this: TPopupMenu, AIndex: int32): TComponent  =
  return PopupMenu_GetComponents(this.Instance, AIndex).AsComponent

proc TPopupMenuClass*(): TClass = PopupMenu_StaticClassType()


#------------------------- TStringList -------------------------

proc Free*(this: TStringList) = defaultFree: StringList_Free

proc NewStringList*(): TStringList =
  new(result, Free)
  result.Instance = StringList_Create()

proc Add*(this: TStringList, S: string): int32 =
  return StringList_Add(this.Instance, S)

proc AddObject*(this: TStringList, S: string, AObject: TObject): int32 =
  return StringList_AddObject(this.Instance, S, CheckPtr(AObject))

proc Assign*(this: TStringList, Source: TObject) =
  StringList_Assign(this.Instance, CheckPtr(Source))

proc Clear*(this: TStringList) =
  StringList_Clear(this.Instance)

proc Delete*(this: TStringList, Index: int32) =
  StringList_Delete(this.Instance, Index)

proc IndexOf*(this: TStringList, S: string): int32 =
  return StringList_IndexOf(this.Instance, S)

proc Insert*(this: TStringList, Index: int32, S: string) =
  StringList_Insert(this.Instance, Index, S)

proc InsertObject*(this: TStringList, Index: int32, S: string, AObject: TObject) =
  StringList_InsertObject(this.Instance, Index, S, CheckPtr(AObject))

proc Append*(this: TStringList, S: string) =
  StringList_Append(this.Instance, S)

proc BeginUpdate*(this: TStringList) =
  StringList_BeginUpdate(this.Instance)

proc EndUpdate*(this: TStringList) =
  StringList_EndUpdate(this.Instance)

proc Equals*(this: TStringList, Strings: TStrings): bool  =
  return StringList_Equals(this.Instance, CheckPtr(Strings))

proc IndexOfName*(this: TStringList, Name: string): int32 =
  return StringList_IndexOfName(this.Instance, Name)

proc IndexOfObject*(this: TStringList, AObject: TObject): int32 =
  return StringList_IndexOfObject(this.Instance, CheckPtr(AObject))

proc LoadFromFile*(this: TStringList, FileName: string) =
  StringList_LoadFromFile(this.Instance, FileName)

proc LoadFromStream*(this: TStringList, Stream: TStream) =
  StringList_LoadFromStream(this.Instance, CheckPtr(Stream))

proc Move*(this: TStringList, CurIndex: int32, NewIndex: int32) =
  StringList_Move(this.Instance, CurIndex, NewIndex)

proc SaveToFile*(this: TStringList, FileName: string) =
  StringList_SaveToFile(this.Instance, FileName)

proc SaveToStream*(this: TStringList, Stream: TStream) =
  StringList_SaveToStream(this.Instance, CheckPtr(Stream))

proc GetNamePath*(this: TStringList): string =
  return $StringList_GetNamePath(this.Instance)

proc ClassType*(this: TStringList): TClass =
  return StringList_ClassType(this.Instance)

proc ClassName*(this: TStringList): string =
  return $StringList_ClassName(this.Instance)

proc InstanceSize*(this: TStringList): int32 =
  return StringList_InstanceSize(this.Instance)

proc InheritsFrom*(this: TStringList, AClass: TClass): bool =
  return StringList_InheritsFrom(this.Instance, AClass)

proc GetHashCode*(this: TStringList): int32 =
  return StringList_GetHashCode(this.Instance)

proc ToString*(this: TStringList): string =
  return $StringList_ToString(this.Instance)

proc Sorted*(this: TStringList): bool  =
  return StringList_GetSorted(this.Instance)

proc `Sorted=`*(this: TStringList, AValue: bool)  =
  StringList_SetSorted(this.Instance, AValue)

proc `OnChange=`*(this: TStringList, AEventId: TNotifyEvent)  =
  StringList_SetOnChange(this.Instance, AEventId)

proc `OnChanging=`*(this: TStringList, AEventId: TNotifyEvent)  =
  StringList_SetOnChanging(this.Instance, AEventId)

proc Capacity*(this: TStringList): int32  =
  return StringList_GetCapacity(this.Instance)

proc `Capacity=`*(this: TStringList, AValue: int32)  =
  StringList_SetCapacity(this.Instance, AValue)

proc CommaText*(this: TStringList): string  =
  return $StringList_GetCommaText(this.Instance)

proc `CommaText=`*(this: TStringList, AValue: string)  =
  StringList_SetCommaText(this.Instance, AValue)

proc Count*(this: TStringList): int32  =
  return StringList_GetCount(this.Instance)

proc Delimiter*(this: TStringList): Char  =
  return StringList_GetDelimiter(this.Instance)

proc `Delimiter=`*(this: TStringList, AValue: Char)  =
  StringList_SetDelimiter(this.Instance, AValue)

proc NameValueSeparator*(this: TStringList): Char  =
  return StringList_GetNameValueSeparator(this.Instance)

proc `NameValueSeparator=`*(this: TStringList, AValue: Char)  =
  StringList_SetNameValueSeparator(this.Instance, AValue)

proc Text*(this: TStringList): string  =
  return $StringList_GetText(this.Instance)

proc `Text=`*(this: TStringList, AValue: string)  =
  StringList_SetText(this.Instance, AValue)

proc Objects*(this: TStringList, Index: int32): TObject  =
  return StringList_GetObjects(this.Instance, Index).AsObject

proc `Objects=`*(this: TStringList, Index: int32, AValue: TObject)  =
  StringList_SetObjects(this.Instance, Index, CheckPtr(AValue))

proc Values*(this: TStringList, Name: string): string  =
  return $StringList_GetValues(this.Instance, Name)

proc `Values=`*(this: TStringList, Name: string, AValue: string)  =
  StringList_SetValues(this.Instance, Name, AValue)

proc ValueFromIndex*(this: TStringList, Index: int32): string  =
  return $StringList_GetValueFromIndex(this.Instance, Index)

proc `ValueFromIndex=`*(this: TStringList, Index: int32, AValue: string)  =
  StringList_SetValueFromIndex(this.Instance, Index, AValue)

proc Strings*(this: TStringList, Index: int32): string  =
  return $StringList_GetStrings(this.Instance, Index)

proc `Strings=`*(this: TStringList, Index: int32, AValue: string)  =
  StringList_SetStrings(this.Instance, Index, AValue)

proc TStringListClass*(): TClass = StringList_StaticClassType()


#------------------------- TBrush -------------------------

proc Free*(this: TBrush) = defaultFree: Brush_Free

proc NewBrush*(): TBrush =
  new(result, Free)
  result.Instance = Brush_Create()

proc Assign*(this: TBrush, Source: TObject)  =
  Brush_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TBrush): string  =
  return $Brush_GetNamePath(this.Instance)

proc ClassType*(this: TBrush): TClass =
  return Brush_ClassType(this.Instance)

proc ClassName*(this: TBrush): string =
  return $Brush_ClassName(this.Instance)

proc InstanceSize*(this: TBrush): int32 =
  return Brush_InstanceSize(this.Instance)

proc InheritsFrom*(this: TBrush, AClass: TClass): bool =
  return Brush_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TBrush, Obj: TObject): bool =
  return Brush_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TBrush): int32 =
  return Brush_GetHashCode(this.Instance)

proc ToString*(this: TBrush): string =
  return $Brush_ToString(this.Instance)

proc Bitmap*(this: TBrush): TBitmap  =
  return Brush_GetBitmap(this.Instance).AsBitmap

proc `Bitmap=`*(this: TBrush, AValue: TBitmap)  =
  Brush_SetBitmap(this.Instance, CheckPtr(AValue))

proc Handle*(this: TBrush): HBRUSH  =
  return Brush_GetHandle(this.Instance)

proc `Handle=`*(this: TBrush, AValue: HBRUSH)  =
  Brush_SetHandle(this.Instance, AValue)

proc Color*(this: TBrush): TColor  =
  return Brush_GetColor(this.Instance)

proc `Color=`*(this: TBrush, AValue: TColor)  =
  Brush_SetColor(this.Instance, AValue)

proc Style*(this: TBrush): TBrushStyle  =
  return Brush_GetStyle(this.Instance)

proc `Style=`*(this: TBrush, AValue: TBrushStyle)  =
  Brush_SetStyle(this.Instance, AValue)

proc `OnChange=`*(this: TBrush, AEventId: TNotifyEvent)  =
  Brush_SetOnChange(this.Instance, AEventId)

proc TBrushClass*(): TClass = Brush_StaticClassType()


#------------------------- TPen -------------------------

proc Free*(this: TPen) = defaultFree: Pen_Free

proc NewPen*(): TPen =
  new(result, Free)
  result.Instance = Pen_Create()

proc Assign*(this: TPen, Source: TObject)  =
  Pen_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TPen): string  =
  return $Pen_GetNamePath(this.Instance)

proc ClassType*(this: TPen): TClass =
  return Pen_ClassType(this.Instance)

proc ClassName*(this: TPen): string =
  return $Pen_ClassName(this.Instance)

proc InstanceSize*(this: TPen): int32 =
  return Pen_InstanceSize(this.Instance)

proc InheritsFrom*(this: TPen, AClass: TClass): bool =
  return Pen_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TPen, Obj: TObject): bool =
  return Pen_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TPen): int32 =
  return Pen_GetHashCode(this.Instance)

proc ToString*(this: TPen): string =
  return $Pen_ToString(this.Instance)

proc Handle*(this: TPen): HPEN  =
  return Pen_GetHandle(this.Instance)

proc `Handle=`*(this: TPen, AValue: HPEN)  =
  Pen_SetHandle(this.Instance, AValue)

proc Color*(this: TPen): TColor  =
  return Pen_GetColor(this.Instance)

proc `Color=`*(this: TPen, AValue: TColor)  =
  Pen_SetColor(this.Instance, AValue)

proc Mode*(this: TPen): TPenMode  =
  return Pen_GetMode(this.Instance)

proc `Mode=`*(this: TPen, AValue: TPenMode)  =
  Pen_SetMode(this.Instance, AValue)

proc Style*(this: TPen): TPenStyle  =
  return Pen_GetStyle(this.Instance)

proc `Style=`*(this: TPen, AValue: TPenStyle)  =
  Pen_SetStyle(this.Instance, AValue)

proc Width*(this: TPen): int32  =
  return Pen_GetWidth(this.Instance)

proc `Width=`*(this: TPen, AValue: int32)  =
  Pen_SetWidth(this.Instance, AValue)

proc `OnChange=`*(this: TPen, AEventId: TNotifyEvent)  =
  Pen_SetOnChange(this.Instance, AEventId)

proc TPenClass*(): TClass = Pen_StaticClassType()


#------------------------- TMenuItem -------------------------

proc Free*(this: TMenuItem) = defaultFree: MenuItem_Free

proc NewMenuItem*(AOwner: TComponent): TMenuItem =
  new(result)
  result.Instance = MenuItem_Create(CheckPtr(AOwner))

proc Insert*(this: TMenuItem, Index: int32, Item: TMenuItem)  =
  MenuItem_Insert(this.Instance, Index, CheckPtr(Item))

proc Delete*(this: TMenuItem, Index: int32)  =
  MenuItem_Delete(this.Instance, Index)

proc Clear*(this: TMenuItem)  =
  MenuItem_Clear(this.Instance)

proc Click*(this: TMenuItem)  =
  MenuItem_Click(this.Instance)

proc IndexOf*(this: TMenuItem, Item: TMenuItem): int32  =
  return MenuItem_IndexOf(this.Instance, CheckPtr(Item))

proc HasParent*(this: TMenuItem): bool =
  return MenuItem_HasParent(this.Instance)

proc Add*(this: TMenuItem, Item: TMenuItem)  =
  MenuItem_Add(this.Instance, CheckPtr(Item))

proc FindComponent*(this: TMenuItem, AName: string): TComponent =
  return MenuItem_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TMenuItem): string =
  return $MenuItem_GetNamePath(this.Instance)

proc Assign*(this: TMenuItem, Source: TObject) =
  MenuItem_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TMenuItem): TClass =
  return MenuItem_ClassType(this.Instance)

proc ClassName*(this: TMenuItem): string =
  return $MenuItem_ClassName(this.Instance)

proc InstanceSize*(this: TMenuItem): int32 =
  return MenuItem_InstanceSize(this.Instance)

proc InheritsFrom*(this: TMenuItem, AClass: TClass): bool =
  return MenuItem_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TMenuItem, Obj: TObject): bool =
  return MenuItem_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TMenuItem): int32 =
  return MenuItem_GetHashCode(this.Instance)

proc ToString*(this: TMenuItem): string =
  return $MenuItem_ToString(this.Instance)

proc Handle*(this: TMenuItem): HMENU  =
  return MenuItem_GetHandle(this.Instance)

proc Count*(this: TMenuItem): int32  =
  return MenuItem_GetCount(this.Instance)

proc Parent*(this: TMenuItem): TMenuItem  =
  return MenuItem_GetParent(this.Instance).AsMenuItem

proc Action*(this: TMenuItem): TAction  =
  return MenuItem_GetAction(this.Instance).AsAction

proc `Action=`*(this: TMenuItem, AValue: TAction)  =
  MenuItem_SetAction(this.Instance, CheckPtr(AValue))

proc AutoCheck*(this: TMenuItem): bool  =
  return MenuItem_GetAutoCheck(this.Instance)

proc `AutoCheck=`*(this: TMenuItem, AValue: bool)  =
  MenuItem_SetAutoCheck(this.Instance, AValue)

proc Bitmap*(this: TMenuItem): TBitmap  =
  return MenuItem_GetBitmap(this.Instance).AsBitmap

proc `Bitmap=`*(this: TMenuItem, AValue: TBitmap)  =
  MenuItem_SetBitmap(this.Instance, CheckPtr(AValue))

proc Caption*(this: TMenuItem): string  =
  return $MenuItem_GetCaption(this.Instance)

proc `Caption=`*(this: TMenuItem, AValue: string)  =
  MenuItem_SetCaption(this.Instance, AValue)

proc Checked*(this: TMenuItem): bool  =
  return MenuItem_GetChecked(this.Instance)

proc `Checked=`*(this: TMenuItem, AValue: bool)  =
  MenuItem_SetChecked(this.Instance, AValue)

proc Default*(this: TMenuItem): bool  =
  return MenuItem_GetDefault(this.Instance)

proc `Default=`*(this: TMenuItem, AValue: bool)  =
  MenuItem_SetDefault(this.Instance, AValue)

proc Enabled*(this: TMenuItem): bool  =
  return MenuItem_GetEnabled(this.Instance)

proc `Enabled=`*(this: TMenuItem, AValue: bool)  =
  MenuItem_SetEnabled(this.Instance, AValue)

proc GroupIndex*(this: TMenuItem): int8  =
  return MenuItem_GetGroupIndex(this.Instance)

proc `GroupIndex=`*(this: TMenuItem, AValue: int8)  =
  MenuItem_SetGroupIndex(this.Instance, AValue)

proc Hint*(this: TMenuItem): string  =
  return $MenuItem_GetHint(this.Instance)

proc `Hint=`*(this: TMenuItem, AValue: string)  =
  MenuItem_SetHint(this.Instance, AValue)

proc ImageIndex*(this: TMenuItem): int32  =
  return MenuItem_GetImageIndex(this.Instance)

proc `ImageIndex=`*(this: TMenuItem, AValue: int32)  =
  MenuItem_SetImageIndex(this.Instance, AValue)

proc RadioItem*(this: TMenuItem): bool  =
  return MenuItem_GetRadioItem(this.Instance)

proc `RadioItem=`*(this: TMenuItem, AValue: bool)  =
  MenuItem_SetRadioItem(this.Instance, AValue)

proc ShortCut*(this: TMenuItem): TShortCut  =
  return MenuItem_GetShortCut(this.Instance)

proc `ShortCut=`*(this: TMenuItem, AValue: TShortCut)  =
  MenuItem_SetShortCut(this.Instance, AValue)

proc Visible*(this: TMenuItem): bool  =
  return MenuItem_GetVisible(this.Instance)

proc `Visible=`*(this: TMenuItem, AValue: bool)  =
  MenuItem_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TMenuItem, AEventId: TNotifyEvent)  =
  MenuItem_SetOnClick(this.Instance, AEventId)

proc `OnMeasureItem=`*(this: TMenuItem, AEventId: TMenuMeasureItemEvent)  =
  MenuItem_SetOnMeasureItem(this.Instance, AEventId)

proc ComponentCount*(this: TMenuItem): int32  =
  return MenuItem_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TMenuItem): int32  =
  return MenuItem_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TMenuItem, AValue: int32)  =
  MenuItem_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TMenuItem): TComponent  =
  return MenuItem_GetOwner(this.Instance).AsComponent

proc Name*(this: TMenuItem): string  =
  return $MenuItem_GetName(this.Instance)

proc `Name=`*(this: TMenuItem, AValue: string)  =
  MenuItem_SetName(this.Instance, AValue)

proc Tag*(this: TMenuItem): int  =
  return MenuItem_GetTag(this.Instance)

proc `Tag=`*(this: TMenuItem, AValue: int)  =
  MenuItem_SetTag(this.Instance, AValue)

proc Items*(this: TMenuItem, Index: int32): TMenuItem  =
  return MenuItem_GetItems(this.Instance, Index).AsMenuItem

proc Components*(this: TMenuItem, AIndex: int32): TComponent  =
  return MenuItem_GetComponents(this.Instance, AIndex).AsComponent

proc TMenuItemClass*(): TClass = MenuItem_StaticClassType()


proc ShortCutText*(this: TMenuItem): string  =
  return $MenuItem_GetShortCutText(this.Instance)

proc `ShortCutText=`*(this: TMenuItem, Value: string)  =
  MenuItem_SetShortCutText(this.Instance, Value)

#------------------------- TPicture -------------------------

proc Free*(this: TPicture) = defaultFree: Picture_Free

proc NewPicture*(): TPicture =
  new(result, Free)
  result.Instance = Picture_Create()

proc LoadFromFile*(this: TPicture, Filename: string)  =
  Picture_LoadFromFile(this.Instance, Filename)

proc SaveToFile*(this: TPicture, Filename: string)  =
  Picture_SaveToFile(this.Instance, Filename)

proc LoadFromStream*(this: TPicture, Stream: TStream)  =
  Picture_LoadFromStream(this.Instance, CheckPtr(Stream))

proc SaveToStream*(this: TPicture, Stream: TStream)  =
  Picture_SaveToStream(this.Instance, CheckPtr(Stream))

proc Assign*(this: TPicture, Source: TObject)  =
  Picture_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TPicture): string  =
  return $Picture_GetNamePath(this.Instance)

proc ClassType*(this: TPicture): TClass =
  return Picture_ClassType(this.Instance)

proc ClassName*(this: TPicture): string =
  return $Picture_ClassName(this.Instance)

proc InstanceSize*(this: TPicture): int32 =
  return Picture_InstanceSize(this.Instance)

proc InheritsFrom*(this: TPicture, AClass: TClass): bool =
  return Picture_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TPicture, Obj: TObject): bool =
  return Picture_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TPicture): int32 =
  return Picture_GetHashCode(this.Instance)

proc ToString*(this: TPicture): string =
  return $Picture_ToString(this.Instance)

proc Bitmap*(this: TPicture): TBitmap  =
  return Picture_GetBitmap(this.Instance).AsBitmap

proc `Bitmap=`*(this: TPicture, AValue: TBitmap)  =
  Picture_SetBitmap(this.Instance, CheckPtr(AValue))

proc Graphic*(this: TPicture): TGraphic  =
  return Picture_GetGraphic(this.Instance).AsGraphic

proc `Graphic=`*(this: TPicture, AValue: TGraphic)  =
  Picture_SetGraphic(this.Instance, CheckPtr(AValue))

proc Height*(this: TPicture): int32  =
  return Picture_GetHeight(this.Instance)

proc Icon*(this: TPicture): TIcon  =
  return Picture_GetIcon(this.Instance).AsIcon

proc `Icon=`*(this: TPicture, AValue: TIcon)  =
  Picture_SetIcon(this.Instance, CheckPtr(AValue))

proc Width*(this: TPicture): int32  =
  return Picture_GetWidth(this.Instance)

proc `OnChange=`*(this: TPicture, AEventId: TNotifyEvent)  =
  Picture_SetOnChange(this.Instance, AEventId)

proc TPictureClass*(): TClass = Picture_StaticClassType()


#------------------------- TListColumns -------------------------

proc Free*(this: TListColumns) = defaultFree: ListColumns_Free

proc NewListColumns*(AOwner: TListView): TListColumns =
  new(result, Free)
  result.Instance = ListColumns_Create(CheckPtr(AOwner))

proc Add*(this: TListColumns): TListColumn  =
  return ListColumns_Add(this.Instance).AsListColumn

proc Owner*(this: TListColumns): TListView  =
  return ListColumns_Owner(this.Instance).AsListView

proc Assign*(this: TListColumns, Source: TObject)  =
  ListColumns_Assign(this.Instance, CheckPtr(Source))

proc BeginUpdate*(this: TListColumns)  =
  ListColumns_BeginUpdate(this.Instance)

proc Clear*(this: TListColumns)  =
  ListColumns_Clear(this.Instance)

proc Delete*(this: TListColumns, Index: int32)  =
  ListColumns_Delete(this.Instance, Index)

proc EndUpdate*(this: TListColumns)  =
  ListColumns_EndUpdate(this.Instance)

proc FindItemID*(this: TListColumns, ID: int32): TCollectionItem  =
  return ListColumns_FindItemID(this.Instance, ID).AsCollectionItem

proc GetNamePath*(this: TListColumns): string  =
  return $ListColumns_GetNamePath(this.Instance)

proc Insert*(this: TListColumns, Index: int32): TCollectionItem  =
  return ListColumns_Insert(this.Instance, Index).AsCollectionItem

proc ClassType*(this: TListColumns): TClass =
  return ListColumns_ClassType(this.Instance)

proc ClassName*(this: TListColumns): string =
  return $ListColumns_ClassName(this.Instance)

proc InstanceSize*(this: TListColumns): int32 =
  return ListColumns_InstanceSize(this.Instance)

proc InheritsFrom*(this: TListColumns, AClass: TClass): bool =
  return ListColumns_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TListColumns, Obj: TObject): bool =
  return ListColumns_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TListColumns): int32 =
  return ListColumns_GetHashCode(this.Instance)

proc ToString*(this: TListColumns): string =
  return $ListColumns_ToString(this.Instance)

proc Count*(this: TListColumns): int32  =
  return ListColumns_GetCount(this.Instance)

proc Items*(this: TListColumns, Index: int32): TListColumn  =
  return ListColumns_GetItems(this.Instance, Index).AsListColumn

proc `Items=`*(this: TListColumns, Index: int32, AValue: TListColumn)  =
  ListColumns_SetItems(this.Instance, Index, CheckPtr(AValue))

proc TListColumnsClass*(): TClass = ListColumns_StaticClassType()


#------------------------- TListItems -------------------------

proc Free*(this: TListItems) = defaultFree: ListItems_Free

proc NewListItems*(AOwner: TListView): TListItems =
  new(result, Free)
  result.Instance = ListItems_Create(CheckPtr(AOwner))

proc Add*(this: TListItems): TListItem  =
  return ListItems_Add(this.Instance).AsListItem

proc Assign*(this: TListItems, Source: TObject)  =
  ListItems_Assign(this.Instance, CheckPtr(Source))

proc BeginUpdate*(this: TListItems)  =
  ListItems_BeginUpdate(this.Instance)

proc Clear*(this: TListItems)  =
  ListItems_Clear(this.Instance)

proc Delete*(this: TListItems, Index: int32)  =
  ListItems_Delete(this.Instance, Index)

proc EndUpdate*(this: TListItems)  =
  ListItems_EndUpdate(this.Instance)

proc IndexOf*(this: TListItems, Value: TListItem): int32  =
  return ListItems_IndexOf(this.Instance, CheckPtr(Value))

proc Insert*(this: TListItems, Index: int32): TListItem  =
  return ListItems_Insert(this.Instance, Index).AsListItem

proc GetNamePath*(this: TListItems): string  =
  return $ListItems_GetNamePath(this.Instance)

proc ClassType*(this: TListItems): TClass =
  return ListItems_ClassType(this.Instance)

proc ClassName*(this: TListItems): string =
  return $ListItems_ClassName(this.Instance)

proc InstanceSize*(this: TListItems): int32 =
  return ListItems_InstanceSize(this.Instance)

proc InheritsFrom*(this: TListItems, AClass: TClass): bool =
  return ListItems_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TListItems, Obj: TObject): bool =
  return ListItems_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TListItems): int32 =
  return ListItems_GetHashCode(this.Instance)

proc ToString*(this: TListItems): string =
  return $ListItems_ToString(this.Instance)

proc Count*(this: TListItems): int32  =
  return ListItems_GetCount(this.Instance)

proc `Count=`*(this: TListItems, AValue: int32)  =
  ListItems_SetCount(this.Instance, AValue)

proc Owner*(this: TListItems): TListView  =
  return ListItems_GetOwner(this.Instance).AsListView

proc Item*(this: TListItems, Index: int32): TListItem  =
  return ListItems_GetItem(this.Instance, Index).AsListItem

proc `Item=`*(this: TListItems, Index: int32, AValue: TListItem)  =
  ListItems_SetItem(this.Instance, Index, CheckPtr(AValue))

proc TListItemsClass*(): TClass = ListItems_StaticClassType()


#------------------------- TTreeNodes -------------------------

proc Free*(this: TTreeNodes) = defaultFree: TreeNodes_Free

proc NewTreeNodes*(AOwner: TTreeView): TTreeNodes =
  new(result, Free)
  result.Instance = TreeNodes_Create(CheckPtr(AOwner))

proc AddChildFirst*(this: TTreeNodes, Parent: TTreeNode, S: string): TTreeNode  =
  return TreeNodes_AddChildFirst(this.Instance, CheckPtr(Parent), S).AsTreeNode

proc AddChild*(this: TTreeNodes, Parent: TTreeNode, S: string): TTreeNode  =
  return TreeNodes_AddChild(this.Instance, CheckPtr(Parent), S).AsTreeNode

proc AddChildObjectFirst*(this: TTreeNodes, Parent: TTreeNode, S: string, Ptr: pointer): TTreeNode  =
  return TreeNodes_AddChildObjectFirst(this.Instance, CheckPtr(Parent), S, Ptr).AsTreeNode

proc AddChildObject*(this: TTreeNodes, Parent: TTreeNode, S: string, Ptr: pointer): TTreeNode  =
  return TreeNodes_AddChildObject(this.Instance, CheckPtr(Parent), S, Ptr).AsTreeNode

proc AddObjectFirst*(this: TTreeNodes, Sibling: TTreeNode, S: string, Ptr: pointer): TTreeNode  =
  return TreeNodes_AddObjectFirst(this.Instance, CheckPtr(Sibling), S, Ptr).AsTreeNode

proc AddObject*(this: TTreeNodes, Sibling: TTreeNode, S: string, Ptr: pointer): TTreeNode  =
  return TreeNodes_AddObject(this.Instance, CheckPtr(Sibling), S, Ptr).AsTreeNode

proc AddNode*(this: TTreeNodes, Node: TTreeNode, Relative: TTreeNode, S: string, Ptr: pointer, Method: TNodeAttachMode): TTreeNode  =
  return TreeNodes_AddNode(this.Instance, CheckPtr(Node), CheckPtr(Relative), S, Ptr, Method).AsTreeNode

proc AddFirst*(this: TTreeNodes, Sibling: TTreeNode, S: string): TTreeNode  =
  return TreeNodes_AddFirst(this.Instance, CheckPtr(Sibling), S).AsTreeNode

proc Add*(this: TTreeNodes, Sibling: TTreeNode, S: string): TTreeNode  =
  return TreeNodes_Add(this.Instance, CheckPtr(Sibling), S).AsTreeNode

proc Assign*(this: TTreeNodes, Source: TObject)  =
  TreeNodes_Assign(this.Instance, CheckPtr(Source))

proc BeginUpdate*(this: TTreeNodes)  =
  TreeNodes_BeginUpdate(this.Instance)

proc Clear*(this: TTreeNodes)  =
  TreeNodes_Clear(this.Instance)

proc Delete*(this: TTreeNodes, Node: TTreeNode)  =
  TreeNodes_Delete(this.Instance, CheckPtr(Node))

proc EndUpdate*(this: TTreeNodes)  =
  TreeNodes_EndUpdate(this.Instance)

proc GetFirstNode*(this: TTreeNodes): TTreeNode  =
  return TreeNodes_GetFirstNode(this.Instance).AsTreeNode

proc Insert*(this: TTreeNodes, Sibling: TTreeNode, S: string): TTreeNode  =
  return TreeNodes_Insert(this.Instance, CheckPtr(Sibling), S).AsTreeNode

proc InsertObject*(this: TTreeNodes, Sibling: TTreeNode, S: string, Ptr: pointer): TTreeNode  =
  return TreeNodes_InsertObject(this.Instance, CheckPtr(Sibling), S, Ptr).AsTreeNode

proc CustomSort*(this: TTreeNodes, SortProc: PFNTVCOMPARE, Data: int, ARecurse: bool): bool  =
  return TreeNodes_CustomSort(this.Instance, SortProc, Data, ARecurse)

proc GetNamePath*(this: TTreeNodes): string  =
  return $TreeNodes_GetNamePath(this.Instance)

proc ClassType*(this: TTreeNodes): TClass =
  return TreeNodes_ClassType(this.Instance)

proc ClassName*(this: TTreeNodes): string =
  return $TreeNodes_ClassName(this.Instance)

proc InstanceSize*(this: TTreeNodes): int32 =
  return TreeNodes_InstanceSize(this.Instance)

proc InheritsFrom*(this: TTreeNodes, AClass: TClass): bool =
  return TreeNodes_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TTreeNodes, Obj: TObject): bool =
  return TreeNodes_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TTreeNodes): int32 =
  return TreeNodes_GetHashCode(this.Instance)

proc ToString*(this: TTreeNodes): string =
  return $TreeNodes_ToString(this.Instance)

proc Count*(this: TTreeNodes): int32  =
  return TreeNodes_GetCount(this.Instance)

proc Owner*(this: TTreeNodes): TTreeView  =
  return TreeNodes_GetOwner(this.Instance).AsTreeView

proc Item*(this: TTreeNodes, Index: int32): TTreeNode  =
  return TreeNodes_GetItem(this.Instance, Index).AsTreeNode

proc TTreeNodesClass*(): TClass = TreeNodes_StaticClassType()


#------------------------- TListItem -------------------------

proc Free*(this: TListItem) = defaultFree: ListItem_Free

proc NewListItem*(AOwner: TListItems): TListItem =
  new(result, Free)
  result.Instance = ListItem_Create(CheckPtr(AOwner))

proc DisplayRectSubItem*(this: TListItem, subItem: int32, Code: TDisplayCode): TRect  =
  ListItem_DisplayRectSubItem(this.Instance, subItem, Code, result)

proc Assign*(this: TListItem, Source: TObject)  =
  ListItem_Assign(this.Instance, CheckPtr(Source))

proc Delete*(this: TListItem)  =
  ListItem_Delete(this.Instance)

proc DisplayRect*(this: TListItem, Code: TDisplayCode): TRect  =
  ListItem_DisplayRect(this.Instance, Code, result)

proc EditCaption*(this: TListItem): bool  =
  return ListItem_EditCaption(this.Instance)

proc MakeVisible*(this: TListItem, PartialOK: bool)  =
  ListItem_MakeVisible(this.Instance, PartialOK)

proc GetNamePath*(this: TListItem): string  =
  return $ListItem_GetNamePath(this.Instance)

proc ClassType*(this: TListItem): TClass =
  return ListItem_ClassType(this.Instance)

proc ClassName*(this: TListItem): string =
  return $ListItem_ClassName(this.Instance)

proc InstanceSize*(this: TListItem): int32 =
  return ListItem_InstanceSize(this.Instance)

proc InheritsFrom*(this: TListItem, AClass: TClass): bool =
  return ListItem_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TListItem, Obj: TObject): bool =
  return ListItem_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TListItem): int32 =
  return ListItem_GetHashCode(this.Instance)

proc ToString*(this: TListItem): string =
  return $ListItem_ToString(this.Instance)

proc DropTarget*(this: TListItem): bool  =
  return ListItem_GetDropTarget(this.Instance)

proc `DropTarget=`*(this: TListItem, AValue: bool)  =
  ListItem_SetDropTarget(this.Instance, AValue)

proc Caption*(this: TListItem): string  =
  return $ListItem_GetCaption(this.Instance)

proc `Caption=`*(this: TListItem, AValue: string)  =
  ListItem_SetCaption(this.Instance, AValue)

proc Checked*(this: TListItem): bool  =
  return ListItem_GetChecked(this.Instance)

proc `Checked=`*(this: TListItem, AValue: bool)  =
  ListItem_SetChecked(this.Instance, AValue)

proc Cut*(this: TListItem): bool  =
  return ListItem_GetCut(this.Instance)

proc `Cut=`*(this: TListItem, AValue: bool)  =
  ListItem_SetCut(this.Instance, AValue)

proc Data*(this: TListItem): pointer  =
  return ListItem_GetData(this.Instance)

proc `Data=`*(this: TListItem, AValue: pointer)  =
  ListItem_SetData(this.Instance, AValue)

proc Focused*(this: TListItem): bool  =
  return ListItem_GetFocused(this.Instance)

proc `Focused=`*(this: TListItem, AValue: bool)  =
  ListItem_SetFocused(this.Instance, AValue)

proc ImageIndex*(this: TListItem): int32  =
  return ListItem_GetImageIndex(this.Instance)

proc `ImageIndex=`*(this: TListItem, AValue: int32)  =
  ListItem_SetImageIndex(this.Instance, AValue)

proc Index*(this: TListItem): int32  =
  return ListItem_GetIndex(this.Instance)

proc Left*(this: TListItem): int32  =
  return ListItem_GetLeft(this.Instance)

proc `Left=`*(this: TListItem, AValue: int32)  =
  ListItem_SetLeft(this.Instance, AValue)

proc ListView*(this: TListItem): TListView  =
  return ListItem_GetListView(this.Instance).AsListView

proc Owner*(this: TListItem): TListItems  =
  return ListItem_GetOwner(this.Instance).AsListItems

proc Position*(this: TListItem): TPoint  =
  ListItem_GetPosition(this.Instance, result)

proc `Position=`*(this: TListItem, AValue: TPoint)  =
  var ps1 = AValue
  ListItem_SetPosition(this.Instance, ps1)

proc Selected*(this: TListItem): bool  =
  return ListItem_GetSelected(this.Instance)

proc `Selected=`*(this: TListItem, AValue: bool)  =
  ListItem_SetSelected(this.Instance, AValue)

proc StateIndex*(this: TListItem): int32  =
  return ListItem_GetStateIndex(this.Instance)

proc `StateIndex=`*(this: TListItem, AValue: int32)  =
  ListItem_SetStateIndex(this.Instance, AValue)

proc SubItems*(this: TListItem): TStrings  =
  return ListItem_GetSubItems(this.Instance).AsStrings

proc `SubItems=`*(this: TListItem, AValue: TStrings)  =
  ListItem_SetSubItems(this.Instance, CheckPtr(AValue))

proc Top*(this: TListItem): int32  =
  return ListItem_GetTop(this.Instance)

proc `Top=`*(this: TListItem, AValue: int32)  =
  ListItem_SetTop(this.Instance, AValue)

proc SubItemImages*(this: TListItem, Index: int32): int32  =
  return ListItem_GetSubItemImages(this.Instance, Index)

proc `SubItemImages=`*(this: TListItem, Index: int32, AValue: int32)  =
  ListItem_SetSubItemImages(this.Instance, Index, AValue)

proc TListItemClass*(): TClass = ListItem_StaticClassType()


#------------------------- TTreeNode -------------------------

proc Free*(this: TTreeNode) = defaultFree: TreeNode_Free

proc NewTreeNode*(AOwner: TTreeNodes): TTreeNode =
  new(result, Free)
  result.Instance = TreeNode_Create(CheckPtr(AOwner))

proc Assign*(this: TTreeNode, Source: TObject)  =
  TreeNode_Assign(this.Instance, CheckPtr(Source))

proc Collapse*(this: TTreeNode, Recurse: bool)  =
  TreeNode_Collapse(this.Instance, Recurse)

proc Delete*(this: TTreeNode)  =
  TreeNode_Delete(this.Instance)

proc DisplayRect*(this: TTreeNode, TextOnly: bool): TRect  =
  TreeNode_DisplayRect(this.Instance, TextOnly, result)

proc EditText*(this: TTreeNode): bool  =
  return TreeNode_EditText(this.Instance)

proc Expand*(this: TTreeNode, Recurse: bool)  =
  TreeNode_Expand(this.Instance, Recurse)

proc IndexOf*(this: TTreeNode, Value: TTreeNode): int32  =
  return TreeNode_IndexOf(this.Instance, CheckPtr(Value))

proc MakeVisible*(this: TTreeNode)  =
  TreeNode_MakeVisible(this.Instance)

proc MoveTo*(this: TTreeNode, Destination: TTreeNode, Mode: TNodeAttachMode)  =
  TreeNode_MoveTo(this.Instance, CheckPtr(Destination), Mode)

proc CustomSort*(this: TTreeNode, SortProc: PFNTVCOMPARE, Data: int, ARecurse: bool): bool  =
  return TreeNode_CustomSort(this.Instance, SortProc, Data, ARecurse)

proc GetNamePath*(this: TTreeNode): string  =
  return $TreeNode_GetNamePath(this.Instance)

proc ClassType*(this: TTreeNode): TClass =
  return TreeNode_ClassType(this.Instance)

proc ClassName*(this: TTreeNode): string =
  return $TreeNode_ClassName(this.Instance)

proc InstanceSize*(this: TTreeNode): int32 =
  return TreeNode_InstanceSize(this.Instance)

proc InheritsFrom*(this: TTreeNode, AClass: TClass): bool =
  return TreeNode_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TTreeNode, Obj: TObject): bool =
  return TreeNode_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TTreeNode): int32 =
  return TreeNode_GetHashCode(this.Instance)

proc ToString*(this: TTreeNode): string =
  return $TreeNode_ToString(this.Instance)

proc AbsoluteIndex*(this: TTreeNode): int32  =
  return TreeNode_GetAbsoluteIndex(this.Instance)

proc Count*(this: TTreeNode): int32  =
  return TreeNode_GetCount(this.Instance)

proc Cut*(this: TTreeNode): bool  =
  return TreeNode_GetCut(this.Instance)

proc `Cut=`*(this: TTreeNode, AValue: bool)  =
  TreeNode_SetCut(this.Instance, AValue)

proc Data*(this: TTreeNode): pointer  =
  return TreeNode_GetData(this.Instance)

proc `Data=`*(this: TTreeNode, AValue: pointer)  =
  TreeNode_SetData(this.Instance, AValue)

proc Deleting*(this: TTreeNode): bool  =
  return TreeNode_GetDeleting(this.Instance)

proc Focused*(this: TTreeNode): bool  =
  return TreeNode_GetFocused(this.Instance)

proc `Focused=`*(this: TTreeNode, AValue: bool)  =
  TreeNode_SetFocused(this.Instance, AValue)

proc DropTarget*(this: TTreeNode): bool  =
  return TreeNode_GetDropTarget(this.Instance)

proc `DropTarget=`*(this: TTreeNode, AValue: bool)  =
  TreeNode_SetDropTarget(this.Instance, AValue)

proc Selected*(this: TTreeNode): bool  =
  return TreeNode_GetSelected(this.Instance)

proc `Selected=`*(this: TTreeNode, AValue: bool)  =
  TreeNode_SetSelected(this.Instance, AValue)

proc Expanded*(this: TTreeNode): bool  =
  return TreeNode_GetExpanded(this.Instance)

proc `Expanded=`*(this: TTreeNode, AValue: bool)  =
  TreeNode_SetExpanded(this.Instance, AValue)

proc Handle*(this: TTreeNode): HWND  =
  return TreeNode_GetHandle(this.Instance)

proc HasChildren*(this: TTreeNode): bool  =
  return TreeNode_GetHasChildren(this.Instance)

proc `HasChildren=`*(this: TTreeNode, AValue: bool)  =
  TreeNode_SetHasChildren(this.Instance, AValue)

proc ImageIndex*(this: TTreeNode): int32  =
  return TreeNode_GetImageIndex(this.Instance)

proc `ImageIndex=`*(this: TTreeNode, AValue: int32)  =
  TreeNode_SetImageIndex(this.Instance, AValue)

proc Index*(this: TTreeNode): int32  =
  return TreeNode_GetIndex(this.Instance)

proc IsVisible*(this: TTreeNode): bool  =
  return TreeNode_GetIsVisible(this.Instance)

proc Level*(this: TTreeNode): int32  =
  return TreeNode_GetLevel(this.Instance)

proc Owner*(this: TTreeNode): TTreeNodes  =
  return TreeNode_GetOwner(this.Instance).AsTreeNodes

proc Parent*(this: TTreeNode): TTreeNode  =
  return TreeNode_GetParent(this.Instance).AsTreeNode

proc SelectedIndex*(this: TTreeNode): int32  =
  return TreeNode_GetSelectedIndex(this.Instance)

proc `SelectedIndex=`*(this: TTreeNode, AValue: int32)  =
  TreeNode_SetSelectedIndex(this.Instance, AValue)

proc StateIndex*(this: TTreeNode): int32  =
  return TreeNode_GetStateIndex(this.Instance)

proc `StateIndex=`*(this: TTreeNode, AValue: int32)  =
  TreeNode_SetStateIndex(this.Instance, AValue)

proc Text*(this: TTreeNode): string  =
  return $TreeNode_GetText(this.Instance)

proc `Text=`*(this: TTreeNode, AValue: string)  =
  TreeNode_SetText(this.Instance, AValue)

proc TreeView*(this: TTreeNode): TTreeView  =
  return TreeNode_GetTreeView(this.Instance).AsTreeView

proc Item*(this: TTreeNode, Index: int32): TTreeNode  =
  return TreeNode_GetItem(this.Instance, Index).AsTreeNode

proc `Item=`*(this: TTreeNode, Index: int32, AValue: TTreeNode)  =
  TreeNode_SetItem(this.Instance, Index, CheckPtr(AValue))

proc TTreeNodeClass*(): TClass = TreeNode_StaticClassType()


#------------------------- TPageControl -------------------------

proc Free*(this: TPageControl) = defaultFree: PageControl_Free

proc NewPageControl*(AOwner: TComponent): TPageControl =
  new(result)
  result.Instance = PageControl_Create(CheckPtr(AOwner))

proc SelectNextPage*(this: TPageControl, GoForward: bool, CheckTabVisible: bool)  =
  PageControl_SelectNextPage(this.Instance, GoForward, CheckTabVisible)

proc TabRect*(this: TPageControl, Index: int32): TRect  =
  PageControl_TabRect(this.Instance, Index, result)

proc CanFocus*(this: TPageControl): bool =
  return PageControl_CanFocus(this.Instance)

proc ContainsControl*(this: TPageControl, Control: TControl): bool =
  return PageControl_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TPageControl, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return PageControl_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TPageControl) =
  PageControl_DisableAlign(this.Instance)

proc EnableAlign*(this: TPageControl) =
  PageControl_EnableAlign(this.Instance)

proc FindChildControl*(this: TPageControl, ControlName: string): TControl =
  return PageControl_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TPageControl, AllLevels: bool) =
  PageControl_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TPageControl): bool =
  return PageControl_Focused(this.Instance)

proc HandleAllocated*(this: TPageControl): bool =
  return PageControl_HandleAllocated(this.Instance)

proc InsertControl*(this: TPageControl, AControl: TControl) =
  PageControl_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TPageControl) =
  PageControl_Invalidate(this.Instance)

proc PaintTo*(this: TPageControl, DC: HDC, X: int32, Y: int32) =
  PageControl_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TPageControl, AControl: TControl) =
  PageControl_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TPageControl) =
  PageControl_Realign(this.Instance)

proc Repaint*(this: TPageControl) =
  PageControl_Repaint(this.Instance)

proc ScaleBy*(this: TPageControl, M: int32, D: int32) =
  PageControl_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TPageControl, DeltaX: int32, DeltaY: int32) =
  PageControl_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TPageControl, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  PageControl_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TPageControl) =
  PageControl_SetFocus(this.Instance)

proc Update*(this: TPageControl) =
  PageControl_Update(this.Instance)

proc BringToFront*(this: TPageControl) =
  PageControl_BringToFront(this.Instance)

proc ClientToScreen*(this: TPageControl, Point: TPoint): TPoint =
  var ps1 = Point
  PageControl_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TPageControl, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  PageControl_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TPageControl): bool =
  return PageControl_Dragging(this.Instance)

proc HasParent*(this: TPageControl): bool =
  return PageControl_HasParent(this.Instance)

proc Hide*(this: TPageControl) =
  PageControl_Hide(this.Instance)

proc Perform*(this: TPageControl, Msg: uint32, WParam: uint, LParam: int): int =
  return PageControl_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TPageControl) =
  PageControl_Refresh(this.Instance)

proc ScreenToClient*(this: TPageControl, Point: TPoint): TPoint =
  var ps1 = Point
  PageControl_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TPageControl, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  PageControl_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TPageControl) =
  PageControl_SendToBack(this.Instance)

proc Show*(this: TPageControl) =
  PageControl_Show(this.Instance)

proc GetTextBuf*(this: TPageControl, Buffer: string, BufSize: int32): int32 =
  return PageControl_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TPageControl): int32 =
  return PageControl_GetTextLen(this.Instance)

proc SetTextBuf*(this: TPageControl, Buffer: string) =
  PageControl_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TPageControl, AName: string): TComponent =
  return PageControl_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TPageControl): string =
  return $PageControl_GetNamePath(this.Instance)

proc Assign*(this: TPageControl, Source: TObject) =
  PageControl_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TPageControl): TClass =
  return PageControl_ClassType(this.Instance)

proc ClassName*(this: TPageControl): string =
  return $PageControl_ClassName(this.Instance)

proc InstanceSize*(this: TPageControl): int32 =
  return PageControl_InstanceSize(this.Instance)

proc InheritsFrom*(this: TPageControl, AClass: TClass): bool =
  return PageControl_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TPageControl, Obj: TObject): bool =
  return PageControl_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TPageControl): int32 =
  return PageControl_GetHashCode(this.Instance)

proc ToString*(this: TPageControl): string =
  return $PageControl_ToString(this.Instance)

proc AnchorToNeighbour*(this: TPageControl, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  PageControl_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TPageControl, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  PageControl_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TPageControl, ASibling: TControl) =
  PageControl_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TPageControl, ASibling: TControl) =
  PageControl_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TPageControl, ASide: TAnchorKind, ASibling: TControl) =
  PageControl_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TPageControl, ATheAlign: TAlign, ASpace: int32) =
  PageControl_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TPageControl, ASpace: int32) =
  PageControl_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TPageControl, ASize: int32): int32 =
  return PageControl_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TPageControl, ASize: int32): int32 =
  return PageControl_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TPageControl, ASize: int32): int32 =
  return PageControl_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TPageControl, ASize: int32): int32 =
  return PageControl_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TPageControl, ASize: int32): int32 =
  return PageControl_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TPageControl, ASize: int32): int32 =
  return PageControl_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TPageControl, ASize: int32): int32 =
  return PageControl_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TPageControl, ASize: int32): int32 =
  return PageControl_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TPageControl, ASize: int32): int32 =
  return PageControl_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TPageControl, ASize: int32): int32 =
  return PageControl_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TPageControl, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  PageControl_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TPageControl, ADesignTimePPI: int32) =
  PageControl_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TPageControl, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  PageControl_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Options*(this: TPageControl): TCTabControlOptions  =
  return PageControl_GetOptions(this.Instance)

proc `Options=`*(this: TPageControl, AValue: TCTabControlOptions)  =
  PageControl_SetOptions(this.Instance, AValue)

proc ActivePageIndex*(this: TPageControl): int32  =
  return PageControl_GetActivePageIndex(this.Instance)

proc `ActivePageIndex=`*(this: TPageControl, AValue: int32)  =
  PageControl_SetActivePageIndex(this.Instance, AValue)

proc PageCount*(this: TPageControl): int32  =
  return PageControl_GetPageCount(this.Instance)

proc Align*(this: TPageControl): TAlign  =
  return PageControl_GetAlign(this.Instance)

proc `Align=`*(this: TPageControl, AValue: TAlign)  =
  PageControl_SetAlign(this.Instance, AValue)

proc Anchors*(this: TPageControl): TAnchors  =
  return PageControl_GetAnchors(this.Instance)

proc `Anchors=`*(this: TPageControl, AValue: TAnchors)  =
  PageControl_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TPageControl): TBiDiMode  =
  return PageControl_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TPageControl, AValue: TBiDiMode)  =
  PageControl_SetBiDiMode(this.Instance, AValue)

proc Constraints*(this: TPageControl): TSizeConstraints  =
  return PageControl_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TPageControl, AValue: TSizeConstraints)  =
  PageControl_SetConstraints(this.Instance, CheckPtr(AValue))

proc DockSite*(this: TPageControl): bool  =
  return PageControl_GetDockSite(this.Instance)

proc `DockSite=`*(this: TPageControl, AValue: bool)  =
  PageControl_SetDockSite(this.Instance, AValue)

proc DoubleBuffered*(this: TPageControl): bool  =
  return PageControl_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TPageControl, AValue: bool)  =
  PageControl_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TPageControl): TCursor  =
  return PageControl_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TPageControl, AValue: TCursor)  =
  PageControl_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TPageControl): TDragKind  =
  return PageControl_GetDragKind(this.Instance)

proc `DragKind=`*(this: TPageControl, AValue: TDragKind)  =
  PageControl_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TPageControl): TDragMode  =
  return PageControl_GetDragMode(this.Instance)

proc `DragMode=`*(this: TPageControl, AValue: TDragMode)  =
  PageControl_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TPageControl): bool  =
  return PageControl_GetEnabled(this.Instance)

proc `Enabled=`*(this: TPageControl, AValue: bool)  =
  PageControl_SetEnabled(this.Instance, AValue)

proc Font*(this: TPageControl): TFont  =
  return PageControl_GetFont(this.Instance).AsFont

proc `Font=`*(this: TPageControl, AValue: TFont)  =
  PageControl_SetFont(this.Instance, CheckPtr(AValue))

proc Images*(this: TPageControl): TImageList  =
  return PageControl_GetImages(this.Instance).AsImageList

proc `Images=`*(this: TPageControl, AValue: TImageList)  =
  PageControl_SetImages(this.Instance, CheckPtr(AValue))

proc MultiLine*(this: TPageControl): bool  =
  return PageControl_GetMultiLine(this.Instance)

proc `MultiLine=`*(this: TPageControl, AValue: bool)  =
  PageControl_SetMultiLine(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TPageControl): bool  =
  return PageControl_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TPageControl, AValue: bool)  =
  PageControl_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TPageControl): bool  =
  return PageControl_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TPageControl, AValue: bool)  =
  PageControl_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TPageControl): bool  =
  return PageControl_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TPageControl, AValue: bool)  =
  PageControl_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TPageControl): TPopupMenu  =
  return PageControl_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TPageControl, AValue: TPopupMenu)  =
  PageControl_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TPageControl): bool  =
  return PageControl_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TPageControl, AValue: bool)  =
  PageControl_SetShowHint(this.Instance, AValue)

proc TabHeight*(this: TPageControl): int16  =
  return PageControl_GetTabHeight(this.Instance)

proc `TabHeight=`*(this: TPageControl, AValue: int16)  =
  PageControl_SetTabHeight(this.Instance, AValue)

proc TabIndex*(this: TPageControl): int32  =
  return PageControl_GetTabIndex(this.Instance)

proc `TabIndex=`*(this: TPageControl, AValue: int32)  =
  PageControl_SetTabIndex(this.Instance, AValue)

proc TabOrder*(this: TPageControl): TTabOrder  =
  return PageControl_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TPageControl, AValue: TTabOrder)  =
  PageControl_SetTabOrder(this.Instance, AValue)

proc TabPosition*(this: TPageControl): TTabPosition  =
  return PageControl_GetTabPosition(this.Instance)

proc `TabPosition=`*(this: TPageControl, AValue: TTabPosition)  =
  PageControl_SetTabPosition(this.Instance, AValue)

proc TabStop*(this: TPageControl): bool  =
  return PageControl_GetTabStop(this.Instance)

proc `TabStop=`*(this: TPageControl, AValue: bool)  =
  PageControl_SetTabStop(this.Instance, AValue)

proc TabWidth*(this: TPageControl): int16  =
  return PageControl_GetTabWidth(this.Instance)

proc `TabWidth=`*(this: TPageControl, AValue: int16)  =
  PageControl_SetTabWidth(this.Instance, AValue)

proc Visible*(this: TPageControl): bool  =
  return PageControl_GetVisible(this.Instance)

proc `Visible=`*(this: TPageControl, AValue: bool)  =
  PageControl_SetVisible(this.Instance, AValue)

proc `OnChange=`*(this: TPageControl, AEventId: TNotifyEvent)  =
  PageControl_SetOnChange(this.Instance, AEventId)

proc `OnChanging=`*(this: TPageControl, AEventId: TTabChangingEvent)  =
  PageControl_SetOnChanging(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TPageControl, AEventId: TContextPopupEvent)  =
  PageControl_SetOnContextPopup(this.Instance, AEventId)

proc `OnDockDrop=`*(this: TPageControl, AEventId: TDockDropEvent)  =
  PageControl_SetOnDockDrop(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TPageControl, AEventId: TDragDropEvent)  =
  PageControl_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TPageControl, AEventId: TDragOverEvent)  =
  PageControl_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDock=`*(this: TPageControl, AEventId: TEndDragEvent)  =
  PageControl_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TPageControl, AEventId: TEndDragEvent)  =
  PageControl_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TPageControl, AEventId: TNotifyEvent)  =
  PageControl_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TPageControl, AEventId: TNotifyEvent)  =
  PageControl_SetOnExit(this.Instance, AEventId)

proc `OnGetSiteInfo=`*(this: TPageControl, AEventId: TGetSiteInfoEvent)  =
  PageControl_SetOnGetSiteInfo(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TPageControl, AEventId: TMouseEvent)  =
  PageControl_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TPageControl, AEventId: TNotifyEvent)  =
  PageControl_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TPageControl, AEventId: TNotifyEvent)  =
  PageControl_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TPageControl, AEventId: TMouseMoveEvent)  =
  PageControl_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TPageControl, AEventId: TMouseEvent)  =
  PageControl_SetOnMouseUp(this.Instance, AEventId)

proc `OnResize=`*(this: TPageControl, AEventId: TNotifyEvent)  =
  PageControl_SetOnResize(this.Instance, AEventId)

proc `OnStartDock=`*(this: TPageControl, AEventId: TStartDockEvent)  =
  PageControl_SetOnStartDock(this.Instance, AEventId)

proc `OnUnDock=`*(this: TPageControl, AEventId: TUnDockEvent)  =
  PageControl_SetOnUnDock(this.Instance, AEventId)

proc DockClientCount*(this: TPageControl): int32  =
  return PageControl_GetDockClientCount(this.Instance)

proc MouseInClient*(this: TPageControl): bool  =
  return PageControl_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TPageControl): int32  =
  return PageControl_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TPageControl): TBrush  =
  return PageControl_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TPageControl): int32  =
  return PageControl_GetControlCount(this.Instance)

proc Handle*(this: TPageControl): HWND  =
  return PageControl_GetHandle(this.Instance)

proc ParentWindow*(this: TPageControl): HWND  =
  return PageControl_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TPageControl, AValue: HWND)  =
  PageControl_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TPageControl): bool  =
  return PageControl_GetShowing(this.Instance)

proc UseDockManager*(this: TPageControl): bool  =
  return PageControl_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TPageControl, AValue: bool)  =
  PageControl_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TPageControl): TAction  =
  return PageControl_GetAction(this.Instance).AsAction

proc `Action=`*(this: TPageControl, AValue: TAction)  =
  PageControl_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TPageControl): TRect  =
  PageControl_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TPageControl, AValue: TRect)  =
  var ps1 = AValue
  PageControl_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TPageControl): int32  =
  return PageControl_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TPageControl, AValue: int32)  =
  PageControl_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TPageControl): TPoint  =
  PageControl_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TPageControl): TRect  =
  PageControl_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TPageControl): int32  =
  return PageControl_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TPageControl, AValue: int32)  =
  PageControl_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TPageControl): TControlState  =
  return PageControl_GetControlState(this.Instance)

proc `ControlState=`*(this: TPageControl, AValue: TControlState)  =
  PageControl_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TPageControl): TControlStyle  =
  return PageControl_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TPageControl, AValue: TControlStyle)  =
  PageControl_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TPageControl): bool  =
  return PageControl_GetFloating(this.Instance)

proc Parent*(this: TPageControl): TWinControl  =
  return PageControl_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TPageControl, AValue: TWinControl)  =
  PageControl_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TPageControl): int32  =
  return PageControl_GetLeft(this.Instance)

proc `Left=`*(this: TPageControl, AValue: int32)  =
  PageControl_SetLeft(this.Instance, AValue)

proc Top*(this: TPageControl): int32  =
  return PageControl_GetTop(this.Instance)

proc `Top=`*(this: TPageControl, AValue: int32)  =
  PageControl_SetTop(this.Instance, AValue)

proc Width*(this: TPageControl): int32  =
  return PageControl_GetWidth(this.Instance)

proc `Width=`*(this: TPageControl, AValue: int32)  =
  PageControl_SetWidth(this.Instance, AValue)

proc Height*(this: TPageControl): int32  =
  return PageControl_GetHeight(this.Instance)

proc `Height=`*(this: TPageControl, AValue: int32)  =
  PageControl_SetHeight(this.Instance, AValue)

proc Cursor*(this: TPageControl): TCursor  =
  return PageControl_GetCursor(this.Instance)

proc `Cursor=`*(this: TPageControl, AValue: TCursor)  =
  PageControl_SetCursor(this.Instance, AValue)

proc Hint*(this: TPageControl): string  =
  return $PageControl_GetHint(this.Instance)

proc `Hint=`*(this: TPageControl, AValue: string)  =
  PageControl_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TPageControl): int32  =
  return PageControl_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TPageControl): int32  =
  return PageControl_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TPageControl, AValue: int32)  =
  PageControl_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TPageControl): TComponent  =
  return PageControl_GetOwner(this.Instance).AsComponent

proc Name*(this: TPageControl): string  =
  return $PageControl_GetName(this.Instance)

proc `Name=`*(this: TPageControl, AValue: string)  =
  PageControl_SetName(this.Instance, AValue)

proc Tag*(this: TPageControl): int  =
  return PageControl_GetTag(this.Instance)

proc `Tag=`*(this: TPageControl, AValue: int)  =
  PageControl_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TPageControl): TAnchorSide  =
  return PageControl_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TPageControl, AValue: TAnchorSide)  =
  PageControl_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TPageControl): TAnchorSide  =
  return PageControl_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TPageControl, AValue: TAnchorSide)  =
  PageControl_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TPageControl): TAnchorSide  =
  return PageControl_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TPageControl, AValue: TAnchorSide)  =
  PageControl_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TPageControl): TAnchorSide  =
  return PageControl_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TPageControl, AValue: TAnchorSide)  =
  PageControl_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TPageControl): TControlChildSizing  =
  return PageControl_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TPageControl, AValue: TControlChildSizing)  =
  PageControl_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TPageControl): TControlBorderSpacing  =
  return PageControl_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TPageControl, AValue: TControlBorderSpacing)  =
  PageControl_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Pages*(this: TPageControl, Index: int32): TTabSheet  =
  return PageControl_GetPages(this.Instance, Index).AsTabSheet

proc DockClients*(this: TPageControl, Index: int32): TControl  =
  return PageControl_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TPageControl, Index: int32): TControl  =
  return PageControl_GetControls(this.Instance, Index).AsControl

proc Components*(this: TPageControl, AIndex: int32): TComponent  =
  return PageControl_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TPageControl, AKind: TAnchorKind): TAnchorSide  =
  return PageControl_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TPageControlClass*(): TClass = PageControl_StaticClassType()


#------------------------- TTabSheet -------------------------

proc Free*(this: TTabSheet) = defaultFree: TabSheet_Free

proc NewTabSheet*(AOwner: TComponent): TTabSheet =
  new(result)
  result.Instance = TabSheet_Create(CheckPtr(AOwner))

proc CanFocus*(this: TTabSheet): bool =
  return TabSheet_CanFocus(this.Instance)

proc ContainsControl*(this: TTabSheet, Control: TControl): bool =
  return TabSheet_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TTabSheet, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return TabSheet_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TTabSheet) =
  TabSheet_DisableAlign(this.Instance)

proc EnableAlign*(this: TTabSheet) =
  TabSheet_EnableAlign(this.Instance)

proc FindChildControl*(this: TTabSheet, ControlName: string): TControl =
  return TabSheet_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TTabSheet, AllLevels: bool) =
  TabSheet_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TTabSheet): bool =
  return TabSheet_Focused(this.Instance)

proc HandleAllocated*(this: TTabSheet): bool =
  return TabSheet_HandleAllocated(this.Instance)

proc InsertControl*(this: TTabSheet, AControl: TControl) =
  TabSheet_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TTabSheet) =
  TabSheet_Invalidate(this.Instance)

proc PaintTo*(this: TTabSheet, DC: HDC, X: int32, Y: int32) =
  TabSheet_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TTabSheet, AControl: TControl) =
  TabSheet_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TTabSheet) =
  TabSheet_Realign(this.Instance)

proc Repaint*(this: TTabSheet) =
  TabSheet_Repaint(this.Instance)

proc ScaleBy*(this: TTabSheet, M: int32, D: int32) =
  TabSheet_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TTabSheet, DeltaX: int32, DeltaY: int32) =
  TabSheet_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TTabSheet, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  TabSheet_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TTabSheet) =
  TabSheet_SetFocus(this.Instance)

proc Update*(this: TTabSheet) =
  TabSheet_Update(this.Instance)

proc BringToFront*(this: TTabSheet) =
  TabSheet_BringToFront(this.Instance)

proc ClientToScreen*(this: TTabSheet, Point: TPoint): TPoint =
  var ps1 = Point
  TabSheet_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TTabSheet, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  TabSheet_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TTabSheet): bool =
  return TabSheet_Dragging(this.Instance)

proc HasParent*(this: TTabSheet): bool =
  return TabSheet_HasParent(this.Instance)

proc Hide*(this: TTabSheet) =
  TabSheet_Hide(this.Instance)

proc Perform*(this: TTabSheet, Msg: uint32, WParam: uint, LParam: int): int =
  return TabSheet_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TTabSheet) =
  TabSheet_Refresh(this.Instance)

proc ScreenToClient*(this: TTabSheet, Point: TPoint): TPoint =
  var ps1 = Point
  TabSheet_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TTabSheet, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  TabSheet_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TTabSheet) =
  TabSheet_SendToBack(this.Instance)

proc Show*(this: TTabSheet) =
  TabSheet_Show(this.Instance)

proc GetTextBuf*(this: TTabSheet, Buffer: string, BufSize: int32): int32 =
  return TabSheet_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TTabSheet): int32 =
  return TabSheet_GetTextLen(this.Instance)

proc SetTextBuf*(this: TTabSheet, Buffer: string) =
  TabSheet_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TTabSheet, AName: string): TComponent =
  return TabSheet_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TTabSheet): string =
  return $TabSheet_GetNamePath(this.Instance)

proc Assign*(this: TTabSheet, Source: TObject) =
  TabSheet_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TTabSheet): TClass =
  return TabSheet_ClassType(this.Instance)

proc ClassName*(this: TTabSheet): string =
  return $TabSheet_ClassName(this.Instance)

proc InstanceSize*(this: TTabSheet): int32 =
  return TabSheet_InstanceSize(this.Instance)

proc InheritsFrom*(this: TTabSheet, AClass: TClass): bool =
  return TabSheet_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TTabSheet, Obj: TObject): bool =
  return TabSheet_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TTabSheet): int32 =
  return TabSheet_GetHashCode(this.Instance)

proc ToString*(this: TTabSheet): string =
  return $TabSheet_ToString(this.Instance)

proc AnchorToNeighbour*(this: TTabSheet, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  TabSheet_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TTabSheet, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  TabSheet_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TTabSheet, ASibling: TControl) =
  TabSheet_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TTabSheet, ASibling: TControl) =
  TabSheet_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TTabSheet, ASide: TAnchorKind, ASibling: TControl) =
  TabSheet_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TTabSheet, ATheAlign: TAlign, ASpace: int32) =
  TabSheet_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TTabSheet, ASpace: int32) =
  TabSheet_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TTabSheet, ASize: int32): int32 =
  return TabSheet_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TTabSheet, ASize: int32): int32 =
  return TabSheet_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TTabSheet, ASize: int32): int32 =
  return TabSheet_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TTabSheet, ASize: int32): int32 =
  return TabSheet_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TTabSheet, ASize: int32): int32 =
  return TabSheet_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TTabSheet, ASize: int32): int32 =
  return TabSheet_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TTabSheet, ASize: int32): int32 =
  return TabSheet_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TTabSheet, ASize: int32): int32 =
  return TabSheet_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TTabSheet, ASize: int32): int32 =
  return TabSheet_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TTabSheet, ASize: int32): int32 =
  return TabSheet_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TTabSheet, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  TabSheet_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TTabSheet, ADesignTimePPI: int32) =
  TabSheet_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TTabSheet, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  TabSheet_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc PageControl*(this: TTabSheet): TPageControl  =
  return TabSheet_GetPageControl(this.Instance).AsPageControl

proc `PageControl=`*(this: TTabSheet, AValue: TPageControl)  =
  TabSheet_SetPageControl(this.Instance, CheckPtr(AValue))

proc TabIndex*(this: TTabSheet): int32  =
  return TabSheet_GetTabIndex(this.Instance)

proc BorderWidth*(this: TTabSheet): int32  =
  return TabSheet_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TTabSheet, AValue: int32)  =
  TabSheet_SetBorderWidth(this.Instance, AValue)

proc Caption*(this: TTabSheet): string  =
  return $TabSheet_GetCaption(this.Instance)

proc `Caption=`*(this: TTabSheet, AValue: string)  =
  TabSheet_SetCaption(this.Instance, AValue)

proc DoubleBuffered*(this: TTabSheet): bool  =
  return TabSheet_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TTabSheet, AValue: bool)  =
  TabSheet_SetDoubleBuffered(this.Instance, AValue)

proc Enabled*(this: TTabSheet): bool  =
  return TabSheet_GetEnabled(this.Instance)

proc `Enabled=`*(this: TTabSheet, AValue: bool)  =
  TabSheet_SetEnabled(this.Instance, AValue)

proc Font*(this: TTabSheet): TFont  =
  return TabSheet_GetFont(this.Instance).AsFont

proc `Font=`*(this: TTabSheet, AValue: TFont)  =
  TabSheet_SetFont(this.Instance, CheckPtr(AValue))

proc Height*(this: TTabSheet): int32  =
  return TabSheet_GetHeight(this.Instance)

proc `Height=`*(this: TTabSheet, AValue: int32)  =
  TabSheet_SetHeight(this.Instance, AValue)

proc ImageIndex*(this: TTabSheet): int32  =
  return TabSheet_GetImageIndex(this.Instance)

proc `ImageIndex=`*(this: TTabSheet, AValue: int32)  =
  TabSheet_SetImageIndex(this.Instance, AValue)

proc Left*(this: TTabSheet): int32  =
  return TabSheet_GetLeft(this.Instance)

proc `Left=`*(this: TTabSheet, AValue: int32)  =
  TabSheet_SetLeft(this.Instance, AValue)

proc Constraints*(this: TTabSheet): TSizeConstraints  =
  return TabSheet_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TTabSheet, AValue: TSizeConstraints)  =
  TabSheet_SetConstraints(this.Instance, CheckPtr(AValue))

proc PageIndex*(this: TTabSheet): int32  =
  return TabSheet_GetPageIndex(this.Instance)

proc `PageIndex=`*(this: TTabSheet, AValue: int32)  =
  TabSheet_SetPageIndex(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TTabSheet): bool  =
  return TabSheet_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TTabSheet, AValue: bool)  =
  TabSheet_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TTabSheet): bool  =
  return TabSheet_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TTabSheet, AValue: bool)  =
  TabSheet_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TTabSheet): bool  =
  return TabSheet_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TTabSheet, AValue: bool)  =
  TabSheet_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TTabSheet): TPopupMenu  =
  return TabSheet_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TTabSheet, AValue: TPopupMenu)  =
  TabSheet_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TTabSheet): bool  =
  return TabSheet_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TTabSheet, AValue: bool)  =
  TabSheet_SetShowHint(this.Instance, AValue)

proc TabVisible*(this: TTabSheet): bool  =
  return TabSheet_GetTabVisible(this.Instance)

proc `TabVisible=`*(this: TTabSheet, AValue: bool)  =
  TabSheet_SetTabVisible(this.Instance, AValue)

proc Top*(this: TTabSheet): int32  =
  return TabSheet_GetTop(this.Instance)

proc `Top=`*(this: TTabSheet, AValue: int32)  =
  TabSheet_SetTop(this.Instance, AValue)

proc Visible*(this: TTabSheet): bool  =
  return TabSheet_GetVisible(this.Instance)

proc `Visible=`*(this: TTabSheet, AValue: bool)  =
  TabSheet_SetVisible(this.Instance, AValue)

proc Width*(this: TTabSheet): int32  =
  return TabSheet_GetWidth(this.Instance)

proc `Width=`*(this: TTabSheet, AValue: int32)  =
  TabSheet_SetWidth(this.Instance, AValue)

proc `OnContextPopup=`*(this: TTabSheet, AEventId: TContextPopupEvent)  =
  TabSheet_SetOnContextPopup(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TTabSheet, AEventId: TDragDropEvent)  =
  TabSheet_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TTabSheet, AEventId: TDragOverEvent)  =
  TabSheet_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TTabSheet, AEventId: TEndDragEvent)  =
  TabSheet_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TTabSheet, AEventId: TNotifyEvent)  =
  TabSheet_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TTabSheet, AEventId: TNotifyEvent)  =
  TabSheet_SetOnExit(this.Instance, AEventId)

proc `OnHide=`*(this: TTabSheet, AEventId: TNotifyEvent)  =
  TabSheet_SetOnHide(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TTabSheet, AEventId: TMouseEvent)  =
  TabSheet_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TTabSheet, AEventId: TNotifyEvent)  =
  TabSheet_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TTabSheet, AEventId: TNotifyEvent)  =
  TabSheet_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TTabSheet, AEventId: TMouseMoveEvent)  =
  TabSheet_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TTabSheet, AEventId: TMouseEvent)  =
  TabSheet_SetOnMouseUp(this.Instance, AEventId)

proc `OnResize=`*(this: TTabSheet, AEventId: TNotifyEvent)  =
  TabSheet_SetOnResize(this.Instance, AEventId)

proc `OnShow=`*(this: TTabSheet, AEventId: TNotifyEvent)  =
  TabSheet_SetOnShow(this.Instance, AEventId)

proc DockClientCount*(this: TTabSheet): int32  =
  return TabSheet_GetDockClientCount(this.Instance)

proc DockSite*(this: TTabSheet): bool  =
  return TabSheet_GetDockSite(this.Instance)

proc `DockSite=`*(this: TTabSheet, AValue: bool)  =
  TabSheet_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TTabSheet): bool  =
  return TabSheet_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TTabSheet): int32  =
  return TabSheet_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TTabSheet): TBrush  =
  return TabSheet_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TTabSheet): int32  =
  return TabSheet_GetControlCount(this.Instance)

proc Handle*(this: TTabSheet): HWND  =
  return TabSheet_GetHandle(this.Instance)

proc ParentWindow*(this: TTabSheet): HWND  =
  return TabSheet_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TTabSheet, AValue: HWND)  =
  TabSheet_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TTabSheet): bool  =
  return TabSheet_GetShowing(this.Instance)

proc TabOrder*(this: TTabSheet): TTabOrder  =
  return TabSheet_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TTabSheet, AValue: TTabOrder)  =
  TabSheet_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TTabSheet): bool  =
  return TabSheet_GetTabStop(this.Instance)

proc `TabStop=`*(this: TTabSheet, AValue: bool)  =
  TabSheet_SetTabStop(this.Instance, AValue)

proc UseDockManager*(this: TTabSheet): bool  =
  return TabSheet_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TTabSheet, AValue: bool)  =
  TabSheet_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TTabSheet): TAction  =
  return TabSheet_GetAction(this.Instance).AsAction

proc `Action=`*(this: TTabSheet, AValue: TAction)  =
  TabSheet_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TTabSheet): TAlign  =
  return TabSheet_GetAlign(this.Instance)

proc `Align=`*(this: TTabSheet, AValue: TAlign)  =
  TabSheet_SetAlign(this.Instance, AValue)

proc Anchors*(this: TTabSheet): TAnchors  =
  return TabSheet_GetAnchors(this.Instance)

proc `Anchors=`*(this: TTabSheet, AValue: TAnchors)  =
  TabSheet_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TTabSheet): TBiDiMode  =
  return TabSheet_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TTabSheet, AValue: TBiDiMode)  =
  TabSheet_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TTabSheet): TRect  =
  TabSheet_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TTabSheet, AValue: TRect)  =
  var ps1 = AValue
  TabSheet_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TTabSheet): int32  =
  return TabSheet_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TTabSheet, AValue: int32)  =
  TabSheet_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TTabSheet): TPoint  =
  TabSheet_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TTabSheet): TRect  =
  TabSheet_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TTabSheet): int32  =
  return TabSheet_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TTabSheet, AValue: int32)  =
  TabSheet_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TTabSheet): TControlState  =
  return TabSheet_GetControlState(this.Instance)

proc `ControlState=`*(this: TTabSheet, AValue: TControlState)  =
  TabSheet_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TTabSheet): TControlStyle  =
  return TabSheet_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TTabSheet, AValue: TControlStyle)  =
  TabSheet_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TTabSheet): bool  =
  return TabSheet_GetFloating(this.Instance)

proc Parent*(this: TTabSheet): TWinControl  =
  return TabSheet_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TTabSheet, AValue: TWinControl)  =
  TabSheet_SetParent(this.Instance, CheckPtr(AValue))

proc Cursor*(this: TTabSheet): TCursor  =
  return TabSheet_GetCursor(this.Instance)

proc `Cursor=`*(this: TTabSheet, AValue: TCursor)  =
  TabSheet_SetCursor(this.Instance, AValue)

proc Hint*(this: TTabSheet): string  =
  return $TabSheet_GetHint(this.Instance)

proc `Hint=`*(this: TTabSheet, AValue: string)  =
  TabSheet_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TTabSheet): int32  =
  return TabSheet_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TTabSheet): int32  =
  return TabSheet_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TTabSheet, AValue: int32)  =
  TabSheet_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TTabSheet): TComponent  =
  return TabSheet_GetOwner(this.Instance).AsComponent

proc Name*(this: TTabSheet): string  =
  return $TabSheet_GetName(this.Instance)

proc `Name=`*(this: TTabSheet, AValue: string)  =
  TabSheet_SetName(this.Instance, AValue)

proc Tag*(this: TTabSheet): int  =
  return TabSheet_GetTag(this.Instance)

proc `Tag=`*(this: TTabSheet, AValue: int)  =
  TabSheet_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TTabSheet): TAnchorSide  =
  return TabSheet_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TTabSheet, AValue: TAnchorSide)  =
  TabSheet_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TTabSheet): TAnchorSide  =
  return TabSheet_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TTabSheet, AValue: TAnchorSide)  =
  TabSheet_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TTabSheet): TAnchorSide  =
  return TabSheet_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TTabSheet, AValue: TAnchorSide)  =
  TabSheet_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TTabSheet): TAnchorSide  =
  return TabSheet_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TTabSheet, AValue: TAnchorSide)  =
  TabSheet_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TTabSheet): TControlChildSizing  =
  return TabSheet_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TTabSheet, AValue: TControlChildSizing)  =
  TabSheet_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TTabSheet): TControlBorderSpacing  =
  return TabSheet_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TTabSheet, AValue: TControlBorderSpacing)  =
  TabSheet_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TTabSheet, Index: int32): TControl  =
  return TabSheet_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TTabSheet, Index: int32): TControl  =
  return TabSheet_GetControls(this.Instance, Index).AsControl

proc Components*(this: TTabSheet, AIndex: int32): TComponent  =
  return TabSheet_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TTabSheet, AKind: TAnchorKind): TAnchorSide  =
  return TabSheet_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TTabSheetClass*(): TClass = TabSheet_StaticClassType()


#------------------------- TButton -------------------------

proc Free*(this: TButton) = defaultFree: Button_Free

proc NewButton*(AOwner: TComponent): TButton =
  new(result)
  result.Instance = Button_Create(CheckPtr(AOwner))

proc Click*(this: TButton)  =
  Button_Click(this.Instance)

proc CanFocus*(this: TButton): bool =
  return Button_CanFocus(this.Instance)

proc ContainsControl*(this: TButton, Control: TControl): bool =
  return Button_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TButton, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return Button_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TButton) =
  Button_DisableAlign(this.Instance)

proc EnableAlign*(this: TButton) =
  Button_EnableAlign(this.Instance)

proc FindChildControl*(this: TButton, ControlName: string): TControl =
  return Button_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TButton, AllLevels: bool) =
  Button_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TButton): bool =
  return Button_Focused(this.Instance)

proc HandleAllocated*(this: TButton): bool =
  return Button_HandleAllocated(this.Instance)

proc InsertControl*(this: TButton, AControl: TControl) =
  Button_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TButton) =
  Button_Invalidate(this.Instance)

proc PaintTo*(this: TButton, DC: HDC, X: int32, Y: int32) =
  Button_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TButton, AControl: TControl) =
  Button_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TButton) =
  Button_Realign(this.Instance)

proc Repaint*(this: TButton) =
  Button_Repaint(this.Instance)

proc ScaleBy*(this: TButton, M: int32, D: int32) =
  Button_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TButton, DeltaX: int32, DeltaY: int32) =
  Button_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TButton, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  Button_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TButton) =
  Button_SetFocus(this.Instance)

proc Update*(this: TButton) =
  Button_Update(this.Instance)

proc BringToFront*(this: TButton) =
  Button_BringToFront(this.Instance)

proc ClientToScreen*(this: TButton, Point: TPoint): TPoint =
  var ps1 = Point
  Button_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TButton, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Button_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TButton): bool =
  return Button_Dragging(this.Instance)

proc HasParent*(this: TButton): bool =
  return Button_HasParent(this.Instance)

proc Hide*(this: TButton) =
  Button_Hide(this.Instance)

proc Perform*(this: TButton, Msg: uint32, WParam: uint, LParam: int): int =
  return Button_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TButton) =
  Button_Refresh(this.Instance)

proc ScreenToClient*(this: TButton, Point: TPoint): TPoint =
  var ps1 = Point
  Button_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TButton, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Button_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TButton) =
  Button_SendToBack(this.Instance)

proc Show*(this: TButton) =
  Button_Show(this.Instance)

proc GetTextBuf*(this: TButton, Buffer: string, BufSize: int32): int32 =
  return Button_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TButton): int32 =
  return Button_GetTextLen(this.Instance)

proc SetTextBuf*(this: TButton, Buffer: string) =
  Button_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TButton, AName: string): TComponent =
  return Button_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TButton): string =
  return $Button_GetNamePath(this.Instance)

proc Assign*(this: TButton, Source: TObject) =
  Button_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TButton): TClass =
  return Button_ClassType(this.Instance)

proc ClassName*(this: TButton): string =
  return $Button_ClassName(this.Instance)

proc InstanceSize*(this: TButton): int32 =
  return Button_InstanceSize(this.Instance)

proc InheritsFrom*(this: TButton, AClass: TClass): bool =
  return Button_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TButton, Obj: TObject): bool =
  return Button_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TButton): int32 =
  return Button_GetHashCode(this.Instance)

proc ToString*(this: TButton): string =
  return $Button_ToString(this.Instance)

proc AnchorToNeighbour*(this: TButton, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Button_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TButton, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Button_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TButton, ASibling: TControl) =
  Button_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TButton, ASibling: TControl) =
  Button_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TButton, ASide: TAnchorKind, ASibling: TControl) =
  Button_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TButton, ATheAlign: TAlign, ASpace: int32) =
  Button_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TButton, ASpace: int32) =
  Button_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TButton, ASize: int32): int32 =
  return Button_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TButton, ASize: int32): int32 =
  return Button_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TButton, ASize: int32): int32 =
  return Button_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TButton, ASize: int32): int32 =
  return Button_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TButton, ASize: int32): int32 =
  return Button_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TButton, ASize: int32): int32 =
  return Button_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TButton, ASize: int32): int32 =
  return Button_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TButton, ASize: int32): int32 =
  return Button_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TButton, ASize: int32): int32 =
  return Button_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TButton, ASize: int32): int32 =
  return Button_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TButton, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  Button_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TButton, ADesignTimePPI: int32) =
  Button_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TButton, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  Button_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Action*(this: TButton): TAction  =
  return Button_GetAction(this.Instance).AsAction

proc `Action=`*(this: TButton, AValue: TAction)  =
  Button_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TButton): TAlign  =
  return Button_GetAlign(this.Instance)

proc `Align=`*(this: TButton, AValue: TAlign)  =
  Button_SetAlign(this.Instance, AValue)

proc Anchors*(this: TButton): TAnchors  =
  return Button_GetAnchors(this.Instance)

proc `Anchors=`*(this: TButton, AValue: TAnchors)  =
  Button_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TButton): TBiDiMode  =
  return Button_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TButton, AValue: TBiDiMode)  =
  Button_SetBiDiMode(this.Instance, AValue)

proc Cancel*(this: TButton): bool  =
  return Button_GetCancel(this.Instance)

proc `Cancel=`*(this: TButton, AValue: bool)  =
  Button_SetCancel(this.Instance, AValue)

proc Caption*(this: TButton): string  =
  return $Button_GetCaption(this.Instance)

proc `Caption=`*(this: TButton, AValue: string)  =
  Button_SetCaption(this.Instance, AValue)

proc Constraints*(this: TButton): TSizeConstraints  =
  return Button_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TButton, AValue: TSizeConstraints)  =
  Button_SetConstraints(this.Instance, CheckPtr(AValue))

proc Default*(this: TButton): bool  =
  return Button_GetDefault(this.Instance)

proc `Default=`*(this: TButton, AValue: bool)  =
  Button_SetDefault(this.Instance, AValue)

proc DoubleBuffered*(this: TButton): bool  =
  return Button_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TButton, AValue: bool)  =
  Button_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TButton): TCursor  =
  return Button_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TButton, AValue: TCursor)  =
  Button_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TButton): TDragKind  =
  return Button_GetDragKind(this.Instance)

proc `DragKind=`*(this: TButton, AValue: TDragKind)  =
  Button_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TButton): TDragMode  =
  return Button_GetDragMode(this.Instance)

proc `DragMode=`*(this: TButton, AValue: TDragMode)  =
  Button_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TButton): bool  =
  return Button_GetEnabled(this.Instance)

proc `Enabled=`*(this: TButton, AValue: bool)  =
  Button_SetEnabled(this.Instance, AValue)

proc Font*(this: TButton): TFont  =
  return Button_GetFont(this.Instance).AsFont

proc `Font=`*(this: TButton, AValue: TFont)  =
  Button_SetFont(this.Instance, CheckPtr(AValue))

proc ModalResult*(this: TButton): TModalResult  =
  return Button_GetModalResult(this.Instance)

proc `ModalResult=`*(this: TButton, AValue: TModalResult)  =
  Button_SetModalResult(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TButton): bool  =
  return Button_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TButton, AValue: bool)  =
  Button_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TButton): bool  =
  return Button_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TButton, AValue: bool)  =
  Button_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TButton): bool  =
  return Button_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TButton, AValue: bool)  =
  Button_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TButton): TPopupMenu  =
  return Button_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TButton, AValue: TPopupMenu)  =
  Button_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TButton): bool  =
  return Button_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TButton, AValue: bool)  =
  Button_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TButton): TTabOrder  =
  return Button_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TButton, AValue: TTabOrder)  =
  Button_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TButton): bool  =
  return Button_GetTabStop(this.Instance)

proc `TabStop=`*(this: TButton, AValue: bool)  =
  Button_SetTabStop(this.Instance, AValue)

proc Visible*(this: TButton): bool  =
  return Button_GetVisible(this.Instance)

proc `Visible=`*(this: TButton, AValue: bool)  =
  Button_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TButton, AEventId: TNotifyEvent)  =
  Button_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TButton, AEventId: TContextPopupEvent)  =
  Button_SetOnContextPopup(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TButton, AEventId: TDragDropEvent)  =
  Button_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TButton, AEventId: TDragOverEvent)  =
  Button_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TButton, AEventId: TEndDragEvent)  =
  Button_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TButton, AEventId: TNotifyEvent)  =
  Button_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TButton, AEventId: TNotifyEvent)  =
  Button_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TButton, AEventId: TKeyEvent)  =
  Button_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TButton, AEventId: TKeyPressEvent)  =
  Button_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TButton, AEventId: TKeyEvent)  =
  Button_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TButton, AEventId: TMouseEvent)  =
  Button_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TButton, AEventId: TNotifyEvent)  =
  Button_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TButton, AEventId: TNotifyEvent)  =
  Button_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TButton, AEventId: TMouseMoveEvent)  =
  Button_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TButton, AEventId: TMouseEvent)  =
  Button_SetOnMouseUp(this.Instance, AEventId)

proc DockClientCount*(this: TButton): int32  =
  return Button_GetDockClientCount(this.Instance)

proc DockSite*(this: TButton): bool  =
  return Button_GetDockSite(this.Instance)

proc `DockSite=`*(this: TButton, AValue: bool)  =
  Button_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TButton): bool  =
  return Button_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TButton): int32  =
  return Button_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TButton): TBrush  =
  return Button_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TButton): int32  =
  return Button_GetControlCount(this.Instance)

proc Handle*(this: TButton): HWND  =
  return Button_GetHandle(this.Instance)

proc ParentWindow*(this: TButton): HWND  =
  return Button_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TButton, AValue: HWND)  =
  Button_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TButton): bool  =
  return Button_GetShowing(this.Instance)

proc UseDockManager*(this: TButton): bool  =
  return Button_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TButton, AValue: bool)  =
  Button_SetUseDockManager(this.Instance, AValue)

proc BoundsRect*(this: TButton): TRect  =
  Button_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TButton, AValue: TRect)  =
  var ps1 = AValue
  Button_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TButton): int32  =
  return Button_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TButton, AValue: int32)  =
  Button_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TButton): TPoint  =
  Button_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TButton): TRect  =
  Button_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TButton): int32  =
  return Button_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TButton, AValue: int32)  =
  Button_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TButton): TControlState  =
  return Button_GetControlState(this.Instance)

proc `ControlState=`*(this: TButton, AValue: TControlState)  =
  Button_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TButton): TControlStyle  =
  return Button_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TButton, AValue: TControlStyle)  =
  Button_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TButton): bool  =
  return Button_GetFloating(this.Instance)

proc Parent*(this: TButton): TWinControl  =
  return Button_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TButton, AValue: TWinControl)  =
  Button_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TButton): int32  =
  return Button_GetLeft(this.Instance)

proc `Left=`*(this: TButton, AValue: int32)  =
  Button_SetLeft(this.Instance, AValue)

proc Top*(this: TButton): int32  =
  return Button_GetTop(this.Instance)

proc `Top=`*(this: TButton, AValue: int32)  =
  Button_SetTop(this.Instance, AValue)

proc Width*(this: TButton): int32  =
  return Button_GetWidth(this.Instance)

proc `Width=`*(this: TButton, AValue: int32)  =
  Button_SetWidth(this.Instance, AValue)

proc Height*(this: TButton): int32  =
  return Button_GetHeight(this.Instance)

proc `Height=`*(this: TButton, AValue: int32)  =
  Button_SetHeight(this.Instance, AValue)

proc Cursor*(this: TButton): TCursor  =
  return Button_GetCursor(this.Instance)

proc `Cursor=`*(this: TButton, AValue: TCursor)  =
  Button_SetCursor(this.Instance, AValue)

proc Hint*(this: TButton): string  =
  return $Button_GetHint(this.Instance)

proc `Hint=`*(this: TButton, AValue: string)  =
  Button_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TButton): int32  =
  return Button_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TButton): int32  =
  return Button_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TButton, AValue: int32)  =
  Button_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TButton): TComponent  =
  return Button_GetOwner(this.Instance).AsComponent

proc Name*(this: TButton): string  =
  return $Button_GetName(this.Instance)

proc `Name=`*(this: TButton, AValue: string)  =
  Button_SetName(this.Instance, AValue)

proc Tag*(this: TButton): int  =
  return Button_GetTag(this.Instance)

proc `Tag=`*(this: TButton, AValue: int)  =
  Button_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TButton): TAnchorSide  =
  return Button_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TButton, AValue: TAnchorSide)  =
  Button_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TButton): TAnchorSide  =
  return Button_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TButton, AValue: TAnchorSide)  =
  Button_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TButton): TAnchorSide  =
  return Button_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TButton, AValue: TAnchorSide)  =
  Button_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TButton): TAnchorSide  =
  return Button_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TButton, AValue: TAnchorSide)  =
  Button_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TButton): TControlChildSizing  =
  return Button_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TButton, AValue: TControlChildSizing)  =
  Button_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TButton): TControlBorderSpacing  =
  return Button_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TButton, AValue: TControlBorderSpacing)  =
  Button_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TButton, Index: int32): TControl  =
  return Button_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TButton, Index: int32): TControl  =
  return Button_GetControls(this.Instance, Index).AsControl

proc Components*(this: TButton, AIndex: int32): TComponent  =
  return Button_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TButton, AKind: TAnchorKind): TAnchorSide  =
  return Button_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TButtonClass*(): TClass = Button_StaticClassType()


#------------------------- TEdit -------------------------

proc Free*(this: TEdit) = defaultFree: Edit_Free

proc NewEdit*(AOwner: TComponent): TEdit =
  new(result)
  result.Instance = Edit_Create(CheckPtr(AOwner))

proc Clear*(this: TEdit)  =
  Edit_Clear(this.Instance)

proc ClearSelection*(this: TEdit)  =
  Edit_ClearSelection(this.Instance)

proc CopyToClipboard*(this: TEdit)  =
  Edit_CopyToClipboard(this.Instance)

proc CutToClipboard*(this: TEdit)  =
  Edit_CutToClipboard(this.Instance)

proc PasteFromClipboard*(this: TEdit)  =
  Edit_PasteFromClipboard(this.Instance)

proc Undo*(this: TEdit)  =
  Edit_Undo(this.Instance)

proc SelectAll*(this: TEdit)  =
  Edit_SelectAll(this.Instance)

proc CanFocus*(this: TEdit): bool =
  return Edit_CanFocus(this.Instance)

proc ContainsControl*(this: TEdit, Control: TControl): bool =
  return Edit_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TEdit, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return Edit_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TEdit) =
  Edit_DisableAlign(this.Instance)

proc EnableAlign*(this: TEdit) =
  Edit_EnableAlign(this.Instance)

proc FindChildControl*(this: TEdit, ControlName: string): TControl =
  return Edit_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TEdit, AllLevels: bool) =
  Edit_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TEdit): bool =
  return Edit_Focused(this.Instance)

proc HandleAllocated*(this: TEdit): bool =
  return Edit_HandleAllocated(this.Instance)

proc InsertControl*(this: TEdit, AControl: TControl) =
  Edit_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TEdit) =
  Edit_Invalidate(this.Instance)

proc PaintTo*(this: TEdit, DC: HDC, X: int32, Y: int32) =
  Edit_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TEdit, AControl: TControl) =
  Edit_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TEdit) =
  Edit_Realign(this.Instance)

proc Repaint*(this: TEdit) =
  Edit_Repaint(this.Instance)

proc ScaleBy*(this: TEdit, M: int32, D: int32) =
  Edit_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TEdit, DeltaX: int32, DeltaY: int32) =
  Edit_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TEdit, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  Edit_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TEdit) =
  Edit_SetFocus(this.Instance)

proc Update*(this: TEdit) =
  Edit_Update(this.Instance)

proc BringToFront*(this: TEdit) =
  Edit_BringToFront(this.Instance)

proc ClientToScreen*(this: TEdit, Point: TPoint): TPoint =
  var ps1 = Point
  Edit_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TEdit, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Edit_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TEdit): bool =
  return Edit_Dragging(this.Instance)

proc HasParent*(this: TEdit): bool =
  return Edit_HasParent(this.Instance)

proc Hide*(this: TEdit) =
  Edit_Hide(this.Instance)

proc Perform*(this: TEdit, Msg: uint32, WParam: uint, LParam: int): int =
  return Edit_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TEdit) =
  Edit_Refresh(this.Instance)

proc ScreenToClient*(this: TEdit, Point: TPoint): TPoint =
  var ps1 = Point
  Edit_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TEdit, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Edit_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TEdit) =
  Edit_SendToBack(this.Instance)

proc Show*(this: TEdit) =
  Edit_Show(this.Instance)

proc GetTextBuf*(this: TEdit, Buffer: string, BufSize: int32): int32 =
  return Edit_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TEdit): int32 =
  return Edit_GetTextLen(this.Instance)

proc SetTextBuf*(this: TEdit, Buffer: string) =
  Edit_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TEdit, AName: string): TComponent =
  return Edit_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TEdit): string =
  return $Edit_GetNamePath(this.Instance)

proc Assign*(this: TEdit, Source: TObject) =
  Edit_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TEdit): TClass =
  return Edit_ClassType(this.Instance)

proc ClassName*(this: TEdit): string =
  return $Edit_ClassName(this.Instance)

proc InstanceSize*(this: TEdit): int32 =
  return Edit_InstanceSize(this.Instance)

proc InheritsFrom*(this: TEdit, AClass: TClass): bool =
  return Edit_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TEdit, Obj: TObject): bool =
  return Edit_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TEdit): int32 =
  return Edit_GetHashCode(this.Instance)

proc ToString*(this: TEdit): string =
  return $Edit_ToString(this.Instance)

proc AnchorToNeighbour*(this: TEdit, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Edit_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TEdit, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Edit_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TEdit, ASibling: TControl) =
  Edit_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TEdit, ASibling: TControl) =
  Edit_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TEdit, ASide: TAnchorKind, ASibling: TControl) =
  Edit_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TEdit, ATheAlign: TAlign, ASpace: int32) =
  Edit_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TEdit, ASpace: int32) =
  Edit_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TEdit, ASize: int32): int32 =
  return Edit_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TEdit, ASize: int32): int32 =
  return Edit_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TEdit, ASize: int32): int32 =
  return Edit_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TEdit, ASize: int32): int32 =
  return Edit_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TEdit, ASize: int32): int32 =
  return Edit_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TEdit, ASize: int32): int32 =
  return Edit_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TEdit, ASize: int32): int32 =
  return Edit_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TEdit, ASize: int32): int32 =
  return Edit_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TEdit, ASize: int32): int32 =
  return Edit_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TEdit, ASize: int32): int32 =
  return Edit_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TEdit, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  Edit_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TEdit, ADesignTimePPI: int32) =
  Edit_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TEdit, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  Edit_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TEdit): TAlign  =
  return Edit_GetAlign(this.Instance)

proc `Align=`*(this: TEdit, AValue: TAlign)  =
  Edit_SetAlign(this.Instance, AValue)

proc Alignment*(this: TEdit): TAlignment  =
  return Edit_GetAlignment(this.Instance)

proc `Alignment=`*(this: TEdit, AValue: TAlignment)  =
  Edit_SetAlignment(this.Instance, AValue)

proc Anchors*(this: TEdit): TAnchors  =
  return Edit_GetAnchors(this.Instance)

proc `Anchors=`*(this: TEdit, AValue: TAnchors)  =
  Edit_SetAnchors(this.Instance, AValue)

proc AutoSelect*(this: TEdit): bool  =
  return Edit_GetAutoSelect(this.Instance)

proc `AutoSelect=`*(this: TEdit, AValue: bool)  =
  Edit_SetAutoSelect(this.Instance, AValue)

proc AutoSize*(this: TEdit): bool  =
  return Edit_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TEdit, AValue: bool)  =
  Edit_SetAutoSize(this.Instance, AValue)

proc BiDiMode*(this: TEdit): TBiDiMode  =
  return Edit_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TEdit, AValue: TBiDiMode)  =
  Edit_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TEdit): TBorderStyle  =
  return Edit_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TEdit, AValue: TBorderStyle)  =
  Edit_SetBorderStyle(this.Instance, AValue)

proc CharCase*(this: TEdit): TEditCharCase  =
  return Edit_GetCharCase(this.Instance)

proc `CharCase=`*(this: TEdit, AValue: TEditCharCase)  =
  Edit_SetCharCase(this.Instance, AValue)

proc Color*(this: TEdit): TColor  =
  return Edit_GetColor(this.Instance)

proc `Color=`*(this: TEdit, AValue: TColor)  =
  Edit_SetColor(this.Instance, AValue)

proc Constraints*(this: TEdit): TSizeConstraints  =
  return Edit_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TEdit, AValue: TSizeConstraints)  =
  Edit_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TEdit): bool  =
  return Edit_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TEdit, AValue: bool)  =
  Edit_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TEdit): TCursor  =
  return Edit_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TEdit, AValue: TCursor)  =
  Edit_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TEdit): TDragKind  =
  return Edit_GetDragKind(this.Instance)

proc `DragKind=`*(this: TEdit, AValue: TDragKind)  =
  Edit_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TEdit): TDragMode  =
  return Edit_GetDragMode(this.Instance)

proc `DragMode=`*(this: TEdit, AValue: TDragMode)  =
  Edit_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TEdit): bool  =
  return Edit_GetEnabled(this.Instance)

proc `Enabled=`*(this: TEdit, AValue: bool)  =
  Edit_SetEnabled(this.Instance, AValue)

proc Font*(this: TEdit): TFont  =
  return Edit_GetFont(this.Instance).AsFont

proc `Font=`*(this: TEdit, AValue: TFont)  =
  Edit_SetFont(this.Instance, CheckPtr(AValue))

proc HideSelection*(this: TEdit): bool  =
  return Edit_GetHideSelection(this.Instance)

proc `HideSelection=`*(this: TEdit, AValue: bool)  =
  Edit_SetHideSelection(this.Instance, AValue)

proc MaxLength*(this: TEdit): int32  =
  return Edit_GetMaxLength(this.Instance)

proc `MaxLength=`*(this: TEdit, AValue: int32)  =
  Edit_SetMaxLength(this.Instance, AValue)

proc NumbersOnly*(this: TEdit): bool  =
  return Edit_GetNumbersOnly(this.Instance)

proc `NumbersOnly=`*(this: TEdit, AValue: bool)  =
  Edit_SetNumbersOnly(this.Instance, AValue)

proc ParentColor*(this: TEdit): bool  =
  return Edit_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TEdit, AValue: bool)  =
  Edit_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TEdit): bool  =
  return Edit_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TEdit, AValue: bool)  =
  Edit_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TEdit): bool  =
  return Edit_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TEdit, AValue: bool)  =
  Edit_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TEdit): bool  =
  return Edit_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TEdit, AValue: bool)  =
  Edit_SetParentShowHint(this.Instance, AValue)

proc PasswordChar*(this: TEdit): Char  =
  return Edit_GetPasswordChar(this.Instance)

proc `PasswordChar=`*(this: TEdit, AValue: Char)  =
  Edit_SetPasswordChar(this.Instance, AValue)

proc PopupMenu*(this: TEdit): TPopupMenu  =
  return Edit_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TEdit, AValue: TPopupMenu)  =
  Edit_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ReadOnly*(this: TEdit): bool  =
  return Edit_GetReadOnly(this.Instance)

proc `ReadOnly=`*(this: TEdit, AValue: bool)  =
  Edit_SetReadOnly(this.Instance, AValue)

proc ShowHint*(this: TEdit): bool  =
  return Edit_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TEdit, AValue: bool)  =
  Edit_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TEdit): TTabOrder  =
  return Edit_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TEdit, AValue: TTabOrder)  =
  Edit_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TEdit): bool  =
  return Edit_GetTabStop(this.Instance)

proc `TabStop=`*(this: TEdit, AValue: bool)  =
  Edit_SetTabStop(this.Instance, AValue)

proc Text*(this: TEdit): string  =
  return $Edit_GetText(this.Instance)

proc `Text=`*(this: TEdit, AValue: string)  =
  Edit_SetText(this.Instance, AValue)

proc TextHint*(this: TEdit): string  =
  return $Edit_GetTextHint(this.Instance)

proc `TextHint=`*(this: TEdit, AValue: string)  =
  Edit_SetTextHint(this.Instance, AValue)

proc Visible*(this: TEdit): bool  =
  return Edit_GetVisible(this.Instance)

proc `Visible=`*(this: TEdit, AValue: bool)  =
  Edit_SetVisible(this.Instance, AValue)

proc `OnChange=`*(this: TEdit, AEventId: TNotifyEvent)  =
  Edit_SetOnChange(this.Instance, AEventId)

proc `OnClick=`*(this: TEdit, AEventId: TNotifyEvent)  =
  Edit_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TEdit, AEventId: TContextPopupEvent)  =
  Edit_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TEdit, AEventId: TNotifyEvent)  =
  Edit_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TEdit, AEventId: TDragDropEvent)  =
  Edit_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TEdit, AEventId: TDragOverEvent)  =
  Edit_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TEdit, AEventId: TEndDragEvent)  =
  Edit_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TEdit, AEventId: TNotifyEvent)  =
  Edit_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TEdit, AEventId: TNotifyEvent)  =
  Edit_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TEdit, AEventId: TKeyEvent)  =
  Edit_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TEdit, AEventId: TKeyPressEvent)  =
  Edit_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TEdit, AEventId: TKeyEvent)  =
  Edit_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TEdit, AEventId: TMouseEvent)  =
  Edit_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TEdit, AEventId: TNotifyEvent)  =
  Edit_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TEdit, AEventId: TNotifyEvent)  =
  Edit_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TEdit, AEventId: TMouseMoveEvent)  =
  Edit_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TEdit, AEventId: TMouseEvent)  =
  Edit_SetOnMouseUp(this.Instance, AEventId)

proc CanUndo*(this: TEdit): bool  =
  return Edit_GetCanUndo(this.Instance)

proc Modified*(this: TEdit): bool  =
  return Edit_GetModified(this.Instance)

proc `Modified=`*(this: TEdit, AValue: bool)  =
  Edit_SetModified(this.Instance, AValue)

proc SelLength*(this: TEdit): int32  =
  return Edit_GetSelLength(this.Instance)

proc `SelLength=`*(this: TEdit, AValue: int32)  =
  Edit_SetSelLength(this.Instance, AValue)

proc SelStart*(this: TEdit): int32  =
  return Edit_GetSelStart(this.Instance)

proc `SelStart=`*(this: TEdit, AValue: int32)  =
  Edit_SetSelStart(this.Instance, AValue)

proc SelText*(this: TEdit): string  =
  return $Edit_GetSelText(this.Instance)

proc `SelText=`*(this: TEdit, AValue: string)  =
  Edit_SetSelText(this.Instance, AValue)

proc DockClientCount*(this: TEdit): int32  =
  return Edit_GetDockClientCount(this.Instance)

proc DockSite*(this: TEdit): bool  =
  return Edit_GetDockSite(this.Instance)

proc `DockSite=`*(this: TEdit, AValue: bool)  =
  Edit_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TEdit): bool  =
  return Edit_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TEdit): int32  =
  return Edit_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TEdit): TBrush  =
  return Edit_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TEdit): int32  =
  return Edit_GetControlCount(this.Instance)

proc Handle*(this: TEdit): HWND  =
  return Edit_GetHandle(this.Instance)

proc ParentWindow*(this: TEdit): HWND  =
  return Edit_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TEdit, AValue: HWND)  =
  Edit_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TEdit): bool  =
  return Edit_GetShowing(this.Instance)

proc UseDockManager*(this: TEdit): bool  =
  return Edit_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TEdit, AValue: bool)  =
  Edit_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TEdit): TAction  =
  return Edit_GetAction(this.Instance).AsAction

proc `Action=`*(this: TEdit, AValue: TAction)  =
  Edit_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TEdit): TRect  =
  Edit_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TEdit, AValue: TRect)  =
  var ps1 = AValue
  Edit_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TEdit): int32  =
  return Edit_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TEdit, AValue: int32)  =
  Edit_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TEdit): TPoint  =
  Edit_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TEdit): TRect  =
  Edit_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TEdit): int32  =
  return Edit_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TEdit, AValue: int32)  =
  Edit_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TEdit): TControlState  =
  return Edit_GetControlState(this.Instance)

proc `ControlState=`*(this: TEdit, AValue: TControlState)  =
  Edit_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TEdit): TControlStyle  =
  return Edit_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TEdit, AValue: TControlStyle)  =
  Edit_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TEdit): bool  =
  return Edit_GetFloating(this.Instance)

proc Parent*(this: TEdit): TWinControl  =
  return Edit_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TEdit, AValue: TWinControl)  =
  Edit_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TEdit): int32  =
  return Edit_GetLeft(this.Instance)

proc `Left=`*(this: TEdit, AValue: int32)  =
  Edit_SetLeft(this.Instance, AValue)

proc Top*(this: TEdit): int32  =
  return Edit_GetTop(this.Instance)

proc `Top=`*(this: TEdit, AValue: int32)  =
  Edit_SetTop(this.Instance, AValue)

proc Width*(this: TEdit): int32  =
  return Edit_GetWidth(this.Instance)

proc `Width=`*(this: TEdit, AValue: int32)  =
  Edit_SetWidth(this.Instance, AValue)

proc Height*(this: TEdit): int32  =
  return Edit_GetHeight(this.Instance)

proc `Height=`*(this: TEdit, AValue: int32)  =
  Edit_SetHeight(this.Instance, AValue)

proc Cursor*(this: TEdit): TCursor  =
  return Edit_GetCursor(this.Instance)

proc `Cursor=`*(this: TEdit, AValue: TCursor)  =
  Edit_SetCursor(this.Instance, AValue)

proc Hint*(this: TEdit): string  =
  return $Edit_GetHint(this.Instance)

proc `Hint=`*(this: TEdit, AValue: string)  =
  Edit_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TEdit): int32  =
  return Edit_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TEdit): int32  =
  return Edit_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TEdit, AValue: int32)  =
  Edit_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TEdit): TComponent  =
  return Edit_GetOwner(this.Instance).AsComponent

proc Name*(this: TEdit): string  =
  return $Edit_GetName(this.Instance)

proc `Name=`*(this: TEdit, AValue: string)  =
  Edit_SetName(this.Instance, AValue)

proc Tag*(this: TEdit): int  =
  return Edit_GetTag(this.Instance)

proc `Tag=`*(this: TEdit, AValue: int)  =
  Edit_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TEdit): TAnchorSide  =
  return Edit_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TEdit, AValue: TAnchorSide)  =
  Edit_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TEdit): TAnchorSide  =
  return Edit_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TEdit, AValue: TAnchorSide)  =
  Edit_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TEdit): TAnchorSide  =
  return Edit_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TEdit, AValue: TAnchorSide)  =
  Edit_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TEdit): TAnchorSide  =
  return Edit_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TEdit, AValue: TAnchorSide)  =
  Edit_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TEdit): TControlChildSizing  =
  return Edit_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TEdit, AValue: TControlChildSizing)  =
  Edit_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TEdit): TControlBorderSpacing  =
  return Edit_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TEdit, AValue: TControlBorderSpacing)  =
  Edit_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TEdit, Index: int32): TControl  =
  return Edit_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TEdit, Index: int32): TControl  =
  return Edit_GetControls(this.Instance, Index).AsControl

proc Components*(this: TEdit, AIndex: int32): TComponent  =
  return Edit_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TEdit, AKind: TAnchorKind): TAnchorSide  =
  return Edit_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TEditClass*(): TClass = Edit_StaticClassType()


#------------------------- TScreen -------------------------

proc Free*(this: TScreen) = defaultFree: Screen_Free

proc NewScreen*(AOwner: TComponent): TScreen =
  new(result)
  result.Instance = Screen_Create(CheckPtr(AOwner))

proc FindComponent*(this: TScreen, AName: string): TComponent =
  return Screen_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TScreen): string =
  return $Screen_GetNamePath(this.Instance)

proc HasParent*(this: TScreen): bool =
  return Screen_HasParent(this.Instance)

proc Assign*(this: TScreen, Source: TObject) =
  Screen_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TScreen): TClass =
  return Screen_ClassType(this.Instance)

proc ClassName*(this: TScreen): string =
  return $Screen_ClassName(this.Instance)

proc InstanceSize*(this: TScreen): int32 =
  return Screen_InstanceSize(this.Instance)

proc InheritsFrom*(this: TScreen, AClass: TClass): bool =
  return Screen_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TScreen, Obj: TObject): bool =
  return Screen_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TScreen): int32 =
  return Screen_GetHashCode(this.Instance)

proc ToString*(this: TScreen): string =
  return $Screen_ToString(this.Instance)

proc ActiveControl*(this: TScreen): TWinControl  =
  return Screen_GetActiveControl(this.Instance).AsWinControl

proc ActiveForm*(this: TScreen): TForm  =
  return Screen_GetActiveForm(this.Instance).AsForm

proc CustomFormCount*(this: TScreen): int32  =
  return Screen_GetCustomFormCount(this.Instance)

proc Cursor*(this: TScreen): TCursor  =
  return Screen_GetCursor(this.Instance)

proc `Cursor=`*(this: TScreen, AValue: TCursor)  =
  Screen_SetCursor(this.Instance, AValue)

proc FocusedForm*(this: TScreen): TForm  =
  return Screen_GetFocusedForm(this.Instance).AsForm

proc MonitorCount*(this: TScreen): int32  =
  return Screen_GetMonitorCount(this.Instance)

proc DesktopRect*(this: TScreen): TRect  =
  Screen_GetDesktopRect(this.Instance, result)

proc DesktopHeight*(this: TScreen): int32  =
  return Screen_GetDesktopHeight(this.Instance)

proc DesktopLeft*(this: TScreen): int32  =
  return Screen_GetDesktopLeft(this.Instance)

proc DesktopTop*(this: TScreen): int32  =
  return Screen_GetDesktopTop(this.Instance)

proc DesktopWidth*(this: TScreen): int32  =
  return Screen_GetDesktopWidth(this.Instance)

proc WorkAreaRect*(this: TScreen): TRect  =
  Screen_GetWorkAreaRect(this.Instance, result)

proc WorkAreaHeight*(this: TScreen): int32  =
  return Screen_GetWorkAreaHeight(this.Instance)

proc WorkAreaLeft*(this: TScreen): int32  =
  return Screen_GetWorkAreaLeft(this.Instance)

proc WorkAreaTop*(this: TScreen): int32  =
  return Screen_GetWorkAreaTop(this.Instance)

proc WorkAreaWidth*(this: TScreen): int32  =
  return Screen_GetWorkAreaWidth(this.Instance)

proc Fonts*(this: TScreen): TStrings  =
  return Screen_GetFonts(this.Instance).AsStrings

proc FormCount*(this: TScreen): int32  =
  return Screen_GetFormCount(this.Instance)

proc Height*(this: TScreen): int32  =
  return Screen_GetHeight(this.Instance)

proc PixelsPerInch*(this: TScreen): int32  =
  return Screen_GetPixelsPerInch(this.Instance)

proc PrimaryMonitor*(this: TScreen): TMonitor  =
  return Screen_GetPrimaryMonitor(this.Instance).AsMonitor

proc Width*(this: TScreen): int32  =
  return Screen_GetWidth(this.Instance)

proc ComponentCount*(this: TScreen): int32  =
  return Screen_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TScreen): int32  =
  return Screen_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TScreen, AValue: int32)  =
  Screen_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TScreen): TComponent  =
  return Screen_GetOwner(this.Instance).AsComponent

proc Name*(this: TScreen): string  =
  return $Screen_GetName(this.Instance)

proc `Name=`*(this: TScreen, AValue: string)  =
  Screen_SetName(this.Instance, AValue)

proc Tag*(this: TScreen): int  =
  return Screen_GetTag(this.Instance)

proc `Tag=`*(this: TScreen, AValue: int)  =
  Screen_SetTag(this.Instance, AValue)

proc Cursors*(this: TScreen, Index: int32): HICON  =
  return Screen_GetCursors(this.Instance, Index)

proc `Cursors=`*(this: TScreen, Index: int32, AValue: HICON)  =
  Screen_SetCursors(this.Instance, Index, AValue)

proc Monitors*(this: TScreen, Index: int32): TMonitor  =
  return Screen_GetMonitors(this.Instance, Index).AsMonitor

proc Forms*(this: TScreen, Index: int32): TForm  =
  return Screen_GetForms(this.Instance, Index).AsForm

proc Components*(this: TScreen, AIndex: int32): TComponent  =
  return Screen_GetComponents(this.Instance, AIndex).AsComponent

proc TScreenClass*(): TClass = Screen_StaticClassType()


#------------------------- TMouse -------------------------

proc Free*(this: TMouse) = defaultFree: Mouse_Free

proc NewMouse*(): TMouse =
  new(result, Free)
  result.Instance = Mouse_Create()

proc ClassType*(this: TMouse): TClass =
  return Mouse_ClassType(this.Instance)

proc ClassName*(this: TMouse): string =
  return $Mouse_ClassName(this.Instance)

proc InstanceSize*(this: TMouse): int32 =
  return Mouse_InstanceSize(this.Instance)

proc InheritsFrom*(this: TMouse, AClass: TClass): bool =
  return Mouse_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TMouse, Obj: TObject): bool =
  return Mouse_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TMouse): int32 =
  return Mouse_GetHashCode(this.Instance)

proc ToString*(this: TMouse): string =
  return $Mouse_ToString(this.Instance)

proc Capture*(this: TMouse): HWND  =
  return Mouse_GetCapture(this.Instance)

proc `Capture=`*(this: TMouse, AValue: HWND)  =
  Mouse_SetCapture(this.Instance, AValue)

proc CursorPos*(this: TMouse): TPoint  =
  Mouse_GetCursorPos(this.Instance, result)

proc `CursorPos=`*(this: TMouse, AValue: TPoint)  =
  var ps1 = AValue
  Mouse_SetCursorPos(this.Instance, ps1)

proc IsDragging*(this: TMouse): bool  =
  return Mouse_GetIsDragging(this.Instance)

proc WheelScrollLines*(this: TMouse): int32  =
  return Mouse_GetWheelScrollLines(this.Instance)

proc TMouseClass*(): TClass = Mouse_StaticClassType()


#------------------------- TListColumn -------------------------

proc Free*(this: TListColumn) = defaultFree: ListColumn_Free

proc NewListColumn*(AOwner: TCollection): TListColumn =
  new(result, Free)
  result.Instance = ListColumn_Create(CheckPtr(AOwner))

proc Assign*(this: TListColumn, Source: TObject)  =
  ListColumn_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TListColumn): string  =
  return $ListColumn_GetNamePath(this.Instance)

proc ClassType*(this: TListColumn): TClass =
  return ListColumn_ClassType(this.Instance)

proc ClassName*(this: TListColumn): string =
  return $ListColumn_ClassName(this.Instance)

proc InstanceSize*(this: TListColumn): int32 =
  return ListColumn_InstanceSize(this.Instance)

proc InheritsFrom*(this: TListColumn, AClass: TClass): bool =
  return ListColumn_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TListColumn, Obj: TObject): bool =
  return ListColumn_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TListColumn): int32 =
  return ListColumn_GetHashCode(this.Instance)

proc ToString*(this: TListColumn): string =
  return $ListColumn_ToString(this.Instance)

proc SortIndicator*(this: TListColumn): TSortIndicator  =
  return ListColumn_GetSortIndicator(this.Instance)

proc `SortIndicator=`*(this: TListColumn, AValue: TSortIndicator)  =
  ListColumn_SetSortIndicator(this.Instance, AValue)

proc Alignment*(this: TListColumn): TAlignment  =
  return ListColumn_GetAlignment(this.Instance)

proc `Alignment=`*(this: TListColumn, AValue: TAlignment)  =
  ListColumn_SetAlignment(this.Instance, AValue)

proc AutoSize*(this: TListColumn): bool  =
  return ListColumn_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TListColumn, AValue: bool)  =
  ListColumn_SetAutoSize(this.Instance, AValue)

proc Caption*(this: TListColumn): string  =
  return $ListColumn_GetCaption(this.Instance)

proc `Caption=`*(this: TListColumn, AValue: string)  =
  ListColumn_SetCaption(this.Instance, AValue)

proc ImageIndex*(this: TListColumn): int32  =
  return ListColumn_GetImageIndex(this.Instance)

proc `ImageIndex=`*(this: TListColumn, AValue: int32)  =
  ListColumn_SetImageIndex(this.Instance, AValue)

proc MaxWidth*(this: TListColumn): int32  =
  return ListColumn_GetMaxWidth(this.Instance)

proc `MaxWidth=`*(this: TListColumn, AValue: int32)  =
  ListColumn_SetMaxWidth(this.Instance, AValue)

proc MinWidth*(this: TListColumn): int32  =
  return ListColumn_GetMinWidth(this.Instance)

proc `MinWidth=`*(this: TListColumn, AValue: int32)  =
  ListColumn_SetMinWidth(this.Instance, AValue)

proc Tag*(this: TListColumn): int32  =
  return ListColumn_GetTag(this.Instance)

proc `Tag=`*(this: TListColumn, AValue: int32)  =
  ListColumn_SetTag(this.Instance, AValue)

proc Width*(this: TListColumn): int32  =
  return ListColumn_GetWidth(this.Instance)

proc `Width=`*(this: TListColumn, AValue: int32)  =
  ListColumn_SetWidth(this.Instance, AValue)

proc Collection*(this: TListColumn): TCollection  =
  return ListColumn_GetCollection(this.Instance).AsCollection

proc `Collection=`*(this: TListColumn, AValue: TCollection)  =
  ListColumn_SetCollection(this.Instance, CheckPtr(AValue))

proc Index*(this: TListColumn): int32  =
  return ListColumn_GetIndex(this.Instance)

proc `Index=`*(this: TListColumn, AValue: int32)  =
  ListColumn_SetIndex(this.Instance, AValue)

proc DisplayName*(this: TListColumn): string  =
  return $ListColumn_GetDisplayName(this.Instance)

proc `DisplayName=`*(this: TListColumn, AValue: string)  =
  ListColumn_SetDisplayName(this.Instance, AValue)

proc TListColumnClass*(): TClass = ListColumn_StaticClassType()


#------------------------- TCollectionItem -------------------------

proc Free*(this: TCollectionItem) = defaultFree: CollectionItem_Free

proc NewCollectionItem*(AOwner: TCollection): TCollectionItem =
  new(result, Free)
  result.Instance = CollectionItem_Create(CheckPtr(AOwner))

proc GetNamePath*(this: TCollectionItem): string  =
  return $CollectionItem_GetNamePath(this.Instance)

proc Assign*(this: TCollectionItem, Source: TObject)  =
  CollectionItem_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TCollectionItem): TClass =
  return CollectionItem_ClassType(this.Instance)

proc ClassName*(this: TCollectionItem): string =
  return $CollectionItem_ClassName(this.Instance)

proc InstanceSize*(this: TCollectionItem): int32 =
  return CollectionItem_InstanceSize(this.Instance)

proc InheritsFrom*(this: TCollectionItem, AClass: TClass): bool =
  return CollectionItem_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TCollectionItem, Obj: TObject): bool =
  return CollectionItem_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TCollectionItem): int32 =
  return CollectionItem_GetHashCode(this.Instance)

proc ToString*(this: TCollectionItem): string =
  return $CollectionItem_ToString(this.Instance)

proc Collection*(this: TCollectionItem): TCollection  =
  return CollectionItem_GetCollection(this.Instance).AsCollection

proc `Collection=`*(this: TCollectionItem, AValue: TCollection)  =
  CollectionItem_SetCollection(this.Instance, CheckPtr(AValue))

proc Index*(this: TCollectionItem): int32  =
  return CollectionItem_GetIndex(this.Instance)

proc `Index=`*(this: TCollectionItem, AValue: int32)  =
  CollectionItem_SetIndex(this.Instance, AValue)

proc DisplayName*(this: TCollectionItem): string  =
  return $CollectionItem_GetDisplayName(this.Instance)

proc `DisplayName=`*(this: TCollectionItem, AValue: string)  =
  CollectionItem_SetDisplayName(this.Instance, AValue)

proc TCollectionItemClass*(): TClass = CollectionItem_StaticClassType()


#------------------------- TStatusPanels -------------------------

proc Free*(this: TStatusPanels) = defaultFree: StatusPanels_Free

proc NewStatusPanels*(AOwner: TStatusBar): TStatusPanels =
  new(result, Free)
  result.Instance = StatusPanels_Create(CheckPtr(AOwner))

proc Add*(this: TStatusPanels): TStatusPanel  =
  return StatusPanels_Add(this.Instance).AsStatusPanel

proc Insert*(this: TStatusPanels, Index: int32): TStatusPanel  =
  return StatusPanels_Insert(this.Instance, Index).AsStatusPanel

proc Owner*(this: TStatusPanels): TObject  =
  return StatusPanels_Owner(this.Instance).AsObject

proc Assign*(this: TStatusPanels, Source: TObject)  =
  StatusPanels_Assign(this.Instance, CheckPtr(Source))

proc BeginUpdate*(this: TStatusPanels)  =
  StatusPanels_BeginUpdate(this.Instance)

proc Clear*(this: TStatusPanels)  =
  StatusPanels_Clear(this.Instance)

proc Delete*(this: TStatusPanels, Index: int32)  =
  StatusPanels_Delete(this.Instance, Index)

proc EndUpdate*(this: TStatusPanels)  =
  StatusPanels_EndUpdate(this.Instance)

proc FindItemID*(this: TStatusPanels, ID: int32): TCollectionItem  =
  return StatusPanels_FindItemID(this.Instance, ID).AsCollectionItem

proc GetNamePath*(this: TStatusPanels): string  =
  return $StatusPanels_GetNamePath(this.Instance)

proc ClassType*(this: TStatusPanels): TClass =
  return StatusPanels_ClassType(this.Instance)

proc ClassName*(this: TStatusPanels): string =
  return $StatusPanels_ClassName(this.Instance)

proc InstanceSize*(this: TStatusPanels): int32 =
  return StatusPanels_InstanceSize(this.Instance)

proc InheritsFrom*(this: TStatusPanels, AClass: TClass): bool =
  return StatusPanels_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TStatusPanels, Obj: TObject): bool =
  return StatusPanels_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TStatusPanels): int32 =
  return StatusPanels_GetHashCode(this.Instance)

proc ToString*(this: TStatusPanels): string =
  return $StatusPanels_ToString(this.Instance)

proc Capacity*(this: TStatusPanels): int32  =
  return StatusPanels_GetCapacity(this.Instance)

proc `Capacity=`*(this: TStatusPanels, AValue: int32)  =
  StatusPanels_SetCapacity(this.Instance, AValue)

proc Count*(this: TStatusPanels): int32  =
  return StatusPanels_GetCount(this.Instance)

proc Items*(this: TStatusPanels, Index: int32): TStatusPanel  =
  return StatusPanels_GetItems(this.Instance, Index).AsStatusPanel

proc `Items=`*(this: TStatusPanels, Index: int32, AValue: TStatusPanel)  =
  StatusPanels_SetItems(this.Instance, Index, CheckPtr(AValue))

proc TStatusPanelsClass*(): TClass = StatusPanels_StaticClassType()


#------------------------- TStatusPanel -------------------------

proc Free*(this: TStatusPanel) = defaultFree: StatusPanel_Free

proc NewStatusPanel*(AOwner: TCollection): TStatusPanel =
  new(result, Free)
  result.Instance = StatusPanel_Create(CheckPtr(AOwner))

proc Assign*(this: TStatusPanel, Source: TObject)  =
  StatusPanel_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TStatusPanel): string  =
  return $StatusPanel_GetNamePath(this.Instance)

proc ClassType*(this: TStatusPanel): TClass =
  return StatusPanel_ClassType(this.Instance)

proc ClassName*(this: TStatusPanel): string =
  return $StatusPanel_ClassName(this.Instance)

proc InstanceSize*(this: TStatusPanel): int32 =
  return StatusPanel_InstanceSize(this.Instance)

proc InheritsFrom*(this: TStatusPanel, AClass: TClass): bool =
  return StatusPanel_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TStatusPanel, Obj: TObject): bool =
  return StatusPanel_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TStatusPanel): int32 =
  return StatusPanel_GetHashCode(this.Instance)

proc ToString*(this: TStatusPanel): string =
  return $StatusPanel_ToString(this.Instance)

proc Alignment*(this: TStatusPanel): TAlignment  =
  return StatusPanel_GetAlignment(this.Instance)

proc `Alignment=`*(this: TStatusPanel, AValue: TAlignment)  =
  StatusPanel_SetAlignment(this.Instance, AValue)

proc BiDiMode*(this: TStatusPanel): TBiDiMode  =
  return StatusPanel_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TStatusPanel, AValue: TBiDiMode)  =
  StatusPanel_SetBiDiMode(this.Instance, AValue)

proc Style*(this: TStatusPanel): TStatusPanelStyle  =
  return StatusPanel_GetStyle(this.Instance)

proc `Style=`*(this: TStatusPanel, AValue: TStatusPanelStyle)  =
  StatusPanel_SetStyle(this.Instance, AValue)

proc Text*(this: TStatusPanel): string  =
  return $StatusPanel_GetText(this.Instance)

proc `Text=`*(this: TStatusPanel, AValue: string)  =
  StatusPanel_SetText(this.Instance, AValue)

proc Width*(this: TStatusPanel): int32  =
  return StatusPanel_GetWidth(this.Instance)

proc `Width=`*(this: TStatusPanel, AValue: int32)  =
  StatusPanel_SetWidth(this.Instance, AValue)

proc Collection*(this: TStatusPanel): TCollection  =
  return StatusPanel_GetCollection(this.Instance).AsCollection

proc `Collection=`*(this: TStatusPanel, AValue: TCollection)  =
  StatusPanel_SetCollection(this.Instance, CheckPtr(AValue))

proc Index*(this: TStatusPanel): int32  =
  return StatusPanel_GetIndex(this.Instance)

proc `Index=`*(this: TStatusPanel, AValue: int32)  =
  StatusPanel_SetIndex(this.Instance, AValue)

proc DisplayName*(this: TStatusPanel): string  =
  return $StatusPanel_GetDisplayName(this.Instance)

proc `DisplayName=`*(this: TStatusPanel, AValue: string)  =
  StatusPanel_SetDisplayName(this.Instance, AValue)

proc TStatusPanelClass*(): TClass = StatusPanel_StaticClassType()


#------------------------- TSpinEdit -------------------------

proc Free*(this: TSpinEdit) = defaultFree: SpinEdit_Free

proc NewSpinEdit*(AOwner: TComponent): TSpinEdit =
  new(result)
  result.Instance = SpinEdit_Create(CheckPtr(AOwner))

proc Clear*(this: TSpinEdit)  =
  SpinEdit_Clear(this.Instance)

proc ClearSelection*(this: TSpinEdit)  =
  SpinEdit_ClearSelection(this.Instance)

proc CopyToClipboard*(this: TSpinEdit)  =
  SpinEdit_CopyToClipboard(this.Instance)

proc CutToClipboard*(this: TSpinEdit)  =
  SpinEdit_CutToClipboard(this.Instance)

proc PasteFromClipboard*(this: TSpinEdit)  =
  SpinEdit_PasteFromClipboard(this.Instance)

proc Undo*(this: TSpinEdit)  =
  SpinEdit_Undo(this.Instance)

proc SelectAll*(this: TSpinEdit)  =
  SpinEdit_SelectAll(this.Instance)

proc CanFocus*(this: TSpinEdit): bool =
  return SpinEdit_CanFocus(this.Instance)

proc ContainsControl*(this: TSpinEdit, Control: TControl): bool =
  return SpinEdit_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TSpinEdit, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return SpinEdit_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TSpinEdit) =
  SpinEdit_DisableAlign(this.Instance)

proc EnableAlign*(this: TSpinEdit) =
  SpinEdit_EnableAlign(this.Instance)

proc FindChildControl*(this: TSpinEdit, ControlName: string): TControl =
  return SpinEdit_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TSpinEdit, AllLevels: bool) =
  SpinEdit_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TSpinEdit): bool =
  return SpinEdit_Focused(this.Instance)

proc HandleAllocated*(this: TSpinEdit): bool =
  return SpinEdit_HandleAllocated(this.Instance)

proc InsertControl*(this: TSpinEdit, AControl: TControl) =
  SpinEdit_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TSpinEdit) =
  SpinEdit_Invalidate(this.Instance)

proc PaintTo*(this: TSpinEdit, DC: HDC, X: int32, Y: int32) =
  SpinEdit_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TSpinEdit, AControl: TControl) =
  SpinEdit_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TSpinEdit) =
  SpinEdit_Realign(this.Instance)

proc Repaint*(this: TSpinEdit) =
  SpinEdit_Repaint(this.Instance)

proc ScaleBy*(this: TSpinEdit, M: int32, D: int32) =
  SpinEdit_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TSpinEdit, DeltaX: int32, DeltaY: int32) =
  SpinEdit_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TSpinEdit, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  SpinEdit_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TSpinEdit) =
  SpinEdit_SetFocus(this.Instance)

proc Update*(this: TSpinEdit) =
  SpinEdit_Update(this.Instance)

proc BringToFront*(this: TSpinEdit) =
  SpinEdit_BringToFront(this.Instance)

proc ClientToScreen*(this: TSpinEdit, Point: TPoint): TPoint =
  var ps1 = Point
  SpinEdit_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TSpinEdit, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  SpinEdit_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TSpinEdit): bool =
  return SpinEdit_Dragging(this.Instance)

proc HasParent*(this: TSpinEdit): bool =
  return SpinEdit_HasParent(this.Instance)

proc Hide*(this: TSpinEdit) =
  SpinEdit_Hide(this.Instance)

proc Perform*(this: TSpinEdit, Msg: uint32, WParam: uint, LParam: int): int =
  return SpinEdit_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TSpinEdit) =
  SpinEdit_Refresh(this.Instance)

proc ScreenToClient*(this: TSpinEdit, Point: TPoint): TPoint =
  var ps1 = Point
  SpinEdit_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TSpinEdit, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  SpinEdit_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TSpinEdit) =
  SpinEdit_SendToBack(this.Instance)

proc Show*(this: TSpinEdit) =
  SpinEdit_Show(this.Instance)

proc GetTextBuf*(this: TSpinEdit, Buffer: string, BufSize: int32): int32 =
  return SpinEdit_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TSpinEdit): int32 =
  return SpinEdit_GetTextLen(this.Instance)

proc SetTextBuf*(this: TSpinEdit, Buffer: string) =
  SpinEdit_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TSpinEdit, AName: string): TComponent =
  return SpinEdit_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TSpinEdit): string =
  return $SpinEdit_GetNamePath(this.Instance)

proc Assign*(this: TSpinEdit, Source: TObject) =
  SpinEdit_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TSpinEdit): TClass =
  return SpinEdit_ClassType(this.Instance)

proc ClassName*(this: TSpinEdit): string =
  return $SpinEdit_ClassName(this.Instance)

proc InstanceSize*(this: TSpinEdit): int32 =
  return SpinEdit_InstanceSize(this.Instance)

proc InheritsFrom*(this: TSpinEdit, AClass: TClass): bool =
  return SpinEdit_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TSpinEdit, Obj: TObject): bool =
  return SpinEdit_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TSpinEdit): int32 =
  return SpinEdit_GetHashCode(this.Instance)

proc ToString*(this: TSpinEdit): string =
  return $SpinEdit_ToString(this.Instance)

proc AnchorToNeighbour*(this: TSpinEdit, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  SpinEdit_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TSpinEdit, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  SpinEdit_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TSpinEdit, ASibling: TControl) =
  SpinEdit_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TSpinEdit, ASibling: TControl) =
  SpinEdit_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TSpinEdit, ASide: TAnchorKind, ASibling: TControl) =
  SpinEdit_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TSpinEdit, ATheAlign: TAlign, ASpace: int32) =
  SpinEdit_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TSpinEdit, ASpace: int32) =
  SpinEdit_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TSpinEdit, ASize: int32): int32 =
  return SpinEdit_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TSpinEdit, ASize: int32): int32 =
  return SpinEdit_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TSpinEdit, ASize: int32): int32 =
  return SpinEdit_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TSpinEdit, ASize: int32): int32 =
  return SpinEdit_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TSpinEdit, ASize: int32): int32 =
  return SpinEdit_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TSpinEdit, ASize: int32): int32 =
  return SpinEdit_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TSpinEdit, ASize: int32): int32 =
  return SpinEdit_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TSpinEdit, ASize: int32): int32 =
  return SpinEdit_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TSpinEdit, ASize: int32): int32 =
  return SpinEdit_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TSpinEdit, ASize: int32): int32 =
  return SpinEdit_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TSpinEdit, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  SpinEdit_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TSpinEdit, ADesignTimePPI: int32) =
  SpinEdit_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TSpinEdit, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  SpinEdit_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Anchors*(this: TSpinEdit): TAnchors  =
  return SpinEdit_GetAnchors(this.Instance)

proc `Anchors=`*(this: TSpinEdit, AValue: TAnchors)  =
  SpinEdit_SetAnchors(this.Instance, AValue)

proc AutoSelect*(this: TSpinEdit): bool  =
  return SpinEdit_GetAutoSelect(this.Instance)

proc `AutoSelect=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetAutoSelect(this.Instance, AValue)

proc AutoSize*(this: TSpinEdit): bool  =
  return SpinEdit_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetAutoSize(this.Instance, AValue)

proc Color*(this: TSpinEdit): TColor  =
  return SpinEdit_GetColor(this.Instance)

proc `Color=`*(this: TSpinEdit, AValue: TColor)  =
  SpinEdit_SetColor(this.Instance, AValue)

proc Constraints*(this: TSpinEdit): TSizeConstraints  =
  return SpinEdit_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TSpinEdit, AValue: TSizeConstraints)  =
  SpinEdit_SetConstraints(this.Instance, CheckPtr(AValue))

proc Enabled*(this: TSpinEdit): bool  =
  return SpinEdit_GetEnabled(this.Instance)

proc `Enabled=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetEnabled(this.Instance, AValue)

proc Font*(this: TSpinEdit): TFont  =
  return SpinEdit_GetFont(this.Instance).AsFont

proc `Font=`*(this: TSpinEdit, AValue: TFont)  =
  SpinEdit_SetFont(this.Instance, CheckPtr(AValue))

proc Increment*(this: TSpinEdit): int32  =
  return SpinEdit_GetIncrement(this.Instance)

proc `Increment=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetIncrement(this.Instance, AValue)

proc MaxLength*(this: TSpinEdit): int32  =
  return SpinEdit_GetMaxLength(this.Instance)

proc `MaxLength=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetMaxLength(this.Instance, AValue)

proc MaxValue*(this: TSpinEdit): int32  =
  return SpinEdit_GetMaxValue(this.Instance)

proc `MaxValue=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetMaxValue(this.Instance, AValue)

proc MinValue*(this: TSpinEdit): int32  =
  return SpinEdit_GetMinValue(this.Instance)

proc `MinValue=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetMinValue(this.Instance, AValue)

proc ParentColor*(this: TSpinEdit): bool  =
  return SpinEdit_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetParentColor(this.Instance, AValue)

proc ParentFont*(this: TSpinEdit): bool  =
  return SpinEdit_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TSpinEdit): bool  =
  return SpinEdit_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TSpinEdit): TPopupMenu  =
  return SpinEdit_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TSpinEdit, AValue: TPopupMenu)  =
  SpinEdit_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ReadOnly*(this: TSpinEdit): bool  =
  return SpinEdit_GetReadOnly(this.Instance)

proc `ReadOnly=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetReadOnly(this.Instance, AValue)

proc ShowHint*(this: TSpinEdit): bool  =
  return SpinEdit_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TSpinEdit): TTabOrder  =
  return SpinEdit_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TSpinEdit, AValue: TTabOrder)  =
  SpinEdit_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TSpinEdit): bool  =
  return SpinEdit_GetTabStop(this.Instance)

proc `TabStop=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetTabStop(this.Instance, AValue)

proc Value*(this: TSpinEdit): int32  =
  return SpinEdit_GetValue(this.Instance)

proc `Value=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetValue(this.Instance, AValue)

proc Visible*(this: TSpinEdit): bool  =
  return SpinEdit_GetVisible(this.Instance)

proc `Visible=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetVisible(this.Instance, AValue)

proc `OnChange=`*(this: TSpinEdit, AEventId: TNotifyEvent)  =
  SpinEdit_SetOnChange(this.Instance, AEventId)

proc `OnClick=`*(this: TSpinEdit, AEventId: TNotifyEvent)  =
  SpinEdit_SetOnClick(this.Instance, AEventId)

proc `OnEnter=`*(this: TSpinEdit, AEventId: TNotifyEvent)  =
  SpinEdit_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TSpinEdit, AEventId: TNotifyEvent)  =
  SpinEdit_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TSpinEdit, AEventId: TKeyEvent)  =
  SpinEdit_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TSpinEdit, AEventId: TKeyPressEvent)  =
  SpinEdit_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TSpinEdit, AEventId: TKeyEvent)  =
  SpinEdit_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TSpinEdit, AEventId: TMouseEvent)  =
  SpinEdit_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TSpinEdit, AEventId: TMouseMoveEvent)  =
  SpinEdit_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TSpinEdit, AEventId: TMouseEvent)  =
  SpinEdit_SetOnMouseUp(this.Instance, AEventId)

proc Alignment*(this: TSpinEdit): TAlignment  =
  return SpinEdit_GetAlignment(this.Instance)

proc `Alignment=`*(this: TSpinEdit, AValue: TAlignment)  =
  SpinEdit_SetAlignment(this.Instance, AValue)

proc CanUndo*(this: TSpinEdit): bool  =
  return SpinEdit_GetCanUndo(this.Instance)

proc Modified*(this: TSpinEdit): bool  =
  return SpinEdit_GetModified(this.Instance)

proc `Modified=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetModified(this.Instance, AValue)

proc SelLength*(this: TSpinEdit): int32  =
  return SpinEdit_GetSelLength(this.Instance)

proc `SelLength=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetSelLength(this.Instance, AValue)

proc SelStart*(this: TSpinEdit): int32  =
  return SpinEdit_GetSelStart(this.Instance)

proc `SelStart=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetSelStart(this.Instance, AValue)

proc SelText*(this: TSpinEdit): string  =
  return $SpinEdit_GetSelText(this.Instance)

proc `SelText=`*(this: TSpinEdit, AValue: string)  =
  SpinEdit_SetSelText(this.Instance, AValue)

proc Text*(this: TSpinEdit): string  =
  return $SpinEdit_GetText(this.Instance)

proc `Text=`*(this: TSpinEdit, AValue: string)  =
  SpinEdit_SetText(this.Instance, AValue)

proc TextHint*(this: TSpinEdit): string  =
  return $SpinEdit_GetTextHint(this.Instance)

proc `TextHint=`*(this: TSpinEdit, AValue: string)  =
  SpinEdit_SetTextHint(this.Instance, AValue)

proc DockClientCount*(this: TSpinEdit): int32  =
  return SpinEdit_GetDockClientCount(this.Instance)

proc DockSite*(this: TSpinEdit): bool  =
  return SpinEdit_GetDockSite(this.Instance)

proc `DockSite=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetDockSite(this.Instance, AValue)

proc DoubleBuffered*(this: TSpinEdit): bool  =
  return SpinEdit_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetDoubleBuffered(this.Instance, AValue)

proc MouseInClient*(this: TSpinEdit): bool  =
  return SpinEdit_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TSpinEdit): int32  =
  return SpinEdit_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TSpinEdit): TBrush  =
  return SpinEdit_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TSpinEdit): int32  =
  return SpinEdit_GetControlCount(this.Instance)

proc Handle*(this: TSpinEdit): HWND  =
  return SpinEdit_GetHandle(this.Instance)

proc ParentDoubleBuffered*(this: TSpinEdit): bool  =
  return SpinEdit_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentWindow*(this: TSpinEdit): HWND  =
  return SpinEdit_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TSpinEdit, AValue: HWND)  =
  SpinEdit_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TSpinEdit): bool  =
  return SpinEdit_GetShowing(this.Instance)

proc UseDockManager*(this: TSpinEdit): bool  =
  return SpinEdit_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TSpinEdit, AValue: bool)  =
  SpinEdit_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TSpinEdit): TAction  =
  return SpinEdit_GetAction(this.Instance).AsAction

proc `Action=`*(this: TSpinEdit, AValue: TAction)  =
  SpinEdit_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TSpinEdit): TAlign  =
  return SpinEdit_GetAlign(this.Instance)

proc `Align=`*(this: TSpinEdit, AValue: TAlign)  =
  SpinEdit_SetAlign(this.Instance, AValue)

proc BiDiMode*(this: TSpinEdit): TBiDiMode  =
  return SpinEdit_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TSpinEdit, AValue: TBiDiMode)  =
  SpinEdit_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TSpinEdit): TRect  =
  SpinEdit_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TSpinEdit, AValue: TRect)  =
  var ps1 = AValue
  SpinEdit_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TSpinEdit): int32  =
  return SpinEdit_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TSpinEdit): TPoint  =
  SpinEdit_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TSpinEdit): TRect  =
  SpinEdit_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TSpinEdit): int32  =
  return SpinEdit_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TSpinEdit): TControlState  =
  return SpinEdit_GetControlState(this.Instance)

proc `ControlState=`*(this: TSpinEdit, AValue: TControlState)  =
  SpinEdit_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TSpinEdit): TControlStyle  =
  return SpinEdit_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TSpinEdit, AValue: TControlStyle)  =
  SpinEdit_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TSpinEdit): bool  =
  return SpinEdit_GetFloating(this.Instance)

proc Parent*(this: TSpinEdit): TWinControl  =
  return SpinEdit_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TSpinEdit, AValue: TWinControl)  =
  SpinEdit_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TSpinEdit): int32  =
  return SpinEdit_GetLeft(this.Instance)

proc `Left=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetLeft(this.Instance, AValue)

proc Top*(this: TSpinEdit): int32  =
  return SpinEdit_GetTop(this.Instance)

proc `Top=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetTop(this.Instance, AValue)

proc Width*(this: TSpinEdit): int32  =
  return SpinEdit_GetWidth(this.Instance)

proc `Width=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetWidth(this.Instance, AValue)

proc Height*(this: TSpinEdit): int32  =
  return SpinEdit_GetHeight(this.Instance)

proc `Height=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetHeight(this.Instance, AValue)

proc Cursor*(this: TSpinEdit): TCursor  =
  return SpinEdit_GetCursor(this.Instance)

proc `Cursor=`*(this: TSpinEdit, AValue: TCursor)  =
  SpinEdit_SetCursor(this.Instance, AValue)

proc Hint*(this: TSpinEdit): string  =
  return $SpinEdit_GetHint(this.Instance)

proc `Hint=`*(this: TSpinEdit, AValue: string)  =
  SpinEdit_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TSpinEdit): int32  =
  return SpinEdit_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TSpinEdit): int32  =
  return SpinEdit_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TSpinEdit, AValue: int32)  =
  SpinEdit_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TSpinEdit): TComponent  =
  return SpinEdit_GetOwner(this.Instance).AsComponent

proc Name*(this: TSpinEdit): string  =
  return $SpinEdit_GetName(this.Instance)

proc `Name=`*(this: TSpinEdit, AValue: string)  =
  SpinEdit_SetName(this.Instance, AValue)

proc Tag*(this: TSpinEdit): int  =
  return SpinEdit_GetTag(this.Instance)

proc `Tag=`*(this: TSpinEdit, AValue: int)  =
  SpinEdit_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TSpinEdit): TAnchorSide  =
  return SpinEdit_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TSpinEdit, AValue: TAnchorSide)  =
  SpinEdit_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TSpinEdit): TAnchorSide  =
  return SpinEdit_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TSpinEdit, AValue: TAnchorSide)  =
  SpinEdit_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TSpinEdit): TAnchorSide  =
  return SpinEdit_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TSpinEdit, AValue: TAnchorSide)  =
  SpinEdit_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TSpinEdit): TAnchorSide  =
  return SpinEdit_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TSpinEdit, AValue: TAnchorSide)  =
  SpinEdit_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TSpinEdit): TControlChildSizing  =
  return SpinEdit_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TSpinEdit, AValue: TControlChildSizing)  =
  SpinEdit_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TSpinEdit): TControlBorderSpacing  =
  return SpinEdit_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TSpinEdit, AValue: TControlBorderSpacing)  =
  SpinEdit_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TSpinEdit, Index: int32): TControl  =
  return SpinEdit_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TSpinEdit, Index: int32): TControl  =
  return SpinEdit_GetControls(this.Instance, Index).AsControl

proc Components*(this: TSpinEdit, AIndex: int32): TComponent  =
  return SpinEdit_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TSpinEdit, AKind: TAnchorKind): TAnchorSide  =
  return SpinEdit_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TSpinEditClass*(): TClass = SpinEdit_StaticClassType()


#------------------------- TMiniWebview -------------------------

proc Free*(this: TMiniWebview) = defaultFree: MiniWebview_Free

proc NewMiniWebview*(AOwner: TComponent): TMiniWebview =
  new(result)
  result.Instance = MiniWebview_Create(CheckPtr(AOwner))

proc Navigate*(this: TMiniWebview, AURL: string)  =
  MiniWebview_Navigate(this.Instance, AURL)

proc GoBack*(this: TMiniWebview)  =
  MiniWebview_GoBack(this.Instance)

proc GoForward*(this: TMiniWebview)  =
  MiniWebview_GoForward(this.Instance)

proc GoHome*(this: TMiniWebview)  =
  MiniWebview_GoHome(this.Instance)

proc GoSearch*(this: TMiniWebview)  =
  MiniWebview_GoSearch(this.Instance)

proc Refresh*(this: TMiniWebview) =
  MiniWebview_Refresh(this.Instance)

proc Stop*(this: TMiniWebview)  =
  MiniWebview_Stop(this.Instance)

proc SetBounds*(this: TMiniWebview, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  MiniWebview_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc ExecuteScript*(this: TMiniWebview, AScriptText: string, AScriptType: string): string  =
  return $MiniWebview_ExecuteScript(this.Instance, AScriptText, AScriptType)

proc ExecuteJS*(this: TMiniWebview, AScriptText: string): string  =
  return $MiniWebview_ExecuteJS(this.Instance, AScriptText)

proc LoadHTML*(this: TMiniWebview, AStr: string)  =
  MiniWebview_LoadHTML(this.Instance, AStr)

proc CanFocus*(this: TMiniWebview): bool =
  return MiniWebview_CanFocus(this.Instance)

proc ContainsControl*(this: TMiniWebview, Control: TControl): bool =
  return MiniWebview_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TMiniWebview, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return MiniWebview_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TMiniWebview) =
  MiniWebview_DisableAlign(this.Instance)

proc EnableAlign*(this: TMiniWebview) =
  MiniWebview_EnableAlign(this.Instance)

proc FindChildControl*(this: TMiniWebview, ControlName: string): TControl =
  return MiniWebview_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TMiniWebview, AllLevels: bool) =
  MiniWebview_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TMiniWebview): bool =
  return MiniWebview_Focused(this.Instance)

proc HandleAllocated*(this: TMiniWebview): bool =
  return MiniWebview_HandleAllocated(this.Instance)

proc InsertControl*(this: TMiniWebview, AControl: TControl) =
  MiniWebview_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TMiniWebview) =
  MiniWebview_Invalidate(this.Instance)

proc PaintTo*(this: TMiniWebview, DC: HDC, X: int32, Y: int32) =
  MiniWebview_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TMiniWebview, AControl: TControl) =
  MiniWebview_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TMiniWebview) =
  MiniWebview_Realign(this.Instance)

proc Repaint*(this: TMiniWebview) =
  MiniWebview_Repaint(this.Instance)

proc ScaleBy*(this: TMiniWebview, M: int32, D: int32) =
  MiniWebview_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TMiniWebview, DeltaX: int32, DeltaY: int32) =
  MiniWebview_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetFocus*(this: TMiniWebview) =
  MiniWebview_SetFocus(this.Instance)

proc Update*(this: TMiniWebview) =
  MiniWebview_Update(this.Instance)

proc BringToFront*(this: TMiniWebview) =
  MiniWebview_BringToFront(this.Instance)

proc ClientToScreen*(this: TMiniWebview, Point: TPoint): TPoint =
  var ps1 = Point
  MiniWebview_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TMiniWebview, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  MiniWebview_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TMiniWebview): bool =
  return MiniWebview_Dragging(this.Instance)

proc HasParent*(this: TMiniWebview): bool =
  return MiniWebview_HasParent(this.Instance)

proc Hide*(this: TMiniWebview) =
  MiniWebview_Hide(this.Instance)

proc Perform*(this: TMiniWebview, Msg: uint32, WParam: uint, LParam: int): int =
  return MiniWebview_Perform(this.Instance, Msg, WParam, LParam)

proc ScreenToClient*(this: TMiniWebview, Point: TPoint): TPoint =
  var ps1 = Point
  MiniWebview_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TMiniWebview, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  MiniWebview_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TMiniWebview) =
  MiniWebview_SendToBack(this.Instance)

proc Show*(this: TMiniWebview) =
  MiniWebview_Show(this.Instance)

proc GetTextBuf*(this: TMiniWebview, Buffer: string, BufSize: int32): int32 =
  return MiniWebview_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TMiniWebview): int32 =
  return MiniWebview_GetTextLen(this.Instance)

proc SetTextBuf*(this: TMiniWebview, Buffer: string) =
  MiniWebview_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TMiniWebview, AName: string): TComponent =
  return MiniWebview_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TMiniWebview): string =
  return $MiniWebview_GetNamePath(this.Instance)

proc Assign*(this: TMiniWebview, Source: TObject) =
  MiniWebview_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TMiniWebview): TClass =
  return MiniWebview_ClassType(this.Instance)

proc ClassName*(this: TMiniWebview): string =
  return $MiniWebview_ClassName(this.Instance)

proc InstanceSize*(this: TMiniWebview): int32 =
  return MiniWebview_InstanceSize(this.Instance)

proc InheritsFrom*(this: TMiniWebview, AClass: TClass): bool =
  return MiniWebview_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TMiniWebview, Obj: TObject): bool =
  return MiniWebview_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TMiniWebview): int32 =
  return MiniWebview_GetHashCode(this.Instance)

proc ToString*(this: TMiniWebview): string =
  return $MiniWebview_ToString(this.Instance)

proc AnchorToNeighbour*(this: TMiniWebview, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  MiniWebview_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TMiniWebview, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  MiniWebview_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TMiniWebview, ASibling: TControl) =
  MiniWebview_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TMiniWebview, ASibling: TControl) =
  MiniWebview_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TMiniWebview, ASide: TAnchorKind, ASibling: TControl) =
  MiniWebview_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TMiniWebview, ATheAlign: TAlign, ASpace: int32) =
  MiniWebview_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TMiniWebview, ASpace: int32) =
  MiniWebview_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TMiniWebview, ASize: int32): int32 =
  return MiniWebview_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TMiniWebview, ASize: int32): int32 =
  return MiniWebview_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TMiniWebview, ASize: int32): int32 =
  return MiniWebview_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TMiniWebview, ASize: int32): int32 =
  return MiniWebview_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TMiniWebview, ASize: int32): int32 =
  return MiniWebview_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TMiniWebview, ASize: int32): int32 =
  return MiniWebview_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TMiniWebview, ASize: int32): int32 =
  return MiniWebview_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TMiniWebview, ASize: int32): int32 =
  return MiniWebview_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TMiniWebview, ASize: int32): int32 =
  return MiniWebview_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TMiniWebview, ASize: int32): int32 =
  return MiniWebview_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TMiniWebview, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  MiniWebview_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TMiniWebview, ADesignTimePPI: int32) =
  MiniWebview_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TMiniWebview, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  MiniWebview_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc ReadyState*(this: TMiniWebview): TReadyState  =
  return MiniWebview_GetReadyState(this.Instance)

proc Align*(this: TMiniWebview): TAlign  =
  return MiniWebview_GetAlign(this.Instance)

proc `Align=`*(this: TMiniWebview, AValue: TAlign)  =
  MiniWebview_SetAlign(this.Instance, AValue)

proc Anchors*(this: TMiniWebview): TAnchors  =
  return MiniWebview_GetAnchors(this.Instance)

proc `Anchors=`*(this: TMiniWebview, AValue: TAnchors)  =
  MiniWebview_SetAnchors(this.Instance, AValue)

proc Constraints*(this: TMiniWebview): TSizeConstraints  =
  return MiniWebview_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TMiniWebview, AValue: TSizeConstraints)  =
  MiniWebview_SetConstraints(this.Instance, CheckPtr(AValue))

proc Enabled*(this: TMiniWebview): bool  =
  return MiniWebview_GetEnabled(this.Instance)

proc `Enabled=`*(this: TMiniWebview, AValue: bool)  =
  MiniWebview_SetEnabled(this.Instance, AValue)

proc Visible*(this: TMiniWebview): bool  =
  return MiniWebview_GetVisible(this.Instance)

proc `Visible=`*(this: TMiniWebview, AValue: bool)  =
  MiniWebview_SetVisible(this.Instance, AValue)

proc `OnTitleChange=`*(this: TMiniWebview, AEventId: TWebTitleChangeEvent)  =
  MiniWebview_SetOnTitleChange(this.Instance, AEventId)

proc `OnJSExternal=`*(this: TMiniWebview, AEventId: TWebJSExternalEvent)  =
  MiniWebview_SetOnJSExternal(this.Instance, AEventId)

proc DockClientCount*(this: TMiniWebview): int32  =
  return MiniWebview_GetDockClientCount(this.Instance)

proc DockSite*(this: TMiniWebview): bool  =
  return MiniWebview_GetDockSite(this.Instance)

proc `DockSite=`*(this: TMiniWebview, AValue: bool)  =
  MiniWebview_SetDockSite(this.Instance, AValue)

proc DoubleBuffered*(this: TMiniWebview): bool  =
  return MiniWebview_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TMiniWebview, AValue: bool)  =
  MiniWebview_SetDoubleBuffered(this.Instance, AValue)

proc MouseInClient*(this: TMiniWebview): bool  =
  return MiniWebview_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TMiniWebview): int32  =
  return MiniWebview_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TMiniWebview): TBrush  =
  return MiniWebview_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TMiniWebview): int32  =
  return MiniWebview_GetControlCount(this.Instance)

proc Handle*(this: TMiniWebview): HWND  =
  return MiniWebview_GetHandle(this.Instance)

proc ParentDoubleBuffered*(this: TMiniWebview): bool  =
  return MiniWebview_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TMiniWebview, AValue: bool)  =
  MiniWebview_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentWindow*(this: TMiniWebview): HWND  =
  return MiniWebview_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TMiniWebview, AValue: HWND)  =
  MiniWebview_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TMiniWebview): bool  =
  return MiniWebview_GetShowing(this.Instance)

proc TabOrder*(this: TMiniWebview): TTabOrder  =
  return MiniWebview_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TMiniWebview, AValue: TTabOrder)  =
  MiniWebview_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TMiniWebview): bool  =
  return MiniWebview_GetTabStop(this.Instance)

proc `TabStop=`*(this: TMiniWebview, AValue: bool)  =
  MiniWebview_SetTabStop(this.Instance, AValue)

proc UseDockManager*(this: TMiniWebview): bool  =
  return MiniWebview_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TMiniWebview, AValue: bool)  =
  MiniWebview_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TMiniWebview): TAction  =
  return MiniWebview_GetAction(this.Instance).AsAction

proc `Action=`*(this: TMiniWebview, AValue: TAction)  =
  MiniWebview_SetAction(this.Instance, CheckPtr(AValue))

proc BiDiMode*(this: TMiniWebview): TBiDiMode  =
  return MiniWebview_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TMiniWebview, AValue: TBiDiMode)  =
  MiniWebview_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TMiniWebview): TRect  =
  MiniWebview_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TMiniWebview, AValue: TRect)  =
  var ps1 = AValue
  MiniWebview_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TMiniWebview): int32  =
  return MiniWebview_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TMiniWebview, AValue: int32)  =
  MiniWebview_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TMiniWebview): TPoint  =
  MiniWebview_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TMiniWebview): TRect  =
  MiniWebview_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TMiniWebview): int32  =
  return MiniWebview_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TMiniWebview, AValue: int32)  =
  MiniWebview_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TMiniWebview): TControlState  =
  return MiniWebview_GetControlState(this.Instance)

proc `ControlState=`*(this: TMiniWebview, AValue: TControlState)  =
  MiniWebview_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TMiniWebview): TControlStyle  =
  return MiniWebview_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TMiniWebview, AValue: TControlStyle)  =
  MiniWebview_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TMiniWebview): bool  =
  return MiniWebview_GetFloating(this.Instance)

proc ShowHint*(this: TMiniWebview): bool  =
  return MiniWebview_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TMiniWebview, AValue: bool)  =
  MiniWebview_SetShowHint(this.Instance, AValue)

proc Parent*(this: TMiniWebview): TWinControl  =
  return MiniWebview_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TMiniWebview, AValue: TWinControl)  =
  MiniWebview_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TMiniWebview): int32  =
  return MiniWebview_GetLeft(this.Instance)

proc `Left=`*(this: TMiniWebview, AValue: int32)  =
  MiniWebview_SetLeft(this.Instance, AValue)

proc Top*(this: TMiniWebview): int32  =
  return MiniWebview_GetTop(this.Instance)

proc `Top=`*(this: TMiniWebview, AValue: int32)  =
  MiniWebview_SetTop(this.Instance, AValue)

proc Width*(this: TMiniWebview): int32  =
  return MiniWebview_GetWidth(this.Instance)

proc `Width=`*(this: TMiniWebview, AValue: int32)  =
  MiniWebview_SetWidth(this.Instance, AValue)

proc Height*(this: TMiniWebview): int32  =
  return MiniWebview_GetHeight(this.Instance)

proc `Height=`*(this: TMiniWebview, AValue: int32)  =
  MiniWebview_SetHeight(this.Instance, AValue)

proc Cursor*(this: TMiniWebview): TCursor  =
  return MiniWebview_GetCursor(this.Instance)

proc `Cursor=`*(this: TMiniWebview, AValue: TCursor)  =
  MiniWebview_SetCursor(this.Instance, AValue)

proc Hint*(this: TMiniWebview): string  =
  return $MiniWebview_GetHint(this.Instance)

proc `Hint=`*(this: TMiniWebview, AValue: string)  =
  MiniWebview_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TMiniWebview): int32  =
  return MiniWebview_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TMiniWebview): int32  =
  return MiniWebview_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TMiniWebview, AValue: int32)  =
  MiniWebview_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TMiniWebview): TComponent  =
  return MiniWebview_GetOwner(this.Instance).AsComponent

proc Name*(this: TMiniWebview): string  =
  return $MiniWebview_GetName(this.Instance)

proc `Name=`*(this: TMiniWebview, AValue: string)  =
  MiniWebview_SetName(this.Instance, AValue)

proc Tag*(this: TMiniWebview): int  =
  return MiniWebview_GetTag(this.Instance)

proc `Tag=`*(this: TMiniWebview, AValue: int)  =
  MiniWebview_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TMiniWebview): TAnchorSide  =
  return MiniWebview_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TMiniWebview, AValue: TAnchorSide)  =
  MiniWebview_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TMiniWebview): TAnchorSide  =
  return MiniWebview_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TMiniWebview, AValue: TAnchorSide)  =
  MiniWebview_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TMiniWebview): TAnchorSide  =
  return MiniWebview_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TMiniWebview, AValue: TAnchorSide)  =
  MiniWebview_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TMiniWebview): TAnchorSide  =
  return MiniWebview_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TMiniWebview, AValue: TAnchorSide)  =
  MiniWebview_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TMiniWebview): TControlChildSizing  =
  return MiniWebview_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TMiniWebview, AValue: TControlChildSizing)  =
  MiniWebview_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TMiniWebview): TControlBorderSpacing  =
  return MiniWebview_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TMiniWebview, AValue: TControlBorderSpacing)  =
  MiniWebview_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TMiniWebview, Index: int32): TControl  =
  return MiniWebview_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TMiniWebview, Index: int32): TControl  =
  return MiniWebview_GetControls(this.Instance, Index).AsControl

proc Components*(this: TMiniWebview, AIndex: int32): TComponent  =
  return MiniWebview_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TMiniWebview, AKind: TAnchorKind): TAnchorSide  =
  return MiniWebview_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TMiniWebviewClass*(): TClass = MiniWebview_StaticClassType()


#------------------------- TCanvas -------------------------

proc Free*(this: TCanvas) = defaultFree: Canvas_Free

proc NewCanvas*(): TCanvas =
  new(result, Free)
  result.Instance = Canvas_Create()

proc Arc*(this: TCanvas, X1: int32, Y1: int32, X2: int32, Y2: int32, X3: int32, Y3: int32, X4: int32, Y4: int32)  =
  Canvas_Arc(this.Instance, X1, Y1, X2, Y2, X3, Y3, X4, Y4)

proc ArcTo*(this: TCanvas, X1: int32, Y1: int32, X2: int32, Y2: int32, X3: int32, Y3: int32, X4: int32, Y4: int32)  =
  Canvas_ArcTo(this.Instance, X1, Y1, X2, Y2, X3, Y3, X4, Y4)

proc AngleArc*(this: TCanvas, X: int32, Y: int32, Radius: uint32, StartAngle: float32, SweepAngle: float32)  =
  var ps4 = StartAngle
  var ps5 = SweepAngle
  Canvas_AngleArc(this.Instance, X, Y, Radius, ps4, ps5)

proc Chord*(this: TCanvas, X1: int32, Y1: int32, X2: int32, Y2: int32, X3: int32, Y3: int32, X4: int32, Y4: int32)  =
  Canvas_Chord(this.Instance, X1, Y1, X2, Y2, X3, Y3, X4, Y4)

proc Ellipse*(this: TCanvas, X1: int32, Y1: int32, X2: int32, Y2: int32)  =
  Canvas_Ellipse(this.Instance, X1, Y1, X2, Y2)

proc FloodFill*(this: TCanvas, X: int32, Y: int32, Color: TColor, FillStyle: TFillStyle)  =
  Canvas_FloodFill(this.Instance, X, Y, Color, FillStyle)

proc HandleAllocated*(this: TCanvas): bool  =
  return Canvas_HandleAllocated(this.Instance)

proc LineTo*(this: TCanvas, X: int32, Y: int32)  =
  Canvas_LineTo(this.Instance, X, Y)

proc MoveTo*(this: TCanvas, X: int32, Y: int32)  =
  Canvas_MoveTo(this.Instance, X, Y)

proc Pie*(this: TCanvas, X1: int32, Y1: int32, X2: int32, Y2: int32, X3: int32, Y3: int32, X4: int32, Y4: int32)  =
  Canvas_Pie(this.Instance, X1, Y1, X2, Y2, X3, Y3, X4, Y4)

proc Rectangle*(this: TCanvas, X1: int32, Y1: int32, X2: int32, Y2: int32)  =
  Canvas_Rectangle(this.Instance, X1, Y1, X2, Y2)

proc Refresh*(this: TCanvas)  =
  Canvas_Refresh(this.Instance)

proc RoundRect*(this: TCanvas, X1: int32, Y1: int32, X2: int32, Y2: int32, X3: int32, Y3: int32)  =
  Canvas_RoundRect(this.Instance, X1, Y1, X2, Y2, X3, Y3)

proc StretchDraw*(this: TCanvas, Rect: TRect, Graphic: TGraphic)  =
  var ps1 = Rect
  Canvas_StretchDraw(this.Instance, ps1, CheckPtr(Graphic))

proc TextExtent*(this: TCanvas, Text: string): TSize  =
  Canvas_TextExtent(this.Instance, Text, result)

proc TextOut*(this: TCanvas, X: int32, Y: int32, Text: string)  =
  Canvas_TextOut(this.Instance, X, Y, Text)

proc Lock*(this: TCanvas)  =
  Canvas_Lock(this.Instance)

proc TextHeight*(this: TCanvas, Text: string): int32  =
  return Canvas_TextHeight(this.Instance, Text)

proc TextWidth*(this: TCanvas, Text: string): int32  =
  return Canvas_TextWidth(this.Instance, Text)

proc Assign*(this: TCanvas, Source: TObject)  =
  Canvas_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TCanvas): string  =
  return $Canvas_GetNamePath(this.Instance)

proc ClassType*(this: TCanvas): TClass =
  return Canvas_ClassType(this.Instance)

proc ClassName*(this: TCanvas): string =
  return $Canvas_ClassName(this.Instance)

proc InstanceSize*(this: TCanvas): int32 =
  return Canvas_InstanceSize(this.Instance)

proc InheritsFrom*(this: TCanvas, AClass: TClass): bool =
  return Canvas_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TCanvas, Obj: TObject): bool =
  return Canvas_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TCanvas): int32 =
  return Canvas_GetHashCode(this.Instance)

proc ToString*(this: TCanvas): string =
  return $Canvas_ToString(this.Instance)

proc Handle*(this: TCanvas): HDC  =
  return Canvas_GetHandle(this.Instance)

proc `Handle=`*(this: TCanvas, AValue: HDC)  =
  Canvas_SetHandle(this.Instance, AValue)

proc Brush*(this: TCanvas): TBrush  =
  return Canvas_GetBrush(this.Instance).AsBrush

proc `Brush=`*(this: TCanvas, AValue: TBrush)  =
  Canvas_SetBrush(this.Instance, CheckPtr(AValue))

proc CopyMode*(this: TCanvas): int32  =
  return Canvas_GetCopyMode(this.Instance)

proc `CopyMode=`*(this: TCanvas, AValue: int32)  =
  Canvas_SetCopyMode(this.Instance, AValue)

proc Font*(this: TCanvas): TFont  =
  return Canvas_GetFont(this.Instance).AsFont

proc `Font=`*(this: TCanvas, AValue: TFont)  =
  Canvas_SetFont(this.Instance, CheckPtr(AValue))

proc Pen*(this: TCanvas): TPen  =
  return Canvas_GetPen(this.Instance).AsPen

proc `Pen=`*(this: TCanvas, AValue: TPen)  =
  Canvas_SetPen(this.Instance, CheckPtr(AValue))

proc `OnChange=`*(this: TCanvas, AEventId: TNotifyEvent)  =
  Canvas_SetOnChange(this.Instance, AEventId)

proc `OnChanging=`*(this: TCanvas, AEventId: TNotifyEvent)  =
  Canvas_SetOnChanging(this.Instance, AEventId)

proc Pixels*(this: TCanvas, X: int32, Y: int32): TColor  =
  return Canvas_GetPixels(this.Instance, X, Y)

proc `Pixels=`*(this: TCanvas, X: int32, Y: int32, AValue: TColor)  =
  Canvas_SetPixels(this.Instance, X, Y, AValue)

proc TCanvasClass*(): TClass = Canvas_StaticClassType()


proc BrushCopy*(this: TCanvas, Dest: TRect, Bitmap: TBitmap, Source: TRect, Color: TColor)  =
  var ps1 = Dest
  var ps3 = Source
  Canvas_BrushCopy(this.Instance, ps1, CheckPtr(Bitmap), ps3, Color)

proc CopyRect*(this: TCanvas, Dest: TRect, Canvas: TCanvas, Source: TRect)  =
  var ps1 = Dest
  var ps3 = Source
  Canvas_CopyRect(this.Instance, ps1, CheckPtr(Canvas), ps3)

proc Draw*(this: TCanvas, X: int32, Y: int32, Graphic: TGraphic)  =
  Canvas_Draw1(this.Instance, X, Y, CheckPtr(Graphic))

proc Draw*(this: TCanvas, X: int32, Y: int32, Graphic: TGraphic, Opacity: int8)  =
  Canvas_Draw2(this.Instance, X, Y, CheckPtr(Graphic), Opacity)

proc DrawFocusRect*(this: TCanvas, ARect: TRect)  =
  var ps1 = ARect
  Canvas_DrawFocusRect(this.Instance, ps1)

proc FillRect*(this: TCanvas, Rect: TRect)  =
  var ps1 = Rect
  Canvas_FillRect(this.Instance, ps1)

proc FrameRect*(this: TCanvas, Rect: TRect)  =
  var ps1 = Rect
  Canvas_FrameRect(this.Instance, ps1)

proc TextRect*(this: TCanvas, Rect: TRect, X: int32, Y: int32, Text: string)  =
  var ps1 = Rect
  Canvas_TextRect1(this.Instance, ps1, X, Y, Text)

proc TextRect*(this: TCanvas, Rect: var TRect, Text: string, TextFormat: TTextFormat): int32  =
  return Canvas_TextRect2(this.Instance, Rect, Text, TextFormat)

proc Polygon*(this: TCanvas, APoints: var TPoint, ALen: int32)  =
  Canvas_Polygon(this.Instance, APoints, ALen)

proc Polyline*(this: TCanvas, APoints: var TPoint, ALen: int32)  =
  Canvas_Polyline(this.Instance, APoints, ALen)

proc PolyBezier*(this: TCanvas, APoints: var TPoint, ALen: int32)  =
  Canvas_PolyBezier(this.Instance, APoints, ALen)

#------------------------- TApplication -------------------------

proc Free*(this: TApplication) = defaultFree: Application_Free

proc NewApplication*(AOwner: TComponent): TApplication =
  new(result)
  result.Instance = Application_Create(CheckPtr(AOwner))

proc ActivateHint*(this: TApplication, CursorPos: TPoint)  =
  var ps1 = CursorPos
  Application_ActivateHint(this.Instance, ps1)

proc BringToFront*(this: TApplication)  =
  Application_BringToFront(this.Instance)

proc CancelHint*(this: TApplication)  =
  Application_CancelHint(this.Instance)

proc HandleMessage*(this: TApplication)  =
  Application_HandleMessage(this.Instance)

proc HideHint*(this: TApplication)  =
  Application_HideHint(this.Instance)

proc Minimize*(this: TApplication)  =
  Application_Minimize(this.Instance)

proc ModalStarted*(this: TApplication)  =
  Application_ModalStarted(this.Instance)

proc ModalFinished*(this: TApplication)  =
  Application_ModalFinished(this.Instance)

proc ProcessMessages*(this: TApplication)  =
  Application_ProcessMessages(this.Instance)

proc Restore*(this: TApplication)  =
  Application_Restore(this.Instance)

proc RestoreTopMosts*(this: TApplication)  =
  Application_RestoreTopMosts(this.Instance)

proc Terminate*(this: TApplication)  =
  Application_Terminate(this.Instance)

proc MessageBox*(this: TApplication, Text: string, Caption: string, Flags: int32): int32  =
  return Application_MessageBox(this.Instance, Text, Caption, Flags)

proc FindComponent*(this: TApplication, AName: string): TComponent =
  return Application_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TApplication): string =
  return $Application_GetNamePath(this.Instance)

proc HasParent*(this: TApplication): bool =
  return Application_HasParent(this.Instance)

proc Assign*(this: TApplication, Source: TObject) =
  Application_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TApplication): TClass =
  return Application_ClassType(this.Instance)

proc ClassName*(this: TApplication): string =
  return $Application_ClassName(this.Instance)

proc InstanceSize*(this: TApplication): int32 =
  return Application_InstanceSize(this.Instance)

proc InheritsFrom*(this: TApplication, AClass: TClass): bool =
  return Application_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TApplication, Obj: TObject): bool =
  return Application_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TApplication): int32 =
  return Application_GetHashCode(this.Instance)

proc ToString*(this: TApplication): string =
  return $Application_ToString(this.Instance)

proc Scaled*(this: TApplication): bool  =
  return Application_GetScaled(this.Instance)

proc `Scaled=`*(this: TApplication, AValue: bool)  =
  Application_SetScaled(this.Instance, AValue)

proc SingleInstanceEnabled*(this: TApplication): bool  =
  return Application_GetSingleInstanceEnabled(this.Instance)

proc `SingleInstanceEnabled=`*(this: TApplication, AValue: bool)  =
  Application_SetSingleInstanceEnabled(this.Instance, AValue)

proc Location*(this: TApplication): string  =
  return $Application_GetLocation(this.Instance)

proc StopOnException*(this: TApplication): bool  =
  return Application_GetStopOnException(this.Instance)

proc `StopOnException=`*(this: TApplication, AValue: bool)  =
  Application_SetStopOnException(this.Instance, AValue)

proc ExceptionExitCode*(this: TApplication): int32  =
  return Application_GetExceptionExitCode(this.Instance)

proc `ExceptionExitCode=`*(this: TApplication, AValue: int32)  =
  Application_SetExceptionExitCode(this.Instance, AValue)

proc ExeName*(this: TApplication): string  =
  return $Application_GetExeName(this.Instance)

proc Hint*(this: TApplication): string  =
  return $Application_GetHint(this.Instance)

proc `Hint=`*(this: TApplication, AValue: string)  =
  Application_SetHint(this.Instance, AValue)

proc HintColor*(this: TApplication): TColor  =
  return Application_GetHintColor(this.Instance)

proc `HintColor=`*(this: TApplication, AValue: TColor)  =
  Application_SetHintColor(this.Instance, AValue)

proc HintHidePause*(this: TApplication): int32  =
  return Application_GetHintHidePause(this.Instance)

proc `HintHidePause=`*(this: TApplication, AValue: int32)  =
  Application_SetHintHidePause(this.Instance, AValue)

proc HintPause*(this: TApplication): int32  =
  return Application_GetHintPause(this.Instance)

proc `HintPause=`*(this: TApplication, AValue: int32)  =
  Application_SetHintPause(this.Instance, AValue)

proc HintShortCuts*(this: TApplication): bool  =
  return Application_GetHintShortCuts(this.Instance)

proc `HintShortCuts=`*(this: TApplication, AValue: bool)  =
  Application_SetHintShortCuts(this.Instance, AValue)

proc HintShortPause*(this: TApplication): int32  =
  return Application_GetHintShortPause(this.Instance)

proc `HintShortPause=`*(this: TApplication, AValue: int32)  =
  Application_SetHintShortPause(this.Instance, AValue)

proc Icon*(this: TApplication): TIcon  =
  return Application_GetIcon(this.Instance).AsIcon

proc `Icon=`*(this: TApplication, AValue: TIcon)  =
  Application_SetIcon(this.Instance, CheckPtr(AValue))

proc MainForm*(this: TApplication): TForm  =
  return Application_GetMainForm(this.Instance).AsForm

proc MainFormHandle*(this: TApplication): HWND  =
  return Application_GetMainFormHandle(this.Instance)

proc MainFormOnTaskBar*(this: TApplication): bool  =
  return Application_GetMainFormOnTaskBar(this.Instance)

proc `MainFormOnTaskBar=`*(this: TApplication, AValue: bool)  =
  Application_SetMainFormOnTaskBar(this.Instance, AValue)

proc BiDiMode*(this: TApplication): TBiDiMode  =
  return Application_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TApplication, AValue: TBiDiMode)  =
  Application_SetBiDiMode(this.Instance, AValue)

proc ShowHint*(this: TApplication): bool  =
  return Application_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TApplication, AValue: bool)  =
  Application_SetShowHint(this.Instance, AValue)

proc ShowMainForm*(this: TApplication): bool  =
  return Application_GetShowMainForm(this.Instance)

proc `ShowMainForm=`*(this: TApplication, AValue: bool)  =
  Application_SetShowMainForm(this.Instance, AValue)

proc Title*(this: TApplication): string  =
  return $Application_GetTitle(this.Instance)

proc `Title=`*(this: TApplication, AValue: string)  =
  Application_SetTitle(this.Instance, AValue)

proc `OnActivate=`*(this: TApplication, AEventId: TNotifyEvent)  =
  Application_SetOnActivate(this.Instance, AEventId)

proc `OnDeactivate=`*(this: TApplication, AEventId: TNotifyEvent)  =
  Application_SetOnDeactivate(this.Instance, AEventId)
proc `OnException=`*(this: TApplication, AEventId: TExceptionEvent)  =
  lclapi.exceptionProc = AEventId

proc `OnHelp=`*(this: TApplication, AEventId: THelpEvent)  =
  Application_SetOnHelp(this.Instance, AEventId)

proc `OnHint=`*(this: TApplication, AEventId: TNotifyEvent)  =
  Application_SetOnHint(this.Instance, AEventId)

proc `OnMinimize=`*(this: TApplication, AEventId: TNotifyEvent)  =
  Application_SetOnMinimize(this.Instance, AEventId)

proc `OnRestore=`*(this: TApplication, AEventId: TNotifyEvent)  =
  Application_SetOnRestore(this.Instance, AEventId)

proc `OnShortCut=`*(this: TApplication, AEventId: TShortCutEvent)  =
  Application_SetOnShortCut(this.Instance, AEventId)

proc Handle*(this: TApplication): HWND  =
  return Application_GetHandle(this.Instance)

proc `Handle=`*(this: TApplication, AValue: HWND)  =
  Application_SetHandle(this.Instance, AValue)

proc ComponentCount*(this: TApplication): int32  =
  return Application_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TApplication): int32  =
  return Application_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TApplication, AValue: int32)  =
  Application_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TApplication): TComponent  =
  return Application_GetOwner(this.Instance).AsComponent

proc Name*(this: TApplication): string  =
  return $Application_GetName(this.Instance)

proc `Name=`*(this: TApplication, AValue: string)  =
  Application_SetName(this.Instance, AValue)

proc Tag*(this: TApplication): int  =
  return Application_GetTag(this.Instance)

proc `Tag=`*(this: TApplication, AValue: int)  =
  Application_SetTag(this.Instance, AValue)

proc Components*(this: TApplication, AIndex: int32): TComponent  =
  return Application_GetComponents(this.Instance, AIndex).AsComponent

proc TApplicationClass*(): TClass = Application_StaticClassType()


proc Initialize*(this: TApplication)  =
  Application_Initialize(this.Instance)

proc CreateForm*[T](this: TApplication, x: var T) =
    new(x)
    x.Instance = Application_CreateForm(this.Instance, false)

proc CreateForm*(this: TApplication): TForm =
  AsForm(Application_CreateForm(this.Instance, false))

proc Run*(this: TApplication)  =
  Application_Run(this.Instance)

#------------------------- TMainMenu -------------------------

proc Free*(this: TMainMenu) = defaultFree: MainMenu_Free

proc NewMainMenu*(AOwner: TComponent): TMainMenu =
  new(result)
  result.Instance = MainMenu_Create(CheckPtr(AOwner))

proc FindComponent*(this: TMainMenu, AName: string): TComponent =
  return MainMenu_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TMainMenu): string =
  return $MainMenu_GetNamePath(this.Instance)

proc HasParent*(this: TMainMenu): bool =
  return MainMenu_HasParent(this.Instance)

proc Assign*(this: TMainMenu, Source: TObject) =
  MainMenu_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TMainMenu): TClass =
  return MainMenu_ClassType(this.Instance)

proc ClassName*(this: TMainMenu): string =
  return $MainMenu_ClassName(this.Instance)

proc InstanceSize*(this: TMainMenu): int32 =
  return MainMenu_InstanceSize(this.Instance)

proc InheritsFrom*(this: TMainMenu, AClass: TClass): bool =
  return MainMenu_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TMainMenu, Obj: TObject): bool =
  return MainMenu_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TMainMenu): int32 =
  return MainMenu_GetHashCode(this.Instance)

proc ToString*(this: TMainMenu): string =
  return $MainMenu_ToString(this.Instance)

proc ImagesWidth*(this: TMainMenu): int32  =
  return MainMenu_GetImagesWidth(this.Instance)

proc `ImagesWidth=`*(this: TMainMenu, AValue: int32)  =
  MainMenu_SetImagesWidth(this.Instance, AValue)

proc BiDiMode*(this: TMainMenu): TBiDiMode  =
  return MainMenu_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TMainMenu, AValue: TBiDiMode)  =
  MainMenu_SetBiDiMode(this.Instance, AValue)

proc Images*(this: TMainMenu): TImageList  =
  return MainMenu_GetImages(this.Instance).AsImageList

proc `Images=`*(this: TMainMenu, AValue: TImageList)  =
  MainMenu_SetImages(this.Instance, CheckPtr(AValue))

proc OwnerDraw*(this: TMainMenu): bool  =
  return MainMenu_GetOwnerDraw(this.Instance)

proc `OwnerDraw=`*(this: TMainMenu, AValue: bool)  =
  MainMenu_SetOwnerDraw(this.Instance, AValue)

proc `OnChange=`*(this: TMainMenu, AEventId: TMenuChangeEvent)  =
  MainMenu_SetOnChange(this.Instance, AEventId)

proc Handle*(this: TMainMenu): HMENU  =
  return MainMenu_GetHandle(this.Instance)

proc Items*(this: TMainMenu): TMenuItem  =
  return MainMenu_GetItems(this.Instance).AsMenuItem

proc ComponentCount*(this: TMainMenu): int32  =
  return MainMenu_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TMainMenu): int32  =
  return MainMenu_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TMainMenu, AValue: int32)  =
  MainMenu_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TMainMenu): TComponent  =
  return MainMenu_GetOwner(this.Instance).AsComponent

proc Name*(this: TMainMenu): string  =
  return $MainMenu_GetName(this.Instance)

proc `Name=`*(this: TMainMenu, AValue: string)  =
  MainMenu_SetName(this.Instance, AValue)

proc Tag*(this: TMainMenu): int  =
  return MainMenu_GetTag(this.Instance)

proc `Tag=`*(this: TMainMenu, AValue: int)  =
  MainMenu_SetTag(this.Instance, AValue)

proc Components*(this: TMainMenu, AIndex: int32): TComponent  =
  return MainMenu_GetComponents(this.Instance, AIndex).AsComponent

proc TMainMenuClass*(): TClass = MainMenu_StaticClassType()


#------------------------- TPngImage -------------------------

proc Free*(this: TPngImage) = defaultFree: PngImage_Free

proc NewPngImage*(): TPngImage =
  new(result, Free)
  result.Instance = PngImage_Create()

proc Assign*(this: TPngImage, Source: TObject) =
  PngImage_Assign(this.Instance, CheckPtr(Source))

proc LoadFromStream*(this: TPngImage, Stream: TStream) =
  PngImage_LoadFromStream(this.Instance, CheckPtr(Stream))

proc SaveToStream*(this: TPngImage, Stream: TStream) =
  PngImage_SaveToStream(this.Instance, CheckPtr(Stream))

proc LoadFromResourceName*(this: TPngImage, Instance: uint, Name: string)  =
  PngImage_LoadFromResourceName(this.Instance, Instance, Name)

proc LoadFromResourceID*(this: TPngImage, Instance: uint, ResID: int32)  =
  PngImage_LoadFromResourceID(this.Instance, Instance, ResID)

proc Equals*(this: TPngImage, Obj: TObject): bool =
  return PngImage_Equals(this.Instance, CheckPtr(Obj))

proc LoadFromFile*(this: TPngImage, Filename: string) =
  PngImage_LoadFromFile(this.Instance, Filename)

proc SaveToFile*(this: TPngImage, Filename: string) =
  PngImage_SaveToFile(this.Instance, Filename)

proc SetSize*(this: TPngImage, AWidth: int32, AHeight: int32)  =
  PngImage_SetSize(this.Instance, AWidth, AHeight)

proc GetNamePath*(this: TPngImage): string =
  return $PngImage_GetNamePath(this.Instance)

proc ClassType*(this: TPngImage): TClass =
  return PngImage_ClassType(this.Instance)

proc ClassName*(this: TPngImage): string =
  return $PngImage_ClassName(this.Instance)

proc InstanceSize*(this: TPngImage): int32 =
  return PngImage_InstanceSize(this.Instance)

proc InheritsFrom*(this: TPngImage, AClass: TClass): bool =
  return PngImage_InheritsFrom(this.Instance, AClass)

proc GetHashCode*(this: TPngImage): int32 =
  return PngImage_GetHashCode(this.Instance)

proc ToString*(this: TPngImage): string =
  return $PngImage_ToString(this.Instance)

proc Canvas*(this: TPngImage): TCanvas  =
  return PngImage_GetCanvas(this.Instance).AsCanvas

proc Width*(this: TPngImage): int32  =
  return PngImage_GetWidth(this.Instance)

proc Height*(this: TPngImage): int32  =
  return PngImage_GetHeight(this.Instance)

proc Empty*(this: TPngImage): bool  =
  return PngImage_GetEmpty(this.Instance)

proc Modified*(this: TPngImage): bool  =
  return PngImage_GetModified(this.Instance)

proc `Modified=`*(this: TPngImage, AValue: bool)  =
  PngImage_SetModified(this.Instance, AValue)

proc Palette*(this: TPngImage): HPALETTE  =
  return PngImage_GetPalette(this.Instance)

proc `Palette=`*(this: TPngImage, AValue: HPALETTE)  =
  PngImage_SetPalette(this.Instance, AValue)

proc PaletteModified*(this: TPngImage): bool  =
  return PngImage_GetPaletteModified(this.Instance)

proc `PaletteModified=`*(this: TPngImage, AValue: bool)  =
  PngImage_SetPaletteModified(this.Instance, AValue)

proc Transparent*(this: TPngImage): bool  =
  return PngImage_GetTransparent(this.Instance)

proc `Transparent=`*(this: TPngImage, AValue: bool)  =
  PngImage_SetTransparent(this.Instance, AValue)

proc `OnChange=`*(this: TPngImage, AEventId: TNotifyEvent)  =
  PngImage_SetOnChange(this.Instance, AEventId)

proc TPngImageClass*(): TClass = PngImage_StaticClassType()


#------------------------- TJPEGImage -------------------------

proc Free*(this: TJPEGImage) = defaultFree: JPEGImage_Free

proc NewJPEGImage*(): TJPEGImage =
  new(result, Free)
  result.Instance = JPEGImage_Create()

proc Assign*(this: TJPEGImage, Source: TObject) =
  JPEGImage_Assign(this.Instance, CheckPtr(Source))

proc LoadFromStream*(this: TJPEGImage, Stream: TStream) =
  JPEGImage_LoadFromStream(this.Instance, CheckPtr(Stream))

proc SaveToStream*(this: TJPEGImage, Stream: TStream) =
  JPEGImage_SaveToStream(this.Instance, CheckPtr(Stream))

proc Equals*(this: TJPEGImage, Obj: TObject): bool =
  return JPEGImage_Equals(this.Instance, CheckPtr(Obj))

proc LoadFromFile*(this: TJPEGImage, Filename: string) =
  JPEGImage_LoadFromFile(this.Instance, Filename)

proc SaveToFile*(this: TJPEGImage, Filename: string) =
  JPEGImage_SaveToFile(this.Instance, Filename)

proc SetSize*(this: TJPEGImage, AWidth: int32, AHeight: int32)  =
  JPEGImage_SetSize(this.Instance, AWidth, AHeight)

proc GetNamePath*(this: TJPEGImage): string =
  return $JPEGImage_GetNamePath(this.Instance)

proc ClassType*(this: TJPEGImage): TClass =
  return JPEGImage_ClassType(this.Instance)

proc ClassName*(this: TJPEGImage): string =
  return $JPEGImage_ClassName(this.Instance)

proc InstanceSize*(this: TJPEGImage): int32 =
  return JPEGImage_InstanceSize(this.Instance)

proc InheritsFrom*(this: TJPEGImage, AClass: TClass): bool =
  return JPEGImage_InheritsFrom(this.Instance, AClass)

proc GetHashCode*(this: TJPEGImage): int32 =
  return JPEGImage_GetHashCode(this.Instance)

proc ToString*(this: TJPEGImage): string =
  return $JPEGImage_ToString(this.Instance)

proc PixelFormat*(this: TJPEGImage): TPixelFormat  =
  return JPEGImage_GetPixelFormat(this.Instance)

proc `PixelFormat=`*(this: TJPEGImage, AValue: TJPEGPixelFormat)  =
  JPEGImage_SetPixelFormat(this.Instance, AValue)

proc Performance*(this: TJPEGImage): TJPEGPerformance  =
  return JPEGImage_GetPerformance(this.Instance)

proc `Performance=`*(this: TJPEGImage, AValue: TJPEGPerformance)  =
  JPEGImage_SetPerformance(this.Instance, AValue)

proc Canvas*(this: TJPEGImage): TCanvas  =
  return JPEGImage_GetCanvas(this.Instance).AsCanvas

proc Empty*(this: TJPEGImage): bool  =
  return JPEGImage_GetEmpty(this.Instance)

proc Height*(this: TJPEGImage): int32  =
  return JPEGImage_GetHeight(this.Instance)

proc `Height=`*(this: TJPEGImage, AValue: int32)  =
  JPEGImage_SetHeight(this.Instance, AValue)

proc Modified*(this: TJPEGImage): bool  =
  return JPEGImage_GetModified(this.Instance)

proc `Modified=`*(this: TJPEGImage, AValue: bool)  =
  JPEGImage_SetModified(this.Instance, AValue)

proc Palette*(this: TJPEGImage): HPALETTE  =
  return JPEGImage_GetPalette(this.Instance)

proc `Palette=`*(this: TJPEGImage, AValue: HPALETTE)  =
  JPEGImage_SetPalette(this.Instance, AValue)

proc PaletteModified*(this: TJPEGImage): bool  =
  return JPEGImage_GetPaletteModified(this.Instance)

proc `PaletteModified=`*(this: TJPEGImage, AValue: bool)  =
  JPEGImage_SetPaletteModified(this.Instance, AValue)

proc Transparent*(this: TJPEGImage): bool  =
  return JPEGImage_GetTransparent(this.Instance)

proc `Transparent=`*(this: TJPEGImage, AValue: bool)  =
  JPEGImage_SetTransparent(this.Instance, AValue)

proc Width*(this: TJPEGImage): int32  =
  return JPEGImage_GetWidth(this.Instance)

proc `Width=`*(this: TJPEGImage, AValue: int32)  =
  JPEGImage_SetWidth(this.Instance, AValue)

proc `OnChange=`*(this: TJPEGImage, AEventId: TNotifyEvent)  =
  JPEGImage_SetOnChange(this.Instance, AEventId)

proc TJPEGImageClass*(): TClass = JPEGImage_StaticClassType()


#------------------------- TGIFImage -------------------------

proc Free*(this: TGIFImage) = defaultFree: GIFImage_Free

proc NewGIFImage*(): TGIFImage =
  new(result, Free)
  result.Instance = GIFImage_Create()

proc SaveToStream*(this: TGIFImage, Stream: TStream) =
  GIFImage_SaveToStream(this.Instance, CheckPtr(Stream))

proc LoadFromStream*(this: TGIFImage, Stream: TStream) =
  GIFImage_LoadFromStream(this.Instance, CheckPtr(Stream))

proc Clear*(this: TGIFImage)  =
  GIFImage_Clear(this.Instance)

proc Assign*(this: TGIFImage, Source: TObject) =
  GIFImage_Assign(this.Instance, CheckPtr(Source))

proc Equals*(this: TGIFImage, Obj: TObject): bool =
  return GIFImage_Equals(this.Instance, CheckPtr(Obj))

proc LoadFromFile*(this: TGIFImage, Filename: string) =
  GIFImage_LoadFromFile(this.Instance, Filename)

proc SaveToFile*(this: TGIFImage, Filename: string) =
  GIFImage_SaveToFile(this.Instance, Filename)

proc SetSize*(this: TGIFImage, AWidth: int32, AHeight: int32)  =
  GIFImage_SetSize(this.Instance, AWidth, AHeight)

proc GetNamePath*(this: TGIFImage): string =
  return $GIFImage_GetNamePath(this.Instance)

proc ClassType*(this: TGIFImage): TClass =
  return GIFImage_ClassType(this.Instance)

proc ClassName*(this: TGIFImage): string =
  return $GIFImage_ClassName(this.Instance)

proc InstanceSize*(this: TGIFImage): int32 =
  return GIFImage_InstanceSize(this.Instance)

proc InheritsFrom*(this: TGIFImage, AClass: TClass): bool =
  return GIFImage_InheritsFrom(this.Instance, AClass)

proc GetHashCode*(this: TGIFImage): int32 =
  return GIFImage_GetHashCode(this.Instance)

proc ToString*(this: TGIFImage): string =
  return $GIFImage_ToString(this.Instance)

proc BitsPerPixel*(this: TGIFImage): int32  =
  return GIFImage_GetBitsPerPixel(this.Instance)

proc Empty*(this: TGIFImage): bool  =
  return GIFImage_GetEmpty(this.Instance)

proc Height*(this: TGIFImage): int32  =
  return GIFImage_GetHeight(this.Instance)

proc `Height=`*(this: TGIFImage, AValue: int32)  =
  GIFImage_SetHeight(this.Instance, AValue)

proc Modified*(this: TGIFImage): bool  =
  return GIFImage_GetModified(this.Instance)

proc `Modified=`*(this: TGIFImage, AValue: bool)  =
  GIFImage_SetModified(this.Instance, AValue)

proc Palette*(this: TGIFImage): HPALETTE  =
  return GIFImage_GetPalette(this.Instance)

proc `Palette=`*(this: TGIFImage, AValue: HPALETTE)  =
  GIFImage_SetPalette(this.Instance, AValue)

proc PaletteModified*(this: TGIFImage): bool  =
  return GIFImage_GetPaletteModified(this.Instance)

proc `PaletteModified=`*(this: TGIFImage, AValue: bool)  =
  GIFImage_SetPaletteModified(this.Instance, AValue)

proc Transparent*(this: TGIFImage): bool  =
  return GIFImage_GetTransparent(this.Instance)

proc Width*(this: TGIFImage): int32  =
  return GIFImage_GetWidth(this.Instance)

proc `Width=`*(this: TGIFImage, AValue: int32)  =
  GIFImage_SetWidth(this.Instance, AValue)

proc `OnChange=`*(this: TGIFImage, AEventId: TNotifyEvent)  =
  GIFImage_SetOnChange(this.Instance, AEventId)

proc TGIFImageClass*(): TClass = GIFImage_StaticClassType()


#------------------------- TActionList -------------------------

proc Free*(this: TActionList) = defaultFree: ActionList_Free

proc NewActionList*(AOwner: TComponent): TActionList =
  new(result)
  result.Instance = ActionList_Create(CheckPtr(AOwner))

proc FindComponent*(this: TActionList, AName: string): TComponent =
  return ActionList_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TActionList): string =
  return $ActionList_GetNamePath(this.Instance)

proc HasParent*(this: TActionList): bool =
  return ActionList_HasParent(this.Instance)

proc Assign*(this: TActionList, Source: TObject) =
  ActionList_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TActionList): TClass =
  return ActionList_ClassType(this.Instance)

proc ClassName*(this: TActionList): string =
  return $ActionList_ClassName(this.Instance)

proc InstanceSize*(this: TActionList): int32 =
  return ActionList_InstanceSize(this.Instance)

proc InheritsFrom*(this: TActionList, AClass: TClass): bool =
  return ActionList_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TActionList, Obj: TObject): bool =
  return ActionList_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TActionList): int32 =
  return ActionList_GetHashCode(this.Instance)

proc ToString*(this: TActionList): string =
  return $ActionList_ToString(this.Instance)

proc Images*(this: TActionList): TImageList  =
  return ActionList_GetImages(this.Instance).AsImageList

proc `Images=`*(this: TActionList, AValue: TImageList)  =
  ActionList_SetImages(this.Instance, CheckPtr(AValue))

proc State*(this: TActionList): TActionListState  =
  return ActionList_GetState(this.Instance)

proc `State=`*(this: TActionList, AValue: TActionListState)  =
  ActionList_SetState(this.Instance, AValue)

proc `OnChange=`*(this: TActionList, AEventId: TNotifyEvent)  =
  ActionList_SetOnChange(this.Instance, AEventId)

proc ComponentCount*(this: TActionList): int32  =
  return ActionList_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TActionList): int32  =
  return ActionList_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TActionList, AValue: int32)  =
  ActionList_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TActionList): TComponent  =
  return ActionList_GetOwner(this.Instance).AsComponent

proc Name*(this: TActionList): string  =
  return $ActionList_GetName(this.Instance)

proc `Name=`*(this: TActionList, AValue: string)  =
  ActionList_SetName(this.Instance, AValue)

proc Tag*(this: TActionList): int  =
  return ActionList_GetTag(this.Instance)

proc `Tag=`*(this: TActionList, AValue: int)  =
  ActionList_SetTag(this.Instance, AValue)

proc Components*(this: TActionList, AIndex: int32): TComponent  =
  return ActionList_GetComponents(this.Instance, AIndex).AsComponent

proc TActionListClass*(): TClass = ActionList_StaticClassType()


#------------------------- TAction -------------------------

proc Free*(this: TAction) = defaultFree: Action_Free

proc NewAction*(AOwner: TComponent): TAction =
  new(result)
  result.Instance = Action_Create(CheckPtr(AOwner))

proc Execute*(this: TAction): bool  =
  return Action_Execute(this.Instance)

proc Update*(this: TAction): bool  =
  return Action_Update(this.Instance)

proc HasParent*(this: TAction): bool =
  return Action_HasParent(this.Instance)

proc FindComponent*(this: TAction, AName: string): TComponent =
  return Action_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TAction): string =
  return $Action_GetNamePath(this.Instance)

proc Assign*(this: TAction, Source: TObject) =
  Action_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TAction): TClass =
  return Action_ClassType(this.Instance)

proc ClassName*(this: TAction): string =
  return $Action_ClassName(this.Instance)

proc InstanceSize*(this: TAction): int32 =
  return Action_InstanceSize(this.Instance)

proc InheritsFrom*(this: TAction, AClass: TClass): bool =
  return Action_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TAction, Obj: TObject): bool =
  return Action_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TAction): int32 =
  return Action_GetHashCode(this.Instance)

proc ToString*(this: TAction): string =
  return $Action_ToString(this.Instance)

proc AutoCheck*(this: TAction): bool  =
  return Action_GetAutoCheck(this.Instance)

proc `AutoCheck=`*(this: TAction, AValue: bool)  =
  Action_SetAutoCheck(this.Instance, AValue)

proc Caption*(this: TAction): string  =
  return $Action_GetCaption(this.Instance)

proc `Caption=`*(this: TAction, AValue: string)  =
  Action_SetCaption(this.Instance, AValue)

proc Checked*(this: TAction): bool  =
  return Action_GetChecked(this.Instance)

proc `Checked=`*(this: TAction, AValue: bool)  =
  Action_SetChecked(this.Instance, AValue)

proc Enabled*(this: TAction): bool  =
  return Action_GetEnabled(this.Instance)

proc `Enabled=`*(this: TAction, AValue: bool)  =
  Action_SetEnabled(this.Instance, AValue)

proc GroupIndex*(this: TAction): int32  =
  return Action_GetGroupIndex(this.Instance)

proc `GroupIndex=`*(this: TAction, AValue: int32)  =
  Action_SetGroupIndex(this.Instance, AValue)

proc Hint*(this: TAction): string  =
  return $Action_GetHint(this.Instance)

proc `Hint=`*(this: TAction, AValue: string)  =
  Action_SetHint(this.Instance, AValue)

proc ImageIndex*(this: TAction): int32  =
  return Action_GetImageIndex(this.Instance)

proc `ImageIndex=`*(this: TAction, AValue: int32)  =
  Action_SetImageIndex(this.Instance, AValue)

proc ShortCut*(this: TAction): TShortCut  =
  return Action_GetShortCut(this.Instance)

proc `ShortCut=`*(this: TAction, AValue: TShortCut)  =
  Action_SetShortCut(this.Instance, AValue)

proc Visible*(this: TAction): bool  =
  return Action_GetVisible(this.Instance)

proc `Visible=`*(this: TAction, AValue: bool)  =
  Action_SetVisible(this.Instance, AValue)

proc `OnExecute=`*(this: TAction, AEventId: TNotifyEvent)  =
  Action_SetOnExecute(this.Instance, AEventId)

proc `OnUpdate=`*(this: TAction, AEventId: TNotifyEvent)  =
  Action_SetOnUpdate(this.Instance, AEventId)

proc Index*(this: TAction): int32  =
  return Action_GetIndex(this.Instance)

proc `Index=`*(this: TAction, AValue: int32)  =
  Action_SetIndex(this.Instance, AValue)

proc ComponentCount*(this: TAction): int32  =
  return Action_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TAction): int32  =
  return Action_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TAction, AValue: int32)  =
  Action_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TAction): TComponent  =
  return Action_GetOwner(this.Instance).AsComponent

proc Name*(this: TAction): string  =
  return $Action_GetName(this.Instance)

proc `Name=`*(this: TAction, AValue: string)  =
  Action_SetName(this.Instance, AValue)

proc Tag*(this: TAction): int  =
  return Action_GetTag(this.Instance)

proc `Tag=`*(this: TAction, AValue: int)  =
  Action_SetTag(this.Instance, AValue)

proc Components*(this: TAction, AIndex: int32): TComponent  =
  return Action_GetComponents(this.Instance, AIndex).AsComponent

proc TActionClass*(): TClass = Action_StaticClassType()


#------------------------- TToolButton -------------------------

proc Free*(this: TToolButton) = defaultFree: ToolButton_Free

proc NewToolButton*(AOwner: TComponent): TToolButton =
  new(result)
  result.Instance = ToolButton_Create(CheckPtr(AOwner))

proc CheckMenuDropdown*(this: TToolButton): bool  =
  return ToolButton_CheckMenuDropdown(this.Instance)

proc Click*(this: TToolButton)  =
  ToolButton_Click(this.Instance)

proc SetBounds*(this: TToolButton, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ToolButton_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc BringToFront*(this: TToolButton) =
  ToolButton_BringToFront(this.Instance)

proc ClientToScreen*(this: TToolButton, Point: TPoint): TPoint =
  var ps1 = Point
  ToolButton_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TToolButton, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ToolButton_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TToolButton): bool =
  return ToolButton_Dragging(this.Instance)

proc HasParent*(this: TToolButton): bool =
  return ToolButton_HasParent(this.Instance)

proc Hide*(this: TToolButton) =
  ToolButton_Hide(this.Instance)

proc Invalidate*(this: TToolButton) =
  ToolButton_Invalidate(this.Instance)

proc Perform*(this: TToolButton, Msg: uint32, WParam: uint, LParam: int): int =
  return ToolButton_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TToolButton) =
  ToolButton_Refresh(this.Instance)

proc Repaint*(this: TToolButton) =
  ToolButton_Repaint(this.Instance)

proc ScreenToClient*(this: TToolButton, Point: TPoint): TPoint =
  var ps1 = Point
  ToolButton_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TToolButton, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ToolButton_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TToolButton) =
  ToolButton_SendToBack(this.Instance)

proc Show*(this: TToolButton) =
  ToolButton_Show(this.Instance)

proc Update*(this: TToolButton) =
  ToolButton_Update(this.Instance)

proc GetTextBuf*(this: TToolButton, Buffer: string, BufSize: int32): int32 =
  return ToolButton_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TToolButton): int32 =
  return ToolButton_GetTextLen(this.Instance)

proc SetTextBuf*(this: TToolButton, Buffer: string) =
  ToolButton_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TToolButton, AName: string): TComponent =
  return ToolButton_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TToolButton): string =
  return $ToolButton_GetNamePath(this.Instance)

proc Assign*(this: TToolButton, Source: TObject) =
  ToolButton_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TToolButton): TClass =
  return ToolButton_ClassType(this.Instance)

proc ClassName*(this: TToolButton): string =
  return $ToolButton_ClassName(this.Instance)

proc InstanceSize*(this: TToolButton): int32 =
  return ToolButton_InstanceSize(this.Instance)

proc InheritsFrom*(this: TToolButton, AClass: TClass): bool =
  return ToolButton_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TToolButton, Obj: TObject): bool =
  return ToolButton_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TToolButton): int32 =
  return ToolButton_GetHashCode(this.Instance)

proc ToString*(this: TToolButton): string =
  return $ToolButton_ToString(this.Instance)

proc AnchorToNeighbour*(this: TToolButton, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ToolButton_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TToolButton, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ToolButton_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TToolButton, ASibling: TControl) =
  ToolButton_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TToolButton, ASibling: TControl) =
  ToolButton_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TToolButton, ASide: TAnchorKind, ASibling: TControl) =
  ToolButton_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TToolButton, ATheAlign: TAlign, ASpace: int32) =
  ToolButton_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TToolButton, ASpace: int32) =
  ToolButton_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TToolButton, ASize: int32): int32 =
  return ToolButton_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TToolButton, ASize: int32): int32 =
  return ToolButton_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TToolButton, ASize: int32): int32 =
  return ToolButton_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TToolButton, ASize: int32): int32 =
  return ToolButton_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TToolButton, ASize: int32): int32 =
  return ToolButton_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TToolButton, ASize: int32): int32 =
  return ToolButton_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TToolButton, ASize: int32): int32 =
  return ToolButton_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TToolButton, ASize: int32): int32 =
  return ToolButton_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TToolButton, ASize: int32): int32 =
  return ToolButton_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TToolButton, ASize: int32): int32 =
  return ToolButton_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TToolButton, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ToolButton_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TToolButton, ADesignTimePPI: int32) =
  ToolButton_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TToolButton, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ToolButton_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Index*(this: TToolButton): int32  =
  return ToolButton_GetIndex(this.Instance)

proc Action*(this: TToolButton): TAction  =
  return ToolButton_GetAction(this.Instance).AsAction

proc `Action=`*(this: TToolButton, AValue: TAction)  =
  ToolButton_SetAction(this.Instance, CheckPtr(AValue))

proc AllowAllUp*(this: TToolButton): bool  =
  return ToolButton_GetAllowAllUp(this.Instance)

proc `AllowAllUp=`*(this: TToolButton, AValue: bool)  =
  ToolButton_SetAllowAllUp(this.Instance, AValue)

proc AutoSize*(this: TToolButton): bool  =
  return ToolButton_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TToolButton, AValue: bool)  =
  ToolButton_SetAutoSize(this.Instance, AValue)

proc Caption*(this: TToolButton): string  =
  return $ToolButton_GetCaption(this.Instance)

proc `Caption=`*(this: TToolButton, AValue: string)  =
  ToolButton_SetCaption(this.Instance, AValue)

proc Down*(this: TToolButton): bool  =
  return ToolButton_GetDown(this.Instance)

proc `Down=`*(this: TToolButton, AValue: bool)  =
  ToolButton_SetDown(this.Instance, AValue)

proc DragCursor*(this: TToolButton): TCursor  =
  return ToolButton_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TToolButton, AValue: TCursor)  =
  ToolButton_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TToolButton): TDragKind  =
  return ToolButton_GetDragKind(this.Instance)

proc `DragKind=`*(this: TToolButton, AValue: TDragKind)  =
  ToolButton_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TToolButton): TDragMode  =
  return ToolButton_GetDragMode(this.Instance)

proc `DragMode=`*(this: TToolButton, AValue: TDragMode)  =
  ToolButton_SetDragMode(this.Instance, AValue)

proc DropdownMenu*(this: TToolButton): TPopupMenu  =
  return ToolButton_GetDropdownMenu(this.Instance).AsPopupMenu

proc `DropdownMenu=`*(this: TToolButton, AValue: TPopupMenu)  =
  ToolButton_SetDropdownMenu(this.Instance, CheckPtr(AValue))

proc Enabled*(this: TToolButton): bool  =
  return ToolButton_GetEnabled(this.Instance)

proc `Enabled=`*(this: TToolButton, AValue: bool)  =
  ToolButton_SetEnabled(this.Instance, AValue)

proc Grouped*(this: TToolButton): bool  =
  return ToolButton_GetGrouped(this.Instance)

proc `Grouped=`*(this: TToolButton, AValue: bool)  =
  ToolButton_SetGrouped(this.Instance, AValue)

proc Height*(this: TToolButton): int32  =
  return ToolButton_GetHeight(this.Instance)

proc `Height=`*(this: TToolButton, AValue: int32)  =
  ToolButton_SetHeight(this.Instance, AValue)

proc ImageIndex*(this: TToolButton): int32  =
  return ToolButton_GetImageIndex(this.Instance)

proc `ImageIndex=`*(this: TToolButton, AValue: int32)  =
  ToolButton_SetImageIndex(this.Instance, AValue)

proc Indeterminate*(this: TToolButton): bool  =
  return ToolButton_GetIndeterminate(this.Instance)

proc `Indeterminate=`*(this: TToolButton, AValue: bool)  =
  ToolButton_SetIndeterminate(this.Instance, AValue)

proc Marked*(this: TToolButton): bool  =
  return ToolButton_GetMarked(this.Instance)

proc `Marked=`*(this: TToolButton, AValue: bool)  =
  ToolButton_SetMarked(this.Instance, AValue)

proc ParentShowHint*(this: TToolButton): bool  =
  return ToolButton_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TToolButton, AValue: bool)  =
  ToolButton_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TToolButton): TPopupMenu  =
  return ToolButton_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TToolButton, AValue: TPopupMenu)  =
  ToolButton_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc Wrap*(this: TToolButton): bool  =
  return ToolButton_GetWrap(this.Instance)

proc `Wrap=`*(this: TToolButton, AValue: bool)  =
  ToolButton_SetWrap(this.Instance, AValue)

proc ShowHint*(this: TToolButton): bool  =
  return ToolButton_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TToolButton, AValue: bool)  =
  ToolButton_SetShowHint(this.Instance, AValue)

proc Style*(this: TToolButton): TToolButtonStyle  =
  return ToolButton_GetStyle(this.Instance)

proc `Style=`*(this: TToolButton, AValue: TToolButtonStyle)  =
  ToolButton_SetStyle(this.Instance, AValue)

proc Visible*(this: TToolButton): bool  =
  return ToolButton_GetVisible(this.Instance)

proc `Visible=`*(this: TToolButton, AValue: bool)  =
  ToolButton_SetVisible(this.Instance, AValue)

proc Width*(this: TToolButton): int32  =
  return ToolButton_GetWidth(this.Instance)

proc `Width=`*(this: TToolButton, AValue: int32)  =
  ToolButton_SetWidth(this.Instance, AValue)

proc `OnClick=`*(this: TToolButton, AEventId: TNotifyEvent)  =
  ToolButton_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TToolButton, AEventId: TContextPopupEvent)  =
  ToolButton_SetOnContextPopup(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TToolButton, AEventId: TDragDropEvent)  =
  ToolButton_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TToolButton, AEventId: TDragOverEvent)  =
  ToolButton_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDock=`*(this: TToolButton, AEventId: TEndDragEvent)  =
  ToolButton_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TToolButton, AEventId: TEndDragEvent)  =
  ToolButton_SetOnEndDrag(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TToolButton, AEventId: TMouseEvent)  =
  ToolButton_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TToolButton, AEventId: TNotifyEvent)  =
  ToolButton_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TToolButton, AEventId: TNotifyEvent)  =
  ToolButton_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TToolButton, AEventId: TMouseMoveEvent)  =
  ToolButton_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TToolButton, AEventId: TMouseEvent)  =
  ToolButton_SetOnMouseUp(this.Instance, AEventId)

proc `OnStartDock=`*(this: TToolButton, AEventId: TStartDockEvent)  =
  ToolButton_SetOnStartDock(this.Instance, AEventId)

proc Align*(this: TToolButton): TAlign  =
  return ToolButton_GetAlign(this.Instance)

proc `Align=`*(this: TToolButton, AValue: TAlign)  =
  ToolButton_SetAlign(this.Instance, AValue)

proc Anchors*(this: TToolButton): TAnchors  =
  return ToolButton_GetAnchors(this.Instance)

proc `Anchors=`*(this: TToolButton, AValue: TAnchors)  =
  ToolButton_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TToolButton): TBiDiMode  =
  return ToolButton_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TToolButton, AValue: TBiDiMode)  =
  ToolButton_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TToolButton): TRect  =
  ToolButton_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TToolButton, AValue: TRect)  =
  var ps1 = AValue
  ToolButton_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TToolButton): int32  =
  return ToolButton_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TToolButton, AValue: int32)  =
  ToolButton_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TToolButton): TPoint  =
  ToolButton_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TToolButton): TRect  =
  ToolButton_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TToolButton): int32  =
  return ToolButton_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TToolButton, AValue: int32)  =
  ToolButton_SetClientWidth(this.Instance, AValue)

proc Constraints*(this: TToolButton): TSizeConstraints  =
  return ToolButton_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TToolButton, AValue: TSizeConstraints)  =
  ToolButton_SetConstraints(this.Instance, CheckPtr(AValue))

proc ControlState*(this: TToolButton): TControlState  =
  return ToolButton_GetControlState(this.Instance)

proc `ControlState=`*(this: TToolButton, AValue: TControlState)  =
  ToolButton_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TToolButton): TControlStyle  =
  return ToolButton_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TToolButton, AValue: TControlStyle)  =
  ToolButton_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TToolButton): bool  =
  return ToolButton_GetFloating(this.Instance)

proc Parent*(this: TToolButton): TWinControl  =
  return ToolButton_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TToolButton, AValue: TWinControl)  =
  ToolButton_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TToolButton): int32  =
  return ToolButton_GetLeft(this.Instance)

proc `Left=`*(this: TToolButton, AValue: int32)  =
  ToolButton_SetLeft(this.Instance, AValue)

proc Top*(this: TToolButton): int32  =
  return ToolButton_GetTop(this.Instance)

proc `Top=`*(this: TToolButton, AValue: int32)  =
  ToolButton_SetTop(this.Instance, AValue)

proc Cursor*(this: TToolButton): TCursor  =
  return ToolButton_GetCursor(this.Instance)

proc `Cursor=`*(this: TToolButton, AValue: TCursor)  =
  ToolButton_SetCursor(this.Instance, AValue)

proc Hint*(this: TToolButton): string  =
  return $ToolButton_GetHint(this.Instance)

proc `Hint=`*(this: TToolButton, AValue: string)  =
  ToolButton_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TToolButton): int32  =
  return ToolButton_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TToolButton): int32  =
  return ToolButton_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TToolButton, AValue: int32)  =
  ToolButton_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TToolButton): TComponent  =
  return ToolButton_GetOwner(this.Instance).AsComponent

proc Name*(this: TToolButton): string  =
  return $ToolButton_GetName(this.Instance)

proc `Name=`*(this: TToolButton, AValue: string)  =
  ToolButton_SetName(this.Instance, AValue)

proc Tag*(this: TToolButton): int  =
  return ToolButton_GetTag(this.Instance)

proc `Tag=`*(this: TToolButton, AValue: int)  =
  ToolButton_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TToolButton): TAnchorSide  =
  return ToolButton_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TToolButton, AValue: TAnchorSide)  =
  ToolButton_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TToolButton): TAnchorSide  =
  return ToolButton_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TToolButton, AValue: TAnchorSide)  =
  ToolButton_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TToolButton): TAnchorSide  =
  return ToolButton_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TToolButton, AValue: TAnchorSide)  =
  ToolButton_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TToolButton): TAnchorSide  =
  return ToolButton_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TToolButton, AValue: TAnchorSide)  =
  ToolButton_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TToolButton): TControlBorderSpacing  =
  return ToolButton_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TToolButton, AValue: TControlBorderSpacing)  =
  ToolButton_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TToolButton, AIndex: int32): TComponent  =
  return ToolButton_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TToolButton, AKind: TAnchorKind): TAnchorSide  =
  return ToolButton_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TToolButtonClass*(): TClass = ToolButton_StaticClassType()


#------------------------- TIniFile -------------------------

proc Free*(this: TIniFile) = defaultFree: IniFile_Free

proc NewIniFile*(AFileName: string): TIniFile =
  new(result, Free)
  result.Instance = IniFile_Create(AFileName)

proc ReadString*(this: TIniFile, Section: string, Ident: string, Default: string): string  =
  return $IniFile_ReadString(this.Instance, Section, Ident, Default)

proc WriteString*(this: TIniFile, Section: string, Ident: string, Value: string)  =
  IniFile_WriteString(this.Instance, Section, Ident, Value)

proc ReadSections*(this: TIniFile, Strings: TStrings)  =
  IniFile_ReadSections(this.Instance, CheckPtr(Strings))

proc ReadSectionValues*(this: TIniFile, Section: string, Strings: TStrings)  =
  IniFile_ReadSectionValues(this.Instance, Section, CheckPtr(Strings))

proc EraseSection*(this: TIniFile, Section: string)  =
  IniFile_EraseSection(this.Instance, Section)

proc DeleteKey*(this: TIniFile, Section: string, Ident: string)  =
  IniFile_DeleteKey(this.Instance, Section, Ident)

proc UpdateFile*(this: TIniFile)  =
  IniFile_UpdateFile(this.Instance)

proc SectionExists*(this: TIniFile, Section: string): bool  =
  return IniFile_SectionExists(this.Instance, Section)

proc ReadInteger*(this: TIniFile, Section: string, Ident: string, Default: int32): int32  =
  return IniFile_ReadInteger(this.Instance, Section, Ident, Default)

proc WriteInteger*(this: TIniFile, Section: string, Ident: string, Value: int32)  =
  IniFile_WriteInteger(this.Instance, Section, Ident, Value)

proc ReadBool*(this: TIniFile, Section: string, Ident: string, Default: bool): bool  =
  return IniFile_ReadBool(this.Instance, Section, Ident, Default)

proc WriteBool*(this: TIniFile, Section: string, Ident: string, Value: bool)  =
  IniFile_WriteBool(this.Instance, Section, Ident, Value)

proc ReadDate*(this: TIniFile, Section: string, Name: string, Default: uint32): uint32  =
  return IniFile_ReadDate(this.Instance, Section, Name, Default)

proc ReadDateTime*(this: TIniFile, Section: string, Name: string, Default: uint32): uint32  =
  return IniFile_ReadDateTime(this.Instance, Section, Name, Default)

proc ReadFloat*(this: TIniFile, Section: string, Name: string, Default: float64): float64  =
  var ps3 = Default
  IniFile_ReadFloat(this.Instance, Section, Name, ps3, result)

proc ReadTime*(this: TIniFile, Section: string, Name: string, Default: uint32): uint32  =
  return IniFile_ReadTime(this.Instance, Section, Name, Default)

proc WriteDate*(this: TIniFile, Section: string, Name: string, Value: uint32)  =
  IniFile_WriteDate(this.Instance, Section, Name, Value)

proc WriteDateTime*(this: TIniFile, Section: string, Name: string, Value: uint32)  =
  IniFile_WriteDateTime(this.Instance, Section, Name, Value)

proc WriteFloat*(this: TIniFile, Section: string, Name: string, Value: float64)  =
  var ps3 = Value
  IniFile_WriteFloat(this.Instance, Section, Name, ps3)

proc WriteTime*(this: TIniFile, Section: string, Name: string, Value: uint32)  =
  IniFile_WriteTime(this.Instance, Section, Name, Value)

proc ValueExists*(this: TIniFile, Section: string, Ident: string): bool  =
  return IniFile_ValueExists(this.Instance, Section, Ident)

proc ClassType*(this: TIniFile): TClass =
  return IniFile_ClassType(this.Instance)

proc ClassName*(this: TIniFile): string =
  return $IniFile_ClassName(this.Instance)

proc InstanceSize*(this: TIniFile): int32 =
  return IniFile_InstanceSize(this.Instance)

proc InheritsFrom*(this: TIniFile, AClass: TClass): bool =
  return IniFile_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TIniFile, Obj: TObject): bool =
  return IniFile_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TIniFile): int32 =
  return IniFile_GetHashCode(this.Instance)

proc ToString*(this: TIniFile): string =
  return $IniFile_ToString(this.Instance)

proc FileName*(this: TIniFile): string  =
  return $IniFile_GetFileName(this.Instance)

proc TIniFileClass*(): TClass = IniFile_StaticClassType()


#------------------------- TRegistry -------------------------

proc Free*(this: TRegistry) = defaultFree: Registry_Free

proc NewRegistry*(AAccess: uint32): TRegistry =
  new(result, Free)
  result.Instance = Registry_Create(AAccess)

proc CloseKey*(this: TRegistry)  =
  Registry_CloseKey(this.Instance)

proc CreateKey*(this: TRegistry, Key: string): bool  =
  return Registry_CreateKey(this.Instance, Key)

proc DeleteKey*(this: TRegistry, Key: string): bool  =
  return Registry_DeleteKey(this.Instance, Key)

proc DeleteValue*(this: TRegistry, Name: string): bool  =
  return Registry_DeleteValue(this.Instance, Name)

proc HasSubKeys*(this: TRegistry): bool  =
  return Registry_HasSubKeys(this.Instance)

proc KeyExists*(this: TRegistry, Key: string): bool  =
  return Registry_KeyExists(this.Instance, Key)

proc LoadKey*(this: TRegistry, Key: string, FileName: string): bool  =
  return Registry_LoadKey(this.Instance, Key, FileName)

proc MoveKey*(this: TRegistry, OldName: string, NewName: string, Delete: bool)  =
  Registry_MoveKey(this.Instance, OldName, NewName, Delete)

proc OpenKey*(this: TRegistry, Key: string, CanCreate: bool): bool  =
  return Registry_OpenKey(this.Instance, Key, CanCreate)

proc OpenKeyReadOnly*(this: TRegistry, Key: string): bool  =
  return Registry_OpenKeyReadOnly(this.Instance, Key)

proc ReadBool*(this: TRegistry, Name: string): bool  =
  return Registry_ReadBool(this.Instance, Name)

proc ReadDate*(this: TRegistry, Name: string): uint32  =
  return Registry_ReadDate(this.Instance, Name)

proc ReadDateTime*(this: TRegistry, Name: string): uint32  =
  return Registry_ReadDateTime(this.Instance, Name)

proc ReadFloat*(this: TRegistry, Name: string): float64  =
  Registry_ReadFloat(this.Instance, Name, result)

proc ReadInteger*(this: TRegistry, Name: string): int32  =
  return Registry_ReadInteger(this.Instance, Name)

proc ReadString*(this: TRegistry, Name: string): string  =
  return $Registry_ReadString(this.Instance, Name)

proc ReadTime*(this: TRegistry, Name: string): uint32  =
  return Registry_ReadTime(this.Instance, Name)

proc RegistryConnect*(this: TRegistry, UNCName: string): bool  =
  return Registry_RegistryConnect(this.Instance, UNCName)

proc RenameValue*(this: TRegistry, OldName: string, NewName: string)  =
  Registry_RenameValue(this.Instance, OldName, NewName)

proc ReplaceKey*(this: TRegistry, Key: string, FileName: string, BackUpFileName: string): bool  =
  return Registry_ReplaceKey(this.Instance, Key, FileName, BackUpFileName)

proc RestoreKey*(this: TRegistry, Key: string, FileName: string): bool  =
  return Registry_RestoreKey(this.Instance, Key, FileName)

proc SaveKey*(this: TRegistry, Key: string, FileName: string): bool  =
  return Registry_SaveKey(this.Instance, Key, FileName)

proc UnLoadKey*(this: TRegistry, Key: string): bool  =
  return Registry_UnLoadKey(this.Instance, Key)

proc ValueExists*(this: TRegistry, Name: string): bool  =
  return Registry_ValueExists(this.Instance, Name)

proc WriteBool*(this: TRegistry, Name: string, Value: bool)  =
  Registry_WriteBool(this.Instance, Name, Value)

proc WriteDate*(this: TRegistry, Name: string, Value: uint32)  =
  Registry_WriteDate(this.Instance, Name, Value)

proc WriteDateTime*(this: TRegistry, Name: string, Value: uint32)  =
  Registry_WriteDateTime(this.Instance, Name, Value)

proc WriteFloat*(this: TRegistry, Name: string, Value: float64)  =
  var ps2 = Value
  Registry_WriteFloat(this.Instance, Name, ps2)

proc WriteInteger*(this: TRegistry, Name: string, Value: int32)  =
  Registry_WriteInteger(this.Instance, Name, Value)

proc WriteString*(this: TRegistry, Name: string, Value: string)  =
  Registry_WriteString(this.Instance, Name, Value)

proc WriteExpandString*(this: TRegistry, Name: string, Value: string)  =
  Registry_WriteExpandString(this.Instance, Name, Value)

proc WriteTime*(this: TRegistry, Name: string, Value: uint32)  =
  Registry_WriteTime(this.Instance, Name, Value)

proc ClassType*(this: TRegistry): TClass =
  return Registry_ClassType(this.Instance)

proc ClassName*(this: TRegistry): string =
  return $Registry_ClassName(this.Instance)

proc InstanceSize*(this: TRegistry): int32 =
  return Registry_InstanceSize(this.Instance)

proc InheritsFrom*(this: TRegistry, AClass: TClass): bool =
  return Registry_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TRegistry, Obj: TObject): bool =
  return Registry_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TRegistry): int32 =
  return Registry_GetHashCode(this.Instance)

proc ToString*(this: TRegistry): string =
  return $Registry_ToString(this.Instance)

proc CurrentKey*(this: TRegistry): HKEY  =
  return Registry_GetCurrentKey(this.Instance)

proc CurrentPath*(this: TRegistry): string  =
  return $Registry_GetCurrentPath(this.Instance)

proc LazyWrite*(this: TRegistry): bool  =
  return Registry_GetLazyWrite(this.Instance)

proc `LazyWrite=`*(this: TRegistry, AValue: bool)  =
  Registry_SetLazyWrite(this.Instance, AValue)

proc LastError*(this: TRegistry): int32  =
  return Registry_GetLastError(this.Instance)

proc LastErrorMsg*(this: TRegistry): string  =
  return $Registry_GetLastErrorMsg(this.Instance)

proc RootKey*(this: TRegistry): HKEY  =
  return Registry_GetRootKey(this.Instance)

proc `RootKey=`*(this: TRegistry, AValue: HKEY)  =
  Registry_SetRootKey(this.Instance, AValue)

proc Access*(this: TRegistry): uint32  =
  return Registry_GetAccess(this.Instance)

proc `Access=`*(this: TRegistry, AValue: uint32)  =
  Registry_SetAccess(this.Instance, AValue)

proc TRegistryClass*(): TClass = Registry_StaticClassType()


#------------------------- TClipboard -------------------------

proc Free*(this: TClipboard) = defaultFree: Clipboard_Free

proc NewClipboard*(): TClipboard =
  new(result, Free)
  result.Instance = Clipboard_Create()

proc FindPictureFormatID*(this: TClipboard): TClipboardFormat  =
  return Clipboard_FindPictureFormatID(this.Instance)

proc FindFormatID*(this: TClipboard, FormatName: string): TClipboardFormat  =
  return Clipboard_FindFormatID(this.Instance, FormatName)

proc GetAsHtml*(this: TClipboard, ExtractFragmentOnly: bool): string  =
  return $Clipboard_GetAsHtml(this.Instance, ExtractFragmentOnly)

proc SupportedFormats*(this: TClipboard, List: TStrings)  =
  Clipboard_SupportedFormats(this.Instance, CheckPtr(List))

proc HasFormatName*(this: TClipboard, FormatName: string): bool  =
  return Clipboard_HasFormatName(this.Instance, FormatName)

proc HasPictureFormat*(this: TClipboard): bool  =
  return Clipboard_HasPictureFormat(this.Instance)

proc SetAsHtml*(this: TClipboard, Html: string, PlainText: string)  =
  Clipboard_SetAsHtml(this.Instance, Html, PlainText)

proc Assign*(this: TClipboard, Source: TObject)  =
  Clipboard_Assign(this.Instance, CheckPtr(Source))

proc Clear*(this: TClipboard)  =
  Clipboard_Clear(this.Instance)

proc Close*(this: TClipboard)  =
  Clipboard_Close(this.Instance)

proc Open*(this: TClipboard)  =
  Clipboard_Open(this.Instance)

proc GetTextBuf*(this: TClipboard, Buffer: string, BufSize: int32): int32  =
  return Clipboard_GetTextBuf(this.Instance, Buffer, BufSize)

proc SetTextBuf*(this: TClipboard, Buffer: string)  =
  Clipboard_SetTextBuf(this.Instance, Buffer)

proc GetNamePath*(this: TClipboard): string  =
  return $Clipboard_GetNamePath(this.Instance)

proc ClassType*(this: TClipboard): TClass =
  return Clipboard_ClassType(this.Instance)

proc ClassName*(this: TClipboard): string =
  return $Clipboard_ClassName(this.Instance)

proc InstanceSize*(this: TClipboard): int32 =
  return Clipboard_InstanceSize(this.Instance)

proc InheritsFrom*(this: TClipboard, AClass: TClass): bool =
  return Clipboard_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TClipboard, Obj: TObject): bool =
  return Clipboard_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TClipboard): int32 =
  return Clipboard_GetHashCode(this.Instance)

proc ToString*(this: TClipboard): string =
  return $Clipboard_ToString(this.Instance)

proc AsText*(this: TClipboard): string  =
  return $Clipboard_GetAsText(this.Instance)

proc `AsText=`*(this: TClipboard, AValue: string)  =
  Clipboard_SetAsText(this.Instance, AValue)

proc FormatCount*(this: TClipboard): int32  =
  return Clipboard_GetFormatCount(this.Instance)

proc Formats*(this: TClipboard, Index: int32): TClipboardFormat  =
  return Clipboard_GetFormats(this.Instance, Index)

proc TClipboardClass*(): TClass = Clipboard_StaticClassType()


proc HasFormat*(this: TClipboard, AFormatID: TClipboardFormat): bool  =
  return Clipboard_HasFormat(this.Instance, AFormatID)

#------------------------- TMonitor -------------------------

proc Free*(this: TMonitor) = defaultFree: Monitor_Free

proc NewMonitor*(): TMonitor =
  new(result, Free)
  result.Instance = Monitor_Create()

proc ClassType*(this: TMonitor): TClass =
  return Monitor_ClassType(this.Instance)

proc ClassName*(this: TMonitor): string =
  return $Monitor_ClassName(this.Instance)

proc InstanceSize*(this: TMonitor): int32 =
  return Monitor_InstanceSize(this.Instance)

proc InheritsFrom*(this: TMonitor, AClass: TClass): bool =
  return Monitor_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TMonitor, Obj: TObject): bool =
  return Monitor_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TMonitor): int32 =
  return Monitor_GetHashCode(this.Instance)

proc ToString*(this: TMonitor): string =
  return $Monitor_ToString(this.Instance)

proc Handle*(this: TMonitor): HMONITOR  =
  return Monitor_GetHandle(this.Instance)

proc MonitorNum*(this: TMonitor): int32  =
  return Monitor_GetMonitorNum(this.Instance)

proc Left*(this: TMonitor): int32  =
  return Monitor_GetLeft(this.Instance)

proc Height*(this: TMonitor): int32  =
  return Monitor_GetHeight(this.Instance)

proc Top*(this: TMonitor): int32  =
  return Monitor_GetTop(this.Instance)

proc Width*(this: TMonitor): int32  =
  return Monitor_GetWidth(this.Instance)

proc BoundsRect*(this: TMonitor): TRect  =
  Monitor_GetBoundsRect(this.Instance, result)

proc WorkareaRect*(this: TMonitor): TRect  =
  Monitor_GetWorkareaRect(this.Instance, result)

proc Primary*(this: TMonitor): bool  =
  return Monitor_GetPrimary(this.Instance)

proc PixelsPerInch*(this: TMonitor): int32  =
  return Monitor_GetPixelsPerInch(this.Instance)

proc TMonitorClass*(): TClass = Monitor_StaticClassType()


#------------------------- TPaintBox -------------------------

proc Free*(this: TPaintBox) = defaultFree: PaintBox_Free

proc NewPaintBox*(AOwner: TComponent): TPaintBox =
  new(result)
  result.Instance = PaintBox_Create(CheckPtr(AOwner))

proc BringToFront*(this: TPaintBox) =
  PaintBox_BringToFront(this.Instance)

proc ClientToScreen*(this: TPaintBox, Point: TPoint): TPoint =
  var ps1 = Point
  PaintBox_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TPaintBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  PaintBox_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TPaintBox): bool =
  return PaintBox_Dragging(this.Instance)

proc HasParent*(this: TPaintBox): bool =
  return PaintBox_HasParent(this.Instance)

proc Hide*(this: TPaintBox) =
  PaintBox_Hide(this.Instance)

proc Invalidate*(this: TPaintBox) =
  PaintBox_Invalidate(this.Instance)

proc Perform*(this: TPaintBox, Msg: uint32, WParam: uint, LParam: int): int =
  return PaintBox_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TPaintBox) =
  PaintBox_Refresh(this.Instance)

proc Repaint*(this: TPaintBox) =
  PaintBox_Repaint(this.Instance)

proc ScreenToClient*(this: TPaintBox, Point: TPoint): TPoint =
  var ps1 = Point
  PaintBox_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TPaintBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  PaintBox_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TPaintBox) =
  PaintBox_SendToBack(this.Instance)

proc SetBounds*(this: TPaintBox, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  PaintBox_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Show*(this: TPaintBox) =
  PaintBox_Show(this.Instance)

proc Update*(this: TPaintBox) =
  PaintBox_Update(this.Instance)

proc GetTextBuf*(this: TPaintBox, Buffer: string, BufSize: int32): int32 =
  return PaintBox_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TPaintBox): int32 =
  return PaintBox_GetTextLen(this.Instance)

proc SetTextBuf*(this: TPaintBox, Buffer: string) =
  PaintBox_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TPaintBox, AName: string): TComponent =
  return PaintBox_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TPaintBox): string =
  return $PaintBox_GetNamePath(this.Instance)

proc Assign*(this: TPaintBox, Source: TObject) =
  PaintBox_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TPaintBox): TClass =
  return PaintBox_ClassType(this.Instance)

proc ClassName*(this: TPaintBox): string =
  return $PaintBox_ClassName(this.Instance)

proc InstanceSize*(this: TPaintBox): int32 =
  return PaintBox_InstanceSize(this.Instance)

proc InheritsFrom*(this: TPaintBox, AClass: TClass): bool =
  return PaintBox_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TPaintBox, Obj: TObject): bool =
  return PaintBox_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TPaintBox): int32 =
  return PaintBox_GetHashCode(this.Instance)

proc ToString*(this: TPaintBox): string =
  return $PaintBox_ToString(this.Instance)

proc AnchorToNeighbour*(this: TPaintBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  PaintBox_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TPaintBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  PaintBox_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TPaintBox, ASibling: TControl) =
  PaintBox_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TPaintBox, ASibling: TControl) =
  PaintBox_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TPaintBox, ASide: TAnchorKind, ASibling: TControl) =
  PaintBox_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TPaintBox, ATheAlign: TAlign, ASpace: int32) =
  PaintBox_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TPaintBox, ASpace: int32) =
  PaintBox_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TPaintBox, ASize: int32): int32 =
  return PaintBox_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TPaintBox, ASize: int32): int32 =
  return PaintBox_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TPaintBox, ASize: int32): int32 =
  return PaintBox_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TPaintBox, ASize: int32): int32 =
  return PaintBox_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TPaintBox, ASize: int32): int32 =
  return PaintBox_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TPaintBox, ASize: int32): int32 =
  return PaintBox_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TPaintBox, ASize: int32): int32 =
  return PaintBox_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TPaintBox, ASize: int32): int32 =
  return PaintBox_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TPaintBox, ASize: int32): int32 =
  return PaintBox_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TPaintBox, ASize: int32): int32 =
  return PaintBox_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TPaintBox, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  PaintBox_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TPaintBox, ADesignTimePPI: int32) =
  PaintBox_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TPaintBox, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  PaintBox_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Canvas*(this: TPaintBox): TCanvas  =
  return PaintBox_GetCanvas(this.Instance).AsCanvas

proc Align*(this: TPaintBox): TAlign  =
  return PaintBox_GetAlign(this.Instance)

proc `Align=`*(this: TPaintBox, AValue: TAlign)  =
  PaintBox_SetAlign(this.Instance, AValue)

proc Anchors*(this: TPaintBox): TAnchors  =
  return PaintBox_GetAnchors(this.Instance)

proc `Anchors=`*(this: TPaintBox, AValue: TAnchors)  =
  PaintBox_SetAnchors(this.Instance, AValue)

proc Color*(this: TPaintBox): TColor  =
  return PaintBox_GetColor(this.Instance)

proc `Color=`*(this: TPaintBox, AValue: TColor)  =
  PaintBox_SetColor(this.Instance, AValue)

proc Constraints*(this: TPaintBox): TSizeConstraints  =
  return PaintBox_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TPaintBox, AValue: TSizeConstraints)  =
  PaintBox_SetConstraints(this.Instance, CheckPtr(AValue))

proc DragCursor*(this: TPaintBox): TCursor  =
  return PaintBox_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TPaintBox, AValue: TCursor)  =
  PaintBox_SetDragCursor(this.Instance, AValue)

proc DragMode*(this: TPaintBox): TDragMode  =
  return PaintBox_GetDragMode(this.Instance)

proc `DragMode=`*(this: TPaintBox, AValue: TDragMode)  =
  PaintBox_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TPaintBox): bool  =
  return PaintBox_GetEnabled(this.Instance)

proc `Enabled=`*(this: TPaintBox, AValue: bool)  =
  PaintBox_SetEnabled(this.Instance, AValue)

proc Font*(this: TPaintBox): TFont  =
  return PaintBox_GetFont(this.Instance).AsFont

proc `Font=`*(this: TPaintBox, AValue: TFont)  =
  PaintBox_SetFont(this.Instance, CheckPtr(AValue))

proc ParentColor*(this: TPaintBox): bool  =
  return PaintBox_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TPaintBox, AValue: bool)  =
  PaintBox_SetParentColor(this.Instance, AValue)

proc ParentFont*(this: TPaintBox): bool  =
  return PaintBox_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TPaintBox, AValue: bool)  =
  PaintBox_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TPaintBox): bool  =
  return PaintBox_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TPaintBox, AValue: bool)  =
  PaintBox_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TPaintBox): TPopupMenu  =
  return PaintBox_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TPaintBox, AValue: TPopupMenu)  =
  PaintBox_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TPaintBox): bool  =
  return PaintBox_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TPaintBox, AValue: bool)  =
  PaintBox_SetShowHint(this.Instance, AValue)

proc Visible*(this: TPaintBox): bool  =
  return PaintBox_GetVisible(this.Instance)

proc `Visible=`*(this: TPaintBox, AValue: bool)  =
  PaintBox_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TPaintBox, AEventId: TNotifyEvent)  =
  PaintBox_SetOnClick(this.Instance, AEventId)

proc `OnDblClick=`*(this: TPaintBox, AEventId: TNotifyEvent)  =
  PaintBox_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TPaintBox, AEventId: TDragDropEvent)  =
  PaintBox_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TPaintBox, AEventId: TDragOverEvent)  =
  PaintBox_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TPaintBox, AEventId: TEndDragEvent)  =
  PaintBox_SetOnEndDrag(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TPaintBox, AEventId: TMouseEvent)  =
  PaintBox_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TPaintBox, AEventId: TNotifyEvent)  =
  PaintBox_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TPaintBox, AEventId: TNotifyEvent)  =
  PaintBox_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TPaintBox, AEventId: TMouseMoveEvent)  =
  PaintBox_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TPaintBox, AEventId: TMouseEvent)  =
  PaintBox_SetOnMouseUp(this.Instance, AEventId)

proc `OnPaint=`*(this: TPaintBox, AEventId: TNotifyEvent)  =
  PaintBox_SetOnPaint(this.Instance, AEventId)

proc Action*(this: TPaintBox): TAction  =
  return PaintBox_GetAction(this.Instance).AsAction

proc `Action=`*(this: TPaintBox, AValue: TAction)  =
  PaintBox_SetAction(this.Instance, CheckPtr(AValue))

proc BiDiMode*(this: TPaintBox): TBiDiMode  =
  return PaintBox_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TPaintBox, AValue: TBiDiMode)  =
  PaintBox_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TPaintBox): TRect  =
  PaintBox_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TPaintBox, AValue: TRect)  =
  var ps1 = AValue
  PaintBox_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TPaintBox): int32  =
  return PaintBox_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TPaintBox, AValue: int32)  =
  PaintBox_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TPaintBox): TPoint  =
  PaintBox_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TPaintBox): TRect  =
  PaintBox_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TPaintBox): int32  =
  return PaintBox_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TPaintBox, AValue: int32)  =
  PaintBox_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TPaintBox): TControlState  =
  return PaintBox_GetControlState(this.Instance)

proc `ControlState=`*(this: TPaintBox, AValue: TControlState)  =
  PaintBox_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TPaintBox): TControlStyle  =
  return PaintBox_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TPaintBox, AValue: TControlStyle)  =
  PaintBox_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TPaintBox): bool  =
  return PaintBox_GetFloating(this.Instance)

proc Parent*(this: TPaintBox): TWinControl  =
  return PaintBox_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TPaintBox, AValue: TWinControl)  =
  PaintBox_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TPaintBox): int32  =
  return PaintBox_GetLeft(this.Instance)

proc `Left=`*(this: TPaintBox, AValue: int32)  =
  PaintBox_SetLeft(this.Instance, AValue)

proc Top*(this: TPaintBox): int32  =
  return PaintBox_GetTop(this.Instance)

proc `Top=`*(this: TPaintBox, AValue: int32)  =
  PaintBox_SetTop(this.Instance, AValue)

proc Width*(this: TPaintBox): int32  =
  return PaintBox_GetWidth(this.Instance)

proc `Width=`*(this: TPaintBox, AValue: int32)  =
  PaintBox_SetWidth(this.Instance, AValue)

proc Height*(this: TPaintBox): int32  =
  return PaintBox_GetHeight(this.Instance)

proc `Height=`*(this: TPaintBox, AValue: int32)  =
  PaintBox_SetHeight(this.Instance, AValue)

proc Cursor*(this: TPaintBox): TCursor  =
  return PaintBox_GetCursor(this.Instance)

proc `Cursor=`*(this: TPaintBox, AValue: TCursor)  =
  PaintBox_SetCursor(this.Instance, AValue)

proc Hint*(this: TPaintBox): string  =
  return $PaintBox_GetHint(this.Instance)

proc `Hint=`*(this: TPaintBox, AValue: string)  =
  PaintBox_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TPaintBox): int32  =
  return PaintBox_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TPaintBox): int32  =
  return PaintBox_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TPaintBox, AValue: int32)  =
  PaintBox_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TPaintBox): TComponent  =
  return PaintBox_GetOwner(this.Instance).AsComponent

proc Name*(this: TPaintBox): string  =
  return $PaintBox_GetName(this.Instance)

proc `Name=`*(this: TPaintBox, AValue: string)  =
  PaintBox_SetName(this.Instance, AValue)

proc Tag*(this: TPaintBox): int  =
  return PaintBox_GetTag(this.Instance)

proc `Tag=`*(this: TPaintBox, AValue: int)  =
  PaintBox_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TPaintBox): TAnchorSide  =
  return PaintBox_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TPaintBox, AValue: TAnchorSide)  =
  PaintBox_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TPaintBox): TAnchorSide  =
  return PaintBox_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TPaintBox, AValue: TAnchorSide)  =
  PaintBox_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TPaintBox): TAnchorSide  =
  return PaintBox_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TPaintBox, AValue: TAnchorSide)  =
  PaintBox_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TPaintBox): TAnchorSide  =
  return PaintBox_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TPaintBox, AValue: TAnchorSide)  =
  PaintBox_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TPaintBox): TControlBorderSpacing  =
  return PaintBox_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TPaintBox, AValue: TControlBorderSpacing)  =
  PaintBox_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TPaintBox, AIndex: int32): TComponent  =
  return PaintBox_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TPaintBox, AKind: TAnchorKind): TAnchorSide  =
  return PaintBox_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TPaintBoxClass*(): TClass = PaintBox_StaticClassType()


#------------------------- TTimer -------------------------

proc Free*(this: TTimer) = defaultFree: Timer_Free

proc NewTimer*(AOwner: TComponent): TTimer =
  new(result)
  result.Instance = Timer_Create(CheckPtr(AOwner))

proc FindComponent*(this: TTimer, AName: string): TComponent =
  return Timer_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TTimer): string =
  return $Timer_GetNamePath(this.Instance)

proc HasParent*(this: TTimer): bool =
  return Timer_HasParent(this.Instance)

proc Assign*(this: TTimer, Source: TObject) =
  Timer_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TTimer): TClass =
  return Timer_ClassType(this.Instance)

proc ClassName*(this: TTimer): string =
  return $Timer_ClassName(this.Instance)

proc InstanceSize*(this: TTimer): int32 =
  return Timer_InstanceSize(this.Instance)

proc InheritsFrom*(this: TTimer, AClass: TClass): bool =
  return Timer_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TTimer, Obj: TObject): bool =
  return Timer_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TTimer): int32 =
  return Timer_GetHashCode(this.Instance)

proc ToString*(this: TTimer): string =
  return $Timer_ToString(this.Instance)

proc Enabled*(this: TTimer): bool  =
  return Timer_GetEnabled(this.Instance)

proc `Enabled=`*(this: TTimer, AValue: bool)  =
  Timer_SetEnabled(this.Instance, AValue)

proc Interval*(this: TTimer): uint32  =
  return Timer_GetInterval(this.Instance)

proc `Interval=`*(this: TTimer, AValue: uint32)  =
  Timer_SetInterval(this.Instance, AValue)

proc `OnTimer=`*(this: TTimer, AEventId: TNotifyEvent)  =
  Timer_SetOnTimer(this.Instance, AEventId)

proc ComponentCount*(this: TTimer): int32  =
  return Timer_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TTimer): int32  =
  return Timer_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TTimer, AValue: int32)  =
  Timer_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TTimer): TComponent  =
  return Timer_GetOwner(this.Instance).AsComponent

proc Name*(this: TTimer): string  =
  return $Timer_GetName(this.Instance)

proc `Name=`*(this: TTimer, AValue: string)  =
  Timer_SetName(this.Instance, AValue)

proc Tag*(this: TTimer): int  =
  return Timer_GetTag(this.Instance)

proc `Tag=`*(this: TTimer, AValue: int)  =
  Timer_SetTag(this.Instance, AValue)

proc Components*(this: TTimer, AIndex: int32): TComponent  =
  return Timer_GetComponents(this.Instance, AIndex).AsComponent

proc TTimerClass*(): TClass = Timer_StaticClassType()


#------------------------- TList -------------------------

proc Free*(this: TList) = defaultFree: List_Free

proc NewList*(): TList =
  new(result, Free)
  result.Instance = List_Create()

proc Add*(this: TList, Item: pointer): int32  =
  return List_Add(this.Instance, Item)

proc Clear*(this: TList)  =
  List_Clear(this.Instance)

proc Delete*(this: TList, Index: int32)  =
  List_Delete(this.Instance, Index)

proc Expand*(this: TList): TList  =
  return List_Expand(this.Instance).AsList

proc IndexOf*(this: TList, Item: pointer): int32  =
  return List_IndexOf(this.Instance, Item)

proc Insert*(this: TList, Index: int32, Item: pointer)  =
  List_Insert(this.Instance, Index, Item)

proc Move*(this: TList, CurIndex: int32, NewIndex: int32)  =
  List_Move(this.Instance, CurIndex, NewIndex)

proc ClassType*(this: TList): TClass =
  return List_ClassType(this.Instance)

proc ClassName*(this: TList): string =
  return $List_ClassName(this.Instance)

proc InstanceSize*(this: TList): int32 =
  return List_InstanceSize(this.Instance)

proc InheritsFrom*(this: TList, AClass: TClass): bool =
  return List_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TList, Obj: TObject): bool =
  return List_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TList): int32 =
  return List_GetHashCode(this.Instance)

proc ToString*(this: TList): string =
  return $List_ToString(this.Instance)

proc Capacity*(this: TList): int32  =
  return List_GetCapacity(this.Instance)

proc `Capacity=`*(this: TList, AValue: int32)  =
  List_SetCapacity(this.Instance, AValue)

proc Count*(this: TList): int32  =
  return List_GetCount(this.Instance)

proc `Count=`*(this: TList, AValue: int32)  =
  List_SetCount(this.Instance, AValue)

proc List*(this: TList): pointer  =
  return List_GetList(this.Instance)

proc Items*(this: TList, Index: int32): pointer  =
  return List_GetItems(this.Instance, Index)

proc `Items=`*(this: TList, Index: int32, AValue: pointer)  =
  List_SetItems(this.Instance, Index, AValue)

proc TListClass*(): TClass = List_StaticClassType()


#------------------------- TForm -------------------------

proc Free*(this: TForm) = defaultFree: Form_Free

proc NewForm*(AOwner: TComponent): TForm =
  new(result)
  result.Instance = Form_Create(CheckPtr(AOwner))

proc InheritedWndProc*(this: TForm, TheMessage: var TMessage)  =
  Form_InheritedWndProc(this.Instance, TheMessage)

proc EnabledMaximize*(this: TForm, AValue: bool)  =
  Form_EnabledMaximize(this.Instance, AValue)

proc EnabledMinimize*(this: TForm, AValue: bool)  =
  Form_EnabledMinimize(this.Instance, AValue)

proc EnabledSystemMenu*(this: TForm, AValue: bool)  =
  Form_EnabledSystemMenu(this.Instance, AValue)

proc ScaleForCurrentDpi*(this: TForm)  =
  Form_ScaleForCurrentDpi(this.Instance)

proc ScaleForPPI*(this: TForm, ANewPPI: int32)  =
  Form_ScaleForPPI(this.Instance, ANewPPI)

proc ScreenCenter*(this: TForm)  =
  Form_ScreenCenter(this.Instance)

proc WorkAreaCenter*(this: TForm)  =
  Form_WorkAreaCenter(this.Instance)

proc Cascade*(this: TForm)  =
  Form_Cascade(this.Instance)

proc Close*(this: TForm)  =
  Form_Close(this.Instance)

proc FocusControl*(this: TForm, Control: TWinControl)  =
  Form_FocusControl(this.Instance, CheckPtr(Control))

proc Hide*(this: TForm) =
  Form_Hide(this.Instance)

proc SetFocus*(this: TForm) =
  Form_SetFocus(this.Instance)

proc Show*(this: TForm) =
  Form_Show(this.Instance)

proc ShowModal*(this: TForm): int32  =
  return Form_ShowModal(this.Instance)

proc ScrollInView*(this: TForm, AControl: TControl)  =
  Form_ScrollInView(this.Instance, CheckPtr(AControl))

proc CanFocus*(this: TForm): bool =
  return Form_CanFocus(this.Instance)

proc ContainsControl*(this: TForm, Control: TControl): bool =
  return Form_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TForm, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return Form_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TForm) =
  Form_DisableAlign(this.Instance)

proc EnableAlign*(this: TForm) =
  Form_EnableAlign(this.Instance)

proc FindChildControl*(this: TForm, ControlName: string): TControl =
  return Form_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TForm, AllLevels: bool) =
  Form_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TForm): bool =
  return Form_Focused(this.Instance)

proc HandleAllocated*(this: TForm): bool =
  return Form_HandleAllocated(this.Instance)

proc InsertControl*(this: TForm, AControl: TControl) =
  Form_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TForm) =
  Form_Invalidate(this.Instance)

proc PaintTo*(this: TForm, DC: HDC, X: int32, Y: int32) =
  Form_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TForm, AControl: TControl) =
  Form_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TForm) =
  Form_Realign(this.Instance)

proc Repaint*(this: TForm) =
  Form_Repaint(this.Instance)

proc ScaleBy*(this: TForm, M: int32, D: int32) =
  Form_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TForm, DeltaX: int32, DeltaY: int32) =
  Form_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TForm, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  Form_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Update*(this: TForm) =
  Form_Update(this.Instance)

proc BringToFront*(this: TForm) =
  Form_BringToFront(this.Instance)

proc ClientToScreen*(this: TForm, Point: TPoint): TPoint =
  var ps1 = Point
  Form_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TForm, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Form_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TForm): bool =
  return Form_Dragging(this.Instance)

proc HasParent*(this: TForm): bool =
  return Form_HasParent(this.Instance)

proc Perform*(this: TForm, Msg: uint32, WParam: uint, LParam: int): int =
  return Form_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TForm) =
  Form_Refresh(this.Instance)

proc ScreenToClient*(this: TForm, Point: TPoint): TPoint =
  var ps1 = Point
  Form_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TForm, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Form_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TForm) =
  Form_SendToBack(this.Instance)

proc GetTextBuf*(this: TForm, Buffer: string, BufSize: int32): int32 =
  return Form_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TForm): int32 =
  return Form_GetTextLen(this.Instance)

proc SetTextBuf*(this: TForm, Buffer: string) =
  Form_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TForm, AName: string): TComponent =
  return Form_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TForm): string =
  return $Form_GetNamePath(this.Instance)

proc Assign*(this: TForm, Source: TObject) =
  Form_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TForm): TClass =
  return Form_ClassType(this.Instance)

proc ClassName*(this: TForm): string =
  return $Form_ClassName(this.Instance)

proc InstanceSize*(this: TForm): int32 =
  return Form_InstanceSize(this.Instance)

proc InheritsFrom*(this: TForm, AClass: TClass): bool =
  return Form_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TForm, Obj: TObject): bool =
  return Form_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TForm): int32 =
  return Form_GetHashCode(this.Instance)

proc ToString*(this: TForm): string =
  return $Form_ToString(this.Instance)

proc AnchorToNeighbour*(this: TForm, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Form_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TForm, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Form_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TForm, ASibling: TControl) =
  Form_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TForm, ASibling: TControl) =
  Form_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TForm, ASide: TAnchorKind, ASibling: TControl) =
  Form_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TForm, ATheAlign: TAlign, ASpace: int32) =
  Form_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TForm, ASpace: int32) =
  Form_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TForm, ASize: int32): int32 =
  return Form_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TForm, ASize: int32): int32 =
  return Form_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TForm, ASize: int32): int32 =
  return Form_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TForm, ASize: int32): int32 =
  return Form_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TForm, ASize: int32): int32 =
  return Form_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TForm, ASize: int32): int32 =
  return Form_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TForm, ASize: int32): int32 =
  return Form_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TForm, ASize: int32): int32 =
  return Form_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TForm, ASize: int32): int32 =
  return Form_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TForm, ASize: int32): int32 =
  return Form_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TForm, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  Form_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TForm, ADesignTimePPI: int32) =
  Form_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TForm, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  Form_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc AllowDropFiles*(this: TForm): bool  =
  return Form_GetAllowDropFiles(this.Instance)

proc `AllowDropFiles=`*(this: TForm, AValue: bool)  =
  Form_SetAllowDropFiles(this.Instance, AValue)

proc `OnDropFiles=`*(this: TForm, AEventId: TDropFilesEvent)  =
  Form_SetOnDropFiles(this.Instance, AEventId)

proc ShowInTaskBar*(this: TForm): TShowInTaskbar  =
  return Form_GetShowInTaskBar(this.Instance)

proc `ShowInTaskBar=`*(this: TForm, AValue: TShowInTaskbar)  =
  Form_SetShowInTaskBar(this.Instance, AValue)

proc DesignTimePPI*(this: TForm): int32  =
  return Form_GetDesignTimePPI(this.Instance)

proc `DesignTimePPI=`*(this: TForm, AValue: int32)  =
  Form_SetDesignTimePPI(this.Instance, AValue)

proc Action*(this: TForm): TAction  =
  return Form_GetAction(this.Instance).AsAction

proc `Action=`*(this: TForm, AValue: TAction)  =
  Form_SetAction(this.Instance, CheckPtr(AValue))

proc ActiveControl*(this: TForm): TWinControl  =
  return Form_GetActiveControl(this.Instance).AsWinControl

proc `ActiveControl=`*(this: TForm, AValue: TWinControl)  =
  Form_SetActiveControl(this.Instance, CheckPtr(AValue))

proc Align*(this: TForm): TAlign  =
  return Form_GetAlign(this.Instance)

proc `Align=`*(this: TForm, AValue: TAlign)  =
  Form_SetAlign(this.Instance, AValue)

proc AlphaBlend*(this: TForm): bool  =
  return Form_GetAlphaBlend(this.Instance)

proc `AlphaBlend=`*(this: TForm, AValue: bool)  =
  Form_SetAlphaBlend(this.Instance, AValue)

proc AlphaBlendValue*(this: TForm): int8  =
  return Form_GetAlphaBlendValue(this.Instance)

proc `AlphaBlendValue=`*(this: TForm, AValue: int8)  =
  Form_SetAlphaBlendValue(this.Instance, AValue)

proc Anchors*(this: TForm): TAnchors  =
  return Form_GetAnchors(this.Instance)

proc `Anchors=`*(this: TForm, AValue: TAnchors)  =
  Form_SetAnchors(this.Instance, AValue)

proc AutoScroll*(this: TForm): bool  =
  return Form_GetAutoScroll(this.Instance)

proc `AutoScroll=`*(this: TForm, AValue: bool)  =
  Form_SetAutoScroll(this.Instance, AValue)

proc AutoSize*(this: TForm): bool  =
  return Form_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TForm, AValue: bool)  =
  Form_SetAutoSize(this.Instance, AValue)

proc BiDiMode*(this: TForm): TBiDiMode  =
  return Form_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TForm, AValue: TBiDiMode)  =
  Form_SetBiDiMode(this.Instance, AValue)

proc BorderIcons*(this: TForm): TBorderIcons  =
  return Form_GetBorderIcons(this.Instance)

proc `BorderIcons=`*(this: TForm, AValue: TBorderIcons)  =
  Form_SetBorderIcons(this.Instance, AValue)

proc BorderStyle*(this: TForm): TFormBorderStyle  =
  return Form_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TForm, AValue: TFormBorderStyle)  =
  Form_SetBorderStyle(this.Instance, AValue)

proc BorderWidth*(this: TForm): int32  =
  return Form_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TForm, AValue: int32)  =
  Form_SetBorderWidth(this.Instance, AValue)

proc Caption*(this: TForm): string  =
  return $Form_GetCaption(this.Instance)

proc `Caption=`*(this: TForm, AValue: string)  =
  Form_SetCaption(this.Instance, AValue)

proc ClientHeight*(this: TForm): int32  =
  return Form_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TForm, AValue: int32)  =
  Form_SetClientHeight(this.Instance, AValue)

proc ClientWidth*(this: TForm): int32  =
  return Form_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TForm, AValue: int32)  =
  Form_SetClientWidth(this.Instance, AValue)

proc Color*(this: TForm): TColor  =
  return Form_GetColor(this.Instance)

proc `Color=`*(this: TForm, AValue: TColor)  =
  Form_SetColor(this.Instance, AValue)

proc Constraints*(this: TForm): TSizeConstraints  =
  return Form_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TForm, AValue: TSizeConstraints)  =
  Form_SetConstraints(this.Instance, CheckPtr(AValue))

proc UseDockManager*(this: TForm): bool  =
  return Form_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TForm, AValue: bool)  =
  Form_SetUseDockManager(this.Instance, AValue)

proc DefaultMonitor*(this: TForm): TDefaultMonitor  =
  return Form_GetDefaultMonitor(this.Instance)

proc `DefaultMonitor=`*(this: TForm, AValue: TDefaultMonitor)  =
  Form_SetDefaultMonitor(this.Instance, AValue)

proc DockSite*(this: TForm): bool  =
  return Form_GetDockSite(this.Instance)

proc `DockSite=`*(this: TForm, AValue: bool)  =
  Form_SetDockSite(this.Instance, AValue)

proc DoubleBuffered*(this: TForm): bool  =
  return Form_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TForm, AValue: bool)  =
  Form_SetDoubleBuffered(this.Instance, AValue)

proc DragKind*(this: TForm): TDragKind  =
  return Form_GetDragKind(this.Instance)

proc `DragKind=`*(this: TForm, AValue: TDragKind)  =
  Form_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TForm): TDragMode  =
  return Form_GetDragMode(this.Instance)

proc `DragMode=`*(this: TForm, AValue: TDragMode)  =
  Form_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TForm): bool  =
  return Form_GetEnabled(this.Instance)

proc `Enabled=`*(this: TForm, AValue: bool)  =
  Form_SetEnabled(this.Instance, AValue)

proc ParentFont*(this: TForm): bool  =
  return Form_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TForm, AValue: bool)  =
  Form_SetParentFont(this.Instance, AValue)

proc Font*(this: TForm): TFont  =
  return Form_GetFont(this.Instance).AsFont

proc `Font=`*(this: TForm, AValue: TFont)  =
  Form_SetFont(this.Instance, CheckPtr(AValue))

proc FormStyle*(this: TForm): TFormStyle  =
  return Form_GetFormStyle(this.Instance)

proc `FormStyle=`*(this: TForm, AValue: TFormStyle)  =
  Form_SetFormStyle(this.Instance, AValue)

proc Height*(this: TForm): int32  =
  return Form_GetHeight(this.Instance)

proc `Height=`*(this: TForm, AValue: int32)  =
  Form_SetHeight(this.Instance, AValue)

proc HorzScrollBar*(this: TForm): TControlScrollBar  =
  return Form_GetHorzScrollBar(this.Instance).AsControlScrollBar

proc `HorzScrollBar=`*(this: TForm, AValue: TControlScrollBar)  =
  Form_SetHorzScrollBar(this.Instance, CheckPtr(AValue))

proc Icon*(this: TForm): TIcon  =
  return Form_GetIcon(this.Instance).AsIcon

proc `Icon=`*(this: TForm, AValue: TIcon)  =
  Form_SetIcon(this.Instance, CheckPtr(AValue))

proc KeyPreview*(this: TForm): bool  =
  return Form_GetKeyPreview(this.Instance)

proc `KeyPreview=`*(this: TForm, AValue: bool)  =
  Form_SetKeyPreview(this.Instance, AValue)

proc Menu*(this: TForm): TMainMenu  =
  return Form_GetMenu(this.Instance).AsMainMenu

proc `Menu=`*(this: TForm, AValue: TMainMenu)  =
  Form_SetMenu(this.Instance, CheckPtr(AValue))

proc PixelsPerInch*(this: TForm): int32  =
  return Form_GetPixelsPerInch(this.Instance)

proc `PixelsPerInch=`*(this: TForm, AValue: int32)  =
  Form_SetPixelsPerInch(this.Instance, AValue)

proc PopupMenu*(this: TForm): TPopupMenu  =
  return Form_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TForm, AValue: TPopupMenu)  =
  Form_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc Position*(this: TForm): TPosition  =
  return Form_GetPosition(this.Instance)

proc `Position=`*(this: TForm, AValue: TPosition)  =
  Form_SetPosition(this.Instance, AValue)

proc Scaled*(this: TForm): bool  =
  return Form_GetScaled(this.Instance)

proc `Scaled=`*(this: TForm, AValue: bool)  =
  Form_SetScaled(this.Instance, AValue)

proc ShowHint*(this: TForm): bool  =
  return Form_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TForm, AValue: bool)  =
  Form_SetShowHint(this.Instance, AValue)

proc VertScrollBar*(this: TForm): TControlScrollBar  =
  return Form_GetVertScrollBar(this.Instance).AsControlScrollBar

proc `VertScrollBar=`*(this: TForm, AValue: TControlScrollBar)  =
  Form_SetVertScrollBar(this.Instance, CheckPtr(AValue))

proc Visible*(this: TForm): bool  =
  return Form_GetVisible(this.Instance)

proc `Visible=`*(this: TForm, AValue: bool)  =
  Form_SetVisible(this.Instance, AValue)

proc Width*(this: TForm): int32  =
  return Form_GetWidth(this.Instance)

proc `Width=`*(this: TForm, AValue: int32)  =
  Form_SetWidth(this.Instance, AValue)

proc WindowState*(this: TForm): TWindowState  =
  return Form_GetWindowState(this.Instance)

proc `WindowState=`*(this: TForm, AValue: TWindowState)  =
  Form_SetWindowState(this.Instance, AValue)

proc `OnActivate=`*(this: TForm, AEventId: TNotifyEvent)  =
  Form_SetOnActivate(this.Instance, AEventId)

proc `OnAlignPosition=`*(this: TForm, AEventId: TAlignPositionEvent)  =
  Form_SetOnAlignPosition(this.Instance, AEventId)

proc `OnClick=`*(this: TForm, AEventId: TNotifyEvent)  =
  Form_SetOnClick(this.Instance, AEventId)

proc `OnClose=`*(this: TForm, AEventId: TCloseEvent)  =
  Form_SetOnClose(this.Instance, AEventId)

proc `OnCloseQuery=`*(this: TForm, AEventId: TCloseQueryEvent)  =
  Form_SetOnCloseQuery(this.Instance, AEventId)

proc `OnConstrainedResize=`*(this: TForm, AEventId: TConstrainedResizeEvent)  =
  Form_SetOnConstrainedResize(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TForm, AEventId: TContextPopupEvent)  =
  Form_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TForm, AEventId: TNotifyEvent)  =
  Form_SetOnDblClick(this.Instance, AEventId)

proc `OnDestroy=`*(this: TForm, AEventId: TNotifyEvent)  =
  Form_SetOnDestroy(this.Instance, AEventId)

proc `OnDeactivate=`*(this: TForm, AEventId: TNotifyEvent)  =
  Form_SetOnDeactivate(this.Instance, AEventId)

proc `OnDockDrop=`*(this: TForm, AEventId: TDockDropEvent)  =
  Form_SetOnDockDrop(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TForm, AEventId: TDragDropEvent)  =
  Form_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TForm, AEventId: TDragOverEvent)  =
  Form_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDock=`*(this: TForm, AEventId: TEndDragEvent)  =
  Form_SetOnEndDock(this.Instance, AEventId)

proc `OnGetSiteInfo=`*(this: TForm, AEventId: TGetSiteInfoEvent)  =
  Form_SetOnGetSiteInfo(this.Instance, AEventId)

proc `OnHide=`*(this: TForm, AEventId: TNotifyEvent)  =
  Form_SetOnHide(this.Instance, AEventId)

proc `OnHelp=`*(this: TForm, AEventId: THelpEvent)  =
  Form_SetOnHelp(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TForm, AEventId: TKeyEvent)  =
  Form_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TForm, AEventId: TKeyPressEvent)  =
  Form_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TForm, AEventId: TKeyEvent)  =
  Form_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TForm, AEventId: TMouseEvent)  =
  Form_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TForm, AEventId: TNotifyEvent)  =
  Form_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TForm, AEventId: TNotifyEvent)  =
  Form_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TForm, AEventId: TMouseMoveEvent)  =
  Form_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TForm, AEventId: TMouseEvent)  =
  Form_SetOnMouseUp(this.Instance, AEventId)

proc `OnMouseWheel=`*(this: TForm, AEventId: TMouseWheelEvent)  =
  Form_SetOnMouseWheel(this.Instance, AEventId)

proc `OnMouseWheelDown=`*(this: TForm, AEventId: TMouseWheelUpDownEvent)  =
  Form_SetOnMouseWheelDown(this.Instance, AEventId)

proc `OnMouseWheelUp=`*(this: TForm, AEventId: TMouseWheelUpDownEvent)  =
  Form_SetOnMouseWheelUp(this.Instance, AEventId)

proc `OnPaint=`*(this: TForm, AEventId: TNotifyEvent)  =
  Form_SetOnPaint(this.Instance, AEventId)

proc `OnResize=`*(this: TForm, AEventId: TNotifyEvent)  =
  Form_SetOnResize(this.Instance, AEventId)

proc `OnShortCut=`*(this: TForm, AEventId: TShortCutEvent)  =
  Form_SetOnShortCut(this.Instance, AEventId)

proc `OnShow=`*(this: TForm, AEventId: TNotifyEvent)  =
  Form_SetOnShow(this.Instance, AEventId)

proc `OnStartDock=`*(this: TForm, AEventId: TStartDockEvent)  =
  Form_SetOnStartDock(this.Instance, AEventId)

proc `OnUnDock=`*(this: TForm, AEventId: TUnDockEvent)  =
  Form_SetOnUnDock(this.Instance, AEventId)

proc Canvas*(this: TForm): TCanvas  =
  return Form_GetCanvas(this.Instance).AsCanvas

proc ModalResult*(this: TForm): TModalResult  =
  return Form_GetModalResult(this.Instance)

proc `ModalResult=`*(this: TForm, AValue: TModalResult)  =
  Form_SetModalResult(this.Instance, AValue)

proc Monitor*(this: TForm): TMonitor  =
  return Form_GetMonitor(this.Instance).AsMonitor

proc Left*(this: TForm): int32  =
  return Form_GetLeft(this.Instance)

proc `Left=`*(this: TForm, AValue: int32)  =
  Form_SetLeft(this.Instance, AValue)

proc Top*(this: TForm): int32  =
  return Form_GetTop(this.Instance)

proc `Top=`*(this: TForm, AValue: int32)  =
  Form_SetTop(this.Instance, AValue)

proc DockClientCount*(this: TForm): int32  =
  return Form_GetDockClientCount(this.Instance)

proc MouseInClient*(this: TForm): bool  =
  return Form_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TForm): int32  =
  return Form_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TForm): TBrush  =
  return Form_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TForm): int32  =
  return Form_GetControlCount(this.Instance)

proc Handle*(this: TForm): HWND  =
  return Form_GetHandle(this.Instance)

proc ParentDoubleBuffered*(this: TForm): bool  =
  return Form_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TForm, AValue: bool)  =
  Form_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentWindow*(this: TForm): HWND  =
  return Form_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TForm, AValue: HWND)  =
  Form_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TForm): bool  =
  return Form_GetShowing(this.Instance)

proc TabOrder*(this: TForm): TTabOrder  =
  return Form_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TForm, AValue: TTabOrder)  =
  Form_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TForm): bool  =
  return Form_GetTabStop(this.Instance)

proc `TabStop=`*(this: TForm, AValue: bool)  =
  Form_SetTabStop(this.Instance, AValue)

proc BoundsRect*(this: TForm): TRect  =
  Form_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TForm, AValue: TRect)  =
  var ps1 = AValue
  Form_SetBoundsRect(this.Instance, ps1)

proc ClientOrigin*(this: TForm): TPoint  =
  Form_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TForm): TRect  =
  Form_GetClientRect(this.Instance, result)

proc ControlState*(this: TForm): TControlState  =
  return Form_GetControlState(this.Instance)

proc `ControlState=`*(this: TForm, AValue: TControlState)  =
  Form_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TForm): TControlStyle  =
  return Form_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TForm, AValue: TControlStyle)  =
  Form_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TForm): bool  =
  return Form_GetFloating(this.Instance)

proc Parent*(this: TForm): TWinControl  =
  return Form_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TForm, AValue: TWinControl)  =
  Form_SetParent(this.Instance, CheckPtr(AValue))

proc Cursor*(this: TForm): TCursor  =
  return Form_GetCursor(this.Instance)

proc `Cursor=`*(this: TForm, AValue: TCursor)  =
  Form_SetCursor(this.Instance, AValue)

proc Hint*(this: TForm): string  =
  return $Form_GetHint(this.Instance)

proc `Hint=`*(this: TForm, AValue: string)  =
  Form_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TForm): int32  =
  return Form_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TForm): int32  =
  return Form_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TForm, AValue: int32)  =
  Form_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TForm): TComponent  =
  return Form_GetOwner(this.Instance).AsComponent

proc Name*(this: TForm): string  =
  return $Form_GetName(this.Instance)

proc `Name=`*(this: TForm, AValue: string)  =
  Form_SetName(this.Instance, AValue)

proc Tag*(this: TForm): int  =
  return Form_GetTag(this.Instance)

proc `Tag=`*(this: TForm, AValue: int)  =
  Form_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TForm): TAnchorSide  =
  return Form_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TForm, AValue: TAnchorSide)  =
  Form_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TForm): TAnchorSide  =
  return Form_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TForm, AValue: TAnchorSide)  =
  Form_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TForm): TAnchorSide  =
  return Form_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TForm, AValue: TAnchorSide)  =
  Form_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TForm): TAnchorSide  =
  return Form_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TForm, AValue: TAnchorSide)  =
  Form_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TForm): TControlChildSizing  =
  return Form_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TForm, AValue: TControlChildSizing)  =
  Form_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TForm): TControlBorderSpacing  =
  return Form_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TForm, AValue: TControlBorderSpacing)  =
  Form_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TForm, Index: int32): TControl  =
  return Form_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TForm, Index: int32): TControl  =
  return Form_GetControls(this.Instance, Index).AsControl

proc Components*(this: TForm, AIndex: int32): TComponent  =
  return Form_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TForm, AKind: TAnchorKind): TAnchorSide  =
  return Form_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TFormClass*(): TClass = Form_StaticClassType()


proc Create*(this: TForm, AInitScale: bool): TForm  =
  return Form_Create2(this.Instance, AInitScale).AsForm

proc `OnWndProc=`*(this: TForm, AEventId: TWndProcEvent)  =
  Form_SetOnWndProc(this.Instance, AEventId)

#------------------------- TParaAttributes -------------------------


proc Assign*(this: TParaAttributes, Source: TObject)  =
  ParaAttributes_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TParaAttributes): string  =
  return $ParaAttributes_GetNamePath(this.Instance)

proc ClassType*(this: TParaAttributes): TClass =
  return ParaAttributes_ClassType(this.Instance)

proc ClassName*(this: TParaAttributes): string =
  return $ParaAttributes_ClassName(this.Instance)

proc InstanceSize*(this: TParaAttributes): int32 =
  return ParaAttributes_InstanceSize(this.Instance)

proc InheritsFrom*(this: TParaAttributes, AClass: TClass): bool =
  return ParaAttributes_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TParaAttributes, Obj: TObject): bool =
  return ParaAttributes_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TParaAttributes): int32 =
  return ParaAttributes_GetHashCode(this.Instance)

proc ToString*(this: TParaAttributes): string =
  return $ParaAttributes_ToString(this.Instance)

proc Alignment*(this: TParaAttributes): TAlignment  =
  return ParaAttributes_GetAlignment(this.Instance)

proc `Alignment=`*(this: TParaAttributes, AValue: TAlignment)  =
  ParaAttributes_SetAlignment(this.Instance, AValue)

proc FirstIndent*(this: TParaAttributes): int32  =
  return ParaAttributes_GetFirstIndent(this.Instance)

proc `FirstIndent=`*(this: TParaAttributes, AValue: int32)  =
  ParaAttributes_SetFirstIndent(this.Instance, AValue)

proc LeftIndent*(this: TParaAttributes): int32  =
  return ParaAttributes_GetLeftIndent(this.Instance)

proc `LeftIndent=`*(this: TParaAttributes, AValue: int32)  =
  ParaAttributes_SetLeftIndent(this.Instance, AValue)

proc Numbering*(this: TParaAttributes): TNumberingStyle  =
  return ParaAttributes_GetNumbering(this.Instance)

proc `Numbering=`*(this: TParaAttributes, AValue: TNumberingStyle)  =
  ParaAttributes_SetNumbering(this.Instance, AValue)

proc RightIndent*(this: TParaAttributes): int32  =
  return ParaAttributes_GetRightIndent(this.Instance)

proc `RightIndent=`*(this: TParaAttributes, AValue: int32)  =
  ParaAttributes_SetRightIndent(this.Instance, AValue)

proc TabCount*(this: TParaAttributes): int32  =
  return ParaAttributes_GetTabCount(this.Instance)

proc `TabCount=`*(this: TParaAttributes, AValue: int32)  =
  ParaAttributes_SetTabCount(this.Instance, AValue)

proc Tab*(this: TParaAttributes, Index: int8): int32  =
  return ParaAttributes_GetTab(this.Instance, Index)

proc `Tab=`*(this: TParaAttributes, Index: int8, AValue: int32)  =
  ParaAttributes_SetTab(this.Instance, Index, AValue)

proc TParaAttributesClass*(): TClass = ParaAttributes_StaticClassType()


#------------------------- TTextAttributes -------------------------


proc Assign*(this: TTextAttributes, Source: TObject)  =
  TextAttributes_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TTextAttributes): string  =
  return $TextAttributes_GetNamePath(this.Instance)

proc ClassType*(this: TTextAttributes): TClass =
  return TextAttributes_ClassType(this.Instance)

proc ClassName*(this: TTextAttributes): string =
  return $TextAttributes_ClassName(this.Instance)

proc InstanceSize*(this: TTextAttributes): int32 =
  return TextAttributes_InstanceSize(this.Instance)

proc InheritsFrom*(this: TTextAttributes, AClass: TClass): bool =
  return TextAttributes_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TTextAttributes, Obj: TObject): bool =
  return TextAttributes_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TTextAttributes): int32 =
  return TextAttributes_GetHashCode(this.Instance)

proc ToString*(this: TTextAttributes): string =
  return $TextAttributes_ToString(this.Instance)

proc Charset*(this: TTextAttributes): TFontCharset  =
  return TextAttributes_GetCharset(this.Instance)

proc `Charset=`*(this: TTextAttributes, AValue: TFontCharset)  =
  TextAttributes_SetCharset(this.Instance, AValue)

proc Color*(this: TTextAttributes): TColor  =
  return TextAttributes_GetColor(this.Instance)

proc `Color=`*(this: TTextAttributes, AValue: TColor)  =
  TextAttributes_SetColor(this.Instance, AValue)

proc Name*(this: TTextAttributes): string  =
  return $TextAttributes_GetName(this.Instance)

proc `Name=`*(this: TTextAttributes, AValue: string)  =
  TextAttributes_SetName(this.Instance, AValue)

proc Pitch*(this: TTextAttributes): TFontPitch  =
  return TextAttributes_GetPitch(this.Instance)

proc `Pitch=`*(this: TTextAttributes, AValue: TFontPitch)  =
  TextAttributes_SetPitch(this.Instance, AValue)

proc Size*(this: TTextAttributes): int32  =
  return TextAttributes_GetSize(this.Instance)

proc `Size=`*(this: TTextAttributes, AValue: int32)  =
  TextAttributes_SetSize(this.Instance, AValue)

proc Style*(this: TTextAttributes): TFontStyles  =
  return TextAttributes_GetStyle(this.Instance)

proc `Style=`*(this: TTextAttributes, AValue: TFontStyles)  =
  TextAttributes_SetStyle(this.Instance, AValue)

proc Height*(this: TTextAttributes): int32  =
  return TextAttributes_GetHeight(this.Instance)

proc `Height=`*(this: TTextAttributes, AValue: int32)  =
  TextAttributes_SetHeight(this.Instance, AValue)

proc TTextAttributesClass*(): TClass = TextAttributes_StaticClassType()


#------------------------- TIconOptions -------------------------


proc Assign*(this: TIconOptions, Source: TObject)  =
  IconOptions_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TIconOptions): string  =
  return $IconOptions_GetNamePath(this.Instance)

proc ClassType*(this: TIconOptions): TClass =
  return IconOptions_ClassType(this.Instance)

proc ClassName*(this: TIconOptions): string =
  return $IconOptions_ClassName(this.Instance)

proc InstanceSize*(this: TIconOptions): int32 =
  return IconOptions_InstanceSize(this.Instance)

proc InheritsFrom*(this: TIconOptions, AClass: TClass): bool =
  return IconOptions_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TIconOptions, Obj: TObject): bool =
  return IconOptions_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TIconOptions): int32 =
  return IconOptions_GetHashCode(this.Instance)

proc ToString*(this: TIconOptions): string =
  return $IconOptions_ToString(this.Instance)

proc Arrangement*(this: TIconOptions): TIconArrangement  =
  return IconOptions_GetArrangement(this.Instance)

proc `Arrangement=`*(this: TIconOptions, AValue: TIconArrangement)  =
  IconOptions_SetArrangement(this.Instance, AValue)

proc AutoArrange*(this: TIconOptions): bool  =
  return IconOptions_GetAutoArrange(this.Instance)

proc `AutoArrange=`*(this: TIconOptions, AValue: bool)  =
  IconOptions_SetAutoArrange(this.Instance, AValue)

proc TIconOptionsClass*(): TClass = IconOptions_StaticClassType()


#------------------------- TScrollBar -------------------------

proc Free*(this: TScrollBar) = defaultFree: ScrollBar_Free

proc NewScrollBar*(AOwner: TComponent): TScrollBar =
  new(result)
  result.Instance = ScrollBar_Create(CheckPtr(AOwner))

proc SetParams*(this: TScrollBar, APosition: int32, AMin: int32, AMax: int32)  =
  ScrollBar_SetParams(this.Instance, APosition, AMin, AMax)

proc CanFocus*(this: TScrollBar): bool =
  return ScrollBar_CanFocus(this.Instance)

proc ContainsControl*(this: TScrollBar, Control: TControl): bool =
  return ScrollBar_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TScrollBar, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return ScrollBar_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TScrollBar) =
  ScrollBar_DisableAlign(this.Instance)

proc EnableAlign*(this: TScrollBar) =
  ScrollBar_EnableAlign(this.Instance)

proc FindChildControl*(this: TScrollBar, ControlName: string): TControl =
  return ScrollBar_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TScrollBar, AllLevels: bool) =
  ScrollBar_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TScrollBar): bool =
  return ScrollBar_Focused(this.Instance)

proc HandleAllocated*(this: TScrollBar): bool =
  return ScrollBar_HandleAllocated(this.Instance)

proc InsertControl*(this: TScrollBar, AControl: TControl) =
  ScrollBar_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TScrollBar) =
  ScrollBar_Invalidate(this.Instance)

proc PaintTo*(this: TScrollBar, DC: HDC, X: int32, Y: int32) =
  ScrollBar_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TScrollBar, AControl: TControl) =
  ScrollBar_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TScrollBar) =
  ScrollBar_Realign(this.Instance)

proc Repaint*(this: TScrollBar) =
  ScrollBar_Repaint(this.Instance)

proc ScaleBy*(this: TScrollBar, M: int32, D: int32) =
  ScrollBar_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TScrollBar, DeltaX: int32, DeltaY: int32) =
  ScrollBar_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TScrollBar, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ScrollBar_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TScrollBar) =
  ScrollBar_SetFocus(this.Instance)

proc Update*(this: TScrollBar) =
  ScrollBar_Update(this.Instance)

proc BringToFront*(this: TScrollBar) =
  ScrollBar_BringToFront(this.Instance)

proc ClientToScreen*(this: TScrollBar, Point: TPoint): TPoint =
  var ps1 = Point
  ScrollBar_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TScrollBar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ScrollBar_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TScrollBar): bool =
  return ScrollBar_Dragging(this.Instance)

proc HasParent*(this: TScrollBar): bool =
  return ScrollBar_HasParent(this.Instance)

proc Hide*(this: TScrollBar) =
  ScrollBar_Hide(this.Instance)

proc Perform*(this: TScrollBar, Msg: uint32, WParam: uint, LParam: int): int =
  return ScrollBar_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TScrollBar) =
  ScrollBar_Refresh(this.Instance)

proc ScreenToClient*(this: TScrollBar, Point: TPoint): TPoint =
  var ps1 = Point
  ScrollBar_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TScrollBar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ScrollBar_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TScrollBar) =
  ScrollBar_SendToBack(this.Instance)

proc Show*(this: TScrollBar) =
  ScrollBar_Show(this.Instance)

proc GetTextBuf*(this: TScrollBar, Buffer: string, BufSize: int32): int32 =
  return ScrollBar_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TScrollBar): int32 =
  return ScrollBar_GetTextLen(this.Instance)

proc SetTextBuf*(this: TScrollBar, Buffer: string) =
  ScrollBar_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TScrollBar, AName: string): TComponent =
  return ScrollBar_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TScrollBar): string =
  return $ScrollBar_GetNamePath(this.Instance)

proc Assign*(this: TScrollBar, Source: TObject) =
  ScrollBar_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TScrollBar): TClass =
  return ScrollBar_ClassType(this.Instance)

proc ClassName*(this: TScrollBar): string =
  return $ScrollBar_ClassName(this.Instance)

proc InstanceSize*(this: TScrollBar): int32 =
  return ScrollBar_InstanceSize(this.Instance)

proc InheritsFrom*(this: TScrollBar, AClass: TClass): bool =
  return ScrollBar_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TScrollBar, Obj: TObject): bool =
  return ScrollBar_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TScrollBar): int32 =
  return ScrollBar_GetHashCode(this.Instance)

proc ToString*(this: TScrollBar): string =
  return $ScrollBar_ToString(this.Instance)

proc AnchorToNeighbour*(this: TScrollBar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ScrollBar_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TScrollBar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ScrollBar_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TScrollBar, ASibling: TControl) =
  ScrollBar_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TScrollBar, ASibling: TControl) =
  ScrollBar_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TScrollBar, ASide: TAnchorKind, ASibling: TControl) =
  ScrollBar_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TScrollBar, ATheAlign: TAlign, ASpace: int32) =
  ScrollBar_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TScrollBar, ASpace: int32) =
  ScrollBar_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TScrollBar, ASize: int32): int32 =
  return ScrollBar_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TScrollBar, ASize: int32): int32 =
  return ScrollBar_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TScrollBar, ASize: int32): int32 =
  return ScrollBar_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TScrollBar, ASize: int32): int32 =
  return ScrollBar_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TScrollBar, ASize: int32): int32 =
  return ScrollBar_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TScrollBar, ASize: int32): int32 =
  return ScrollBar_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TScrollBar, ASize: int32): int32 =
  return ScrollBar_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TScrollBar, ASize: int32): int32 =
  return ScrollBar_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TScrollBar, ASize: int32): int32 =
  return ScrollBar_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TScrollBar, ASize: int32): int32 =
  return ScrollBar_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TScrollBar, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ScrollBar_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TScrollBar, ADesignTimePPI: int32) =
  ScrollBar_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TScrollBar, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ScrollBar_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TScrollBar): TAlign  =
  return ScrollBar_GetAlign(this.Instance)

proc `Align=`*(this: TScrollBar, AValue: TAlign)  =
  ScrollBar_SetAlign(this.Instance, AValue)

proc Anchors*(this: TScrollBar): TAnchors  =
  return ScrollBar_GetAnchors(this.Instance)

proc `Anchors=`*(this: TScrollBar, AValue: TAnchors)  =
  ScrollBar_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TScrollBar): TBiDiMode  =
  return ScrollBar_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TScrollBar, AValue: TBiDiMode)  =
  ScrollBar_SetBiDiMode(this.Instance, AValue)

proc Constraints*(this: TScrollBar): TSizeConstraints  =
  return ScrollBar_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TScrollBar, AValue: TSizeConstraints)  =
  ScrollBar_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TScrollBar): bool  =
  return ScrollBar_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TScrollBar, AValue: bool)  =
  ScrollBar_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TScrollBar): TCursor  =
  return ScrollBar_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TScrollBar, AValue: TCursor)  =
  ScrollBar_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TScrollBar): TDragKind  =
  return ScrollBar_GetDragKind(this.Instance)

proc `DragKind=`*(this: TScrollBar, AValue: TDragKind)  =
  ScrollBar_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TScrollBar): TDragMode  =
  return ScrollBar_GetDragMode(this.Instance)

proc `DragMode=`*(this: TScrollBar, AValue: TDragMode)  =
  ScrollBar_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TScrollBar): bool  =
  return ScrollBar_GetEnabled(this.Instance)

proc `Enabled=`*(this: TScrollBar, AValue: bool)  =
  ScrollBar_SetEnabled(this.Instance, AValue)

proc LargeChange*(this: TScrollBar): TScrollBarInc  =
  return ScrollBar_GetLargeChange(this.Instance)

proc `LargeChange=`*(this: TScrollBar, AValue: TScrollBarInc)  =
  ScrollBar_SetLargeChange(this.Instance, AValue)

proc Max*(this: TScrollBar): int32  =
  return ScrollBar_GetMax(this.Instance)

proc `Max=`*(this: TScrollBar, AValue: int32)  =
  ScrollBar_SetMax(this.Instance, AValue)

proc Min*(this: TScrollBar): int32  =
  return ScrollBar_GetMin(this.Instance)

proc `Min=`*(this: TScrollBar, AValue: int32)  =
  ScrollBar_SetMin(this.Instance, AValue)

proc PageSize*(this: TScrollBar): int32  =
  return ScrollBar_GetPageSize(this.Instance)

proc `PageSize=`*(this: TScrollBar, AValue: int32)  =
  ScrollBar_SetPageSize(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TScrollBar): bool  =
  return ScrollBar_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TScrollBar, AValue: bool)  =
  ScrollBar_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentShowHint*(this: TScrollBar): bool  =
  return ScrollBar_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TScrollBar, AValue: bool)  =
  ScrollBar_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TScrollBar): TPopupMenu  =
  return ScrollBar_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TScrollBar, AValue: TPopupMenu)  =
  ScrollBar_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc Position*(this: TScrollBar): int32  =
  return ScrollBar_GetPosition(this.Instance)

proc `Position=`*(this: TScrollBar, AValue: int32)  =
  ScrollBar_SetPosition(this.Instance, AValue)

proc ShowHint*(this: TScrollBar): bool  =
  return ScrollBar_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TScrollBar, AValue: bool)  =
  ScrollBar_SetShowHint(this.Instance, AValue)

proc SmallChange*(this: TScrollBar): TScrollBarInc  =
  return ScrollBar_GetSmallChange(this.Instance)

proc `SmallChange=`*(this: TScrollBar, AValue: TScrollBarInc)  =
  ScrollBar_SetSmallChange(this.Instance, AValue)

proc TabOrder*(this: TScrollBar): TTabOrder  =
  return ScrollBar_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TScrollBar, AValue: TTabOrder)  =
  ScrollBar_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TScrollBar): bool  =
  return ScrollBar_GetTabStop(this.Instance)

proc `TabStop=`*(this: TScrollBar, AValue: bool)  =
  ScrollBar_SetTabStop(this.Instance, AValue)

proc Visible*(this: TScrollBar): bool  =
  return ScrollBar_GetVisible(this.Instance)

proc `Visible=`*(this: TScrollBar, AValue: bool)  =
  ScrollBar_SetVisible(this.Instance, AValue)

proc `OnContextPopup=`*(this: TScrollBar, AEventId: TContextPopupEvent)  =
  ScrollBar_SetOnContextPopup(this.Instance, AEventId)

proc `OnChange=`*(this: TScrollBar, AEventId: TNotifyEvent)  =
  ScrollBar_SetOnChange(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TScrollBar, AEventId: TDragDropEvent)  =
  ScrollBar_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TScrollBar, AEventId: TDragOverEvent)  =
  ScrollBar_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TScrollBar, AEventId: TEndDragEvent)  =
  ScrollBar_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TScrollBar, AEventId: TNotifyEvent)  =
  ScrollBar_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TScrollBar, AEventId: TNotifyEvent)  =
  ScrollBar_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TScrollBar, AEventId: TKeyEvent)  =
  ScrollBar_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TScrollBar, AEventId: TKeyPressEvent)  =
  ScrollBar_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TScrollBar, AEventId: TKeyEvent)  =
  ScrollBar_SetOnKeyUp(this.Instance, AEventId)

proc DockClientCount*(this: TScrollBar): int32  =
  return ScrollBar_GetDockClientCount(this.Instance)

proc DockSite*(this: TScrollBar): bool  =
  return ScrollBar_GetDockSite(this.Instance)

proc `DockSite=`*(this: TScrollBar, AValue: bool)  =
  ScrollBar_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TScrollBar): bool  =
  return ScrollBar_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TScrollBar): int32  =
  return ScrollBar_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TScrollBar): TBrush  =
  return ScrollBar_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TScrollBar): int32  =
  return ScrollBar_GetControlCount(this.Instance)

proc Handle*(this: TScrollBar): HWND  =
  return ScrollBar_GetHandle(this.Instance)

proc ParentWindow*(this: TScrollBar): HWND  =
  return ScrollBar_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TScrollBar, AValue: HWND)  =
  ScrollBar_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TScrollBar): bool  =
  return ScrollBar_GetShowing(this.Instance)

proc UseDockManager*(this: TScrollBar): bool  =
  return ScrollBar_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TScrollBar, AValue: bool)  =
  ScrollBar_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TScrollBar): TAction  =
  return ScrollBar_GetAction(this.Instance).AsAction

proc `Action=`*(this: TScrollBar, AValue: TAction)  =
  ScrollBar_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TScrollBar): TRect  =
  ScrollBar_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TScrollBar, AValue: TRect)  =
  var ps1 = AValue
  ScrollBar_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TScrollBar): int32  =
  return ScrollBar_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TScrollBar, AValue: int32)  =
  ScrollBar_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TScrollBar): TPoint  =
  ScrollBar_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TScrollBar): TRect  =
  ScrollBar_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TScrollBar): int32  =
  return ScrollBar_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TScrollBar, AValue: int32)  =
  ScrollBar_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TScrollBar): TControlState  =
  return ScrollBar_GetControlState(this.Instance)

proc `ControlState=`*(this: TScrollBar, AValue: TControlState)  =
  ScrollBar_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TScrollBar): TControlStyle  =
  return ScrollBar_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TScrollBar, AValue: TControlStyle)  =
  ScrollBar_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TScrollBar): bool  =
  return ScrollBar_GetFloating(this.Instance)

proc Parent*(this: TScrollBar): TWinControl  =
  return ScrollBar_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TScrollBar, AValue: TWinControl)  =
  ScrollBar_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TScrollBar): int32  =
  return ScrollBar_GetLeft(this.Instance)

proc `Left=`*(this: TScrollBar, AValue: int32)  =
  ScrollBar_SetLeft(this.Instance, AValue)

proc Top*(this: TScrollBar): int32  =
  return ScrollBar_GetTop(this.Instance)

proc `Top=`*(this: TScrollBar, AValue: int32)  =
  ScrollBar_SetTop(this.Instance, AValue)

proc Width*(this: TScrollBar): int32  =
  return ScrollBar_GetWidth(this.Instance)

proc `Width=`*(this: TScrollBar, AValue: int32)  =
  ScrollBar_SetWidth(this.Instance, AValue)

proc Height*(this: TScrollBar): int32  =
  return ScrollBar_GetHeight(this.Instance)

proc `Height=`*(this: TScrollBar, AValue: int32)  =
  ScrollBar_SetHeight(this.Instance, AValue)

proc Cursor*(this: TScrollBar): TCursor  =
  return ScrollBar_GetCursor(this.Instance)

proc `Cursor=`*(this: TScrollBar, AValue: TCursor)  =
  ScrollBar_SetCursor(this.Instance, AValue)

proc Hint*(this: TScrollBar): string  =
  return $ScrollBar_GetHint(this.Instance)

proc `Hint=`*(this: TScrollBar, AValue: string)  =
  ScrollBar_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TScrollBar): int32  =
  return ScrollBar_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TScrollBar): int32  =
  return ScrollBar_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TScrollBar, AValue: int32)  =
  ScrollBar_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TScrollBar): TComponent  =
  return ScrollBar_GetOwner(this.Instance).AsComponent

proc Name*(this: TScrollBar): string  =
  return $ScrollBar_GetName(this.Instance)

proc `Name=`*(this: TScrollBar, AValue: string)  =
  ScrollBar_SetName(this.Instance, AValue)

proc Tag*(this: TScrollBar): int  =
  return ScrollBar_GetTag(this.Instance)

proc `Tag=`*(this: TScrollBar, AValue: int)  =
  ScrollBar_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TScrollBar): TAnchorSide  =
  return ScrollBar_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TScrollBar, AValue: TAnchorSide)  =
  ScrollBar_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TScrollBar): TAnchorSide  =
  return ScrollBar_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TScrollBar, AValue: TAnchorSide)  =
  ScrollBar_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TScrollBar): TAnchorSide  =
  return ScrollBar_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TScrollBar, AValue: TAnchorSide)  =
  ScrollBar_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TScrollBar): TAnchorSide  =
  return ScrollBar_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TScrollBar, AValue: TAnchorSide)  =
  ScrollBar_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TScrollBar): TControlChildSizing  =
  return ScrollBar_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TScrollBar, AValue: TControlChildSizing)  =
  ScrollBar_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TScrollBar): TControlBorderSpacing  =
  return ScrollBar_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TScrollBar, AValue: TControlBorderSpacing)  =
  ScrollBar_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TScrollBar, Index: int32): TControl  =
  return ScrollBar_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TScrollBar, Index: int32): TControl  =
  return ScrollBar_GetControls(this.Instance, Index).AsControl

proc Components*(this: TScrollBar, AIndex: int32): TComponent  =
  return ScrollBar_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TScrollBar, AKind: TAnchorKind): TAnchorSide  =
  return ScrollBar_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TScrollBarClass*(): TClass = ScrollBar_StaticClassType()


#------------------------- TMaskEdit -------------------------

proc Free*(this: TMaskEdit) = defaultFree: MaskEdit_Free

proc NewMaskEdit*(AOwner: TComponent): TMaskEdit =
  new(result)
  result.Instance = MaskEdit_Create(CheckPtr(AOwner))

proc ValidateEdit*(this: TMaskEdit)  =
  MaskEdit_ValidateEdit(this.Instance)

proc Clear*(this: TMaskEdit)  =
  MaskEdit_Clear(this.Instance)

proc GetTextLen*(this: TMaskEdit): int32 =
  return MaskEdit_GetTextLen(this.Instance)

proc ClearSelection*(this: TMaskEdit)  =
  MaskEdit_ClearSelection(this.Instance)

proc CopyToClipboard*(this: TMaskEdit)  =
  MaskEdit_CopyToClipboard(this.Instance)

proc CutToClipboard*(this: TMaskEdit)  =
  MaskEdit_CutToClipboard(this.Instance)

proc PasteFromClipboard*(this: TMaskEdit)  =
  MaskEdit_PasteFromClipboard(this.Instance)

proc Undo*(this: TMaskEdit)  =
  MaskEdit_Undo(this.Instance)

proc SelectAll*(this: TMaskEdit)  =
  MaskEdit_SelectAll(this.Instance)

proc CanFocus*(this: TMaskEdit): bool =
  return MaskEdit_CanFocus(this.Instance)

proc ContainsControl*(this: TMaskEdit, Control: TControl): bool =
  return MaskEdit_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TMaskEdit, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return MaskEdit_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TMaskEdit) =
  MaskEdit_DisableAlign(this.Instance)

proc EnableAlign*(this: TMaskEdit) =
  MaskEdit_EnableAlign(this.Instance)

proc FindChildControl*(this: TMaskEdit, ControlName: string): TControl =
  return MaskEdit_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TMaskEdit, AllLevels: bool) =
  MaskEdit_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TMaskEdit): bool =
  return MaskEdit_Focused(this.Instance)

proc HandleAllocated*(this: TMaskEdit): bool =
  return MaskEdit_HandleAllocated(this.Instance)

proc InsertControl*(this: TMaskEdit, AControl: TControl) =
  MaskEdit_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TMaskEdit) =
  MaskEdit_Invalidate(this.Instance)

proc PaintTo*(this: TMaskEdit, DC: HDC, X: int32, Y: int32) =
  MaskEdit_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TMaskEdit, AControl: TControl) =
  MaskEdit_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TMaskEdit) =
  MaskEdit_Realign(this.Instance)

proc Repaint*(this: TMaskEdit) =
  MaskEdit_Repaint(this.Instance)

proc ScaleBy*(this: TMaskEdit, M: int32, D: int32) =
  MaskEdit_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TMaskEdit, DeltaX: int32, DeltaY: int32) =
  MaskEdit_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TMaskEdit, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  MaskEdit_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TMaskEdit) =
  MaskEdit_SetFocus(this.Instance)

proc Update*(this: TMaskEdit) =
  MaskEdit_Update(this.Instance)

proc BringToFront*(this: TMaskEdit) =
  MaskEdit_BringToFront(this.Instance)

proc ClientToScreen*(this: TMaskEdit, Point: TPoint): TPoint =
  var ps1 = Point
  MaskEdit_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TMaskEdit, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  MaskEdit_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TMaskEdit): bool =
  return MaskEdit_Dragging(this.Instance)

proc HasParent*(this: TMaskEdit): bool =
  return MaskEdit_HasParent(this.Instance)

proc Hide*(this: TMaskEdit) =
  MaskEdit_Hide(this.Instance)

proc Perform*(this: TMaskEdit, Msg: uint32, WParam: uint, LParam: int): int =
  return MaskEdit_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TMaskEdit) =
  MaskEdit_Refresh(this.Instance)

proc ScreenToClient*(this: TMaskEdit, Point: TPoint): TPoint =
  var ps1 = Point
  MaskEdit_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TMaskEdit, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  MaskEdit_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TMaskEdit) =
  MaskEdit_SendToBack(this.Instance)

proc Show*(this: TMaskEdit) =
  MaskEdit_Show(this.Instance)

proc GetTextBuf*(this: TMaskEdit, Buffer: string, BufSize: int32): int32 =
  return MaskEdit_GetTextBuf(this.Instance, Buffer, BufSize)

proc SetTextBuf*(this: TMaskEdit, Buffer: string) =
  MaskEdit_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TMaskEdit, AName: string): TComponent =
  return MaskEdit_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TMaskEdit): string =
  return $MaskEdit_GetNamePath(this.Instance)

proc Assign*(this: TMaskEdit, Source: TObject) =
  MaskEdit_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TMaskEdit): TClass =
  return MaskEdit_ClassType(this.Instance)

proc ClassName*(this: TMaskEdit): string =
  return $MaskEdit_ClassName(this.Instance)

proc InstanceSize*(this: TMaskEdit): int32 =
  return MaskEdit_InstanceSize(this.Instance)

proc InheritsFrom*(this: TMaskEdit, AClass: TClass): bool =
  return MaskEdit_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TMaskEdit, Obj: TObject): bool =
  return MaskEdit_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TMaskEdit): int32 =
  return MaskEdit_GetHashCode(this.Instance)

proc ToString*(this: TMaskEdit): string =
  return $MaskEdit_ToString(this.Instance)

proc AnchorToNeighbour*(this: TMaskEdit, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  MaskEdit_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TMaskEdit, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  MaskEdit_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TMaskEdit, ASibling: TControl) =
  MaskEdit_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TMaskEdit, ASibling: TControl) =
  MaskEdit_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TMaskEdit, ASide: TAnchorKind, ASibling: TControl) =
  MaskEdit_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TMaskEdit, ATheAlign: TAlign, ASpace: int32) =
  MaskEdit_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TMaskEdit, ASpace: int32) =
  MaskEdit_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TMaskEdit, ASize: int32): int32 =
  return MaskEdit_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TMaskEdit, ASize: int32): int32 =
  return MaskEdit_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TMaskEdit, ASize: int32): int32 =
  return MaskEdit_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TMaskEdit, ASize: int32): int32 =
  return MaskEdit_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TMaskEdit, ASize: int32): int32 =
  return MaskEdit_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TMaskEdit, ASize: int32): int32 =
  return MaskEdit_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TMaskEdit, ASize: int32): int32 =
  return MaskEdit_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TMaskEdit, ASize: int32): int32 =
  return MaskEdit_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TMaskEdit, ASize: int32): int32 =
  return MaskEdit_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TMaskEdit, ASize: int32): int32 =
  return MaskEdit_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TMaskEdit, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  MaskEdit_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TMaskEdit, ADesignTimePPI: int32) =
  MaskEdit_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TMaskEdit, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  MaskEdit_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TMaskEdit): TAlign  =
  return MaskEdit_GetAlign(this.Instance)

proc `Align=`*(this: TMaskEdit, AValue: TAlign)  =
  MaskEdit_SetAlign(this.Instance, AValue)

proc Alignment*(this: TMaskEdit): TAlignment  =
  return MaskEdit_GetAlignment(this.Instance)

proc `Alignment=`*(this: TMaskEdit, AValue: TAlignment)  =
  MaskEdit_SetAlignment(this.Instance, AValue)

proc Anchors*(this: TMaskEdit): TAnchors  =
  return MaskEdit_GetAnchors(this.Instance)

proc `Anchors=`*(this: TMaskEdit, AValue: TAnchors)  =
  MaskEdit_SetAnchors(this.Instance, AValue)

proc AutoSelect*(this: TMaskEdit): bool  =
  return MaskEdit_GetAutoSelect(this.Instance)

proc `AutoSelect=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetAutoSelect(this.Instance, AValue)

proc AutoSize*(this: TMaskEdit): bool  =
  return MaskEdit_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetAutoSize(this.Instance, AValue)

proc BiDiMode*(this: TMaskEdit): TBiDiMode  =
  return MaskEdit_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TMaskEdit, AValue: TBiDiMode)  =
  MaskEdit_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TMaskEdit): TBorderStyle  =
  return MaskEdit_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TMaskEdit, AValue: TBorderStyle)  =
  MaskEdit_SetBorderStyle(this.Instance, AValue)

proc CharCase*(this: TMaskEdit): TEditCharCase  =
  return MaskEdit_GetCharCase(this.Instance)

proc `CharCase=`*(this: TMaskEdit, AValue: TEditCharCase)  =
  MaskEdit_SetCharCase(this.Instance, AValue)

proc Color*(this: TMaskEdit): TColor  =
  return MaskEdit_GetColor(this.Instance)

proc `Color=`*(this: TMaskEdit, AValue: TColor)  =
  MaskEdit_SetColor(this.Instance, AValue)

proc Constraints*(this: TMaskEdit): TSizeConstraints  =
  return MaskEdit_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TMaskEdit, AValue: TSizeConstraints)  =
  MaskEdit_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TMaskEdit): bool  =
  return MaskEdit_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TMaskEdit): TCursor  =
  return MaskEdit_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TMaskEdit, AValue: TCursor)  =
  MaskEdit_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TMaskEdit): TDragKind  =
  return MaskEdit_GetDragKind(this.Instance)

proc `DragKind=`*(this: TMaskEdit, AValue: TDragKind)  =
  MaskEdit_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TMaskEdit): TDragMode  =
  return MaskEdit_GetDragMode(this.Instance)

proc `DragMode=`*(this: TMaskEdit, AValue: TDragMode)  =
  MaskEdit_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TMaskEdit): bool  =
  return MaskEdit_GetEnabled(this.Instance)

proc `Enabled=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetEnabled(this.Instance, AValue)

proc Font*(this: TMaskEdit): TFont  =
  return MaskEdit_GetFont(this.Instance).AsFont

proc `Font=`*(this: TMaskEdit, AValue: TFont)  =
  MaskEdit_SetFont(this.Instance, CheckPtr(AValue))

proc MaxLength*(this: TMaskEdit): int32  =
  return MaskEdit_GetMaxLength(this.Instance)

proc `MaxLength=`*(this: TMaskEdit, AValue: int32)  =
  MaskEdit_SetMaxLength(this.Instance, AValue)

proc ParentColor*(this: TMaskEdit): bool  =
  return MaskEdit_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TMaskEdit): bool  =
  return MaskEdit_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TMaskEdit): bool  =
  return MaskEdit_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TMaskEdit): bool  =
  return MaskEdit_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetParentShowHint(this.Instance, AValue)

proc PasswordChar*(this: TMaskEdit): Char  =
  return MaskEdit_GetPasswordChar(this.Instance)

proc `PasswordChar=`*(this: TMaskEdit, AValue: Char)  =
  MaskEdit_SetPasswordChar(this.Instance, AValue)

proc PopupMenu*(this: TMaskEdit): TPopupMenu  =
  return MaskEdit_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TMaskEdit, AValue: TPopupMenu)  =
  MaskEdit_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ReadOnly*(this: TMaskEdit): bool  =
  return MaskEdit_GetReadOnly(this.Instance)

proc `ReadOnly=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetReadOnly(this.Instance, AValue)

proc ShowHint*(this: TMaskEdit): bool  =
  return MaskEdit_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TMaskEdit): TTabOrder  =
  return MaskEdit_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TMaskEdit, AValue: TTabOrder)  =
  MaskEdit_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TMaskEdit): bool  =
  return MaskEdit_GetTabStop(this.Instance)

proc `TabStop=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetTabStop(this.Instance, AValue)

proc Text*(this: TMaskEdit): string  =
  return $MaskEdit_GetText(this.Instance)

proc `Text=`*(this: TMaskEdit, AValue: string)  =
  MaskEdit_SetText(this.Instance, AValue)

proc TextHint*(this: TMaskEdit): string  =
  return $MaskEdit_GetTextHint(this.Instance)

proc `TextHint=`*(this: TMaskEdit, AValue: string)  =
  MaskEdit_SetTextHint(this.Instance, AValue)

proc Visible*(this: TMaskEdit): bool  =
  return MaskEdit_GetVisible(this.Instance)

proc `Visible=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetVisible(this.Instance, AValue)

proc `OnChange=`*(this: TMaskEdit, AEventId: TNotifyEvent)  =
  MaskEdit_SetOnChange(this.Instance, AEventId)

proc `OnClick=`*(this: TMaskEdit, AEventId: TNotifyEvent)  =
  MaskEdit_SetOnClick(this.Instance, AEventId)

proc `OnDblClick=`*(this: TMaskEdit, AEventId: TNotifyEvent)  =
  MaskEdit_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TMaskEdit, AEventId: TDragDropEvent)  =
  MaskEdit_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TMaskEdit, AEventId: TDragOverEvent)  =
  MaskEdit_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDock=`*(this: TMaskEdit, AEventId: TEndDragEvent)  =
  MaskEdit_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TMaskEdit, AEventId: TEndDragEvent)  =
  MaskEdit_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TMaskEdit, AEventId: TNotifyEvent)  =
  MaskEdit_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TMaskEdit, AEventId: TNotifyEvent)  =
  MaskEdit_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TMaskEdit, AEventId: TKeyEvent)  =
  MaskEdit_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TMaskEdit, AEventId: TKeyPressEvent)  =
  MaskEdit_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TMaskEdit, AEventId: TKeyEvent)  =
  MaskEdit_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TMaskEdit, AEventId: TMouseEvent)  =
  MaskEdit_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TMaskEdit, AEventId: TNotifyEvent)  =
  MaskEdit_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TMaskEdit, AEventId: TNotifyEvent)  =
  MaskEdit_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TMaskEdit, AEventId: TMouseMoveEvent)  =
  MaskEdit_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TMaskEdit, AEventId: TMouseEvent)  =
  MaskEdit_SetOnMouseUp(this.Instance, AEventId)

proc `OnStartDock=`*(this: TMaskEdit, AEventId: TStartDockEvent)  =
  MaskEdit_SetOnStartDock(this.Instance, AEventId)

proc IsMasked*(this: TMaskEdit): bool  =
  return MaskEdit_GetIsMasked(this.Instance)

proc EditText*(this: TMaskEdit): string  =
  return $MaskEdit_GetEditText(this.Instance)

proc `EditText=`*(this: TMaskEdit, AValue: string)  =
  MaskEdit_SetEditText(this.Instance, AValue)

proc CanUndo*(this: TMaskEdit): bool  =
  return MaskEdit_GetCanUndo(this.Instance)

proc Modified*(this: TMaskEdit): bool  =
  return MaskEdit_GetModified(this.Instance)

proc `Modified=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetModified(this.Instance, AValue)

proc SelLength*(this: TMaskEdit): int32  =
  return MaskEdit_GetSelLength(this.Instance)

proc `SelLength=`*(this: TMaskEdit, AValue: int32)  =
  MaskEdit_SetSelLength(this.Instance, AValue)

proc SelStart*(this: TMaskEdit): int32  =
  return MaskEdit_GetSelStart(this.Instance)

proc `SelStart=`*(this: TMaskEdit, AValue: int32)  =
  MaskEdit_SetSelStart(this.Instance, AValue)

proc SelText*(this: TMaskEdit): string  =
  return $MaskEdit_GetSelText(this.Instance)

proc `SelText=`*(this: TMaskEdit, AValue: string)  =
  MaskEdit_SetSelText(this.Instance, AValue)

proc DockClientCount*(this: TMaskEdit): int32  =
  return MaskEdit_GetDockClientCount(this.Instance)

proc DockSite*(this: TMaskEdit): bool  =
  return MaskEdit_GetDockSite(this.Instance)

proc `DockSite=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TMaskEdit): bool  =
  return MaskEdit_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TMaskEdit): int32  =
  return MaskEdit_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TMaskEdit): TBrush  =
  return MaskEdit_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TMaskEdit): int32  =
  return MaskEdit_GetControlCount(this.Instance)

proc Handle*(this: TMaskEdit): HWND  =
  return MaskEdit_GetHandle(this.Instance)

proc ParentWindow*(this: TMaskEdit): HWND  =
  return MaskEdit_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TMaskEdit, AValue: HWND)  =
  MaskEdit_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TMaskEdit): bool  =
  return MaskEdit_GetShowing(this.Instance)

proc UseDockManager*(this: TMaskEdit): bool  =
  return MaskEdit_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TMaskEdit, AValue: bool)  =
  MaskEdit_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TMaskEdit): TAction  =
  return MaskEdit_GetAction(this.Instance).AsAction

proc `Action=`*(this: TMaskEdit, AValue: TAction)  =
  MaskEdit_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TMaskEdit): TRect  =
  MaskEdit_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TMaskEdit, AValue: TRect)  =
  var ps1 = AValue
  MaskEdit_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TMaskEdit): int32  =
  return MaskEdit_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TMaskEdit, AValue: int32)  =
  MaskEdit_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TMaskEdit): TPoint  =
  MaskEdit_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TMaskEdit): TRect  =
  MaskEdit_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TMaskEdit): int32  =
  return MaskEdit_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TMaskEdit, AValue: int32)  =
  MaskEdit_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TMaskEdit): TControlState  =
  return MaskEdit_GetControlState(this.Instance)

proc `ControlState=`*(this: TMaskEdit, AValue: TControlState)  =
  MaskEdit_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TMaskEdit): TControlStyle  =
  return MaskEdit_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TMaskEdit, AValue: TControlStyle)  =
  MaskEdit_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TMaskEdit): bool  =
  return MaskEdit_GetFloating(this.Instance)

proc Parent*(this: TMaskEdit): TWinControl  =
  return MaskEdit_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TMaskEdit, AValue: TWinControl)  =
  MaskEdit_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TMaskEdit): int32  =
  return MaskEdit_GetLeft(this.Instance)

proc `Left=`*(this: TMaskEdit, AValue: int32)  =
  MaskEdit_SetLeft(this.Instance, AValue)

proc Top*(this: TMaskEdit): int32  =
  return MaskEdit_GetTop(this.Instance)

proc `Top=`*(this: TMaskEdit, AValue: int32)  =
  MaskEdit_SetTop(this.Instance, AValue)

proc Width*(this: TMaskEdit): int32  =
  return MaskEdit_GetWidth(this.Instance)

proc `Width=`*(this: TMaskEdit, AValue: int32)  =
  MaskEdit_SetWidth(this.Instance, AValue)

proc Height*(this: TMaskEdit): int32  =
  return MaskEdit_GetHeight(this.Instance)

proc `Height=`*(this: TMaskEdit, AValue: int32)  =
  MaskEdit_SetHeight(this.Instance, AValue)

proc Cursor*(this: TMaskEdit): TCursor  =
  return MaskEdit_GetCursor(this.Instance)

proc `Cursor=`*(this: TMaskEdit, AValue: TCursor)  =
  MaskEdit_SetCursor(this.Instance, AValue)

proc Hint*(this: TMaskEdit): string  =
  return $MaskEdit_GetHint(this.Instance)

proc `Hint=`*(this: TMaskEdit, AValue: string)  =
  MaskEdit_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TMaskEdit): int32  =
  return MaskEdit_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TMaskEdit): int32  =
  return MaskEdit_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TMaskEdit, AValue: int32)  =
  MaskEdit_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TMaskEdit): TComponent  =
  return MaskEdit_GetOwner(this.Instance).AsComponent

proc Name*(this: TMaskEdit): string  =
  return $MaskEdit_GetName(this.Instance)

proc `Name=`*(this: TMaskEdit, AValue: string)  =
  MaskEdit_SetName(this.Instance, AValue)

proc Tag*(this: TMaskEdit): int  =
  return MaskEdit_GetTag(this.Instance)

proc `Tag=`*(this: TMaskEdit, AValue: int)  =
  MaskEdit_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TMaskEdit): TAnchorSide  =
  return MaskEdit_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TMaskEdit, AValue: TAnchorSide)  =
  MaskEdit_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TMaskEdit): TAnchorSide  =
  return MaskEdit_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TMaskEdit, AValue: TAnchorSide)  =
  MaskEdit_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TMaskEdit): TAnchorSide  =
  return MaskEdit_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TMaskEdit, AValue: TAnchorSide)  =
  MaskEdit_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TMaskEdit): TAnchorSide  =
  return MaskEdit_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TMaskEdit, AValue: TAnchorSide)  =
  MaskEdit_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TMaskEdit): TControlChildSizing  =
  return MaskEdit_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TMaskEdit, AValue: TControlChildSizing)  =
  MaskEdit_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TMaskEdit): TControlBorderSpacing  =
  return MaskEdit_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TMaskEdit, AValue: TControlBorderSpacing)  =
  MaskEdit_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TMaskEdit, Index: int32): TControl  =
  return MaskEdit_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TMaskEdit, Index: int32): TControl  =
  return MaskEdit_GetControls(this.Instance, Index).AsControl

proc Components*(this: TMaskEdit, AIndex: int32): TComponent  =
  return MaskEdit_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TMaskEdit, AKind: TAnchorKind): TAnchorSide  =
  return MaskEdit_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TMaskEditClass*(): TClass = MaskEdit_StaticClassType()


#------------------------- TShape -------------------------

proc Free*(this: TShape) = defaultFree: Shape_Free

proc NewShape*(AOwner: TComponent): TShape =
  new(result)
  result.Instance = Shape_Create(CheckPtr(AOwner))

proc BringToFront*(this: TShape) =
  Shape_BringToFront(this.Instance)

proc ClientToScreen*(this: TShape, Point: TPoint): TPoint =
  var ps1 = Point
  Shape_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TShape, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Shape_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TShape): bool =
  return Shape_Dragging(this.Instance)

proc HasParent*(this: TShape): bool =
  return Shape_HasParent(this.Instance)

proc Hide*(this: TShape) =
  Shape_Hide(this.Instance)

proc Invalidate*(this: TShape) =
  Shape_Invalidate(this.Instance)

proc Perform*(this: TShape, Msg: uint32, WParam: uint, LParam: int): int =
  return Shape_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TShape) =
  Shape_Refresh(this.Instance)

proc Repaint*(this: TShape) =
  Shape_Repaint(this.Instance)

proc ScreenToClient*(this: TShape, Point: TPoint): TPoint =
  var ps1 = Point
  Shape_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TShape, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Shape_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TShape) =
  Shape_SendToBack(this.Instance)

proc SetBounds*(this: TShape, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  Shape_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Show*(this: TShape) =
  Shape_Show(this.Instance)

proc Update*(this: TShape) =
  Shape_Update(this.Instance)

proc GetTextBuf*(this: TShape, Buffer: string, BufSize: int32): int32 =
  return Shape_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TShape): int32 =
  return Shape_GetTextLen(this.Instance)

proc SetTextBuf*(this: TShape, Buffer: string) =
  Shape_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TShape, AName: string): TComponent =
  return Shape_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TShape): string =
  return $Shape_GetNamePath(this.Instance)

proc Assign*(this: TShape, Source: TObject) =
  Shape_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TShape): TClass =
  return Shape_ClassType(this.Instance)

proc ClassName*(this: TShape): string =
  return $Shape_ClassName(this.Instance)

proc InstanceSize*(this: TShape): int32 =
  return Shape_InstanceSize(this.Instance)

proc InheritsFrom*(this: TShape, AClass: TClass): bool =
  return Shape_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TShape, Obj: TObject): bool =
  return Shape_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TShape): int32 =
  return Shape_GetHashCode(this.Instance)

proc ToString*(this: TShape): string =
  return $Shape_ToString(this.Instance)

proc AnchorToNeighbour*(this: TShape, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Shape_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TShape, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Shape_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TShape, ASibling: TControl) =
  Shape_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TShape, ASibling: TControl) =
  Shape_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TShape, ASide: TAnchorKind, ASibling: TControl) =
  Shape_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TShape, ATheAlign: TAlign, ASpace: int32) =
  Shape_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TShape, ASpace: int32) =
  Shape_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TShape, ASize: int32): int32 =
  return Shape_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TShape, ASize: int32): int32 =
  return Shape_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TShape, ASize: int32): int32 =
  return Shape_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TShape, ASize: int32): int32 =
  return Shape_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TShape, ASize: int32): int32 =
  return Shape_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TShape, ASize: int32): int32 =
  return Shape_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TShape, ASize: int32): int32 =
  return Shape_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TShape, ASize: int32): int32 =
  return Shape_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TShape, ASize: int32): int32 =
  return Shape_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TShape, ASize: int32): int32 =
  return Shape_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TShape, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  Shape_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TShape, ADesignTimePPI: int32) =
  Shape_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TShape, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  Shape_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TShape): TAlign  =
  return Shape_GetAlign(this.Instance)

proc `Align=`*(this: TShape, AValue: TAlign)  =
  Shape_SetAlign(this.Instance, AValue)

proc Anchors*(this: TShape): TAnchors  =
  return Shape_GetAnchors(this.Instance)

proc `Anchors=`*(this: TShape, AValue: TAnchors)  =
  Shape_SetAnchors(this.Instance, AValue)

proc Brush*(this: TShape): TBrush  =
  return Shape_GetBrush(this.Instance).AsBrush

proc `Brush=`*(this: TShape, AValue: TBrush)  =
  Shape_SetBrush(this.Instance, CheckPtr(AValue))

proc DragCursor*(this: TShape): TCursor  =
  return Shape_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TShape, AValue: TCursor)  =
  Shape_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TShape): TDragKind  =
  return Shape_GetDragKind(this.Instance)

proc `DragKind=`*(this: TShape, AValue: TDragKind)  =
  Shape_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TShape): TDragMode  =
  return Shape_GetDragMode(this.Instance)

proc `DragMode=`*(this: TShape, AValue: TDragMode)  =
  Shape_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TShape): bool  =
  return Shape_GetEnabled(this.Instance)

proc `Enabled=`*(this: TShape, AValue: bool)  =
  Shape_SetEnabled(this.Instance, AValue)

proc Constraints*(this: TShape): TSizeConstraints  =
  return Shape_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TShape, AValue: TSizeConstraints)  =
  Shape_SetConstraints(this.Instance, CheckPtr(AValue))

proc ParentShowHint*(this: TShape): bool  =
  return Shape_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TShape, AValue: bool)  =
  Shape_SetParentShowHint(this.Instance, AValue)

proc Pen*(this: TShape): TPen  =
  return Shape_GetPen(this.Instance).AsPen

proc `Pen=`*(this: TShape, AValue: TPen)  =
  Shape_SetPen(this.Instance, CheckPtr(AValue))

proc Shape*(this: TShape): TShapeType  =
  return Shape_GetShape(this.Instance)

proc `Shape=`*(this: TShape, AValue: TShapeType)  =
  Shape_SetShape(this.Instance, AValue)

proc ShowHint*(this: TShape): bool  =
  return Shape_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TShape, AValue: bool)  =
  Shape_SetShowHint(this.Instance, AValue)

proc Visible*(this: TShape): bool  =
  return Shape_GetVisible(this.Instance)

proc `Visible=`*(this: TShape, AValue: bool)  =
  Shape_SetVisible(this.Instance, AValue)

proc `OnDragDrop=`*(this: TShape, AEventId: TDragDropEvent)  =
  Shape_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TShape, AEventId: TDragOverEvent)  =
  Shape_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TShape, AEventId: TEndDragEvent)  =
  Shape_SetOnEndDrag(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TShape, AEventId: TMouseEvent)  =
  Shape_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TShape, AEventId: TNotifyEvent)  =
  Shape_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TShape, AEventId: TNotifyEvent)  =
  Shape_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TShape, AEventId: TMouseMoveEvent)  =
  Shape_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TShape, AEventId: TMouseEvent)  =
  Shape_SetOnMouseUp(this.Instance, AEventId)

proc Action*(this: TShape): TAction  =
  return Shape_GetAction(this.Instance).AsAction

proc `Action=`*(this: TShape, AValue: TAction)  =
  Shape_SetAction(this.Instance, CheckPtr(AValue))

proc BiDiMode*(this: TShape): TBiDiMode  =
  return Shape_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TShape, AValue: TBiDiMode)  =
  Shape_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TShape): TRect  =
  Shape_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TShape, AValue: TRect)  =
  var ps1 = AValue
  Shape_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TShape): int32  =
  return Shape_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TShape, AValue: int32)  =
  Shape_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TShape): TPoint  =
  Shape_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TShape): TRect  =
  Shape_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TShape): int32  =
  return Shape_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TShape, AValue: int32)  =
  Shape_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TShape): TControlState  =
  return Shape_GetControlState(this.Instance)

proc `ControlState=`*(this: TShape, AValue: TControlState)  =
  Shape_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TShape): TControlStyle  =
  return Shape_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TShape, AValue: TControlStyle)  =
  Shape_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TShape): bool  =
  return Shape_GetFloating(this.Instance)

proc Parent*(this: TShape): TWinControl  =
  return Shape_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TShape, AValue: TWinControl)  =
  Shape_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TShape): int32  =
  return Shape_GetLeft(this.Instance)

proc `Left=`*(this: TShape, AValue: int32)  =
  Shape_SetLeft(this.Instance, AValue)

proc Top*(this: TShape): int32  =
  return Shape_GetTop(this.Instance)

proc `Top=`*(this: TShape, AValue: int32)  =
  Shape_SetTop(this.Instance, AValue)

proc Width*(this: TShape): int32  =
  return Shape_GetWidth(this.Instance)

proc `Width=`*(this: TShape, AValue: int32)  =
  Shape_SetWidth(this.Instance, AValue)

proc Height*(this: TShape): int32  =
  return Shape_GetHeight(this.Instance)

proc `Height=`*(this: TShape, AValue: int32)  =
  Shape_SetHeight(this.Instance, AValue)

proc Cursor*(this: TShape): TCursor  =
  return Shape_GetCursor(this.Instance)

proc `Cursor=`*(this: TShape, AValue: TCursor)  =
  Shape_SetCursor(this.Instance, AValue)

proc Hint*(this: TShape): string  =
  return $Shape_GetHint(this.Instance)

proc `Hint=`*(this: TShape, AValue: string)  =
  Shape_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TShape): int32  =
  return Shape_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TShape): int32  =
  return Shape_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TShape, AValue: int32)  =
  Shape_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TShape): TComponent  =
  return Shape_GetOwner(this.Instance).AsComponent

proc Name*(this: TShape): string  =
  return $Shape_GetName(this.Instance)

proc `Name=`*(this: TShape, AValue: string)  =
  Shape_SetName(this.Instance, AValue)

proc Tag*(this: TShape): int  =
  return Shape_GetTag(this.Instance)

proc `Tag=`*(this: TShape, AValue: int)  =
  Shape_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TShape): TAnchorSide  =
  return Shape_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TShape, AValue: TAnchorSide)  =
  Shape_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TShape): TAnchorSide  =
  return Shape_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TShape, AValue: TAnchorSide)  =
  Shape_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TShape): TAnchorSide  =
  return Shape_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TShape, AValue: TAnchorSide)  =
  Shape_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TShape): TAnchorSide  =
  return Shape_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TShape, AValue: TAnchorSide)  =
  Shape_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TShape): TControlBorderSpacing  =
  return Shape_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TShape, AValue: TControlBorderSpacing)  =
  Shape_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TShape, AIndex: int32): TComponent  =
  return Shape_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TShape, AKind: TAnchorKind): TAnchorSide  =
  return Shape_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TShapeClass*(): TClass = Shape_StaticClassType()


#------------------------- TBevel -------------------------

proc Free*(this: TBevel) = defaultFree: Bevel_Free

proc NewBevel*(AOwner: TComponent): TBevel =
  new(result)
  result.Instance = Bevel_Create(CheckPtr(AOwner))

proc BringToFront*(this: TBevel) =
  Bevel_BringToFront(this.Instance)

proc ClientToScreen*(this: TBevel, Point: TPoint): TPoint =
  var ps1 = Point
  Bevel_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TBevel, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Bevel_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TBevel): bool =
  return Bevel_Dragging(this.Instance)

proc HasParent*(this: TBevel): bool =
  return Bevel_HasParent(this.Instance)

proc Hide*(this: TBevel) =
  Bevel_Hide(this.Instance)

proc Invalidate*(this: TBevel) =
  Bevel_Invalidate(this.Instance)

proc Perform*(this: TBevel, Msg: uint32, WParam: uint, LParam: int): int =
  return Bevel_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TBevel) =
  Bevel_Refresh(this.Instance)

proc Repaint*(this: TBevel) =
  Bevel_Repaint(this.Instance)

proc ScreenToClient*(this: TBevel, Point: TPoint): TPoint =
  var ps1 = Point
  Bevel_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TBevel, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Bevel_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TBevel) =
  Bevel_SendToBack(this.Instance)

proc SetBounds*(this: TBevel, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  Bevel_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Show*(this: TBevel) =
  Bevel_Show(this.Instance)

proc Update*(this: TBevel) =
  Bevel_Update(this.Instance)

proc GetTextBuf*(this: TBevel, Buffer: string, BufSize: int32): int32 =
  return Bevel_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TBevel): int32 =
  return Bevel_GetTextLen(this.Instance)

proc SetTextBuf*(this: TBevel, Buffer: string) =
  Bevel_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TBevel, AName: string): TComponent =
  return Bevel_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TBevel): string =
  return $Bevel_GetNamePath(this.Instance)

proc Assign*(this: TBevel, Source: TObject) =
  Bevel_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TBevel): TClass =
  return Bevel_ClassType(this.Instance)

proc ClassName*(this: TBevel): string =
  return $Bevel_ClassName(this.Instance)

proc InstanceSize*(this: TBevel): int32 =
  return Bevel_InstanceSize(this.Instance)

proc InheritsFrom*(this: TBevel, AClass: TClass): bool =
  return Bevel_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TBevel, Obj: TObject): bool =
  return Bevel_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TBevel): int32 =
  return Bevel_GetHashCode(this.Instance)

proc ToString*(this: TBevel): string =
  return $Bevel_ToString(this.Instance)

proc AnchorToNeighbour*(this: TBevel, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Bevel_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TBevel, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Bevel_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TBevel, ASibling: TControl) =
  Bevel_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TBevel, ASibling: TControl) =
  Bevel_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TBevel, ASide: TAnchorKind, ASibling: TControl) =
  Bevel_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TBevel, ATheAlign: TAlign, ASpace: int32) =
  Bevel_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TBevel, ASpace: int32) =
  Bevel_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TBevel, ASize: int32): int32 =
  return Bevel_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TBevel, ASize: int32): int32 =
  return Bevel_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TBevel, ASize: int32): int32 =
  return Bevel_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TBevel, ASize: int32): int32 =
  return Bevel_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TBevel, ASize: int32): int32 =
  return Bevel_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TBevel, ASize: int32): int32 =
  return Bevel_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TBevel, ASize: int32): int32 =
  return Bevel_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TBevel, ASize: int32): int32 =
  return Bevel_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TBevel, ASize: int32): int32 =
  return Bevel_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TBevel, ASize: int32): int32 =
  return Bevel_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TBevel, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  Bevel_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TBevel, ADesignTimePPI: int32) =
  Bevel_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TBevel, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  Bevel_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TBevel): TAlign  =
  return Bevel_GetAlign(this.Instance)

proc `Align=`*(this: TBevel, AValue: TAlign)  =
  Bevel_SetAlign(this.Instance, AValue)

proc Anchors*(this: TBevel): TAnchors  =
  return Bevel_GetAnchors(this.Instance)

proc `Anchors=`*(this: TBevel, AValue: TAnchors)  =
  Bevel_SetAnchors(this.Instance, AValue)

proc Constraints*(this: TBevel): TSizeConstraints  =
  return Bevel_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TBevel, AValue: TSizeConstraints)  =
  Bevel_SetConstraints(this.Instance, CheckPtr(AValue))

proc ParentShowHint*(this: TBevel): bool  =
  return Bevel_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TBevel, AValue: bool)  =
  Bevel_SetParentShowHint(this.Instance, AValue)

proc Shape*(this: TBevel): TBevelShape  =
  return Bevel_GetShape(this.Instance)

proc `Shape=`*(this: TBevel, AValue: TBevelShape)  =
  Bevel_SetShape(this.Instance, AValue)

proc ShowHint*(this: TBevel): bool  =
  return Bevel_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TBevel, AValue: bool)  =
  Bevel_SetShowHint(this.Instance, AValue)

proc Style*(this: TBevel): TBevelStyle  =
  return Bevel_GetStyle(this.Instance)

proc `Style=`*(this: TBevel, AValue: TBevelStyle)  =
  Bevel_SetStyle(this.Instance, AValue)

proc Visible*(this: TBevel): bool  =
  return Bevel_GetVisible(this.Instance)

proc `Visible=`*(this: TBevel, AValue: bool)  =
  Bevel_SetVisible(this.Instance, AValue)

proc Enabled*(this: TBevel): bool  =
  return Bevel_GetEnabled(this.Instance)

proc `Enabled=`*(this: TBevel, AValue: bool)  =
  Bevel_SetEnabled(this.Instance, AValue)

proc Action*(this: TBevel): TAction  =
  return Bevel_GetAction(this.Instance).AsAction

proc `Action=`*(this: TBevel, AValue: TAction)  =
  Bevel_SetAction(this.Instance, CheckPtr(AValue))

proc BiDiMode*(this: TBevel): TBiDiMode  =
  return Bevel_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TBevel, AValue: TBiDiMode)  =
  Bevel_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TBevel): TRect  =
  Bevel_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TBevel, AValue: TRect)  =
  var ps1 = AValue
  Bevel_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TBevel): int32  =
  return Bevel_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TBevel, AValue: int32)  =
  Bevel_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TBevel): TPoint  =
  Bevel_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TBevel): TRect  =
  Bevel_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TBevel): int32  =
  return Bevel_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TBevel, AValue: int32)  =
  Bevel_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TBevel): TControlState  =
  return Bevel_GetControlState(this.Instance)

proc `ControlState=`*(this: TBevel, AValue: TControlState)  =
  Bevel_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TBevel): TControlStyle  =
  return Bevel_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TBevel, AValue: TControlStyle)  =
  Bevel_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TBevel): bool  =
  return Bevel_GetFloating(this.Instance)

proc Parent*(this: TBevel): TWinControl  =
  return Bevel_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TBevel, AValue: TWinControl)  =
  Bevel_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TBevel): int32  =
  return Bevel_GetLeft(this.Instance)

proc `Left=`*(this: TBevel, AValue: int32)  =
  Bevel_SetLeft(this.Instance, AValue)

proc Top*(this: TBevel): int32  =
  return Bevel_GetTop(this.Instance)

proc `Top=`*(this: TBevel, AValue: int32)  =
  Bevel_SetTop(this.Instance, AValue)

proc Width*(this: TBevel): int32  =
  return Bevel_GetWidth(this.Instance)

proc `Width=`*(this: TBevel, AValue: int32)  =
  Bevel_SetWidth(this.Instance, AValue)

proc Height*(this: TBevel): int32  =
  return Bevel_GetHeight(this.Instance)

proc `Height=`*(this: TBevel, AValue: int32)  =
  Bevel_SetHeight(this.Instance, AValue)

proc Cursor*(this: TBevel): TCursor  =
  return Bevel_GetCursor(this.Instance)

proc `Cursor=`*(this: TBevel, AValue: TCursor)  =
  Bevel_SetCursor(this.Instance, AValue)

proc Hint*(this: TBevel): string  =
  return $Bevel_GetHint(this.Instance)

proc `Hint=`*(this: TBevel, AValue: string)  =
  Bevel_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TBevel): int32  =
  return Bevel_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TBevel): int32  =
  return Bevel_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TBevel, AValue: int32)  =
  Bevel_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TBevel): TComponent  =
  return Bevel_GetOwner(this.Instance).AsComponent

proc Name*(this: TBevel): string  =
  return $Bevel_GetName(this.Instance)

proc `Name=`*(this: TBevel, AValue: string)  =
  Bevel_SetName(this.Instance, AValue)

proc Tag*(this: TBevel): int  =
  return Bevel_GetTag(this.Instance)

proc `Tag=`*(this: TBevel, AValue: int)  =
  Bevel_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TBevel): TAnchorSide  =
  return Bevel_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TBevel, AValue: TAnchorSide)  =
  Bevel_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TBevel): TAnchorSide  =
  return Bevel_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TBevel, AValue: TAnchorSide)  =
  Bevel_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TBevel): TAnchorSide  =
  return Bevel_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TBevel, AValue: TAnchorSide)  =
  Bevel_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TBevel): TAnchorSide  =
  return Bevel_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TBevel, AValue: TAnchorSide)  =
  Bevel_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TBevel): TControlBorderSpacing  =
  return Bevel_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TBevel, AValue: TControlBorderSpacing)  =
  Bevel_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TBevel, AIndex: int32): TComponent  =
  return Bevel_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TBevel, AKind: TAnchorKind): TAnchorSide  =
  return Bevel_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TBevelClass*(): TClass = Bevel_StaticClassType()


#------------------------- TScrollBox -------------------------

proc Free*(this: TScrollBox) = defaultFree: ScrollBox_Free

proc NewScrollBox*(AOwner: TComponent): TScrollBox =
  new(result)
  result.Instance = ScrollBox_Create(CheckPtr(AOwner))

proc ScrollInView*(this: TScrollBox, AControl: TControl)  =
  ScrollBox_ScrollInView(this.Instance, CheckPtr(AControl))

proc CanFocus*(this: TScrollBox): bool =
  return ScrollBox_CanFocus(this.Instance)

proc ContainsControl*(this: TScrollBox, Control: TControl): bool =
  return ScrollBox_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TScrollBox, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return ScrollBox_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TScrollBox) =
  ScrollBox_DisableAlign(this.Instance)

proc EnableAlign*(this: TScrollBox) =
  ScrollBox_EnableAlign(this.Instance)

proc FindChildControl*(this: TScrollBox, ControlName: string): TControl =
  return ScrollBox_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TScrollBox, AllLevels: bool) =
  ScrollBox_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TScrollBox): bool =
  return ScrollBox_Focused(this.Instance)

proc HandleAllocated*(this: TScrollBox): bool =
  return ScrollBox_HandleAllocated(this.Instance)

proc InsertControl*(this: TScrollBox, AControl: TControl) =
  ScrollBox_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TScrollBox) =
  ScrollBox_Invalidate(this.Instance)

proc PaintTo*(this: TScrollBox, DC: HDC, X: int32, Y: int32) =
  ScrollBox_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TScrollBox, AControl: TControl) =
  ScrollBox_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TScrollBox) =
  ScrollBox_Realign(this.Instance)

proc Repaint*(this: TScrollBox) =
  ScrollBox_Repaint(this.Instance)

proc ScaleBy*(this: TScrollBox, M: int32, D: int32) =
  ScrollBox_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TScrollBox, DeltaX: int32, DeltaY: int32) =
  ScrollBox_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TScrollBox, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ScrollBox_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TScrollBox) =
  ScrollBox_SetFocus(this.Instance)

proc Update*(this: TScrollBox) =
  ScrollBox_Update(this.Instance)

proc BringToFront*(this: TScrollBox) =
  ScrollBox_BringToFront(this.Instance)

proc ClientToScreen*(this: TScrollBox, Point: TPoint): TPoint =
  var ps1 = Point
  ScrollBox_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TScrollBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ScrollBox_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TScrollBox): bool =
  return ScrollBox_Dragging(this.Instance)

proc HasParent*(this: TScrollBox): bool =
  return ScrollBox_HasParent(this.Instance)

proc Hide*(this: TScrollBox) =
  ScrollBox_Hide(this.Instance)

proc Perform*(this: TScrollBox, Msg: uint32, WParam: uint, LParam: int): int =
  return ScrollBox_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TScrollBox) =
  ScrollBox_Refresh(this.Instance)

proc ScreenToClient*(this: TScrollBox, Point: TPoint): TPoint =
  var ps1 = Point
  ScrollBox_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TScrollBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ScrollBox_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TScrollBox) =
  ScrollBox_SendToBack(this.Instance)

proc Show*(this: TScrollBox) =
  ScrollBox_Show(this.Instance)

proc GetTextBuf*(this: TScrollBox, Buffer: string, BufSize: int32): int32 =
  return ScrollBox_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TScrollBox): int32 =
  return ScrollBox_GetTextLen(this.Instance)

proc SetTextBuf*(this: TScrollBox, Buffer: string) =
  ScrollBox_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TScrollBox, AName: string): TComponent =
  return ScrollBox_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TScrollBox): string =
  return $ScrollBox_GetNamePath(this.Instance)

proc Assign*(this: TScrollBox, Source: TObject) =
  ScrollBox_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TScrollBox): TClass =
  return ScrollBox_ClassType(this.Instance)

proc ClassName*(this: TScrollBox): string =
  return $ScrollBox_ClassName(this.Instance)

proc InstanceSize*(this: TScrollBox): int32 =
  return ScrollBox_InstanceSize(this.Instance)

proc InheritsFrom*(this: TScrollBox, AClass: TClass): bool =
  return ScrollBox_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TScrollBox, Obj: TObject): bool =
  return ScrollBox_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TScrollBox): int32 =
  return ScrollBox_GetHashCode(this.Instance)

proc ToString*(this: TScrollBox): string =
  return $ScrollBox_ToString(this.Instance)

proc AnchorToNeighbour*(this: TScrollBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ScrollBox_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TScrollBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ScrollBox_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TScrollBox, ASibling: TControl) =
  ScrollBox_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TScrollBox, ASibling: TControl) =
  ScrollBox_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TScrollBox, ASide: TAnchorKind, ASibling: TControl) =
  ScrollBox_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TScrollBox, ATheAlign: TAlign, ASpace: int32) =
  ScrollBox_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TScrollBox, ASpace: int32) =
  ScrollBox_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TScrollBox, ASize: int32): int32 =
  return ScrollBox_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TScrollBox, ASize: int32): int32 =
  return ScrollBox_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TScrollBox, ASize: int32): int32 =
  return ScrollBox_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TScrollBox, ASize: int32): int32 =
  return ScrollBox_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TScrollBox, ASize: int32): int32 =
  return ScrollBox_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TScrollBox, ASize: int32): int32 =
  return ScrollBox_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TScrollBox, ASize: int32): int32 =
  return ScrollBox_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TScrollBox, ASize: int32): int32 =
  return ScrollBox_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TScrollBox, ASize: int32): int32 =
  return ScrollBox_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TScrollBox, ASize: int32): int32 =
  return ScrollBox_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TScrollBox, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ScrollBox_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TScrollBox, ADesignTimePPI: int32) =
  ScrollBox_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TScrollBox, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ScrollBox_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TScrollBox): TAlign  =
  return ScrollBox_GetAlign(this.Instance)

proc `Align=`*(this: TScrollBox, AValue: TAlign)  =
  ScrollBox_SetAlign(this.Instance, AValue)

proc Anchors*(this: TScrollBox): TAnchors  =
  return ScrollBox_GetAnchors(this.Instance)

proc `Anchors=`*(this: TScrollBox, AValue: TAnchors)  =
  ScrollBox_SetAnchors(this.Instance, AValue)

proc AutoScroll*(this: TScrollBox): bool  =
  return ScrollBox_GetAutoScroll(this.Instance)

proc `AutoScroll=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetAutoScroll(this.Instance, AValue)

proc AutoSize*(this: TScrollBox): bool  =
  return ScrollBox_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetAutoSize(this.Instance, AValue)

proc BiDiMode*(this: TScrollBox): TBiDiMode  =
  return ScrollBox_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TScrollBox, AValue: TBiDiMode)  =
  ScrollBox_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TScrollBox): TBorderStyle  =
  return ScrollBox_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TScrollBox, AValue: TBorderStyle)  =
  ScrollBox_SetBorderStyle(this.Instance, AValue)

proc Constraints*(this: TScrollBox): TSizeConstraints  =
  return ScrollBox_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TScrollBox, AValue: TSizeConstraints)  =
  ScrollBox_SetConstraints(this.Instance, CheckPtr(AValue))

proc DockSite*(this: TScrollBox): bool  =
  return ScrollBox_GetDockSite(this.Instance)

proc `DockSite=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetDockSite(this.Instance, AValue)

proc DoubleBuffered*(this: TScrollBox): bool  =
  return ScrollBox_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TScrollBox): TCursor  =
  return ScrollBox_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TScrollBox, AValue: TCursor)  =
  ScrollBox_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TScrollBox): TDragKind  =
  return ScrollBox_GetDragKind(this.Instance)

proc `DragKind=`*(this: TScrollBox, AValue: TDragKind)  =
  ScrollBox_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TScrollBox): TDragMode  =
  return ScrollBox_GetDragMode(this.Instance)

proc `DragMode=`*(this: TScrollBox, AValue: TDragMode)  =
  ScrollBox_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TScrollBox): bool  =
  return ScrollBox_GetEnabled(this.Instance)

proc `Enabled=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetEnabled(this.Instance, AValue)

proc Color*(this: TScrollBox): TColor  =
  return ScrollBox_GetColor(this.Instance)

proc `Color=`*(this: TScrollBox, AValue: TColor)  =
  ScrollBox_SetColor(this.Instance, AValue)

proc Font*(this: TScrollBox): TFont  =
  return ScrollBox_GetFont(this.Instance).AsFont

proc `Font=`*(this: TScrollBox, AValue: TFont)  =
  ScrollBox_SetFont(this.Instance, CheckPtr(AValue))

proc ParentBackground*(this: TScrollBox): bool  =
  return ScrollBox_GetParentBackground(this.Instance)

proc `ParentBackground=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetParentBackground(this.Instance, AValue)

proc ParentColor*(this: TScrollBox): bool  =
  return ScrollBox_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TScrollBox): bool  =
  return ScrollBox_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TScrollBox): bool  =
  return ScrollBox_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TScrollBox): bool  =
  return ScrollBox_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TScrollBox): TPopupMenu  =
  return ScrollBox_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TScrollBox, AValue: TPopupMenu)  =
  ScrollBox_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TScrollBox): bool  =
  return ScrollBox_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TScrollBox): TTabOrder  =
  return ScrollBox_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TScrollBox, AValue: TTabOrder)  =
  ScrollBox_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TScrollBox): bool  =
  return ScrollBox_GetTabStop(this.Instance)

proc `TabStop=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetTabStop(this.Instance, AValue)

proc Visible*(this: TScrollBox): bool  =
  return ScrollBox_GetVisible(this.Instance)

proc `Visible=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TScrollBox, AEventId: TNotifyEvent)  =
  ScrollBox_SetOnClick(this.Instance, AEventId)

proc `OnConstrainedResize=`*(this: TScrollBox, AEventId: TConstrainedResizeEvent)  =
  ScrollBox_SetOnConstrainedResize(this.Instance, AEventId)

proc `OnDblClick=`*(this: TScrollBox, AEventId: TNotifyEvent)  =
  ScrollBox_SetOnDblClick(this.Instance, AEventId)

proc `OnDockDrop=`*(this: TScrollBox, AEventId: TDockDropEvent)  =
  ScrollBox_SetOnDockDrop(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TScrollBox, AEventId: TDragDropEvent)  =
  ScrollBox_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TScrollBox, AEventId: TDragOverEvent)  =
  ScrollBox_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TScrollBox, AEventId: TEndDragEvent)  =
  ScrollBox_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TScrollBox, AEventId: TNotifyEvent)  =
  ScrollBox_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TScrollBox, AEventId: TNotifyEvent)  =
  ScrollBox_SetOnExit(this.Instance, AEventId)

proc `OnGetSiteInfo=`*(this: TScrollBox, AEventId: TGetSiteInfoEvent)  =
  ScrollBox_SetOnGetSiteInfo(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TScrollBox, AEventId: TMouseEvent)  =
  ScrollBox_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TScrollBox, AEventId: TNotifyEvent)  =
  ScrollBox_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TScrollBox, AEventId: TNotifyEvent)  =
  ScrollBox_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TScrollBox, AEventId: TMouseMoveEvent)  =
  ScrollBox_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TScrollBox, AEventId: TMouseEvent)  =
  ScrollBox_SetOnMouseUp(this.Instance, AEventId)

proc `OnMouseWheel=`*(this: TScrollBox, AEventId: TMouseWheelEvent)  =
  ScrollBox_SetOnMouseWheel(this.Instance, AEventId)

proc `OnMouseWheelDown=`*(this: TScrollBox, AEventId: TMouseWheelUpDownEvent)  =
  ScrollBox_SetOnMouseWheelDown(this.Instance, AEventId)

proc `OnMouseWheelUp=`*(this: TScrollBox, AEventId: TMouseWheelUpDownEvent)  =
  ScrollBox_SetOnMouseWheelUp(this.Instance, AEventId)

proc `OnResize=`*(this: TScrollBox, AEventId: TNotifyEvent)  =
  ScrollBox_SetOnResize(this.Instance, AEventId)

proc `OnUnDock=`*(this: TScrollBox, AEventId: TUnDockEvent)  =
  ScrollBox_SetOnUnDock(this.Instance, AEventId)

proc `OnAlignPosition=`*(this: TScrollBox, AEventId: TAlignPositionEvent)  =
  ScrollBox_SetOnAlignPosition(this.Instance, AEventId)

proc HorzScrollBar*(this: TScrollBox): TControlScrollBar  =
  return ScrollBox_GetHorzScrollBar(this.Instance).AsControlScrollBar

proc `HorzScrollBar=`*(this: TScrollBox, AValue: TControlScrollBar)  =
  ScrollBox_SetHorzScrollBar(this.Instance, CheckPtr(AValue))

proc VertScrollBar*(this: TScrollBox): TControlScrollBar  =
  return ScrollBox_GetVertScrollBar(this.Instance).AsControlScrollBar

proc `VertScrollBar=`*(this: TScrollBox, AValue: TControlScrollBar)  =
  ScrollBox_SetVertScrollBar(this.Instance, CheckPtr(AValue))

proc DockClientCount*(this: TScrollBox): int32  =
  return ScrollBox_GetDockClientCount(this.Instance)

proc MouseInClient*(this: TScrollBox): bool  =
  return ScrollBox_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TScrollBox): int32  =
  return ScrollBox_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TScrollBox): TBrush  =
  return ScrollBox_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TScrollBox): int32  =
  return ScrollBox_GetControlCount(this.Instance)

proc Handle*(this: TScrollBox): HWND  =
  return ScrollBox_GetHandle(this.Instance)

proc ParentWindow*(this: TScrollBox): HWND  =
  return ScrollBox_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TScrollBox, AValue: HWND)  =
  ScrollBox_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TScrollBox): bool  =
  return ScrollBox_GetShowing(this.Instance)

proc UseDockManager*(this: TScrollBox): bool  =
  return ScrollBox_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TScrollBox, AValue: bool)  =
  ScrollBox_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TScrollBox): TAction  =
  return ScrollBox_GetAction(this.Instance).AsAction

proc `Action=`*(this: TScrollBox, AValue: TAction)  =
  ScrollBox_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TScrollBox): TRect  =
  ScrollBox_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TScrollBox, AValue: TRect)  =
  var ps1 = AValue
  ScrollBox_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TScrollBox): int32  =
  return ScrollBox_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TScrollBox, AValue: int32)  =
  ScrollBox_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TScrollBox): TPoint  =
  ScrollBox_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TScrollBox): TRect  =
  ScrollBox_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TScrollBox): int32  =
  return ScrollBox_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TScrollBox, AValue: int32)  =
  ScrollBox_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TScrollBox): TControlState  =
  return ScrollBox_GetControlState(this.Instance)

proc `ControlState=`*(this: TScrollBox, AValue: TControlState)  =
  ScrollBox_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TScrollBox): TControlStyle  =
  return ScrollBox_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TScrollBox, AValue: TControlStyle)  =
  ScrollBox_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TScrollBox): bool  =
  return ScrollBox_GetFloating(this.Instance)

proc Parent*(this: TScrollBox): TWinControl  =
  return ScrollBox_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TScrollBox, AValue: TWinControl)  =
  ScrollBox_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TScrollBox): int32  =
  return ScrollBox_GetLeft(this.Instance)

proc `Left=`*(this: TScrollBox, AValue: int32)  =
  ScrollBox_SetLeft(this.Instance, AValue)

proc Top*(this: TScrollBox): int32  =
  return ScrollBox_GetTop(this.Instance)

proc `Top=`*(this: TScrollBox, AValue: int32)  =
  ScrollBox_SetTop(this.Instance, AValue)

proc Width*(this: TScrollBox): int32  =
  return ScrollBox_GetWidth(this.Instance)

proc `Width=`*(this: TScrollBox, AValue: int32)  =
  ScrollBox_SetWidth(this.Instance, AValue)

proc Height*(this: TScrollBox): int32  =
  return ScrollBox_GetHeight(this.Instance)

proc `Height=`*(this: TScrollBox, AValue: int32)  =
  ScrollBox_SetHeight(this.Instance, AValue)

proc Cursor*(this: TScrollBox): TCursor  =
  return ScrollBox_GetCursor(this.Instance)

proc `Cursor=`*(this: TScrollBox, AValue: TCursor)  =
  ScrollBox_SetCursor(this.Instance, AValue)

proc Hint*(this: TScrollBox): string  =
  return $ScrollBox_GetHint(this.Instance)

proc `Hint=`*(this: TScrollBox, AValue: string)  =
  ScrollBox_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TScrollBox): int32  =
  return ScrollBox_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TScrollBox): int32  =
  return ScrollBox_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TScrollBox, AValue: int32)  =
  ScrollBox_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TScrollBox): TComponent  =
  return ScrollBox_GetOwner(this.Instance).AsComponent

proc Name*(this: TScrollBox): string  =
  return $ScrollBox_GetName(this.Instance)

proc `Name=`*(this: TScrollBox, AValue: string)  =
  ScrollBox_SetName(this.Instance, AValue)

proc Tag*(this: TScrollBox): int  =
  return ScrollBox_GetTag(this.Instance)

proc `Tag=`*(this: TScrollBox, AValue: int)  =
  ScrollBox_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TScrollBox): TAnchorSide  =
  return ScrollBox_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TScrollBox, AValue: TAnchorSide)  =
  ScrollBox_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TScrollBox): TAnchorSide  =
  return ScrollBox_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TScrollBox, AValue: TAnchorSide)  =
  ScrollBox_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TScrollBox): TAnchorSide  =
  return ScrollBox_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TScrollBox, AValue: TAnchorSide)  =
  ScrollBox_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TScrollBox): TAnchorSide  =
  return ScrollBox_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TScrollBox, AValue: TAnchorSide)  =
  ScrollBox_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TScrollBox): TControlChildSizing  =
  return ScrollBox_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TScrollBox, AValue: TControlChildSizing)  =
  ScrollBox_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TScrollBox): TControlBorderSpacing  =
  return ScrollBox_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TScrollBox, AValue: TControlBorderSpacing)  =
  ScrollBox_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TScrollBox, Index: int32): TControl  =
  return ScrollBox_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TScrollBox, Index: int32): TControl  =
  return ScrollBox_GetControls(this.Instance, Index).AsControl

proc Components*(this: TScrollBox, AIndex: int32): TComponent  =
  return ScrollBox_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TScrollBox, AKind: TAnchorKind): TAnchorSide  =
  return ScrollBox_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TScrollBoxClass*(): TClass = ScrollBox_StaticClassType()


#------------------------- TCheckListBox -------------------------

proc Free*(this: TCheckListBox) = defaultFree: CheckListBox_Free

proc NewCheckListBox*(AOwner: TComponent): TCheckListBox =
  new(result)
  result.Instance = CheckListBox_Create(CheckPtr(AOwner))

proc CheckAll*(this: TCheckListBox, AState: TCheckBoxState, AllowGrayed: bool, AllowDisabled: bool)  =
  CheckListBox_CheckAll(this.Instance, AState, AllowGrayed, AllowDisabled)

proc AddItem*(this: TCheckListBox, Item: string, AObject: TObject)  =
  CheckListBox_AddItem(this.Instance, Item, CheckPtr(AObject))

proc Clear*(this: TCheckListBox)  =
  CheckListBox_Clear(this.Instance)

proc ClearSelection*(this: TCheckListBox)  =
  CheckListBox_ClearSelection(this.Instance)

proc DeleteSelected*(this: TCheckListBox)  =
  CheckListBox_DeleteSelected(this.Instance)

proc ItemAtPos*(this: TCheckListBox, Pos: TPoint, Existing: bool): int32  =
  var ps1 = Pos
  return CheckListBox_ItemAtPos(this.Instance, ps1, Existing)

proc ItemRect*(this: TCheckListBox, Index: int32): TRect  =
  CheckListBox_ItemRect(this.Instance, Index, result)

proc SelectAll*(this: TCheckListBox)  =
  CheckListBox_SelectAll(this.Instance)

proc CanFocus*(this: TCheckListBox): bool =
  return CheckListBox_CanFocus(this.Instance)

proc ContainsControl*(this: TCheckListBox, Control: TControl): bool =
  return CheckListBox_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TCheckListBox, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return CheckListBox_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TCheckListBox) =
  CheckListBox_DisableAlign(this.Instance)

proc EnableAlign*(this: TCheckListBox) =
  CheckListBox_EnableAlign(this.Instance)

proc FindChildControl*(this: TCheckListBox, ControlName: string): TControl =
  return CheckListBox_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TCheckListBox, AllLevels: bool) =
  CheckListBox_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TCheckListBox): bool =
  return CheckListBox_Focused(this.Instance)

proc HandleAllocated*(this: TCheckListBox): bool =
  return CheckListBox_HandleAllocated(this.Instance)

proc InsertControl*(this: TCheckListBox, AControl: TControl) =
  CheckListBox_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TCheckListBox) =
  CheckListBox_Invalidate(this.Instance)

proc PaintTo*(this: TCheckListBox, DC: HDC, X: int32, Y: int32) =
  CheckListBox_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TCheckListBox, AControl: TControl) =
  CheckListBox_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TCheckListBox) =
  CheckListBox_Realign(this.Instance)

proc Repaint*(this: TCheckListBox) =
  CheckListBox_Repaint(this.Instance)

proc ScaleBy*(this: TCheckListBox, M: int32, D: int32) =
  CheckListBox_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TCheckListBox, DeltaX: int32, DeltaY: int32) =
  CheckListBox_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TCheckListBox, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  CheckListBox_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TCheckListBox) =
  CheckListBox_SetFocus(this.Instance)

proc Update*(this: TCheckListBox) =
  CheckListBox_Update(this.Instance)

proc BringToFront*(this: TCheckListBox) =
  CheckListBox_BringToFront(this.Instance)

proc ClientToScreen*(this: TCheckListBox, Point: TPoint): TPoint =
  var ps1 = Point
  CheckListBox_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TCheckListBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  CheckListBox_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TCheckListBox): bool =
  return CheckListBox_Dragging(this.Instance)

proc HasParent*(this: TCheckListBox): bool =
  return CheckListBox_HasParent(this.Instance)

proc Hide*(this: TCheckListBox) =
  CheckListBox_Hide(this.Instance)

proc Perform*(this: TCheckListBox, Msg: uint32, WParam: uint, LParam: int): int =
  return CheckListBox_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TCheckListBox) =
  CheckListBox_Refresh(this.Instance)

proc ScreenToClient*(this: TCheckListBox, Point: TPoint): TPoint =
  var ps1 = Point
  CheckListBox_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TCheckListBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  CheckListBox_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TCheckListBox) =
  CheckListBox_SendToBack(this.Instance)

proc Show*(this: TCheckListBox) =
  CheckListBox_Show(this.Instance)

proc GetTextBuf*(this: TCheckListBox, Buffer: string, BufSize: int32): int32 =
  return CheckListBox_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TCheckListBox): int32 =
  return CheckListBox_GetTextLen(this.Instance)

proc SetTextBuf*(this: TCheckListBox, Buffer: string) =
  CheckListBox_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TCheckListBox, AName: string): TComponent =
  return CheckListBox_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TCheckListBox): string =
  return $CheckListBox_GetNamePath(this.Instance)

proc Assign*(this: TCheckListBox, Source: TObject) =
  CheckListBox_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TCheckListBox): TClass =
  return CheckListBox_ClassType(this.Instance)

proc ClassName*(this: TCheckListBox): string =
  return $CheckListBox_ClassName(this.Instance)

proc InstanceSize*(this: TCheckListBox): int32 =
  return CheckListBox_InstanceSize(this.Instance)

proc InheritsFrom*(this: TCheckListBox, AClass: TClass): bool =
  return CheckListBox_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TCheckListBox, Obj: TObject): bool =
  return CheckListBox_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TCheckListBox): int32 =
  return CheckListBox_GetHashCode(this.Instance)

proc ToString*(this: TCheckListBox): string =
  return $CheckListBox_ToString(this.Instance)

proc AnchorToNeighbour*(this: TCheckListBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  CheckListBox_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TCheckListBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  CheckListBox_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TCheckListBox, ASibling: TControl) =
  CheckListBox_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TCheckListBox, ASibling: TControl) =
  CheckListBox_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TCheckListBox, ASide: TAnchorKind, ASibling: TControl) =
  CheckListBox_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TCheckListBox, ATheAlign: TAlign, ASpace: int32) =
  CheckListBox_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TCheckListBox, ASpace: int32) =
  CheckListBox_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TCheckListBox, ASize: int32): int32 =
  return CheckListBox_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TCheckListBox, ASize: int32): int32 =
  return CheckListBox_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TCheckListBox, ASize: int32): int32 =
  return CheckListBox_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TCheckListBox, ASize: int32): int32 =
  return CheckListBox_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TCheckListBox, ASize: int32): int32 =
  return CheckListBox_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TCheckListBox, ASize: int32): int32 =
  return CheckListBox_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TCheckListBox, ASize: int32): int32 =
  return CheckListBox_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TCheckListBox, ASize: int32): int32 =
  return CheckListBox_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TCheckListBox, ASize: int32): int32 =
  return CheckListBox_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TCheckListBox, ASize: int32): int32 =
  return CheckListBox_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TCheckListBox, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  CheckListBox_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TCheckListBox, ADesignTimePPI: int32) =
  CheckListBox_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TCheckListBox, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  CheckListBox_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc `OnClickCheck=`*(this: TCheckListBox, AEventId: TNotifyEvent)  =
  CheckListBox_SetOnClickCheck(this.Instance, AEventId)

proc Align*(this: TCheckListBox): TAlign  =
  return CheckListBox_GetAlign(this.Instance)

proc `Align=`*(this: TCheckListBox, AValue: TAlign)  =
  CheckListBox_SetAlign(this.Instance, AValue)

proc AllowGrayed*(this: TCheckListBox): bool  =
  return CheckListBox_GetAllowGrayed(this.Instance)

proc `AllowGrayed=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetAllowGrayed(this.Instance, AValue)

proc Anchors*(this: TCheckListBox): TAnchors  =
  return CheckListBox_GetAnchors(this.Instance)

proc `Anchors=`*(this: TCheckListBox, AValue: TAnchors)  =
  CheckListBox_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TCheckListBox): TBiDiMode  =
  return CheckListBox_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TCheckListBox, AValue: TBiDiMode)  =
  CheckListBox_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TCheckListBox): TBorderStyle  =
  return CheckListBox_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TCheckListBox, AValue: TBorderStyle)  =
  CheckListBox_SetBorderStyle(this.Instance, AValue)

proc Color*(this: TCheckListBox): TColor  =
  return CheckListBox_GetColor(this.Instance)

proc `Color=`*(this: TCheckListBox, AValue: TColor)  =
  CheckListBox_SetColor(this.Instance, AValue)

proc Columns*(this: TCheckListBox): int32  =
  return CheckListBox_GetColumns(this.Instance)

proc `Columns=`*(this: TCheckListBox, AValue: int32)  =
  CheckListBox_SetColumns(this.Instance, AValue)

proc Constraints*(this: TCheckListBox): TSizeConstraints  =
  return CheckListBox_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TCheckListBox, AValue: TSizeConstraints)  =
  CheckListBox_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TCheckListBox): bool  =
  return CheckListBox_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TCheckListBox): TCursor  =
  return CheckListBox_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TCheckListBox, AValue: TCursor)  =
  CheckListBox_SetDragCursor(this.Instance, AValue)

proc DragMode*(this: TCheckListBox): TDragMode  =
  return CheckListBox_GetDragMode(this.Instance)

proc `DragMode=`*(this: TCheckListBox, AValue: TDragMode)  =
  CheckListBox_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TCheckListBox): bool  =
  return CheckListBox_GetEnabled(this.Instance)

proc `Enabled=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetEnabled(this.Instance, AValue)

proc Font*(this: TCheckListBox): TFont  =
  return CheckListBox_GetFont(this.Instance).AsFont

proc `Font=`*(this: TCheckListBox, AValue: TFont)  =
  CheckListBox_SetFont(this.Instance, CheckPtr(AValue))

proc ItemHeight*(this: TCheckListBox): int32  =
  return CheckListBox_GetItemHeight(this.Instance)

proc `ItemHeight=`*(this: TCheckListBox, AValue: int32)  =
  CheckListBox_SetItemHeight(this.Instance, AValue)

proc Items*(this: TCheckListBox): TStrings  =
  return CheckListBox_GetItems(this.Instance).AsStrings

proc `Items=`*(this: TCheckListBox, AValue: TStrings)  =
  CheckListBox_SetItems(this.Instance, CheckPtr(AValue))

proc ParentColor*(this: TCheckListBox): bool  =
  return CheckListBox_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TCheckListBox): bool  =
  return CheckListBox_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TCheckListBox): bool  =
  return CheckListBox_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TCheckListBox): bool  =
  return CheckListBox_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TCheckListBox): TPopupMenu  =
  return CheckListBox_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TCheckListBox, AValue: TPopupMenu)  =
  CheckListBox_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TCheckListBox): bool  =
  return CheckListBox_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetShowHint(this.Instance, AValue)

proc Sorted*(this: TCheckListBox): bool  =
  return CheckListBox_GetSorted(this.Instance)

proc `Sorted=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetSorted(this.Instance, AValue)

proc Style*(this: TCheckListBox): TListBoxStyle  =
  return CheckListBox_GetStyle(this.Instance)

proc `Style=`*(this: TCheckListBox, AValue: TListBoxStyle)  =
  CheckListBox_SetStyle(this.Instance, AValue)

proc TabOrder*(this: TCheckListBox): TTabOrder  =
  return CheckListBox_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TCheckListBox, AValue: TTabOrder)  =
  CheckListBox_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TCheckListBox): bool  =
  return CheckListBox_GetTabStop(this.Instance)

proc `TabStop=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetTabStop(this.Instance, AValue)

proc Visible*(this: TCheckListBox): bool  =
  return CheckListBox_GetVisible(this.Instance)

proc `Visible=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TCheckListBox, AEventId: TNotifyEvent)  =
  CheckListBox_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TCheckListBox, AEventId: TContextPopupEvent)  =
  CheckListBox_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TCheckListBox, AEventId: TNotifyEvent)  =
  CheckListBox_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TCheckListBox, AEventId: TDragDropEvent)  =
  CheckListBox_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TCheckListBox, AEventId: TDragOverEvent)  =
  CheckListBox_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TCheckListBox, AEventId: TEndDragEvent)  =
  CheckListBox_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TCheckListBox, AEventId: TNotifyEvent)  =
  CheckListBox_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TCheckListBox, AEventId: TNotifyEvent)  =
  CheckListBox_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TCheckListBox, AEventId: TKeyEvent)  =
  CheckListBox_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TCheckListBox, AEventId: TKeyPressEvent)  =
  CheckListBox_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TCheckListBox, AEventId: TKeyEvent)  =
  CheckListBox_SetOnKeyUp(this.Instance, AEventId)

proc `OnMeasureItem=`*(this: TCheckListBox, AEventId: TMeasureItemEvent)  =
  CheckListBox_SetOnMeasureItem(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TCheckListBox, AEventId: TMouseEvent)  =
  CheckListBox_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TCheckListBox, AEventId: TNotifyEvent)  =
  CheckListBox_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TCheckListBox, AEventId: TNotifyEvent)  =
  CheckListBox_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TCheckListBox, AEventId: TMouseMoveEvent)  =
  CheckListBox_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TCheckListBox, AEventId: TMouseEvent)  =
  CheckListBox_SetOnMouseUp(this.Instance, AEventId)

proc Canvas*(this: TCheckListBox): TCanvas  =
  return CheckListBox_GetCanvas(this.Instance).AsCanvas

proc Count*(this: TCheckListBox): int32  =
  return CheckListBox_GetCount(this.Instance)

proc TopIndex*(this: TCheckListBox): int32  =
  return CheckListBox_GetTopIndex(this.Instance)

proc `TopIndex=`*(this: TCheckListBox, AValue: int32)  =
  CheckListBox_SetTopIndex(this.Instance, AValue)

proc MultiSelect*(this: TCheckListBox): bool  =
  return CheckListBox_GetMultiSelect(this.Instance)

proc `MultiSelect=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetMultiSelect(this.Instance, AValue)

proc SelCount*(this: TCheckListBox): int32  =
  return CheckListBox_GetSelCount(this.Instance)

proc ItemIndex*(this: TCheckListBox): int32  =
  return CheckListBox_GetItemIndex(this.Instance)

proc `ItemIndex=`*(this: TCheckListBox, AValue: int32)  =
  CheckListBox_SetItemIndex(this.Instance, AValue)

proc DockClientCount*(this: TCheckListBox): int32  =
  return CheckListBox_GetDockClientCount(this.Instance)

proc DockSite*(this: TCheckListBox): bool  =
  return CheckListBox_GetDockSite(this.Instance)

proc `DockSite=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TCheckListBox): bool  =
  return CheckListBox_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TCheckListBox): int32  =
  return CheckListBox_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TCheckListBox): TBrush  =
  return CheckListBox_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TCheckListBox): int32  =
  return CheckListBox_GetControlCount(this.Instance)

proc Handle*(this: TCheckListBox): HWND  =
  return CheckListBox_GetHandle(this.Instance)

proc ParentWindow*(this: TCheckListBox): HWND  =
  return CheckListBox_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TCheckListBox, AValue: HWND)  =
  CheckListBox_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TCheckListBox): bool  =
  return CheckListBox_GetShowing(this.Instance)

proc UseDockManager*(this: TCheckListBox): bool  =
  return CheckListBox_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TCheckListBox, AValue: bool)  =
  CheckListBox_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TCheckListBox): TAction  =
  return CheckListBox_GetAction(this.Instance).AsAction

proc `Action=`*(this: TCheckListBox, AValue: TAction)  =
  CheckListBox_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TCheckListBox): TRect  =
  CheckListBox_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TCheckListBox, AValue: TRect)  =
  var ps1 = AValue
  CheckListBox_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TCheckListBox): int32  =
  return CheckListBox_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TCheckListBox, AValue: int32)  =
  CheckListBox_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TCheckListBox): TPoint  =
  CheckListBox_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TCheckListBox): TRect  =
  CheckListBox_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TCheckListBox): int32  =
  return CheckListBox_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TCheckListBox, AValue: int32)  =
  CheckListBox_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TCheckListBox): TControlState  =
  return CheckListBox_GetControlState(this.Instance)

proc `ControlState=`*(this: TCheckListBox, AValue: TControlState)  =
  CheckListBox_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TCheckListBox): TControlStyle  =
  return CheckListBox_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TCheckListBox, AValue: TControlStyle)  =
  CheckListBox_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TCheckListBox): bool  =
  return CheckListBox_GetFloating(this.Instance)

proc Parent*(this: TCheckListBox): TWinControl  =
  return CheckListBox_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TCheckListBox, AValue: TWinControl)  =
  CheckListBox_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TCheckListBox): int32  =
  return CheckListBox_GetLeft(this.Instance)

proc `Left=`*(this: TCheckListBox, AValue: int32)  =
  CheckListBox_SetLeft(this.Instance, AValue)

proc Top*(this: TCheckListBox): int32  =
  return CheckListBox_GetTop(this.Instance)

proc `Top=`*(this: TCheckListBox, AValue: int32)  =
  CheckListBox_SetTop(this.Instance, AValue)

proc Width*(this: TCheckListBox): int32  =
  return CheckListBox_GetWidth(this.Instance)

proc `Width=`*(this: TCheckListBox, AValue: int32)  =
  CheckListBox_SetWidth(this.Instance, AValue)

proc Height*(this: TCheckListBox): int32  =
  return CheckListBox_GetHeight(this.Instance)

proc `Height=`*(this: TCheckListBox, AValue: int32)  =
  CheckListBox_SetHeight(this.Instance, AValue)

proc Cursor*(this: TCheckListBox): TCursor  =
  return CheckListBox_GetCursor(this.Instance)

proc `Cursor=`*(this: TCheckListBox, AValue: TCursor)  =
  CheckListBox_SetCursor(this.Instance, AValue)

proc Hint*(this: TCheckListBox): string  =
  return $CheckListBox_GetHint(this.Instance)

proc `Hint=`*(this: TCheckListBox, AValue: string)  =
  CheckListBox_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TCheckListBox): int32  =
  return CheckListBox_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TCheckListBox): int32  =
  return CheckListBox_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TCheckListBox, AValue: int32)  =
  CheckListBox_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TCheckListBox): TComponent  =
  return CheckListBox_GetOwner(this.Instance).AsComponent

proc Name*(this: TCheckListBox): string  =
  return $CheckListBox_GetName(this.Instance)

proc `Name=`*(this: TCheckListBox, AValue: string)  =
  CheckListBox_SetName(this.Instance, AValue)

proc Tag*(this: TCheckListBox): int  =
  return CheckListBox_GetTag(this.Instance)

proc `Tag=`*(this: TCheckListBox, AValue: int)  =
  CheckListBox_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TCheckListBox): TAnchorSide  =
  return CheckListBox_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TCheckListBox, AValue: TAnchorSide)  =
  CheckListBox_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TCheckListBox): TAnchorSide  =
  return CheckListBox_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TCheckListBox, AValue: TAnchorSide)  =
  CheckListBox_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TCheckListBox): TAnchorSide  =
  return CheckListBox_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TCheckListBox, AValue: TAnchorSide)  =
  CheckListBox_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TCheckListBox): TAnchorSide  =
  return CheckListBox_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TCheckListBox, AValue: TAnchorSide)  =
  CheckListBox_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TCheckListBox): TControlChildSizing  =
  return CheckListBox_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TCheckListBox, AValue: TControlChildSizing)  =
  CheckListBox_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TCheckListBox): TControlBorderSpacing  =
  return CheckListBox_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TCheckListBox, AValue: TControlBorderSpacing)  =
  CheckListBox_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Checked*(this: TCheckListBox, Index: int32): bool  =
  return CheckListBox_GetChecked(this.Instance, Index)

proc `Checked=`*(this: TCheckListBox, Index: int32, AValue: bool)  =
  CheckListBox_SetChecked(this.Instance, Index, AValue)

proc ItemEnabled*(this: TCheckListBox, Index: int32): bool  =
  return CheckListBox_GetItemEnabled(this.Instance, Index)

proc `ItemEnabled=`*(this: TCheckListBox, Index: int32, AValue: bool)  =
  CheckListBox_SetItemEnabled(this.Instance, Index, AValue)

proc State*(this: TCheckListBox, Index: int32): TCheckBoxState  =
  return CheckListBox_GetState(this.Instance, Index)

proc `State=`*(this: TCheckListBox, Index: int32, AValue: TCheckBoxState)  =
  CheckListBox_SetState(this.Instance, Index, AValue)

proc Header*(this: TCheckListBox, Index: int32): bool  =
  return CheckListBox_GetHeader(this.Instance, Index)

proc `Header=`*(this: TCheckListBox, Index: int32, AValue: bool)  =
  CheckListBox_SetHeader(this.Instance, Index, AValue)

proc Selected*(this: TCheckListBox, Index: int32): bool  =
  return CheckListBox_GetSelected(this.Instance, Index)

proc `Selected=`*(this: TCheckListBox, Index: int32, AValue: bool)  =
  CheckListBox_SetSelected(this.Instance, Index, AValue)

proc DockClients*(this: TCheckListBox, Index: int32): TControl  =
  return CheckListBox_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TCheckListBox, Index: int32): TControl  =
  return CheckListBox_GetControls(this.Instance, Index).AsControl

proc Components*(this: TCheckListBox, AIndex: int32): TComponent  =
  return CheckListBox_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TCheckListBox, AKind: TAnchorKind): TAnchorSide  =
  return CheckListBox_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TCheckListBoxClass*(): TClass = CheckListBox_StaticClassType()


#------------------------- TGauge -------------------------

proc Free*(this: TGauge) = defaultFree: Gauge_Free

proc NewGauge*(AOwner: TComponent): TGauge =
  new(result)
  result.Instance = Gauge_Create(CheckPtr(AOwner))

proc AddProgress*(this: TGauge, Value: int32)  =
  Gauge_AddProgress(this.Instance, Value)

proc BringToFront*(this: TGauge) =
  Gauge_BringToFront(this.Instance)

proc ClientToScreen*(this: TGauge, Point: TPoint): TPoint =
  var ps1 = Point
  Gauge_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TGauge, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Gauge_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TGauge): bool =
  return Gauge_Dragging(this.Instance)

proc HasParent*(this: TGauge): bool =
  return Gauge_HasParent(this.Instance)

proc Hide*(this: TGauge) =
  Gauge_Hide(this.Instance)

proc Invalidate*(this: TGauge) =
  Gauge_Invalidate(this.Instance)

proc Perform*(this: TGauge, Msg: uint32, WParam: uint, LParam: int): int =
  return Gauge_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TGauge) =
  Gauge_Refresh(this.Instance)

proc Repaint*(this: TGauge) =
  Gauge_Repaint(this.Instance)

proc ScreenToClient*(this: TGauge, Point: TPoint): TPoint =
  var ps1 = Point
  Gauge_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TGauge, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Gauge_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TGauge) =
  Gauge_SendToBack(this.Instance)

proc SetBounds*(this: TGauge, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  Gauge_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Show*(this: TGauge) =
  Gauge_Show(this.Instance)

proc Update*(this: TGauge) =
  Gauge_Update(this.Instance)

proc GetTextBuf*(this: TGauge, Buffer: string, BufSize: int32): int32 =
  return Gauge_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TGauge): int32 =
  return Gauge_GetTextLen(this.Instance)

proc SetTextBuf*(this: TGauge, Buffer: string) =
  Gauge_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TGauge, AName: string): TComponent =
  return Gauge_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TGauge): string =
  return $Gauge_GetNamePath(this.Instance)

proc Assign*(this: TGauge, Source: TObject) =
  Gauge_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TGauge): TClass =
  return Gauge_ClassType(this.Instance)

proc ClassName*(this: TGauge): string =
  return $Gauge_ClassName(this.Instance)

proc InstanceSize*(this: TGauge): int32 =
  return Gauge_InstanceSize(this.Instance)

proc InheritsFrom*(this: TGauge, AClass: TClass): bool =
  return Gauge_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TGauge, Obj: TObject): bool =
  return Gauge_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TGauge): int32 =
  return Gauge_GetHashCode(this.Instance)

proc ToString*(this: TGauge): string =
  return $Gauge_ToString(this.Instance)

proc AnchorToNeighbour*(this: TGauge, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Gauge_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TGauge, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Gauge_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TGauge, ASibling: TControl) =
  Gauge_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TGauge, ASibling: TControl) =
  Gauge_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TGauge, ASide: TAnchorKind, ASibling: TControl) =
  Gauge_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TGauge, ATheAlign: TAlign, ASpace: int32) =
  Gauge_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TGauge, ASpace: int32) =
  Gauge_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TGauge, ASize: int32): int32 =
  return Gauge_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TGauge, ASize: int32): int32 =
  return Gauge_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TGauge, ASize: int32): int32 =
  return Gauge_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TGauge, ASize: int32): int32 =
  return Gauge_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TGauge, ASize: int32): int32 =
  return Gauge_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TGauge, ASize: int32): int32 =
  return Gauge_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TGauge, ASize: int32): int32 =
  return Gauge_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TGauge, ASize: int32): int32 =
  return Gauge_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TGauge, ASize: int32): int32 =
  return Gauge_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TGauge, ASize: int32): int32 =
  return Gauge_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TGauge, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  Gauge_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TGauge, ADesignTimePPI: int32) =
  Gauge_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TGauge, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  Gauge_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc PercentDone*(this: TGauge): int32  =
  return Gauge_GetPercentDone(this.Instance)

proc Align*(this: TGauge): TAlign  =
  return Gauge_GetAlign(this.Instance)

proc `Align=`*(this: TGauge, AValue: TAlign)  =
  Gauge_SetAlign(this.Instance, AValue)

proc Anchors*(this: TGauge): TAnchors  =
  return Gauge_GetAnchors(this.Instance)

proc `Anchors=`*(this: TGauge, AValue: TAnchors)  =
  Gauge_SetAnchors(this.Instance, AValue)

proc BackColor*(this: TGauge): TColor  =
  return Gauge_GetBackColor(this.Instance)

proc `BackColor=`*(this: TGauge, AValue: TColor)  =
  Gauge_SetBackColor(this.Instance, AValue)

proc BorderStyle*(this: TGauge): TBorderStyle  =
  return Gauge_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TGauge, AValue: TBorderStyle)  =
  Gauge_SetBorderStyle(this.Instance, AValue)

proc Color*(this: TGauge): TColor  =
  return Gauge_GetColor(this.Instance)

proc `Color=`*(this: TGauge, AValue: TColor)  =
  Gauge_SetColor(this.Instance, AValue)

proc Constraints*(this: TGauge): TSizeConstraints  =
  return Gauge_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TGauge, AValue: TSizeConstraints)  =
  Gauge_SetConstraints(this.Instance, CheckPtr(AValue))

proc Enabled*(this: TGauge): bool  =
  return Gauge_GetEnabled(this.Instance)

proc `Enabled=`*(this: TGauge, AValue: bool)  =
  Gauge_SetEnabled(this.Instance, AValue)

proc ForeColor*(this: TGauge): TColor  =
  return Gauge_GetForeColor(this.Instance)

proc `ForeColor=`*(this: TGauge, AValue: TColor)  =
  Gauge_SetForeColor(this.Instance, AValue)

proc Font*(this: TGauge): TFont  =
  return Gauge_GetFont(this.Instance).AsFont

proc `Font=`*(this: TGauge, AValue: TFont)  =
  Gauge_SetFont(this.Instance, CheckPtr(AValue))

proc MinValue*(this: TGauge): int32  =
  return Gauge_GetMinValue(this.Instance)

proc `MinValue=`*(this: TGauge, AValue: int32)  =
  Gauge_SetMinValue(this.Instance, AValue)

proc MaxValue*(this: TGauge): int32  =
  return Gauge_GetMaxValue(this.Instance)

proc `MaxValue=`*(this: TGauge, AValue: int32)  =
  Gauge_SetMaxValue(this.Instance, AValue)

proc ParentColor*(this: TGauge): bool  =
  return Gauge_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TGauge, AValue: bool)  =
  Gauge_SetParentColor(this.Instance, AValue)

proc ParentFont*(this: TGauge): bool  =
  return Gauge_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TGauge, AValue: bool)  =
  Gauge_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TGauge): bool  =
  return Gauge_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TGauge, AValue: bool)  =
  Gauge_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TGauge): TPopupMenu  =
  return Gauge_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TGauge, AValue: TPopupMenu)  =
  Gauge_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc Progress*(this: TGauge): int32  =
  return Gauge_GetProgress(this.Instance)

proc `Progress=`*(this: TGauge, AValue: int32)  =
  Gauge_SetProgress(this.Instance, AValue)

proc ShowHint*(this: TGauge): bool  =
  return Gauge_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TGauge, AValue: bool)  =
  Gauge_SetShowHint(this.Instance, AValue)

proc ShowText*(this: TGauge): bool  =
  return Gauge_GetShowText(this.Instance)

proc `ShowText=`*(this: TGauge, AValue: bool)  =
  Gauge_SetShowText(this.Instance, AValue)

proc Visible*(this: TGauge): bool  =
  return Gauge_GetVisible(this.Instance)

proc `Visible=`*(this: TGauge, AValue: bool)  =
  Gauge_SetVisible(this.Instance, AValue)

proc Action*(this: TGauge): TAction  =
  return Gauge_GetAction(this.Instance).AsAction

proc `Action=`*(this: TGauge, AValue: TAction)  =
  Gauge_SetAction(this.Instance, CheckPtr(AValue))

proc BiDiMode*(this: TGauge): TBiDiMode  =
  return Gauge_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TGauge, AValue: TBiDiMode)  =
  Gauge_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TGauge): TRect  =
  Gauge_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TGauge, AValue: TRect)  =
  var ps1 = AValue
  Gauge_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TGauge): int32  =
  return Gauge_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TGauge, AValue: int32)  =
  Gauge_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TGauge): TPoint  =
  Gauge_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TGauge): TRect  =
  Gauge_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TGauge): int32  =
  return Gauge_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TGauge, AValue: int32)  =
  Gauge_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TGauge): TControlState  =
  return Gauge_GetControlState(this.Instance)

proc `ControlState=`*(this: TGauge, AValue: TControlState)  =
  Gauge_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TGauge): TControlStyle  =
  return Gauge_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TGauge, AValue: TControlStyle)  =
  Gauge_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TGauge): bool  =
  return Gauge_GetFloating(this.Instance)

proc Parent*(this: TGauge): TWinControl  =
  return Gauge_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TGauge, AValue: TWinControl)  =
  Gauge_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TGauge): int32  =
  return Gauge_GetLeft(this.Instance)

proc `Left=`*(this: TGauge, AValue: int32)  =
  Gauge_SetLeft(this.Instance, AValue)

proc Top*(this: TGauge): int32  =
  return Gauge_GetTop(this.Instance)

proc `Top=`*(this: TGauge, AValue: int32)  =
  Gauge_SetTop(this.Instance, AValue)

proc Width*(this: TGauge): int32  =
  return Gauge_GetWidth(this.Instance)

proc `Width=`*(this: TGauge, AValue: int32)  =
  Gauge_SetWidth(this.Instance, AValue)

proc Height*(this: TGauge): int32  =
  return Gauge_GetHeight(this.Instance)

proc `Height=`*(this: TGauge, AValue: int32)  =
  Gauge_SetHeight(this.Instance, AValue)

proc Cursor*(this: TGauge): TCursor  =
  return Gauge_GetCursor(this.Instance)

proc `Cursor=`*(this: TGauge, AValue: TCursor)  =
  Gauge_SetCursor(this.Instance, AValue)

proc Hint*(this: TGauge): string  =
  return $Gauge_GetHint(this.Instance)

proc `Hint=`*(this: TGauge, AValue: string)  =
  Gauge_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TGauge): int32  =
  return Gauge_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TGauge): int32  =
  return Gauge_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TGauge, AValue: int32)  =
  Gauge_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TGauge): TComponent  =
  return Gauge_GetOwner(this.Instance).AsComponent

proc Name*(this: TGauge): string  =
  return $Gauge_GetName(this.Instance)

proc `Name=`*(this: TGauge, AValue: string)  =
  Gauge_SetName(this.Instance, AValue)

proc Tag*(this: TGauge): int  =
  return Gauge_GetTag(this.Instance)

proc `Tag=`*(this: TGauge, AValue: int)  =
  Gauge_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TGauge): TAnchorSide  =
  return Gauge_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TGauge, AValue: TAnchorSide)  =
  Gauge_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TGauge): TAnchorSide  =
  return Gauge_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TGauge, AValue: TAnchorSide)  =
  Gauge_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TGauge): TAnchorSide  =
  return Gauge_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TGauge, AValue: TAnchorSide)  =
  Gauge_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TGauge): TAnchorSide  =
  return Gauge_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TGauge, AValue: TAnchorSide)  =
  Gauge_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TGauge): TControlBorderSpacing  =
  return Gauge_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TGauge, AValue: TControlBorderSpacing)  =
  Gauge_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TGauge, AIndex: int32): TComponent  =
  return Gauge_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TGauge, AKind: TAnchorKind): TAnchorSide  =
  return Gauge_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TGaugeClass*(): TClass = Gauge_StaticClassType()


#------------------------- TImageButton -------------------------

proc Free*(this: TImageButton) = defaultFree: ImageButton_Free

proc NewImageButton*(AOwner: TComponent): TImageButton =
  new(result)
  result.Instance = ImageButton_Create(CheckPtr(AOwner))

proc Click*(this: TImageButton)  =
  ImageButton_Click(this.Instance)

proc BringToFront*(this: TImageButton) =
  ImageButton_BringToFront(this.Instance)

proc ClientToScreen*(this: TImageButton, Point: TPoint): TPoint =
  var ps1 = Point
  ImageButton_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TImageButton, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ImageButton_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TImageButton): bool =
  return ImageButton_Dragging(this.Instance)

proc HasParent*(this: TImageButton): bool =
  return ImageButton_HasParent(this.Instance)

proc Hide*(this: TImageButton) =
  ImageButton_Hide(this.Instance)

proc Invalidate*(this: TImageButton) =
  ImageButton_Invalidate(this.Instance)

proc Perform*(this: TImageButton, Msg: uint32, WParam: uint, LParam: int): int =
  return ImageButton_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TImageButton) =
  ImageButton_Refresh(this.Instance)

proc Repaint*(this: TImageButton) =
  ImageButton_Repaint(this.Instance)

proc ScreenToClient*(this: TImageButton, Point: TPoint): TPoint =
  var ps1 = Point
  ImageButton_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TImageButton, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ImageButton_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TImageButton) =
  ImageButton_SendToBack(this.Instance)

proc SetBounds*(this: TImageButton, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ImageButton_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Show*(this: TImageButton) =
  ImageButton_Show(this.Instance)

proc Update*(this: TImageButton) =
  ImageButton_Update(this.Instance)

proc GetTextBuf*(this: TImageButton, Buffer: string, BufSize: int32): int32 =
  return ImageButton_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TImageButton): int32 =
  return ImageButton_GetTextLen(this.Instance)

proc SetTextBuf*(this: TImageButton, Buffer: string) =
  ImageButton_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TImageButton, AName: string): TComponent =
  return ImageButton_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TImageButton): string =
  return $ImageButton_GetNamePath(this.Instance)

proc Assign*(this: TImageButton, Source: TObject) =
  ImageButton_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TImageButton): TClass =
  return ImageButton_ClassType(this.Instance)

proc ClassName*(this: TImageButton): string =
  return $ImageButton_ClassName(this.Instance)

proc InstanceSize*(this: TImageButton): int32 =
  return ImageButton_InstanceSize(this.Instance)

proc InheritsFrom*(this: TImageButton, AClass: TClass): bool =
  return ImageButton_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TImageButton, Obj: TObject): bool =
  return ImageButton_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TImageButton): int32 =
  return ImageButton_GetHashCode(this.Instance)

proc ToString*(this: TImageButton): string =
  return $ImageButton_ToString(this.Instance)

proc AnchorToNeighbour*(this: TImageButton, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ImageButton_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TImageButton, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ImageButton_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TImageButton, ASibling: TControl) =
  ImageButton_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TImageButton, ASibling: TControl) =
  ImageButton_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TImageButton, ASide: TAnchorKind, ASibling: TControl) =
  ImageButton_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TImageButton, ATheAlign: TAlign, ASpace: int32) =
  ImageButton_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TImageButton, ASpace: int32) =
  ImageButton_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TImageButton, ASize: int32): int32 =
  return ImageButton_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TImageButton, ASize: int32): int32 =
  return ImageButton_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TImageButton, ASize: int32): int32 =
  return ImageButton_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TImageButton, ASize: int32): int32 =
  return ImageButton_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TImageButton, ASize: int32): int32 =
  return ImageButton_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TImageButton, ASize: int32): int32 =
  return ImageButton_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TImageButton, ASize: int32): int32 =
  return ImageButton_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TImageButton, ASize: int32): int32 =
  return ImageButton_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TImageButton, ASize: int32): int32 =
  return ImageButton_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TImageButton, ASize: int32): int32 =
  return ImageButton_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TImageButton, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ImageButton_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TImageButton, ADesignTimePPI: int32) =
  ImageButton_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TImageButton, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ImageButton_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Action*(this: TImageButton): TAction  =
  return ImageButton_GetAction(this.Instance).AsAction

proc `Action=`*(this: TImageButton, AValue: TAction)  =
  ImageButton_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TImageButton): TAlign  =
  return ImageButton_GetAlign(this.Instance)

proc `Align=`*(this: TImageButton, AValue: TAlign)  =
  ImageButton_SetAlign(this.Instance, AValue)

proc Anchors*(this: TImageButton): TAnchors  =
  return ImageButton_GetAnchors(this.Instance)

proc `Anchors=`*(this: TImageButton, AValue: TAnchors)  =
  ImageButton_SetAnchors(this.Instance, AValue)

proc AutoSize*(this: TImageButton): bool  =
  return ImageButton_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TImageButton, AValue: bool)  =
  ImageButton_SetAutoSize(this.Instance, AValue)

proc Constraints*(this: TImageButton): TSizeConstraints  =
  return ImageButton_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TImageButton, AValue: TSizeConstraints)  =
  ImageButton_SetConstraints(this.Instance, CheckPtr(AValue))

proc Caption*(this: TImageButton): string  =
  return $ImageButton_GetCaption(this.Instance)

proc `Caption=`*(this: TImageButton, AValue: string)  =
  ImageButton_SetCaption(this.Instance, AValue)

proc DragCursor*(this: TImageButton): TCursor  =
  return ImageButton_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TImageButton, AValue: TCursor)  =
  ImageButton_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TImageButton): TDragKind  =
  return ImageButton_GetDragKind(this.Instance)

proc `DragKind=`*(this: TImageButton, AValue: TDragKind)  =
  ImageButton_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TImageButton): TDragMode  =
  return ImageButton_GetDragMode(this.Instance)

proc `DragMode=`*(this: TImageButton, AValue: TDragMode)  =
  ImageButton_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TImageButton): bool  =
  return ImageButton_GetEnabled(this.Instance)

proc `Enabled=`*(this: TImageButton, AValue: bool)  =
  ImageButton_SetEnabled(this.Instance, AValue)

proc Font*(this: TImageButton): TFont  =
  return ImageButton_GetFont(this.Instance).AsFont

proc `Font=`*(this: TImageButton, AValue: TFont)  =
  ImageButton_SetFont(this.Instance, CheckPtr(AValue))

proc ImageCount*(this: TImageButton): int32  =
  return ImageButton_GetImageCount(this.Instance)

proc `ImageCount=`*(this: TImageButton, AValue: int32)  =
  ImageButton_SetImageCount(this.Instance, AValue)

proc Orientation*(this: TImageButton): TImageOrientation  =
  return ImageButton_GetOrientation(this.Instance)

proc `Orientation=`*(this: TImageButton, AValue: TImageOrientation)  =
  ImageButton_SetOrientation(this.Instance, AValue)

proc ModalResult*(this: TImageButton): TModalResult  =
  return ImageButton_GetModalResult(this.Instance)

proc `ModalResult=`*(this: TImageButton, AValue: TModalResult)  =
  ImageButton_SetModalResult(this.Instance, AValue)

proc ParentShowHint*(this: TImageButton): bool  =
  return ImageButton_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TImageButton, AValue: bool)  =
  ImageButton_SetParentShowHint(this.Instance, AValue)

proc ParentFont*(this: TImageButton): bool  =
  return ImageButton_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TImageButton, AValue: bool)  =
  ImageButton_SetParentFont(this.Instance, AValue)

proc Picture*(this: TImageButton): TPicture  =
  return ImageButton_GetPicture(this.Instance).AsPicture

proc `Picture=`*(this: TImageButton, AValue: TPicture)  =
  ImageButton_SetPicture(this.Instance, CheckPtr(AValue))

proc PopupMenu*(this: TImageButton): TPopupMenu  =
  return ImageButton_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TImageButton, AValue: TPopupMenu)  =
  ImageButton_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TImageButton): bool  =
  return ImageButton_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TImageButton, AValue: bool)  =
  ImageButton_SetShowHint(this.Instance, AValue)

proc ShowCaption*(this: TImageButton): bool  =
  return ImageButton_GetShowCaption(this.Instance)

proc `ShowCaption=`*(this: TImageButton, AValue: bool)  =
  ImageButton_SetShowCaption(this.Instance, AValue)

proc Visible*(this: TImageButton): bool  =
  return ImageButton_GetVisible(this.Instance)

proc `Visible=`*(this: TImageButton, AValue: bool)  =
  ImageButton_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TImageButton, AEventId: TNotifyEvent)  =
  ImageButton_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TImageButton, AEventId: TContextPopupEvent)  =
  ImageButton_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TImageButton, AEventId: TNotifyEvent)  =
  ImageButton_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TImageButton, AEventId: TDragDropEvent)  =
  ImageButton_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TImageButton, AEventId: TDragOverEvent)  =
  ImageButton_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDock=`*(this: TImageButton, AEventId: TEndDragEvent)  =
  ImageButton_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TImageButton, AEventId: TEndDragEvent)  =
  ImageButton_SetOnEndDrag(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TImageButton, AEventId: TMouseEvent)  =
  ImageButton_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TImageButton, AEventId: TNotifyEvent)  =
  ImageButton_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TImageButton, AEventId: TNotifyEvent)  =
  ImageButton_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TImageButton, AEventId: TMouseMoveEvent)  =
  ImageButton_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TImageButton, AEventId: TMouseEvent)  =
  ImageButton_SetOnMouseUp(this.Instance, AEventId)

proc BiDiMode*(this: TImageButton): TBiDiMode  =
  return ImageButton_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TImageButton, AValue: TBiDiMode)  =
  ImageButton_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TImageButton): TRect  =
  ImageButton_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TImageButton, AValue: TRect)  =
  var ps1 = AValue
  ImageButton_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TImageButton): int32  =
  return ImageButton_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TImageButton, AValue: int32)  =
  ImageButton_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TImageButton): TPoint  =
  ImageButton_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TImageButton): TRect  =
  ImageButton_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TImageButton): int32  =
  return ImageButton_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TImageButton, AValue: int32)  =
  ImageButton_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TImageButton): TControlState  =
  return ImageButton_GetControlState(this.Instance)

proc `ControlState=`*(this: TImageButton, AValue: TControlState)  =
  ImageButton_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TImageButton): TControlStyle  =
  return ImageButton_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TImageButton, AValue: TControlStyle)  =
  ImageButton_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TImageButton): bool  =
  return ImageButton_GetFloating(this.Instance)

proc Parent*(this: TImageButton): TWinControl  =
  return ImageButton_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TImageButton, AValue: TWinControl)  =
  ImageButton_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TImageButton): int32  =
  return ImageButton_GetLeft(this.Instance)

proc `Left=`*(this: TImageButton, AValue: int32)  =
  ImageButton_SetLeft(this.Instance, AValue)

proc Top*(this: TImageButton): int32  =
  return ImageButton_GetTop(this.Instance)

proc `Top=`*(this: TImageButton, AValue: int32)  =
  ImageButton_SetTop(this.Instance, AValue)

proc Width*(this: TImageButton): int32  =
  return ImageButton_GetWidth(this.Instance)

proc `Width=`*(this: TImageButton, AValue: int32)  =
  ImageButton_SetWidth(this.Instance, AValue)

proc Height*(this: TImageButton): int32  =
  return ImageButton_GetHeight(this.Instance)

proc `Height=`*(this: TImageButton, AValue: int32)  =
  ImageButton_SetHeight(this.Instance, AValue)

proc Cursor*(this: TImageButton): TCursor  =
  return ImageButton_GetCursor(this.Instance)

proc `Cursor=`*(this: TImageButton, AValue: TCursor)  =
  ImageButton_SetCursor(this.Instance, AValue)

proc Hint*(this: TImageButton): string  =
  return $ImageButton_GetHint(this.Instance)

proc `Hint=`*(this: TImageButton, AValue: string)  =
  ImageButton_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TImageButton): int32  =
  return ImageButton_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TImageButton): int32  =
  return ImageButton_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TImageButton, AValue: int32)  =
  ImageButton_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TImageButton): TComponent  =
  return ImageButton_GetOwner(this.Instance).AsComponent

proc Name*(this: TImageButton): string  =
  return $ImageButton_GetName(this.Instance)

proc `Name=`*(this: TImageButton, AValue: string)  =
  ImageButton_SetName(this.Instance, AValue)

proc Tag*(this: TImageButton): int  =
  return ImageButton_GetTag(this.Instance)

proc `Tag=`*(this: TImageButton, AValue: int)  =
  ImageButton_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TImageButton): TAnchorSide  =
  return ImageButton_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TImageButton, AValue: TAnchorSide)  =
  ImageButton_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TImageButton): TAnchorSide  =
  return ImageButton_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TImageButton, AValue: TAnchorSide)  =
  ImageButton_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TImageButton): TAnchorSide  =
  return ImageButton_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TImageButton, AValue: TAnchorSide)  =
  ImageButton_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TImageButton): TAnchorSide  =
  return ImageButton_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TImageButton, AValue: TAnchorSide)  =
  ImageButton_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TImageButton): TControlBorderSpacing  =
  return ImageButton_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TImageButton, AValue: TControlBorderSpacing)  =
  ImageButton_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TImageButton, AIndex: int32): TComponent  =
  return ImageButton_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TImageButton, AKind: TAnchorKind): TAnchorSide  =
  return ImageButton_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TImageButtonClass*(): TClass = ImageButton_StaticClassType()


#------------------------- TFindDialog -------------------------

proc Free*(this: TFindDialog) = defaultFree: FindDialog_Free

proc NewFindDialog*(AOwner: TComponent): TFindDialog =
  new(result)
  result.Instance = FindDialog_Create(CheckPtr(AOwner))

proc CloseDialog*(this: TFindDialog)  =
  FindDialog_CloseDialog(this.Instance)

proc Execute*(this: TFindDialog): bool  =
  return FindDialog_Execute(this.Instance)

proc FindComponent*(this: TFindDialog, AName: string): TComponent =
  return FindDialog_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TFindDialog): string =
  return $FindDialog_GetNamePath(this.Instance)

proc HasParent*(this: TFindDialog): bool =
  return FindDialog_HasParent(this.Instance)

proc Assign*(this: TFindDialog, Source: TObject) =
  FindDialog_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TFindDialog): TClass =
  return FindDialog_ClassType(this.Instance)

proc ClassName*(this: TFindDialog): string =
  return $FindDialog_ClassName(this.Instance)

proc InstanceSize*(this: TFindDialog): int32 =
  return FindDialog_InstanceSize(this.Instance)

proc InheritsFrom*(this: TFindDialog, AClass: TClass): bool =
  return FindDialog_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TFindDialog, Obj: TObject): bool =
  return FindDialog_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TFindDialog): int32 =
  return FindDialog_GetHashCode(this.Instance)

proc ToString*(this: TFindDialog): string =
  return $FindDialog_ToString(this.Instance)

proc Left*(this: TFindDialog): int32  =
  return FindDialog_GetLeft(this.Instance)

proc `Left=`*(this: TFindDialog, AValue: int32)  =
  FindDialog_SetLeft(this.Instance, AValue)

proc Position*(this: TFindDialog): TPoint  =
  FindDialog_GetPosition(this.Instance, result)

proc `Position=`*(this: TFindDialog, AValue: TPoint)  =
  var ps1 = AValue
  FindDialog_SetPosition(this.Instance, ps1)

proc Top*(this: TFindDialog): int32  =
  return FindDialog_GetTop(this.Instance)

proc `Top=`*(this: TFindDialog, AValue: int32)  =
  FindDialog_SetTop(this.Instance, AValue)

proc FindText*(this: TFindDialog): string  =
  return $FindDialog_GetFindText(this.Instance)

proc `FindText=`*(this: TFindDialog, AValue: string)  =
  FindDialog_SetFindText(this.Instance, AValue)

proc Options*(this: TFindDialog): TFindOptions  =
  return FindDialog_GetOptions(this.Instance)

proc `Options=`*(this: TFindDialog, AValue: TFindOptions)  =
  FindDialog_SetOptions(this.Instance, AValue)

proc `OnFind=`*(this: TFindDialog, AEventId: TNotifyEvent)  =
  FindDialog_SetOnFind(this.Instance, AEventId)

proc Handle*(this: TFindDialog): HWND  =
  return FindDialog_GetHandle(this.Instance)

proc `OnClose=`*(this: TFindDialog, AEventId: TNotifyEvent)  =
  FindDialog_SetOnClose(this.Instance, AEventId)

proc `OnShow=`*(this: TFindDialog, AEventId: TNotifyEvent)  =
  FindDialog_SetOnShow(this.Instance, AEventId)

proc ComponentCount*(this: TFindDialog): int32  =
  return FindDialog_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TFindDialog): int32  =
  return FindDialog_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TFindDialog, AValue: int32)  =
  FindDialog_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TFindDialog): TComponent  =
  return FindDialog_GetOwner(this.Instance).AsComponent

proc Name*(this: TFindDialog): string  =
  return $FindDialog_GetName(this.Instance)

proc `Name=`*(this: TFindDialog, AValue: string)  =
  FindDialog_SetName(this.Instance, AValue)

proc Tag*(this: TFindDialog): int  =
  return FindDialog_GetTag(this.Instance)

proc `Tag=`*(this: TFindDialog, AValue: int)  =
  FindDialog_SetTag(this.Instance, AValue)

proc Components*(this: TFindDialog, AIndex: int32): TComponent  =
  return FindDialog_GetComponents(this.Instance, AIndex).AsComponent

proc TFindDialogClass*(): TClass = FindDialog_StaticClassType()


#------------------------- TReplaceDialog -------------------------

proc Free*(this: TReplaceDialog) = defaultFree: ReplaceDialog_Free

proc NewReplaceDialog*(AOwner: TComponent): TReplaceDialog =
  new(result)
  result.Instance = ReplaceDialog_Create(CheckPtr(AOwner))

proc CloseDialog*(this: TReplaceDialog)  =
  ReplaceDialog_CloseDialog(this.Instance)

proc Execute*(this: TReplaceDialog): bool  =
  return ReplaceDialog_Execute(this.Instance)

proc FindComponent*(this: TReplaceDialog, AName: string): TComponent =
  return ReplaceDialog_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TReplaceDialog): string =
  return $ReplaceDialog_GetNamePath(this.Instance)

proc HasParent*(this: TReplaceDialog): bool =
  return ReplaceDialog_HasParent(this.Instance)

proc Assign*(this: TReplaceDialog, Source: TObject) =
  ReplaceDialog_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TReplaceDialog): TClass =
  return ReplaceDialog_ClassType(this.Instance)

proc ClassName*(this: TReplaceDialog): string =
  return $ReplaceDialog_ClassName(this.Instance)

proc InstanceSize*(this: TReplaceDialog): int32 =
  return ReplaceDialog_InstanceSize(this.Instance)

proc InheritsFrom*(this: TReplaceDialog, AClass: TClass): bool =
  return ReplaceDialog_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TReplaceDialog, Obj: TObject): bool =
  return ReplaceDialog_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TReplaceDialog): int32 =
  return ReplaceDialog_GetHashCode(this.Instance)

proc ToString*(this: TReplaceDialog): string =
  return $ReplaceDialog_ToString(this.Instance)

proc ReplaceText*(this: TReplaceDialog): string  =
  return $ReplaceDialog_GetReplaceText(this.Instance)

proc `ReplaceText=`*(this: TReplaceDialog, AValue: string)  =
  ReplaceDialog_SetReplaceText(this.Instance, AValue)

proc `OnReplace=`*(this: TReplaceDialog, AEventId: TNotifyEvent)  =
  ReplaceDialog_SetOnReplace(this.Instance, AEventId)

proc Left*(this: TReplaceDialog): int32  =
  return ReplaceDialog_GetLeft(this.Instance)

proc `Left=`*(this: TReplaceDialog, AValue: int32)  =
  ReplaceDialog_SetLeft(this.Instance, AValue)

proc Position*(this: TReplaceDialog): TPoint  =
  ReplaceDialog_GetPosition(this.Instance, result)

proc `Position=`*(this: TReplaceDialog, AValue: TPoint)  =
  var ps1 = AValue
  ReplaceDialog_SetPosition(this.Instance, ps1)

proc Top*(this: TReplaceDialog): int32  =
  return ReplaceDialog_GetTop(this.Instance)

proc `Top=`*(this: TReplaceDialog, AValue: int32)  =
  ReplaceDialog_SetTop(this.Instance, AValue)

proc FindText*(this: TReplaceDialog): string  =
  return $ReplaceDialog_GetFindText(this.Instance)

proc `FindText=`*(this: TReplaceDialog, AValue: string)  =
  ReplaceDialog_SetFindText(this.Instance, AValue)

proc Options*(this: TReplaceDialog): TFindOptions  =
  return ReplaceDialog_GetOptions(this.Instance)

proc `Options=`*(this: TReplaceDialog, AValue: TFindOptions)  =
  ReplaceDialog_SetOptions(this.Instance, AValue)

proc `OnFind=`*(this: TReplaceDialog, AEventId: TNotifyEvent)  =
  ReplaceDialog_SetOnFind(this.Instance, AEventId)

proc Handle*(this: TReplaceDialog): HWND  =
  return ReplaceDialog_GetHandle(this.Instance)

proc `OnClose=`*(this: TReplaceDialog, AEventId: TNotifyEvent)  =
  ReplaceDialog_SetOnClose(this.Instance, AEventId)

proc `OnShow=`*(this: TReplaceDialog, AEventId: TNotifyEvent)  =
  ReplaceDialog_SetOnShow(this.Instance, AEventId)

proc ComponentCount*(this: TReplaceDialog): int32  =
  return ReplaceDialog_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TReplaceDialog): int32  =
  return ReplaceDialog_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TReplaceDialog, AValue: int32)  =
  ReplaceDialog_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TReplaceDialog): TComponent  =
  return ReplaceDialog_GetOwner(this.Instance).AsComponent

proc Name*(this: TReplaceDialog): string  =
  return $ReplaceDialog_GetName(this.Instance)

proc `Name=`*(this: TReplaceDialog, AValue: string)  =
  ReplaceDialog_SetName(this.Instance, AValue)

proc Tag*(this: TReplaceDialog): int  =
  return ReplaceDialog_GetTag(this.Instance)

proc `Tag=`*(this: TReplaceDialog, AValue: int)  =
  ReplaceDialog_SetTag(this.Instance, AValue)

proc Components*(this: TReplaceDialog, AIndex: int32): TComponent  =
  return ReplaceDialog_GetComponents(this.Instance, AIndex).AsComponent

proc TReplaceDialogClass*(): TClass = ReplaceDialog_StaticClassType()


#------------------------- TPrinterSetupDialog -------------------------

proc Free*(this: TPrinterSetupDialog) = defaultFree: PrinterSetupDialog_Free

proc NewPrinterSetupDialog*(AOwner: TComponent): TPrinterSetupDialog =
  new(result)
  result.Instance = PrinterSetupDialog_Create(CheckPtr(AOwner))

proc Execute*(this: TPrinterSetupDialog): bool  =
  return PrinterSetupDialog_Execute(this.Instance)

proc FindComponent*(this: TPrinterSetupDialog, AName: string): TComponent =
  return PrinterSetupDialog_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TPrinterSetupDialog): string =
  return $PrinterSetupDialog_GetNamePath(this.Instance)

proc HasParent*(this: TPrinterSetupDialog): bool =
  return PrinterSetupDialog_HasParent(this.Instance)

proc Assign*(this: TPrinterSetupDialog, Source: TObject) =
  PrinterSetupDialog_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TPrinterSetupDialog): TClass =
  return PrinterSetupDialog_ClassType(this.Instance)

proc ClassName*(this: TPrinterSetupDialog): string =
  return $PrinterSetupDialog_ClassName(this.Instance)

proc InstanceSize*(this: TPrinterSetupDialog): int32 =
  return PrinterSetupDialog_InstanceSize(this.Instance)

proc InheritsFrom*(this: TPrinterSetupDialog, AClass: TClass): bool =
  return PrinterSetupDialog_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TPrinterSetupDialog, Obj: TObject): bool =
  return PrinterSetupDialog_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TPrinterSetupDialog): int32 =
  return PrinterSetupDialog_GetHashCode(this.Instance)

proc ToString*(this: TPrinterSetupDialog): string =
  return $PrinterSetupDialog_ToString(this.Instance)

proc Handle*(this: TPrinterSetupDialog): HWND  =
  return PrinterSetupDialog_GetHandle(this.Instance)

proc `OnClose=`*(this: TPrinterSetupDialog, AEventId: TNotifyEvent)  =
  PrinterSetupDialog_SetOnClose(this.Instance, AEventId)

proc `OnShow=`*(this: TPrinterSetupDialog, AEventId: TNotifyEvent)  =
  PrinterSetupDialog_SetOnShow(this.Instance, AEventId)

proc ComponentCount*(this: TPrinterSetupDialog): int32  =
  return PrinterSetupDialog_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TPrinterSetupDialog): int32  =
  return PrinterSetupDialog_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TPrinterSetupDialog, AValue: int32)  =
  PrinterSetupDialog_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TPrinterSetupDialog): TComponent  =
  return PrinterSetupDialog_GetOwner(this.Instance).AsComponent

proc Name*(this: TPrinterSetupDialog): string  =
  return $PrinterSetupDialog_GetName(this.Instance)

proc `Name=`*(this: TPrinterSetupDialog, AValue: string)  =
  PrinterSetupDialog_SetName(this.Instance, AValue)

proc Tag*(this: TPrinterSetupDialog): int  =
  return PrinterSetupDialog_GetTag(this.Instance)

proc `Tag=`*(this: TPrinterSetupDialog, AValue: int)  =
  PrinterSetupDialog_SetTag(this.Instance, AValue)

proc Components*(this: TPrinterSetupDialog, AIndex: int32): TComponent  =
  return PrinterSetupDialog_GetComponents(this.Instance, AIndex).AsComponent

proc TPrinterSetupDialogClass*(): TClass = PrinterSetupDialog_StaticClassType()


#------------------------- TPageSetupDialog -------------------------

proc Free*(this: TPageSetupDialog) = defaultFree: PageSetupDialog_Free

proc NewPageSetupDialog*(AOwner: TComponent): TPageSetupDialog =
  new(result)
  result.Instance = PageSetupDialog_Create(CheckPtr(AOwner))

proc Execute*(this: TPageSetupDialog): bool  =
  return PageSetupDialog_Execute(this.Instance)

proc FindComponent*(this: TPageSetupDialog, AName: string): TComponent =
  return PageSetupDialog_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TPageSetupDialog): string =
  return $PageSetupDialog_GetNamePath(this.Instance)

proc HasParent*(this: TPageSetupDialog): bool =
  return PageSetupDialog_HasParent(this.Instance)

proc Assign*(this: TPageSetupDialog, Source: TObject) =
  PageSetupDialog_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TPageSetupDialog): TClass =
  return PageSetupDialog_ClassType(this.Instance)

proc ClassName*(this: TPageSetupDialog): string =
  return $PageSetupDialog_ClassName(this.Instance)

proc InstanceSize*(this: TPageSetupDialog): int32 =
  return PageSetupDialog_InstanceSize(this.Instance)

proc InheritsFrom*(this: TPageSetupDialog, AClass: TClass): bool =
  return PageSetupDialog_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TPageSetupDialog, Obj: TObject): bool =
  return PageSetupDialog_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TPageSetupDialog): int32 =
  return PageSetupDialog_GetHashCode(this.Instance)

proc ToString*(this: TPageSetupDialog): string =
  return $PageSetupDialog_ToString(this.Instance)

proc MarginLeft*(this: TPageSetupDialog): int32  =
  return PageSetupDialog_GetMarginLeft(this.Instance)

proc `MarginLeft=`*(this: TPageSetupDialog, AValue: int32)  =
  PageSetupDialog_SetMarginLeft(this.Instance, AValue)

proc MarginTop*(this: TPageSetupDialog): int32  =
  return PageSetupDialog_GetMarginTop(this.Instance)

proc `MarginTop=`*(this: TPageSetupDialog, AValue: int32)  =
  PageSetupDialog_SetMarginTop(this.Instance, AValue)

proc MarginRight*(this: TPageSetupDialog): int32  =
  return PageSetupDialog_GetMarginRight(this.Instance)

proc `MarginRight=`*(this: TPageSetupDialog, AValue: int32)  =
  PageSetupDialog_SetMarginRight(this.Instance, AValue)

proc MarginBottom*(this: TPageSetupDialog): int32  =
  return PageSetupDialog_GetMarginBottom(this.Instance)

proc `MarginBottom=`*(this: TPageSetupDialog, AValue: int32)  =
  PageSetupDialog_SetMarginBottom(this.Instance, AValue)

proc Options*(this: TPageSetupDialog): TPageSetupDialogOptions  =
  return PageSetupDialog_GetOptions(this.Instance)

proc `Options=`*(this: TPageSetupDialog, AValue: TPageSetupDialogOptions)  =
  PageSetupDialog_SetOptions(this.Instance, AValue)

proc PageWidth*(this: TPageSetupDialog): int32  =
  return PageSetupDialog_GetPageWidth(this.Instance)

proc `PageWidth=`*(this: TPageSetupDialog, AValue: int32)  =
  PageSetupDialog_SetPageWidth(this.Instance, AValue)

proc PageHeight*(this: TPageSetupDialog): int32  =
  return PageSetupDialog_GetPageHeight(this.Instance)

proc `PageHeight=`*(this: TPageSetupDialog, AValue: int32)  =
  PageSetupDialog_SetPageHeight(this.Instance, AValue)

proc Units*(this: TPageSetupDialog): TPageMeasureUnits  =
  return PageSetupDialog_GetUnits(this.Instance)

proc Handle*(this: TPageSetupDialog): HWND  =
  return PageSetupDialog_GetHandle(this.Instance)

proc `OnClose=`*(this: TPageSetupDialog, AEventId: TNotifyEvent)  =
  PageSetupDialog_SetOnClose(this.Instance, AEventId)

proc `OnShow=`*(this: TPageSetupDialog, AEventId: TNotifyEvent)  =
  PageSetupDialog_SetOnShow(this.Instance, AEventId)

proc ComponentCount*(this: TPageSetupDialog): int32  =
  return PageSetupDialog_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TPageSetupDialog): int32  =
  return PageSetupDialog_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TPageSetupDialog, AValue: int32)  =
  PageSetupDialog_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TPageSetupDialog): TComponent  =
  return PageSetupDialog_GetOwner(this.Instance).AsComponent

proc Name*(this: TPageSetupDialog): string  =
  return $PageSetupDialog_GetName(this.Instance)

proc `Name=`*(this: TPageSetupDialog, AValue: string)  =
  PageSetupDialog_SetName(this.Instance, AValue)

proc Tag*(this: TPageSetupDialog): int  =
  return PageSetupDialog_GetTag(this.Instance)

proc `Tag=`*(this: TPageSetupDialog, AValue: int)  =
  PageSetupDialog_SetTag(this.Instance, AValue)

proc Components*(this: TPageSetupDialog, AIndex: int32): TComponent  =
  return PageSetupDialog_GetComponents(this.Instance, AIndex).AsComponent

proc TPageSetupDialogClass*(): TClass = PageSetupDialog_StaticClassType()


#------------------------- TDragObject -------------------------

proc Free*(this: TDragObject) = defaultFree: DragObject_Free

proc NewDragObject*(AOwner: TControl): TDragObject =
  new(result, Free)
  result.Instance = DragObject_Create(CheckPtr(AOwner))

proc Assign*(this: TDragObject, Source: TDragObject)  =
  DragObject_Assign(this.Instance, CheckPtr(Source))

proc HideDragImage*(this: TDragObject)  =
  DragObject_HideDragImage(this.Instance)

proc ShowDragImage*(this: TDragObject)  =
  DragObject_ShowDragImage(this.Instance)

proc ClassType*(this: TDragObject): TClass =
  return DragObject_ClassType(this.Instance)

proc ClassName*(this: TDragObject): string =
  return $DragObject_ClassName(this.Instance)

proc InstanceSize*(this: TDragObject): int32 =
  return DragObject_InstanceSize(this.Instance)

proc InheritsFrom*(this: TDragObject, AClass: TClass): bool =
  return DragObject_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TDragObject, Obj: TObject): bool =
  return DragObject_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TDragObject): int32 =
  return DragObject_GetHashCode(this.Instance)

proc ToString*(this: TDragObject): string =
  return $DragObject_ToString(this.Instance)

proc AlwaysShowDragImages*(this: TDragObject): bool  =
  return DragObject_GetAlwaysShowDragImages(this.Instance)

proc `AlwaysShowDragImages=`*(this: TDragObject, AValue: bool)  =
  DragObject_SetAlwaysShowDragImages(this.Instance, AValue)

proc DragPos*(this: TDragObject): TPoint  =
  DragObject_GetDragPos(this.Instance, result)

proc `DragPos=`*(this: TDragObject, AValue: TPoint)  =
  var ps1 = AValue
  DragObject_SetDragPos(this.Instance, ps1)

proc DragTarget*(this: TDragObject): pointer  =
  return DragObject_GetDragTarget(this.Instance)

proc `DragTarget=`*(this: TDragObject, AValue: pointer)  =
  DragObject_SetDragTarget(this.Instance, AValue)

proc DragTargetPos*(this: TDragObject): TPoint  =
  DragObject_GetDragTargetPos(this.Instance, result)

proc `DragTargetPos=`*(this: TDragObject, AValue: TPoint)  =
  var ps1 = AValue
  DragObject_SetDragTargetPos(this.Instance, ps1)

proc Dropped*(this: TDragObject): bool  =
  return DragObject_GetDropped(this.Instance)

proc TDragObjectClass*(): TClass = DragObject_StaticClassType()


#------------------------- TDragDockObject -------------------------

proc Free*(this: TDragDockObject) = defaultFree: DragDockObject_Free

proc NewDragDockObject*(AOwner: TControl): TDragDockObject =
  new(result, Free)
  result.Instance = DragDockObject_Create(CheckPtr(AOwner))

proc Assign*(this: TDragDockObject, Source: TDragObject)  =
  DragDockObject_Assign(this.Instance, CheckPtr(Source))

proc HideDragImage*(this: TDragDockObject)  =
  DragDockObject_HideDragImage(this.Instance)

proc ShowDragImage*(this: TDragDockObject)  =
  DragDockObject_ShowDragImage(this.Instance)

proc ClassType*(this: TDragDockObject): TClass =
  return DragDockObject_ClassType(this.Instance)

proc ClassName*(this: TDragDockObject): string =
  return $DragDockObject_ClassName(this.Instance)

proc InstanceSize*(this: TDragDockObject): int32 =
  return DragDockObject_InstanceSize(this.Instance)

proc InheritsFrom*(this: TDragDockObject, AClass: TClass): bool =
  return DragDockObject_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TDragDockObject, Obj: TObject): bool =
  return DragDockObject_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TDragDockObject): int32 =
  return DragDockObject_GetHashCode(this.Instance)

proc ToString*(this: TDragDockObject): string =
  return $DragDockObject_ToString(this.Instance)

proc DockRect*(this: TDragDockObject): TRect  =
  DragDockObject_GetDockRect(this.Instance, result)

proc `DockRect=`*(this: TDragDockObject, AValue: TRect)  =
  var ps1 = AValue
  DragDockObject_SetDockRect(this.Instance, ps1)

proc DropAlign*(this: TDragDockObject): TAlign  =
  return DragDockObject_GetDropAlign(this.Instance)

proc DropOnControl*(this: TDragDockObject): TControl  =
  return DragDockObject_GetDropOnControl(this.Instance).AsControl

proc EraseDockRect*(this: TDragDockObject): TRect  =
  DragDockObject_GetEraseDockRect(this.Instance, result)

proc `EraseDockRect=`*(this: TDragDockObject, AValue: TRect)  =
  var ps1 = AValue
  DragDockObject_SetEraseDockRect(this.Instance, ps1)

proc Floating*(this: TDragDockObject): bool  =
  return DragDockObject_GetFloating(this.Instance)

proc `Floating=`*(this: TDragDockObject, AValue: bool)  =
  DragDockObject_SetFloating(this.Instance, AValue)

proc Control*(this: TDragDockObject): TControl  =
  return DragDockObject_GetControl(this.Instance).AsControl

proc `Control=`*(this: TDragDockObject, AValue: TControl)  =
  DragDockObject_SetControl(this.Instance, CheckPtr(AValue))

proc AlwaysShowDragImages*(this: TDragDockObject): bool  =
  return DragDockObject_GetAlwaysShowDragImages(this.Instance)

proc `AlwaysShowDragImages=`*(this: TDragDockObject, AValue: bool)  =
  DragDockObject_SetAlwaysShowDragImages(this.Instance, AValue)

proc DragPos*(this: TDragDockObject): TPoint  =
  DragDockObject_GetDragPos(this.Instance, result)

proc `DragPos=`*(this: TDragDockObject, AValue: TPoint)  =
  var ps1 = AValue
  DragDockObject_SetDragPos(this.Instance, ps1)

proc DragTarget*(this: TDragDockObject): pointer  =
  return DragDockObject_GetDragTarget(this.Instance)

proc `DragTarget=`*(this: TDragDockObject, AValue: pointer)  =
  DragDockObject_SetDragTarget(this.Instance, AValue)

proc DragTargetPos*(this: TDragDockObject): TPoint  =
  DragDockObject_GetDragTargetPos(this.Instance, result)

proc `DragTargetPos=`*(this: TDragDockObject, AValue: TPoint)  =
  var ps1 = AValue
  DragDockObject_SetDragTargetPos(this.Instance, ps1)

proc Dropped*(this: TDragDockObject): bool  =
  return DragDockObject_GetDropped(this.Instance)

proc TDragDockObjectClass*(): TClass = DragDockObject_StaticClassType()


#------------------------- TStringGrid -------------------------

proc Free*(this: TStringGrid) = defaultFree: StringGrid_Free

proc NewStringGrid*(AOwner: TComponent): TStringGrid =
  new(result)
  result.Instance = StringGrid_Create(CheckPtr(AOwner))

proc DeleteColRow*(this: TStringGrid, IsColumn: bool, index: int32)  =
  StringGrid_DeleteColRow(this.Instance, IsColumn, index)

proc DeleteCol*(this: TStringGrid, Index: int32)  =
  StringGrid_DeleteCol(this.Instance, Index)

proc DeleteRow*(this: TStringGrid, Index: int32)  =
  StringGrid_DeleteRow(this.Instance, Index)

proc ExchangeColRow*(this: TStringGrid, IsColumn: bool, index: int32, WithIndex: int32)  =
  StringGrid_ExchangeColRow(this.Instance, IsColumn, index, WithIndex)

proc InsertColRow*(this: TStringGrid, IsColumn: bool, index: int32)  =
  StringGrid_InsertColRow(this.Instance, IsColumn, index)

proc MoveColRow*(this: TStringGrid, IsColumn: bool, FromIndex: int32, ToIndex: int32)  =
  StringGrid_MoveColRow(this.Instance, IsColumn, FromIndex, ToIndex)

proc SortColRow*(this: TStringGrid, IsColumn: bool, Index: int32, FromIndex: int32, ToIndex: int32)  =
  StringGrid_SortColRow(this.Instance, IsColumn, Index, FromIndex, ToIndex)

proc EditorByStyle*(this: TStringGrid, Style: TColumnButtonStyle): TWinControl  =
  return StringGrid_EditorByStyle(this.Instance, Style).AsWinControl

proc EditorKeyDown*(this: TStringGrid, Sender: TObject, Key: var uint16, Shift: TShiftState)  =
  StringGrid_EditorKeyDown(this.Instance, CheckPtr(Sender), Key, Shift)

proc EditorKeyPress*(this: TStringGrid, Sender: TObject, Key: var Char)  =
  StringGrid_EditorKeyPress(this.Instance, CheckPtr(Sender), Key)

proc EditorKeyUp*(this: TStringGrid, Sender: TObject, key: var uint16, shift: TShiftState)  =
  StringGrid_EditorKeyUp(this.Instance, CheckPtr(Sender), key, shift)

proc EditorTextChanged*(this: TStringGrid, aCol: int32, aRow: int32, aText: string)  =
  StringGrid_EditorTextChanged(this.Instance, aCol, aRow, aText)

proc EditingDone*(this: TStringGrid)  =
  StringGrid_EditingDone(this.Instance)

proc AutoAdjustColumns*(this: TStringGrid)  =
  StringGrid_AutoAdjustColumns(this.Instance)

proc CellRect*(this: TStringGrid, ACol: int32, ARow: int32): TRect  =
  StringGrid_CellRect(this.Instance, ACol, ARow, result)

proc CellToGridZone*(this: TStringGrid, aCol: int32, aRow: int32): TGridZone  =
  return StringGrid_CellToGridZone(this.Instance, aCol, aRow)

proc CheckPosition*(this: TStringGrid)  =
  StringGrid_CheckPosition(this.Instance)

proc ClearCols*(this: TStringGrid): bool  =
  return StringGrid_ClearCols(this.Instance)

proc ClearRows*(this: TStringGrid): bool  =
  return StringGrid_ClearRows(this.Instance)

proc Clear*(this: TStringGrid)  =
  StringGrid_Clear(this.Instance)

proc ClearSelections*(this: TStringGrid)  =
  StringGrid_ClearSelections(this.Instance)

proc HasMultiSelection*(this: TStringGrid): bool  =
  return StringGrid_HasMultiSelection(this.Instance)

proc InvalidateCell*(this: TStringGrid, aCol: int32, aRow: int32)  =
  StringGrid_InvalidateCell(this.Instance, aCol, aRow)

proc InvalidateCol*(this: TStringGrid, ACol: int32)  =
  StringGrid_InvalidateCol(this.Instance, ACol)

proc InvalidateRange*(this: TStringGrid, aRange: TRect)  =
  var ps1 = aRange
  StringGrid_InvalidateRange(this.Instance, ps1)

proc InvalidateRow*(this: TStringGrid, ARow: int32)  =
  StringGrid_InvalidateRow(this.Instance, ARow)

proc IsCellVisible*(this: TStringGrid, aCol: int32, aRow: int32): bool  =
  return StringGrid_IsCellVisible(this.Instance, aCol, aRow)

proc IsFixedCellVisible*(this: TStringGrid, aCol: int32, aRow: int32): bool  =
  return StringGrid_IsFixedCellVisible(this.Instance, aCol, aRow)

proc MouseCoord*(this: TStringGrid, X: int32, Y: int32): TGridCoord  =
  StringGrid_MouseCoord(this.Instance, X, Y, result)

proc MouseToCell*(this: TStringGrid, Mouse: TPoint): TPoint  =
  var ps1 = Mouse
  StringGrid_MouseToCell(this.Instance, ps1, result)

proc MouseToLogcell*(this: TStringGrid, Mouse: TPoint): TPoint  =
  var ps1 = Mouse
  StringGrid_MouseToLogcell(this.Instance, ps1, result)

proc MouseToGridZone*(this: TStringGrid, X: int32, Y: int32): TGridZone  =
  return StringGrid_MouseToGridZone(this.Instance, X, Y)

proc CanFocus*(this: TStringGrid): bool =
  return StringGrid_CanFocus(this.Instance)

proc ContainsControl*(this: TStringGrid, Control: TControl): bool =
  return StringGrid_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TStringGrid, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return StringGrid_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TStringGrid) =
  StringGrid_DisableAlign(this.Instance)

proc EnableAlign*(this: TStringGrid) =
  StringGrid_EnableAlign(this.Instance)

proc FindChildControl*(this: TStringGrid, ControlName: string): TControl =
  return StringGrid_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TStringGrid, AllLevels: bool) =
  StringGrid_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TStringGrid): bool =
  return StringGrid_Focused(this.Instance)

proc HandleAllocated*(this: TStringGrid): bool =
  return StringGrid_HandleAllocated(this.Instance)

proc InsertControl*(this: TStringGrid, AControl: TControl) =
  StringGrid_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TStringGrid) =
  StringGrid_Invalidate(this.Instance)

proc PaintTo*(this: TStringGrid, DC: HDC, X: int32, Y: int32) =
  StringGrid_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TStringGrid, AControl: TControl) =
  StringGrid_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TStringGrid) =
  StringGrid_Realign(this.Instance)

proc Repaint*(this: TStringGrid) =
  StringGrid_Repaint(this.Instance)

proc ScaleBy*(this: TStringGrid, M: int32, D: int32) =
  StringGrid_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TStringGrid, DeltaX: int32, DeltaY: int32) =
  StringGrid_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TStringGrid, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  StringGrid_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TStringGrid) =
  StringGrid_SetFocus(this.Instance)

proc Update*(this: TStringGrid) =
  StringGrid_Update(this.Instance)

proc BringToFront*(this: TStringGrid) =
  StringGrid_BringToFront(this.Instance)

proc ClientToScreen*(this: TStringGrid, Point: TPoint): TPoint =
  var ps1 = Point
  StringGrid_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TStringGrid, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  StringGrid_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TStringGrid): bool =
  return StringGrid_Dragging(this.Instance)

proc HasParent*(this: TStringGrid): bool =
  return StringGrid_HasParent(this.Instance)

proc Hide*(this: TStringGrid) =
  StringGrid_Hide(this.Instance)

proc Perform*(this: TStringGrid, Msg: uint32, WParam: uint, LParam: int): int =
  return StringGrid_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TStringGrid) =
  StringGrid_Refresh(this.Instance)

proc ScreenToClient*(this: TStringGrid, Point: TPoint): TPoint =
  var ps1 = Point
  StringGrid_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TStringGrid, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  StringGrid_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TStringGrid) =
  StringGrid_SendToBack(this.Instance)

proc Show*(this: TStringGrid) =
  StringGrid_Show(this.Instance)

proc GetTextBuf*(this: TStringGrid, Buffer: string, BufSize: int32): int32 =
  return StringGrid_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TStringGrid): int32 =
  return StringGrid_GetTextLen(this.Instance)

proc SetTextBuf*(this: TStringGrid, Buffer: string) =
  StringGrid_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TStringGrid, AName: string): TComponent =
  return StringGrid_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TStringGrid): string =
  return $StringGrid_GetNamePath(this.Instance)

proc Assign*(this: TStringGrid, Source: TObject) =
  StringGrid_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TStringGrid): TClass =
  return StringGrid_ClassType(this.Instance)

proc ClassName*(this: TStringGrid): string =
  return $StringGrid_ClassName(this.Instance)

proc InstanceSize*(this: TStringGrid): int32 =
  return StringGrid_InstanceSize(this.Instance)

proc InheritsFrom*(this: TStringGrid, AClass: TClass): bool =
  return StringGrid_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TStringGrid, Obj: TObject): bool =
  return StringGrid_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TStringGrid): int32 =
  return StringGrid_GetHashCode(this.Instance)

proc ToString*(this: TStringGrid): string =
  return $StringGrid_ToString(this.Instance)

proc AnchorToNeighbour*(this: TStringGrid, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  StringGrid_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TStringGrid, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  StringGrid_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TStringGrid, ASibling: TControl) =
  StringGrid_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TStringGrid, ASibling: TControl) =
  StringGrid_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TStringGrid, ASide: TAnchorKind, ASibling: TControl) =
  StringGrid_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TStringGrid, ATheAlign: TAlign, ASpace: int32) =
  StringGrid_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TStringGrid, ASpace: int32) =
  StringGrid_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TStringGrid, ASize: int32): int32 =
  return StringGrid_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TStringGrid, ASize: int32): int32 =
  return StringGrid_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TStringGrid, ASize: int32): int32 =
  return StringGrid_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TStringGrid, ASize: int32): int32 =
  return StringGrid_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TStringGrid, ASize: int32): int32 =
  return StringGrid_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TStringGrid, ASize: int32): int32 =
  return StringGrid_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TStringGrid, ASize: int32): int32 =
  return StringGrid_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TStringGrid, ASize: int32): int32 =
  return StringGrid_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TStringGrid, ASize: int32): int32 =
  return StringGrid_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TStringGrid, ASize: int32): int32 =
  return StringGrid_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TStringGrid, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  StringGrid_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TStringGrid, ADesignTimePPI: int32) =
  StringGrid_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TStringGrid, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  StringGrid_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc SelectedColor*(this: TStringGrid): TColor  =
  return StringGrid_GetSelectedColor(this.Instance)

proc `SelectedColor=`*(this: TStringGrid, AValue: TColor)  =
  StringGrid_SetSelectedColor(this.Instance, AValue)

proc SelectedColumn*(this: TStringGrid): TGridColumn  =
  return StringGrid_GetSelectedColumn(this.Instance).AsGridColumn

proc StrictSort*(this: TStringGrid): bool  =
  return StringGrid_GetStrictSort(this.Instance)

proc `StrictSort=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetStrictSort(this.Instance, AValue)

proc FixedHotColor*(this: TStringGrid): TColor  =
  return StringGrid_GetFixedHotColor(this.Instance)

proc `FixedHotColor=`*(this: TStringGrid, AValue: TColor)  =
  StringGrid_SetFixedHotColor(this.Instance, AValue)

proc FastEditing*(this: TStringGrid): bool  =
  return StringGrid_GetFastEditing(this.Instance)

proc `FastEditing=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetFastEditing(this.Instance, AValue)

proc FixedGridLineColor*(this: TStringGrid): TColor  =
  return StringGrid_GetFixedGridLineColor(this.Instance)

proc `FixedGridLineColor=`*(this: TStringGrid, AValue: TColor)  =
  StringGrid_SetFixedGridLineColor(this.Instance, AValue)

proc FocusColor*(this: TStringGrid): TColor  =
  return StringGrid_GetFocusColor(this.Instance)

proc `FocusColor=`*(this: TStringGrid, AValue: TColor)  =
  StringGrid_SetFocusColor(this.Instance, AValue)

proc FocusRectVisible*(this: TStringGrid): bool  =
  return StringGrid_GetFocusRectVisible(this.Instance)

proc `FocusRectVisible=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetFocusRectVisible(this.Instance, AValue)

proc GridLineColor*(this: TStringGrid): TColor  =
  return StringGrid_GetGridLineColor(this.Instance)

proc `GridLineColor=`*(this: TStringGrid, AValue: TColor)  =
  StringGrid_SetGridLineColor(this.Instance, AValue)

proc GridLineStyle*(this: TStringGrid): TPenStyle  =
  return StringGrid_GetGridLineStyle(this.Instance)

proc `GridLineStyle=`*(this: TStringGrid, AValue: TPenStyle)  =
  StringGrid_SetGridLineStyle(this.Instance, AValue)

proc Editor*(this: TStringGrid): TWinControl  =
  return StringGrid_GetEditor(this.Instance).AsWinControl

proc `Editor=`*(this: TStringGrid, AValue: TWinControl)  =
  StringGrid_SetEditor(this.Instance, CheckPtr(AValue))

proc EditorBorderStyle*(this: TStringGrid): TBorderStyle  =
  return StringGrid_GetEditorBorderStyle(this.Instance)

proc `EditorBorderStyle=`*(this: TStringGrid, AValue: TBorderStyle)  =
  StringGrid_SetEditorBorderStyle(this.Instance, AValue)

proc EditorMode*(this: TStringGrid): bool  =
  return StringGrid_GetEditorMode(this.Instance)

proc `EditorMode=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetEditorMode(this.Instance, AValue)

proc SortOrder*(this: TStringGrid): TSortOrder  =
  return StringGrid_GetSortOrder(this.Instance)

proc `SortOrder=`*(this: TStringGrid, AValue: TSortOrder)  =
  StringGrid_SetSortOrder(this.Instance, AValue)

proc SortColumn*(this: TStringGrid): int32  =
  return StringGrid_GetSortColumn(this.Instance)

proc `OnAfterSelection=`*(this: TStringGrid, AEventId: TOnSelectEvent)  =
  StringGrid_SetOnAfterSelection(this.Instance, AEventId)

proc `OnBeforeSelection=`*(this: TStringGrid, AEventId: TOnSelectEvent)  =
  StringGrid_SetOnBeforeSelection(this.Instance, AEventId)

proc `OnButtonClick=`*(this: TStringGrid, AEventId: TOnSelectEvent)  =
  StringGrid_SetOnButtonClick(this.Instance, AEventId)

proc `OnCheckboxToggled=`*(this: TStringGrid, AEventId: TToggledCheckboxEvent)  =
  StringGrid_SetOnCheckboxToggled(this.Instance, AEventId)

proc `OnColRowDeleted=`*(this: TStringGrid, AEventId: TGridOperationEvent)  =
  StringGrid_SetOnColRowDeleted(this.Instance, AEventId)

proc `OnColRowExchanged=`*(this: TStringGrid, AEventId: TGridOperationEvent)  =
  StringGrid_SetOnColRowExchanged(this.Instance, AEventId)

proc `OnColRowInserted=`*(this: TStringGrid, AEventId: TGridOperationEvent)  =
  StringGrid_SetOnColRowInserted(this.Instance, AEventId)

proc `OnColRowMoved=`*(this: TStringGrid, AEventId: TGridOperationEvent)  =
  StringGrid_SetOnColRowMoved(this.Instance, AEventId)

proc `OnCompareCells=`*(this: TStringGrid, AEventId: TOnCompareCells)  =
  StringGrid_SetOnCompareCells(this.Instance, AEventId)

proc `OnEditingDone=`*(this: TStringGrid, AEventId: TNotifyEvent)  =
  StringGrid_SetOnEditingDone(this.Instance, AEventId)

proc `OnGetCellHint=`*(this: TStringGrid, AEventId: TGetCellHintEvent)  =
  StringGrid_SetOnGetCellHint(this.Instance, AEventId)

proc `OnGetCheckboxState=`*(this: TStringGrid, AEventId: TGetCheckboxStateEvent)  =
  StringGrid_SetOnGetCheckboxState(this.Instance, AEventId)

proc `OnSetCheckboxState=`*(this: TStringGrid, AEventId: TSetCheckboxStateEvent)  =
  StringGrid_SetOnSetCheckboxState(this.Instance, AEventId)

proc `OnHeaderClick=`*(this: TStringGrid, AEventId: THdrEvent)  =
  StringGrid_SetOnHeaderClick(this.Instance, AEventId)

proc `OnHeaderSized=`*(this: TStringGrid, AEventId: THdrEvent)  =
  StringGrid_SetOnHeaderSized(this.Instance, AEventId)

proc `OnHeaderSizing=`*(this: TStringGrid, AEventId: THeaderSizingEvent)  =
  StringGrid_SetOnHeaderSizing(this.Instance, AEventId)

proc `OnPickListSelect=`*(this: TStringGrid, AEventId: TNotifyEvent)  =
  StringGrid_SetOnPickListSelect(this.Instance, AEventId)

proc `OnSelection=`*(this: TStringGrid, AEventId: TOnSelectEvent)  =
  StringGrid_SetOnSelection(this.Instance, AEventId)

proc `OnSelectEditor=`*(this: TStringGrid, AEventId: TSelectEditorEvent)  =
  StringGrid_SetOnSelectEditor(this.Instance, AEventId)

proc `OnUserCheckboxBitmap=`*(this: TStringGrid, AEventId: TUserCheckBoxBitmapEvent)  =
  StringGrid_SetOnUserCheckboxBitmap(this.Instance, AEventId)

proc `OnValidateEntry=`*(this: TStringGrid, AEventId: TValidateEntryEvent)  =
  StringGrid_SetOnValidateEntry(this.Instance, AEventId)

proc AlternateColor*(this: TStringGrid): TColor  =
  return StringGrid_GetAlternateColor(this.Instance)

proc `AlternateColor=`*(this: TStringGrid, AValue: TColor)  =
  StringGrid_SetAlternateColor(this.Instance, AValue)

proc AutoAdvance*(this: TStringGrid): TAutoAdvance  =
  return StringGrid_GetAutoAdvance(this.Instance)

proc `AutoAdvance=`*(this: TStringGrid, AValue: TAutoAdvance)  =
  StringGrid_SetAutoAdvance(this.Instance, AValue)

proc AutoEdit*(this: TStringGrid): bool  =
  return StringGrid_GetAutoEdit(this.Instance)

proc `AutoEdit=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetAutoEdit(this.Instance, AValue)

proc AutoFillColumns*(this: TStringGrid): bool  =
  return StringGrid_GetAutoFillColumns(this.Instance)

proc `AutoFillColumns=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetAutoFillColumns(this.Instance, AValue)

proc CellHintPriority*(this: TStringGrid): TCellHintPriority  =
  return StringGrid_GetCellHintPriority(this.Instance)

proc `CellHintPriority=`*(this: TStringGrid, AValue: TCellHintPriority)  =
  StringGrid_SetCellHintPriority(this.Instance, AValue)

proc ColumnClickSorts*(this: TStringGrid): bool  =
  return StringGrid_GetColumnClickSorts(this.Instance)

proc `ColumnClickSorts=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetColumnClickSorts(this.Instance, AValue)

proc Columns*(this: TStringGrid): TGridColumns  =
  return StringGrid_GetColumns(this.Instance).AsGridColumns

proc `Columns=`*(this: TStringGrid, AValue: TGridColumns)  =
  StringGrid_SetColumns(this.Instance, CheckPtr(AValue))

proc ExtendedSelect*(this: TStringGrid): bool  =
  return StringGrid_GetExtendedSelect(this.Instance)

proc `ExtendedSelect=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetExtendedSelect(this.Instance, AValue)

proc Flat*(this: TStringGrid): bool  =
  return StringGrid_GetFlat(this.Instance)

proc `Flat=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetFlat(this.Instance, AValue)

proc HeaderHotZones*(this: TStringGrid): TGridZoneSet  =
  return StringGrid_GetHeaderHotZones(this.Instance)

proc `HeaderHotZones=`*(this: TStringGrid, AValue: TGridZoneSet)  =
  StringGrid_SetHeaderHotZones(this.Instance, AValue)

proc HeaderPushZones*(this: TStringGrid): TGridZoneSet  =
  return StringGrid_GetHeaderPushZones(this.Instance)

proc `HeaderPushZones=`*(this: TStringGrid, AValue: TGridZoneSet)  =
  StringGrid_SetHeaderPushZones(this.Instance, AValue)

proc ImageIndexSortAsc*(this: TStringGrid): int32  =
  return StringGrid_GetImageIndexSortAsc(this.Instance)

proc `ImageIndexSortAsc=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetImageIndexSortAsc(this.Instance, AValue)

proc ImageIndexSortDesc*(this: TStringGrid): int32  =
  return StringGrid_GetImageIndexSortDesc(this.Instance)

proc `ImageIndexSortDesc=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetImageIndexSortDesc(this.Instance, AValue)

proc MouseWheelOption*(this: TStringGrid): TMouseWheelOption  =
  return StringGrid_GetMouseWheelOption(this.Instance)

proc `MouseWheelOption=`*(this: TStringGrid, AValue: TMouseWheelOption)  =
  StringGrid_SetMouseWheelOption(this.Instance, AValue)

proc Options2*(this: TStringGrid): TGridOptions2  =
  return StringGrid_GetOptions2(this.Instance)

proc `Options2=`*(this: TStringGrid, AValue: TGridOptions2)  =
  StringGrid_SetOptions2(this.Instance, AValue)

proc RangeSelectMode*(this: TStringGrid): TRangeSelectMode  =
  return StringGrid_GetRangeSelectMode(this.Instance)

proc `RangeSelectMode=`*(this: TStringGrid, AValue: TRangeSelectMode)  =
  StringGrid_SetRangeSelectMode(this.Instance, AValue)

proc TabAdvance*(this: TStringGrid): TAutoAdvance  =
  return StringGrid_GetTabAdvance(this.Instance)

proc `TabAdvance=`*(this: TStringGrid, AValue: TAutoAdvance)  =
  StringGrid_SetTabAdvance(this.Instance, AValue)

proc TitleFont*(this: TStringGrid): TFont  =
  return StringGrid_GetTitleFont(this.Instance).AsFont

proc `TitleFont=`*(this: TStringGrid, AValue: TFont)  =
  StringGrid_SetTitleFont(this.Instance, CheckPtr(AValue))

proc TitleImageList*(this: TStringGrid): TImageList  =
  return StringGrid_GetTitleImageList(this.Instance).AsImageList

proc `TitleImageList=`*(this: TStringGrid, AValue: TImageList)  =
  StringGrid_SetTitleImageList(this.Instance, CheckPtr(AValue))

proc TitleStyle*(this: TStringGrid): TTitleStyle  =
  return StringGrid_GetTitleStyle(this.Instance)

proc `TitleStyle=`*(this: TStringGrid, AValue: TTitleStyle)  =
  StringGrid_SetTitleStyle(this.Instance, AValue)

proc UseXORFeatures*(this: TStringGrid): bool  =
  return StringGrid_GetUseXORFeatures(this.Instance)

proc `UseXORFeatures=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetUseXORFeatures(this.Instance, AValue)

proc Align*(this: TStringGrid): TAlign  =
  return StringGrid_GetAlign(this.Instance)

proc `Align=`*(this: TStringGrid, AValue: TAlign)  =
  StringGrid_SetAlign(this.Instance, AValue)

proc Anchors*(this: TStringGrid): TAnchors  =
  return StringGrid_GetAnchors(this.Instance)

proc `Anchors=`*(this: TStringGrid, AValue: TAnchors)  =
  StringGrid_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TStringGrid): TBiDiMode  =
  return StringGrid_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TStringGrid, AValue: TBiDiMode)  =
  StringGrid_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TStringGrid): TBorderStyle  =
  return StringGrid_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TStringGrid, AValue: TBorderStyle)  =
  StringGrid_SetBorderStyle(this.Instance, AValue)

proc Color*(this: TStringGrid): TColor  =
  return StringGrid_GetColor(this.Instance)

proc `Color=`*(this: TStringGrid, AValue: TColor)  =
  StringGrid_SetColor(this.Instance, AValue)

proc ColCount*(this: TStringGrid): int32  =
  return StringGrid_GetColCount(this.Instance)

proc `ColCount=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetColCount(this.Instance, AValue)

proc Constraints*(this: TStringGrid): TSizeConstraints  =
  return StringGrid_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TStringGrid, AValue: TSizeConstraints)  =
  StringGrid_SetConstraints(this.Instance, CheckPtr(AValue))

proc DefaultColWidth*(this: TStringGrid): int32  =
  return StringGrid_GetDefaultColWidth(this.Instance)

proc `DefaultColWidth=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetDefaultColWidth(this.Instance, AValue)

proc DefaultRowHeight*(this: TStringGrid): int32  =
  return StringGrid_GetDefaultRowHeight(this.Instance)

proc `DefaultRowHeight=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetDefaultRowHeight(this.Instance, AValue)

proc DefaultDrawing*(this: TStringGrid): bool  =
  return StringGrid_GetDefaultDrawing(this.Instance)

proc `DefaultDrawing=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetDefaultDrawing(this.Instance, AValue)

proc DoubleBuffered*(this: TStringGrid): bool  =
  return StringGrid_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TStringGrid): TCursor  =
  return StringGrid_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TStringGrid, AValue: TCursor)  =
  StringGrid_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TStringGrid): TDragKind  =
  return StringGrid_GetDragKind(this.Instance)

proc `DragKind=`*(this: TStringGrid, AValue: TDragKind)  =
  StringGrid_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TStringGrid): TDragMode  =
  return StringGrid_GetDragMode(this.Instance)

proc `DragMode=`*(this: TStringGrid, AValue: TDragMode)  =
  StringGrid_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TStringGrid): bool  =
  return StringGrid_GetEnabled(this.Instance)

proc `Enabled=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetEnabled(this.Instance, AValue)

proc FixedColor*(this: TStringGrid): TColor  =
  return StringGrid_GetFixedColor(this.Instance)

proc `FixedColor=`*(this: TStringGrid, AValue: TColor)  =
  StringGrid_SetFixedColor(this.Instance, AValue)

proc FixedCols*(this: TStringGrid): int32  =
  return StringGrid_GetFixedCols(this.Instance)

proc `FixedCols=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetFixedCols(this.Instance, AValue)

proc RowCount*(this: TStringGrid): int32  =
  return StringGrid_GetRowCount(this.Instance)

proc `RowCount=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetRowCount(this.Instance, AValue)

proc FixedRows*(this: TStringGrid): int32  =
  return StringGrid_GetFixedRows(this.Instance)

proc `FixedRows=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetFixedRows(this.Instance, AValue)

proc Font*(this: TStringGrid): TFont  =
  return StringGrid_GetFont(this.Instance).AsFont

proc `Font=`*(this: TStringGrid, AValue: TFont)  =
  StringGrid_SetFont(this.Instance, CheckPtr(AValue))

proc GridLineWidth*(this: TStringGrid): int32  =
  return StringGrid_GetGridLineWidth(this.Instance)

proc `GridLineWidth=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetGridLineWidth(this.Instance, AValue)

proc Options*(this: TStringGrid): TGridOptions  =
  return StringGrid_GetOptions(this.Instance)

proc `Options=`*(this: TStringGrid, AValue: TGridOptions)  =
  StringGrid_SetOptions(this.Instance, AValue)

proc ParentColor*(this: TStringGrid): bool  =
  return StringGrid_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TStringGrid): bool  =
  return StringGrid_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TStringGrid): bool  =
  return StringGrid_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TStringGrid): bool  =
  return StringGrid_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TStringGrid): TPopupMenu  =
  return StringGrid_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TStringGrid, AValue: TPopupMenu)  =
  StringGrid_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ScrollBars*(this: TStringGrid): TScrollStyle  =
  return StringGrid_GetScrollBars(this.Instance)

proc `ScrollBars=`*(this: TStringGrid, AValue: TScrollStyle)  =
  StringGrid_SetScrollBars(this.Instance, AValue)

proc ShowHint*(this: TStringGrid): bool  =
  return StringGrid_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TStringGrid): TTabOrder  =
  return StringGrid_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TStringGrid, AValue: TTabOrder)  =
  StringGrid_SetTabOrder(this.Instance, AValue)

proc Visible*(this: TStringGrid): bool  =
  return StringGrid_GetVisible(this.Instance)

proc `Visible=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetVisible(this.Instance, AValue)

proc VisibleColCount*(this: TStringGrid): int32  =
  return StringGrid_GetVisibleColCount(this.Instance)

proc VisibleRowCount*(this: TStringGrid): int32  =
  return StringGrid_GetVisibleRowCount(this.Instance)

proc `OnClick=`*(this: TStringGrid, AEventId: TNotifyEvent)  =
  StringGrid_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TStringGrid, AEventId: TContextPopupEvent)  =
  StringGrid_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TStringGrid, AEventId: TNotifyEvent)  =
  StringGrid_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TStringGrid, AEventId: TDragDropEvent)  =
  StringGrid_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TStringGrid, AEventId: TDragOverEvent)  =
  StringGrid_SetOnDragOver(this.Instance, AEventId)

proc `OnDrawCell=`*(this: TStringGrid, AEventId: TDrawCellEvent)  =
  StringGrid_SetOnDrawCell(this.Instance, AEventId)

proc `OnEndDock=`*(this: TStringGrid, AEventId: TEndDragEvent)  =
  StringGrid_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TStringGrid, AEventId: TEndDragEvent)  =
  StringGrid_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TStringGrid, AEventId: TNotifyEvent)  =
  StringGrid_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TStringGrid, AEventId: TNotifyEvent)  =
  StringGrid_SetOnExit(this.Instance, AEventId)

proc `OnGetEditMask=`*(this: TStringGrid, AEventId: TGetEditEvent)  =
  StringGrid_SetOnGetEditMask(this.Instance, AEventId)

proc `OnGetEditText=`*(this: TStringGrid, AEventId: TGetEditEvent)  =
  StringGrid_SetOnGetEditText(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TStringGrid, AEventId: TKeyEvent)  =
  StringGrid_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TStringGrid, AEventId: TKeyPressEvent)  =
  StringGrid_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TStringGrid, AEventId: TKeyEvent)  =
  StringGrid_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TStringGrid, AEventId: TMouseEvent)  =
  StringGrid_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TStringGrid, AEventId: TNotifyEvent)  =
  StringGrid_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TStringGrid, AEventId: TNotifyEvent)  =
  StringGrid_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TStringGrid, AEventId: TMouseMoveEvent)  =
  StringGrid_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TStringGrid, AEventId: TMouseEvent)  =
  StringGrid_SetOnMouseUp(this.Instance, AEventId)

proc `OnMouseWheelDown=`*(this: TStringGrid, AEventId: TMouseWheelUpDownEvent)  =
  StringGrid_SetOnMouseWheelDown(this.Instance, AEventId)

proc `OnMouseWheelUp=`*(this: TStringGrid, AEventId: TMouseWheelUpDownEvent)  =
  StringGrid_SetOnMouseWheelUp(this.Instance, AEventId)

proc `OnSelectCell=`*(this: TStringGrid, AEventId: TSelectCellEvent)  =
  StringGrid_SetOnSelectCell(this.Instance, AEventId)

proc `OnSetEditText=`*(this: TStringGrid, AEventId: TSetEditEvent)  =
  StringGrid_SetOnSetEditText(this.Instance, AEventId)

proc `OnStartDock=`*(this: TStringGrid, AEventId: TStartDockEvent)  =
  StringGrid_SetOnStartDock(this.Instance, AEventId)

proc `OnTopLeftChanged=`*(this: TStringGrid, AEventId: TNotifyEvent)  =
  StringGrid_SetOnTopLeftChanged(this.Instance, AEventId)

proc Canvas*(this: TStringGrid): TCanvas  =
  return StringGrid_GetCanvas(this.Instance).AsCanvas

proc Col*(this: TStringGrid): int32  =
  return StringGrid_GetCol(this.Instance)

proc `Col=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetCol(this.Instance, AValue)

proc GridHeight*(this: TStringGrid): int32  =
  return StringGrid_GetGridHeight(this.Instance)

proc GridWidth*(this: TStringGrid): int32  =
  return StringGrid_GetGridWidth(this.Instance)

proc LeftCol*(this: TStringGrid): int32  =
  return StringGrid_GetLeftCol(this.Instance)

proc `LeftCol=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetLeftCol(this.Instance, AValue)

proc Selection*(this: TStringGrid): TGridRect  =
  StringGrid_GetSelection(this.Instance, result)

proc `Selection=`*(this: TStringGrid, AValue: TGridRect)  =
  var ps1 = AValue
  StringGrid_SetSelection(this.Instance, ps1)

proc Row*(this: TStringGrid): int32  =
  return StringGrid_GetRow(this.Instance)

proc `Row=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetRow(this.Instance, AValue)

proc TopRow*(this: TStringGrid): int32  =
  return StringGrid_GetTopRow(this.Instance)

proc `TopRow=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetTopRow(this.Instance, AValue)

proc TabStop*(this: TStringGrid): bool  =
  return StringGrid_GetTabStop(this.Instance)

proc `TabStop=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetTabStop(this.Instance, AValue)

proc DockClientCount*(this: TStringGrid): int32  =
  return StringGrid_GetDockClientCount(this.Instance)

proc DockSite*(this: TStringGrid): bool  =
  return StringGrid_GetDockSite(this.Instance)

proc `DockSite=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TStringGrid): bool  =
  return StringGrid_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TStringGrid): int32  =
  return StringGrid_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TStringGrid): TBrush  =
  return StringGrid_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TStringGrid): int32  =
  return StringGrid_GetControlCount(this.Instance)

proc Handle*(this: TStringGrid): HWND  =
  return StringGrid_GetHandle(this.Instance)

proc ParentWindow*(this: TStringGrid): HWND  =
  return StringGrid_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TStringGrid, AValue: HWND)  =
  StringGrid_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TStringGrid): bool  =
  return StringGrid_GetShowing(this.Instance)

proc UseDockManager*(this: TStringGrid): bool  =
  return StringGrid_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TStringGrid, AValue: bool)  =
  StringGrid_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TStringGrid): TAction  =
  return StringGrid_GetAction(this.Instance).AsAction

proc `Action=`*(this: TStringGrid, AValue: TAction)  =
  StringGrid_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TStringGrid): TRect  =
  StringGrid_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TStringGrid, AValue: TRect)  =
  var ps1 = AValue
  StringGrid_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TStringGrid): int32  =
  return StringGrid_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TStringGrid): TPoint  =
  StringGrid_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TStringGrid): TRect  =
  StringGrid_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TStringGrid): int32  =
  return StringGrid_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TStringGrid): TControlState  =
  return StringGrid_GetControlState(this.Instance)

proc `ControlState=`*(this: TStringGrid, AValue: TControlState)  =
  StringGrid_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TStringGrid): TControlStyle  =
  return StringGrid_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TStringGrid, AValue: TControlStyle)  =
  StringGrid_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TStringGrid): bool  =
  return StringGrid_GetFloating(this.Instance)

proc Parent*(this: TStringGrid): TWinControl  =
  return StringGrid_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TStringGrid, AValue: TWinControl)  =
  StringGrid_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TStringGrid): int32  =
  return StringGrid_GetLeft(this.Instance)

proc `Left=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetLeft(this.Instance, AValue)

proc Top*(this: TStringGrid): int32  =
  return StringGrid_GetTop(this.Instance)

proc `Top=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetTop(this.Instance, AValue)

proc Width*(this: TStringGrid): int32  =
  return StringGrid_GetWidth(this.Instance)

proc `Width=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetWidth(this.Instance, AValue)

proc Height*(this: TStringGrid): int32  =
  return StringGrid_GetHeight(this.Instance)

proc `Height=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetHeight(this.Instance, AValue)

proc Cursor*(this: TStringGrid): TCursor  =
  return StringGrid_GetCursor(this.Instance)

proc `Cursor=`*(this: TStringGrid, AValue: TCursor)  =
  StringGrid_SetCursor(this.Instance, AValue)

proc Hint*(this: TStringGrid): string  =
  return $StringGrid_GetHint(this.Instance)

proc `Hint=`*(this: TStringGrid, AValue: string)  =
  StringGrid_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TStringGrid): int32  =
  return StringGrid_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TStringGrid): int32  =
  return StringGrid_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TStringGrid, AValue: int32)  =
  StringGrid_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TStringGrid): TComponent  =
  return StringGrid_GetOwner(this.Instance).AsComponent

proc Name*(this: TStringGrid): string  =
  return $StringGrid_GetName(this.Instance)

proc `Name=`*(this: TStringGrid, AValue: string)  =
  StringGrid_SetName(this.Instance, AValue)

proc Tag*(this: TStringGrid): int  =
  return StringGrid_GetTag(this.Instance)

proc `Tag=`*(this: TStringGrid, AValue: int)  =
  StringGrid_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TStringGrid): TAnchorSide  =
  return StringGrid_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TStringGrid, AValue: TAnchorSide)  =
  StringGrid_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TStringGrid): TAnchorSide  =
  return StringGrid_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TStringGrid, AValue: TAnchorSide)  =
  StringGrid_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TStringGrid): TAnchorSide  =
  return StringGrid_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TStringGrid, AValue: TAnchorSide)  =
  StringGrid_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TStringGrid): TAnchorSide  =
  return StringGrid_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TStringGrid, AValue: TAnchorSide)  =
  StringGrid_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TStringGrid): TControlChildSizing  =
  return StringGrid_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TStringGrid, AValue: TControlChildSizing)  =
  StringGrid_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TStringGrid): TControlBorderSpacing  =
  return StringGrid_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TStringGrid, AValue: TControlBorderSpacing)  =
  StringGrid_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc IsCellSelected*(this: TStringGrid, aCol: int32, aRow: int32): bool  =
  return StringGrid_GetIsCellSelected(this.Instance, aCol, aRow)

proc Cells*(this: TStringGrid, ACol: int32, ARow: int32): string  =
  return $StringGrid_GetCells(this.Instance, ACol, ARow)

proc `Cells=`*(this: TStringGrid, ACol: int32, ARow: int32, AValue: string)  =
  StringGrid_SetCells(this.Instance, ACol, ARow, AValue)

proc Cols*(this: TStringGrid, Index: int32): TStrings  =
  return StringGrid_GetCols(this.Instance, Index).AsStrings

proc `Cols=`*(this: TStringGrid, Index: int32, AValue: TStrings)  =
  StringGrid_SetCols(this.Instance, Index, CheckPtr(AValue))

proc Objects*(this: TStringGrid, ACol: int32, ARow: int32): TObject  =
  return StringGrid_GetObjects(this.Instance, ACol, ARow).AsObject

proc `Objects=`*(this: TStringGrid, ACol: int32, ARow: int32, AValue: TObject)  =
  StringGrid_SetObjects(this.Instance, ACol, ARow, CheckPtr(AValue))

proc Rows*(this: TStringGrid, Index: int32): TStrings  =
  return StringGrid_GetRows(this.Instance, Index).AsStrings

proc `Rows=`*(this: TStringGrid, Index: int32, AValue: TStrings)  =
  StringGrid_SetRows(this.Instance, Index, CheckPtr(AValue))

proc ColWidths*(this: TStringGrid, Index: int32): int32  =
  return StringGrid_GetColWidths(this.Instance, Index)

proc `ColWidths=`*(this: TStringGrid, Index: int32, AValue: int32)  =
  StringGrid_SetColWidths(this.Instance, Index, AValue)

proc RowHeights*(this: TStringGrid, Index: int32): int32  =
  return StringGrid_GetRowHeights(this.Instance, Index)

proc `RowHeights=`*(this: TStringGrid, Index: int32, AValue: int32)  =
  StringGrid_SetRowHeights(this.Instance, Index, AValue)

proc DockClients*(this: TStringGrid, Index: int32): TControl  =
  return StringGrid_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TStringGrid, Index: int32): TControl  =
  return StringGrid_GetControls(this.Instance, Index).AsControl

proc Components*(this: TStringGrid, AIndex: int32): TComponent  =
  return StringGrid_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TStringGrid, AKind: TAnchorKind): TAnchorSide  =
  return StringGrid_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TStringGridClass*(): TClass = StringGrid_StaticClassType()


#------------------------- TDrawGrid -------------------------

proc Free*(this: TDrawGrid) = defaultFree: DrawGrid_Free

proc NewDrawGrid*(AOwner: TComponent): TDrawGrid =
  new(result)
  result.Instance = DrawGrid_Create(CheckPtr(AOwner))

proc CellRect*(this: TDrawGrid, ACol: int32, ARow: int32): TRect  =
  DrawGrid_CellRect(this.Instance, ACol, ARow, result)

proc MouseToCell*(this: TDrawGrid, X: int32, Y: int32, ACol: var int32, ARow: var int32)  =
  DrawGrid_MouseToCell(this.Instance, X, Y, ACol, ARow)

proc MouseCoord*(this: TDrawGrid, X: int32, Y: int32): TGridCoord  =
  DrawGrid_MouseCoord(this.Instance, X, Y, result)

proc CanFocus*(this: TDrawGrid): bool =
  return DrawGrid_CanFocus(this.Instance)

proc ContainsControl*(this: TDrawGrid, Control: TControl): bool =
  return DrawGrid_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TDrawGrid, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return DrawGrid_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TDrawGrid) =
  DrawGrid_DisableAlign(this.Instance)

proc EnableAlign*(this: TDrawGrid) =
  DrawGrid_EnableAlign(this.Instance)

proc FindChildControl*(this: TDrawGrid, ControlName: string): TControl =
  return DrawGrid_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TDrawGrid, AllLevels: bool) =
  DrawGrid_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TDrawGrid): bool =
  return DrawGrid_Focused(this.Instance)

proc HandleAllocated*(this: TDrawGrid): bool =
  return DrawGrid_HandleAllocated(this.Instance)

proc InsertControl*(this: TDrawGrid, AControl: TControl) =
  DrawGrid_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TDrawGrid) =
  DrawGrid_Invalidate(this.Instance)

proc PaintTo*(this: TDrawGrid, DC: HDC, X: int32, Y: int32) =
  DrawGrid_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TDrawGrid, AControl: TControl) =
  DrawGrid_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TDrawGrid) =
  DrawGrid_Realign(this.Instance)

proc Repaint*(this: TDrawGrid) =
  DrawGrid_Repaint(this.Instance)

proc ScaleBy*(this: TDrawGrid, M: int32, D: int32) =
  DrawGrid_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TDrawGrid, DeltaX: int32, DeltaY: int32) =
  DrawGrid_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TDrawGrid, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  DrawGrid_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TDrawGrid) =
  DrawGrid_SetFocus(this.Instance)

proc Update*(this: TDrawGrid) =
  DrawGrid_Update(this.Instance)

proc BringToFront*(this: TDrawGrid) =
  DrawGrid_BringToFront(this.Instance)

proc ClientToScreen*(this: TDrawGrid, Point: TPoint): TPoint =
  var ps1 = Point
  DrawGrid_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TDrawGrid, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  DrawGrid_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TDrawGrid): bool =
  return DrawGrid_Dragging(this.Instance)

proc HasParent*(this: TDrawGrid): bool =
  return DrawGrid_HasParent(this.Instance)

proc Hide*(this: TDrawGrid) =
  DrawGrid_Hide(this.Instance)

proc Perform*(this: TDrawGrid, Msg: uint32, WParam: uint, LParam: int): int =
  return DrawGrid_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TDrawGrid) =
  DrawGrid_Refresh(this.Instance)

proc ScreenToClient*(this: TDrawGrid, Point: TPoint): TPoint =
  var ps1 = Point
  DrawGrid_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TDrawGrid, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  DrawGrid_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TDrawGrid) =
  DrawGrid_SendToBack(this.Instance)

proc Show*(this: TDrawGrid) =
  DrawGrid_Show(this.Instance)

proc GetTextBuf*(this: TDrawGrid, Buffer: string, BufSize: int32): int32 =
  return DrawGrid_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TDrawGrid): int32 =
  return DrawGrid_GetTextLen(this.Instance)

proc SetTextBuf*(this: TDrawGrid, Buffer: string) =
  DrawGrid_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TDrawGrid, AName: string): TComponent =
  return DrawGrid_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TDrawGrid): string =
  return $DrawGrid_GetNamePath(this.Instance)

proc Assign*(this: TDrawGrid, Source: TObject) =
  DrawGrid_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TDrawGrid): TClass =
  return DrawGrid_ClassType(this.Instance)

proc ClassName*(this: TDrawGrid): string =
  return $DrawGrid_ClassName(this.Instance)

proc InstanceSize*(this: TDrawGrid): int32 =
  return DrawGrid_InstanceSize(this.Instance)

proc InheritsFrom*(this: TDrawGrid, AClass: TClass): bool =
  return DrawGrid_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TDrawGrid, Obj: TObject): bool =
  return DrawGrid_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TDrawGrid): int32 =
  return DrawGrid_GetHashCode(this.Instance)

proc ToString*(this: TDrawGrid): string =
  return $DrawGrid_ToString(this.Instance)

proc AnchorToNeighbour*(this: TDrawGrid, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  DrawGrid_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TDrawGrid, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  DrawGrid_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TDrawGrid, ASibling: TControl) =
  DrawGrid_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TDrawGrid, ASibling: TControl) =
  DrawGrid_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TDrawGrid, ASide: TAnchorKind, ASibling: TControl) =
  DrawGrid_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TDrawGrid, ATheAlign: TAlign, ASpace: int32) =
  DrawGrid_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TDrawGrid, ASpace: int32) =
  DrawGrid_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TDrawGrid, ASize: int32): int32 =
  return DrawGrid_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TDrawGrid, ASize: int32): int32 =
  return DrawGrid_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TDrawGrid, ASize: int32): int32 =
  return DrawGrid_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TDrawGrid, ASize: int32): int32 =
  return DrawGrid_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TDrawGrid, ASize: int32): int32 =
  return DrawGrid_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TDrawGrid, ASize: int32): int32 =
  return DrawGrid_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TDrawGrid, ASize: int32): int32 =
  return DrawGrid_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TDrawGrid, ASize: int32): int32 =
  return DrawGrid_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TDrawGrid, ASize: int32): int32 =
  return DrawGrid_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TDrawGrid, ASize: int32): int32 =
  return DrawGrid_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TDrawGrid, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  DrawGrid_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TDrawGrid, ADesignTimePPI: int32) =
  DrawGrid_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TDrawGrid, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  DrawGrid_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc `OnColRowMoved=`*(this: TDrawGrid, AEventId: TGridOperationEvent)  =
  DrawGrid_SetOnColRowMoved(this.Instance, AEventId)

proc Align*(this: TDrawGrid): TAlign  =
  return DrawGrid_GetAlign(this.Instance)

proc `Align=`*(this: TDrawGrid, AValue: TAlign)  =
  DrawGrid_SetAlign(this.Instance, AValue)

proc Anchors*(this: TDrawGrid): TAnchors  =
  return DrawGrid_GetAnchors(this.Instance)

proc `Anchors=`*(this: TDrawGrid, AValue: TAnchors)  =
  DrawGrid_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TDrawGrid): TBiDiMode  =
  return DrawGrid_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TDrawGrid, AValue: TBiDiMode)  =
  DrawGrid_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TDrawGrid): TBorderStyle  =
  return DrawGrid_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TDrawGrid, AValue: TBorderStyle)  =
  DrawGrid_SetBorderStyle(this.Instance, AValue)

proc Color*(this: TDrawGrid): TColor  =
  return DrawGrid_GetColor(this.Instance)

proc `Color=`*(this: TDrawGrid, AValue: TColor)  =
  DrawGrid_SetColor(this.Instance, AValue)

proc ColCount*(this: TDrawGrid): int32  =
  return DrawGrid_GetColCount(this.Instance)

proc `ColCount=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetColCount(this.Instance, AValue)

proc Constraints*(this: TDrawGrid): TSizeConstraints  =
  return DrawGrid_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TDrawGrid, AValue: TSizeConstraints)  =
  DrawGrid_SetConstraints(this.Instance, CheckPtr(AValue))

proc DefaultColWidth*(this: TDrawGrid): int32  =
  return DrawGrid_GetDefaultColWidth(this.Instance)

proc `DefaultColWidth=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetDefaultColWidth(this.Instance, AValue)

proc DefaultRowHeight*(this: TDrawGrid): int32  =
  return DrawGrid_GetDefaultRowHeight(this.Instance)

proc `DefaultRowHeight=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetDefaultRowHeight(this.Instance, AValue)

proc DefaultDrawing*(this: TDrawGrid): bool  =
  return DrawGrid_GetDefaultDrawing(this.Instance)

proc `DefaultDrawing=`*(this: TDrawGrid, AValue: bool)  =
  DrawGrid_SetDefaultDrawing(this.Instance, AValue)

proc DoubleBuffered*(this: TDrawGrid): bool  =
  return DrawGrid_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TDrawGrid, AValue: bool)  =
  DrawGrid_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TDrawGrid): TCursor  =
  return DrawGrid_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TDrawGrid, AValue: TCursor)  =
  DrawGrid_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TDrawGrid): TDragKind  =
  return DrawGrid_GetDragKind(this.Instance)

proc `DragKind=`*(this: TDrawGrid, AValue: TDragKind)  =
  DrawGrid_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TDrawGrid): TDragMode  =
  return DrawGrid_GetDragMode(this.Instance)

proc `DragMode=`*(this: TDrawGrid, AValue: TDragMode)  =
  DrawGrid_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TDrawGrid): bool  =
  return DrawGrid_GetEnabled(this.Instance)

proc `Enabled=`*(this: TDrawGrid, AValue: bool)  =
  DrawGrid_SetEnabled(this.Instance, AValue)

proc FixedColor*(this: TDrawGrid): TColor  =
  return DrawGrid_GetFixedColor(this.Instance)

proc `FixedColor=`*(this: TDrawGrid, AValue: TColor)  =
  DrawGrid_SetFixedColor(this.Instance, AValue)

proc FixedCols*(this: TDrawGrid): int32  =
  return DrawGrid_GetFixedCols(this.Instance)

proc `FixedCols=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetFixedCols(this.Instance, AValue)

proc RowCount*(this: TDrawGrid): int32  =
  return DrawGrid_GetRowCount(this.Instance)

proc `RowCount=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetRowCount(this.Instance, AValue)

proc FixedRows*(this: TDrawGrid): int32  =
  return DrawGrid_GetFixedRows(this.Instance)

proc `FixedRows=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetFixedRows(this.Instance, AValue)

proc Font*(this: TDrawGrid): TFont  =
  return DrawGrid_GetFont(this.Instance).AsFont

proc `Font=`*(this: TDrawGrid, AValue: TFont)  =
  DrawGrid_SetFont(this.Instance, CheckPtr(AValue))

proc GridLineWidth*(this: TDrawGrid): int32  =
  return DrawGrid_GetGridLineWidth(this.Instance)

proc `GridLineWidth=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetGridLineWidth(this.Instance, AValue)

proc Options*(this: TDrawGrid): TGridOptions  =
  return DrawGrid_GetOptions(this.Instance)

proc `Options=`*(this: TDrawGrid, AValue: TGridOptions)  =
  DrawGrid_SetOptions(this.Instance, AValue)

proc ParentColor*(this: TDrawGrid): bool  =
  return DrawGrid_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TDrawGrid, AValue: bool)  =
  DrawGrid_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TDrawGrid): bool  =
  return DrawGrid_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TDrawGrid, AValue: bool)  =
  DrawGrid_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TDrawGrid): bool  =
  return DrawGrid_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TDrawGrid, AValue: bool)  =
  DrawGrid_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TDrawGrid): bool  =
  return DrawGrid_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TDrawGrid, AValue: bool)  =
  DrawGrid_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TDrawGrid): TPopupMenu  =
  return DrawGrid_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TDrawGrid, AValue: TPopupMenu)  =
  DrawGrid_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ScrollBars*(this: TDrawGrid): TScrollStyle  =
  return DrawGrid_GetScrollBars(this.Instance)

proc `ScrollBars=`*(this: TDrawGrid, AValue: TScrollStyle)  =
  DrawGrid_SetScrollBars(this.Instance, AValue)

proc ShowHint*(this: TDrawGrid): bool  =
  return DrawGrid_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TDrawGrid, AValue: bool)  =
  DrawGrid_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TDrawGrid): TTabOrder  =
  return DrawGrid_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TDrawGrid, AValue: TTabOrder)  =
  DrawGrid_SetTabOrder(this.Instance, AValue)

proc Visible*(this: TDrawGrid): bool  =
  return DrawGrid_GetVisible(this.Instance)

proc `Visible=`*(this: TDrawGrid, AValue: bool)  =
  DrawGrid_SetVisible(this.Instance, AValue)

proc VisibleColCount*(this: TDrawGrid): int32  =
  return DrawGrid_GetVisibleColCount(this.Instance)

proc VisibleRowCount*(this: TDrawGrid): int32  =
  return DrawGrid_GetVisibleRowCount(this.Instance)

proc `OnClick=`*(this: TDrawGrid, AEventId: TNotifyEvent)  =
  DrawGrid_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TDrawGrid, AEventId: TContextPopupEvent)  =
  DrawGrid_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TDrawGrid, AEventId: TNotifyEvent)  =
  DrawGrid_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TDrawGrid, AEventId: TDragDropEvent)  =
  DrawGrid_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TDrawGrid, AEventId: TDragOverEvent)  =
  DrawGrid_SetOnDragOver(this.Instance, AEventId)

proc `OnDrawCell=`*(this: TDrawGrid, AEventId: TDrawCellEvent)  =
  DrawGrid_SetOnDrawCell(this.Instance, AEventId)

proc `OnEndDock=`*(this: TDrawGrid, AEventId: TEndDragEvent)  =
  DrawGrid_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TDrawGrid, AEventId: TEndDragEvent)  =
  DrawGrid_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TDrawGrid, AEventId: TNotifyEvent)  =
  DrawGrid_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TDrawGrid, AEventId: TNotifyEvent)  =
  DrawGrid_SetOnExit(this.Instance, AEventId)

proc `OnGetEditMask=`*(this: TDrawGrid, AEventId: TGetEditEvent)  =
  DrawGrid_SetOnGetEditMask(this.Instance, AEventId)

proc `OnGetEditText=`*(this: TDrawGrid, AEventId: TGetEditEvent)  =
  DrawGrid_SetOnGetEditText(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TDrawGrid, AEventId: TKeyEvent)  =
  DrawGrid_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TDrawGrid, AEventId: TKeyPressEvent)  =
  DrawGrid_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TDrawGrid, AEventId: TKeyEvent)  =
  DrawGrid_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TDrawGrid, AEventId: TMouseEvent)  =
  DrawGrid_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TDrawGrid, AEventId: TNotifyEvent)  =
  DrawGrid_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TDrawGrid, AEventId: TNotifyEvent)  =
  DrawGrid_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TDrawGrid, AEventId: TMouseMoveEvent)  =
  DrawGrid_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TDrawGrid, AEventId: TMouseEvent)  =
  DrawGrid_SetOnMouseUp(this.Instance, AEventId)

proc `OnMouseWheelDown=`*(this: TDrawGrid, AEventId: TMouseWheelUpDownEvent)  =
  DrawGrid_SetOnMouseWheelDown(this.Instance, AEventId)

proc `OnMouseWheelUp=`*(this: TDrawGrid, AEventId: TMouseWheelUpDownEvent)  =
  DrawGrid_SetOnMouseWheelUp(this.Instance, AEventId)

proc `OnSelectCell=`*(this: TDrawGrid, AEventId: TSelectCellEvent)  =
  DrawGrid_SetOnSelectCell(this.Instance, AEventId)

proc `OnSetEditText=`*(this: TDrawGrid, AEventId: TSetEditEvent)  =
  DrawGrid_SetOnSetEditText(this.Instance, AEventId)

proc `OnStartDock=`*(this: TDrawGrid, AEventId: TStartDockEvent)  =
  DrawGrid_SetOnStartDock(this.Instance, AEventId)

proc `OnTopLeftChanged=`*(this: TDrawGrid, AEventId: TNotifyEvent)  =
  DrawGrid_SetOnTopLeftChanged(this.Instance, AEventId)

proc Canvas*(this: TDrawGrid): TCanvas  =
  return DrawGrid_GetCanvas(this.Instance).AsCanvas

proc Col*(this: TDrawGrid): int32  =
  return DrawGrid_GetCol(this.Instance)

proc `Col=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetCol(this.Instance, AValue)

proc EditorMode*(this: TDrawGrid): bool  =
  return DrawGrid_GetEditorMode(this.Instance)

proc `EditorMode=`*(this: TDrawGrid, AValue: bool)  =
  DrawGrid_SetEditorMode(this.Instance, AValue)

proc GridHeight*(this: TDrawGrid): int32  =
  return DrawGrid_GetGridHeight(this.Instance)

proc GridWidth*(this: TDrawGrid): int32  =
  return DrawGrid_GetGridWidth(this.Instance)

proc LeftCol*(this: TDrawGrid): int32  =
  return DrawGrid_GetLeftCol(this.Instance)

proc `LeftCol=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetLeftCol(this.Instance, AValue)

proc Selection*(this: TDrawGrid): TGridRect  =
  DrawGrid_GetSelection(this.Instance, result)

proc `Selection=`*(this: TDrawGrid, AValue: TGridRect)  =
  var ps1 = AValue
  DrawGrid_SetSelection(this.Instance, ps1)

proc Row*(this: TDrawGrid): int32  =
  return DrawGrid_GetRow(this.Instance)

proc `Row=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetRow(this.Instance, AValue)

proc TopRow*(this: TDrawGrid): int32  =
  return DrawGrid_GetTopRow(this.Instance)

proc `TopRow=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetTopRow(this.Instance, AValue)

proc TabStop*(this: TDrawGrid): bool  =
  return DrawGrid_GetTabStop(this.Instance)

proc `TabStop=`*(this: TDrawGrid, AValue: bool)  =
  DrawGrid_SetTabStop(this.Instance, AValue)

proc DockClientCount*(this: TDrawGrid): int32  =
  return DrawGrid_GetDockClientCount(this.Instance)

proc DockSite*(this: TDrawGrid): bool  =
  return DrawGrid_GetDockSite(this.Instance)

proc `DockSite=`*(this: TDrawGrid, AValue: bool)  =
  DrawGrid_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TDrawGrid): bool  =
  return DrawGrid_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TDrawGrid): int32  =
  return DrawGrid_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TDrawGrid): TBrush  =
  return DrawGrid_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TDrawGrid): int32  =
  return DrawGrid_GetControlCount(this.Instance)

proc Handle*(this: TDrawGrid): HWND  =
  return DrawGrid_GetHandle(this.Instance)

proc ParentWindow*(this: TDrawGrid): HWND  =
  return DrawGrid_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TDrawGrid, AValue: HWND)  =
  DrawGrid_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TDrawGrid): bool  =
  return DrawGrid_GetShowing(this.Instance)

proc UseDockManager*(this: TDrawGrid): bool  =
  return DrawGrid_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TDrawGrid, AValue: bool)  =
  DrawGrid_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TDrawGrid): TAction  =
  return DrawGrid_GetAction(this.Instance).AsAction

proc `Action=`*(this: TDrawGrid, AValue: TAction)  =
  DrawGrid_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TDrawGrid): TRect  =
  DrawGrid_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TDrawGrid, AValue: TRect)  =
  var ps1 = AValue
  DrawGrid_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TDrawGrid): int32  =
  return DrawGrid_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TDrawGrid): TPoint  =
  DrawGrid_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TDrawGrid): TRect  =
  DrawGrid_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TDrawGrid): int32  =
  return DrawGrid_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TDrawGrid): TControlState  =
  return DrawGrid_GetControlState(this.Instance)

proc `ControlState=`*(this: TDrawGrid, AValue: TControlState)  =
  DrawGrid_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TDrawGrid): TControlStyle  =
  return DrawGrid_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TDrawGrid, AValue: TControlStyle)  =
  DrawGrid_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TDrawGrid): bool  =
  return DrawGrid_GetFloating(this.Instance)

proc Parent*(this: TDrawGrid): TWinControl  =
  return DrawGrid_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TDrawGrid, AValue: TWinControl)  =
  DrawGrid_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TDrawGrid): int32  =
  return DrawGrid_GetLeft(this.Instance)

proc `Left=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetLeft(this.Instance, AValue)

proc Top*(this: TDrawGrid): int32  =
  return DrawGrid_GetTop(this.Instance)

proc `Top=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetTop(this.Instance, AValue)

proc Width*(this: TDrawGrid): int32  =
  return DrawGrid_GetWidth(this.Instance)

proc `Width=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetWidth(this.Instance, AValue)

proc Height*(this: TDrawGrid): int32  =
  return DrawGrid_GetHeight(this.Instance)

proc `Height=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetHeight(this.Instance, AValue)

proc Cursor*(this: TDrawGrid): TCursor  =
  return DrawGrid_GetCursor(this.Instance)

proc `Cursor=`*(this: TDrawGrid, AValue: TCursor)  =
  DrawGrid_SetCursor(this.Instance, AValue)

proc Hint*(this: TDrawGrid): string  =
  return $DrawGrid_GetHint(this.Instance)

proc `Hint=`*(this: TDrawGrid, AValue: string)  =
  DrawGrid_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TDrawGrid): int32  =
  return DrawGrid_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TDrawGrid): int32  =
  return DrawGrid_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TDrawGrid, AValue: int32)  =
  DrawGrid_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TDrawGrid): TComponent  =
  return DrawGrid_GetOwner(this.Instance).AsComponent

proc Name*(this: TDrawGrid): string  =
  return $DrawGrid_GetName(this.Instance)

proc `Name=`*(this: TDrawGrid, AValue: string)  =
  DrawGrid_SetName(this.Instance, AValue)

proc Tag*(this: TDrawGrid): int  =
  return DrawGrid_GetTag(this.Instance)

proc `Tag=`*(this: TDrawGrid, AValue: int)  =
  DrawGrid_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TDrawGrid): TAnchorSide  =
  return DrawGrid_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TDrawGrid, AValue: TAnchorSide)  =
  DrawGrid_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TDrawGrid): TAnchorSide  =
  return DrawGrid_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TDrawGrid, AValue: TAnchorSide)  =
  DrawGrid_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TDrawGrid): TAnchorSide  =
  return DrawGrid_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TDrawGrid, AValue: TAnchorSide)  =
  DrawGrid_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TDrawGrid): TAnchorSide  =
  return DrawGrid_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TDrawGrid, AValue: TAnchorSide)  =
  DrawGrid_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TDrawGrid): TControlChildSizing  =
  return DrawGrid_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TDrawGrid, AValue: TControlChildSizing)  =
  DrawGrid_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TDrawGrid): TControlBorderSpacing  =
  return DrawGrid_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TDrawGrid, AValue: TControlBorderSpacing)  =
  DrawGrid_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc ColWidths*(this: TDrawGrid, Index: int32): int32  =
  return DrawGrid_GetColWidths(this.Instance, Index)

proc `ColWidths=`*(this: TDrawGrid, Index: int32, AValue: int32)  =
  DrawGrid_SetColWidths(this.Instance, Index, AValue)

proc RowHeights*(this: TDrawGrid, Index: int32): int32  =
  return DrawGrid_GetRowHeights(this.Instance, Index)

proc `RowHeights=`*(this: TDrawGrid, Index: int32, AValue: int32)  =
  DrawGrid_SetRowHeights(this.Instance, Index, AValue)

proc DockClients*(this: TDrawGrid, Index: int32): TControl  =
  return DrawGrid_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TDrawGrid, Index: int32): TControl  =
  return DrawGrid_GetControls(this.Instance, Index).AsControl

proc Components*(this: TDrawGrid, AIndex: int32): TComponent  =
  return DrawGrid_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TDrawGrid, AKind: TAnchorKind): TAnchorSide  =
  return DrawGrid_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TDrawGridClass*(): TClass = DrawGrid_StaticClassType()


#------------------------- TValueListEditor -------------------------

proc Free*(this: TValueListEditor) = defaultFree: ValueListEditor_Free

proc NewValueListEditor*(AOwner: TComponent): TValueListEditor =
  new(result)
  result.Instance = ValueListEditor_Create(CheckPtr(AOwner))

proc DeleteRow*(this: TValueListEditor, ARow: int32)  =
  ValueListEditor_DeleteRow(this.Instance, ARow)

proc Refresh*(this: TValueListEditor) =
  ValueListEditor_Refresh(this.Instance)

proc CellRect*(this: TValueListEditor, ACol: int32, ARow: int32): TRect  =
  ValueListEditor_CellRect(this.Instance, ACol, ARow, result)

proc MouseToCell*(this: TValueListEditor, X: int32, Y: int32, ACol: var int32, ARow: var int32)  =
  ValueListEditor_MouseToCell(this.Instance, X, Y, ACol, ARow)

proc MouseCoord*(this: TValueListEditor, X: int32, Y: int32): TGridCoord  =
  ValueListEditor_MouseCoord(this.Instance, X, Y, result)

proc CanFocus*(this: TValueListEditor): bool =
  return ValueListEditor_CanFocus(this.Instance)

proc ContainsControl*(this: TValueListEditor, Control: TControl): bool =
  return ValueListEditor_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TValueListEditor, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return ValueListEditor_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TValueListEditor) =
  ValueListEditor_DisableAlign(this.Instance)

proc EnableAlign*(this: TValueListEditor) =
  ValueListEditor_EnableAlign(this.Instance)

proc FindChildControl*(this: TValueListEditor, ControlName: string): TControl =
  return ValueListEditor_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TValueListEditor, AllLevels: bool) =
  ValueListEditor_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TValueListEditor): bool =
  return ValueListEditor_Focused(this.Instance)

proc HandleAllocated*(this: TValueListEditor): bool =
  return ValueListEditor_HandleAllocated(this.Instance)

proc InsertControl*(this: TValueListEditor, AControl: TControl) =
  ValueListEditor_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TValueListEditor) =
  ValueListEditor_Invalidate(this.Instance)

proc PaintTo*(this: TValueListEditor, DC: HDC, X: int32, Y: int32) =
  ValueListEditor_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TValueListEditor, AControl: TControl) =
  ValueListEditor_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TValueListEditor) =
  ValueListEditor_Realign(this.Instance)

proc Repaint*(this: TValueListEditor) =
  ValueListEditor_Repaint(this.Instance)

proc ScaleBy*(this: TValueListEditor, M: int32, D: int32) =
  ValueListEditor_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TValueListEditor, DeltaX: int32, DeltaY: int32) =
  ValueListEditor_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TValueListEditor, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ValueListEditor_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TValueListEditor) =
  ValueListEditor_SetFocus(this.Instance)

proc Update*(this: TValueListEditor) =
  ValueListEditor_Update(this.Instance)

proc BringToFront*(this: TValueListEditor) =
  ValueListEditor_BringToFront(this.Instance)

proc ClientToScreen*(this: TValueListEditor, Point: TPoint): TPoint =
  var ps1 = Point
  ValueListEditor_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TValueListEditor, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ValueListEditor_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TValueListEditor): bool =
  return ValueListEditor_Dragging(this.Instance)

proc HasParent*(this: TValueListEditor): bool =
  return ValueListEditor_HasParent(this.Instance)

proc Hide*(this: TValueListEditor) =
  ValueListEditor_Hide(this.Instance)

proc Perform*(this: TValueListEditor, Msg: uint32, WParam: uint, LParam: int): int =
  return ValueListEditor_Perform(this.Instance, Msg, WParam, LParam)

proc ScreenToClient*(this: TValueListEditor, Point: TPoint): TPoint =
  var ps1 = Point
  ValueListEditor_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TValueListEditor, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ValueListEditor_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TValueListEditor) =
  ValueListEditor_SendToBack(this.Instance)

proc Show*(this: TValueListEditor) =
  ValueListEditor_Show(this.Instance)

proc GetTextBuf*(this: TValueListEditor, Buffer: string, BufSize: int32): int32 =
  return ValueListEditor_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TValueListEditor): int32 =
  return ValueListEditor_GetTextLen(this.Instance)

proc SetTextBuf*(this: TValueListEditor, Buffer: string) =
  ValueListEditor_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TValueListEditor, AName: string): TComponent =
  return ValueListEditor_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TValueListEditor): string =
  return $ValueListEditor_GetNamePath(this.Instance)

proc Assign*(this: TValueListEditor, Source: TObject) =
  ValueListEditor_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TValueListEditor): TClass =
  return ValueListEditor_ClassType(this.Instance)

proc ClassName*(this: TValueListEditor): string =
  return $ValueListEditor_ClassName(this.Instance)

proc InstanceSize*(this: TValueListEditor): int32 =
  return ValueListEditor_InstanceSize(this.Instance)

proc InheritsFrom*(this: TValueListEditor, AClass: TClass): bool =
  return ValueListEditor_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TValueListEditor, Obj: TObject): bool =
  return ValueListEditor_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TValueListEditor): int32 =
  return ValueListEditor_GetHashCode(this.Instance)

proc ToString*(this: TValueListEditor): string =
  return $ValueListEditor_ToString(this.Instance)

proc AnchorToNeighbour*(this: TValueListEditor, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ValueListEditor_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TValueListEditor, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ValueListEditor_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TValueListEditor, ASibling: TControl) =
  ValueListEditor_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TValueListEditor, ASibling: TControl) =
  ValueListEditor_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TValueListEditor, ASide: TAnchorKind, ASibling: TControl) =
  ValueListEditor_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TValueListEditor, ATheAlign: TAlign, ASpace: int32) =
  ValueListEditor_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TValueListEditor, ASpace: int32) =
  ValueListEditor_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TValueListEditor, ASize: int32): int32 =
  return ValueListEditor_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TValueListEditor, ASize: int32): int32 =
  return ValueListEditor_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TValueListEditor, ASize: int32): int32 =
  return ValueListEditor_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TValueListEditor, ASize: int32): int32 =
  return ValueListEditor_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TValueListEditor, ASize: int32): int32 =
  return ValueListEditor_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TValueListEditor, ASize: int32): int32 =
  return ValueListEditor_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TValueListEditor, ASize: int32): int32 =
  return ValueListEditor_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TValueListEditor, ASize: int32): int32 =
  return ValueListEditor_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TValueListEditor, ASize: int32): int32 =
  return ValueListEditor_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TValueListEditor, ASize: int32): int32 =
  return ValueListEditor_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TValueListEditor, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ValueListEditor_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TValueListEditor, ADesignTimePPI: int32) =
  ValueListEditor_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TValueListEditor, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ValueListEditor_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc ColCount*(this: TValueListEditor): int32  =
  return ValueListEditor_GetColCount(this.Instance)

proc `ColCount=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetColCount(this.Instance, AValue)

proc RowCount*(this: TValueListEditor): int32  =
  return ValueListEditor_GetRowCount(this.Instance)

proc VisibleColCount*(this: TValueListEditor): int32  =
  return ValueListEditor_GetVisibleColCount(this.Instance)

proc VisibleRowCount*(this: TValueListEditor): int32  =
  return ValueListEditor_GetVisibleRowCount(this.Instance)

proc Align*(this: TValueListEditor): TAlign  =
  return ValueListEditor_GetAlign(this.Instance)

proc `Align=`*(this: TValueListEditor, AValue: TAlign)  =
  ValueListEditor_SetAlign(this.Instance, AValue)

proc Anchors*(this: TValueListEditor): TAnchors  =
  return ValueListEditor_GetAnchors(this.Instance)

proc `Anchors=`*(this: TValueListEditor, AValue: TAnchors)  =
  ValueListEditor_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TValueListEditor): TBiDiMode  =
  return ValueListEditor_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TValueListEditor, AValue: TBiDiMode)  =
  ValueListEditor_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TValueListEditor): TBorderStyle  =
  return ValueListEditor_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TValueListEditor, AValue: TBorderStyle)  =
  ValueListEditor_SetBorderStyle(this.Instance, AValue)

proc Color*(this: TValueListEditor): TColor  =
  return ValueListEditor_GetColor(this.Instance)

proc `Color=`*(this: TValueListEditor, AValue: TColor)  =
  ValueListEditor_SetColor(this.Instance, AValue)

proc Constraints*(this: TValueListEditor): TSizeConstraints  =
  return ValueListEditor_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TValueListEditor, AValue: TSizeConstraints)  =
  ValueListEditor_SetConstraints(this.Instance, CheckPtr(AValue))

proc DefaultColWidth*(this: TValueListEditor): int32  =
  return ValueListEditor_GetDefaultColWidth(this.Instance)

proc `DefaultColWidth=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetDefaultColWidth(this.Instance, AValue)

proc DefaultDrawing*(this: TValueListEditor): bool  =
  return ValueListEditor_GetDefaultDrawing(this.Instance)

proc `DefaultDrawing=`*(this: TValueListEditor, AValue: bool)  =
  ValueListEditor_SetDefaultDrawing(this.Instance, AValue)

proc DefaultRowHeight*(this: TValueListEditor): int32  =
  return ValueListEditor_GetDefaultRowHeight(this.Instance)

proc `DefaultRowHeight=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetDefaultRowHeight(this.Instance, AValue)

proc DoubleBuffered*(this: TValueListEditor): bool  =
  return ValueListEditor_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TValueListEditor, AValue: bool)  =
  ValueListEditor_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TValueListEditor): TCursor  =
  return ValueListEditor_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TValueListEditor, AValue: TCursor)  =
  ValueListEditor_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TValueListEditor): TDragKind  =
  return ValueListEditor_GetDragKind(this.Instance)

proc `DragKind=`*(this: TValueListEditor, AValue: TDragKind)  =
  ValueListEditor_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TValueListEditor): TDragMode  =
  return ValueListEditor_GetDragMode(this.Instance)

proc `DragMode=`*(this: TValueListEditor, AValue: TDragMode)  =
  ValueListEditor_SetDragMode(this.Instance, AValue)

proc DropDownRows*(this: TValueListEditor): int32  =
  return ValueListEditor_GetDropDownRows(this.Instance)

proc `DropDownRows=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetDropDownRows(this.Instance, AValue)

proc Enabled*(this: TValueListEditor): bool  =
  return ValueListEditor_GetEnabled(this.Instance)

proc `Enabled=`*(this: TValueListEditor, AValue: bool)  =
  ValueListEditor_SetEnabled(this.Instance, AValue)

proc FixedColor*(this: TValueListEditor): TColor  =
  return ValueListEditor_GetFixedColor(this.Instance)

proc `FixedColor=`*(this: TValueListEditor, AValue: TColor)  =
  ValueListEditor_SetFixedColor(this.Instance, AValue)

proc FixedCols*(this: TValueListEditor): int32  =
  return ValueListEditor_GetFixedCols(this.Instance)

proc `FixedCols=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetFixedCols(this.Instance, AValue)

proc Font*(this: TValueListEditor): TFont  =
  return ValueListEditor_GetFont(this.Instance).AsFont

proc `Font=`*(this: TValueListEditor, AValue: TFont)  =
  ValueListEditor_SetFont(this.Instance, CheckPtr(AValue))

proc GridLineWidth*(this: TValueListEditor): int32  =
  return ValueListEditor_GetGridLineWidth(this.Instance)

proc `GridLineWidth=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetGridLineWidth(this.Instance, AValue)

proc Options*(this: TValueListEditor): TGridOptions  =
  return ValueListEditor_GetOptions(this.Instance)

proc `Options=`*(this: TValueListEditor, AValue: TGridOptions)  =
  ValueListEditor_SetOptions(this.Instance, AValue)

proc ParentColor*(this: TValueListEditor): bool  =
  return ValueListEditor_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TValueListEditor, AValue: bool)  =
  ValueListEditor_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TValueListEditor): bool  =
  return ValueListEditor_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TValueListEditor, AValue: bool)  =
  ValueListEditor_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TValueListEditor): bool  =
  return ValueListEditor_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TValueListEditor, AValue: bool)  =
  ValueListEditor_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TValueListEditor): bool  =
  return ValueListEditor_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TValueListEditor, AValue: bool)  =
  ValueListEditor_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TValueListEditor): TPopupMenu  =
  return ValueListEditor_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TValueListEditor, AValue: TPopupMenu)  =
  ValueListEditor_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ScrollBars*(this: TValueListEditor): TScrollStyle  =
  return ValueListEditor_GetScrollBars(this.Instance)

proc `ScrollBars=`*(this: TValueListEditor, AValue: TScrollStyle)  =
  ValueListEditor_SetScrollBars(this.Instance, AValue)

proc ShowHint*(this: TValueListEditor): bool  =
  return ValueListEditor_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TValueListEditor, AValue: bool)  =
  ValueListEditor_SetShowHint(this.Instance, AValue)

proc Strings*(this: TValueListEditor): TStrings  =
  return ValueListEditor_GetStrings(this.Instance).AsStrings

proc `Strings=`*(this: TValueListEditor, AValue: TStrings)  =
  ValueListEditor_SetStrings(this.Instance, CheckPtr(AValue))

proc TabOrder*(this: TValueListEditor): TTabOrder  =
  return ValueListEditor_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TValueListEditor, AValue: TTabOrder)  =
  ValueListEditor_SetTabOrder(this.Instance, AValue)

proc Visible*(this: TValueListEditor): bool  =
  return ValueListEditor_GetVisible(this.Instance)

proc `Visible=`*(this: TValueListEditor, AValue: bool)  =
  ValueListEditor_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TValueListEditor, AEventId: TNotifyEvent)  =
  ValueListEditor_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TValueListEditor, AEventId: TContextPopupEvent)  =
  ValueListEditor_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TValueListEditor, AEventId: TNotifyEvent)  =
  ValueListEditor_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TValueListEditor, AEventId: TDragDropEvent)  =
  ValueListEditor_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TValueListEditor, AEventId: TDragOverEvent)  =
  ValueListEditor_SetOnDragOver(this.Instance, AEventId)

proc `OnDrawCell=`*(this: TValueListEditor, AEventId: TDrawCellEvent)  =
  ValueListEditor_SetOnDrawCell(this.Instance, AEventId)

proc `OnEndDock=`*(this: TValueListEditor, AEventId: TEndDragEvent)  =
  ValueListEditor_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TValueListEditor, AEventId: TEndDragEvent)  =
  ValueListEditor_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TValueListEditor, AEventId: TNotifyEvent)  =
  ValueListEditor_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TValueListEditor, AEventId: TNotifyEvent)  =
  ValueListEditor_SetOnExit(this.Instance, AEventId)

proc `OnGetEditMask=`*(this: TValueListEditor, AEventId: TGetEditEvent)  =
  ValueListEditor_SetOnGetEditMask(this.Instance, AEventId)

proc `OnGetEditText=`*(this: TValueListEditor, AEventId: TGetEditEvent)  =
  ValueListEditor_SetOnGetEditText(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TValueListEditor, AEventId: TKeyEvent)  =
  ValueListEditor_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TValueListEditor, AEventId: TKeyPressEvent)  =
  ValueListEditor_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TValueListEditor, AEventId: TKeyEvent)  =
  ValueListEditor_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TValueListEditor, AEventId: TMouseEvent)  =
  ValueListEditor_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TValueListEditor, AEventId: TNotifyEvent)  =
  ValueListEditor_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TValueListEditor, AEventId: TNotifyEvent)  =
  ValueListEditor_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TValueListEditor, AEventId: TMouseMoveEvent)  =
  ValueListEditor_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TValueListEditor, AEventId: TMouseEvent)  =
  ValueListEditor_SetOnMouseUp(this.Instance, AEventId)

proc `OnMouseWheelDown=`*(this: TValueListEditor, AEventId: TMouseWheelUpDownEvent)  =
  ValueListEditor_SetOnMouseWheelDown(this.Instance, AEventId)

proc `OnMouseWheelUp=`*(this: TValueListEditor, AEventId: TMouseWheelUpDownEvent)  =
  ValueListEditor_SetOnMouseWheelUp(this.Instance, AEventId)

proc `OnSelectCell=`*(this: TValueListEditor, AEventId: TSelectCellEvent)  =
  ValueListEditor_SetOnSelectCell(this.Instance, AEventId)

proc `OnSetEditText=`*(this: TValueListEditor, AEventId: TSetEditEvent)  =
  ValueListEditor_SetOnSetEditText(this.Instance, AEventId)

proc `OnStartDock=`*(this: TValueListEditor, AEventId: TStartDockEvent)  =
  ValueListEditor_SetOnStartDock(this.Instance, AEventId)

proc `OnTopLeftChanged=`*(this: TValueListEditor, AEventId: TNotifyEvent)  =
  ValueListEditor_SetOnTopLeftChanged(this.Instance, AEventId)

proc Canvas*(this: TValueListEditor): TCanvas  =
  return ValueListEditor_GetCanvas(this.Instance).AsCanvas

proc Col*(this: TValueListEditor): int32  =
  return ValueListEditor_GetCol(this.Instance)

proc `Col=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetCol(this.Instance, AValue)

proc EditorMode*(this: TValueListEditor): bool  =
  return ValueListEditor_GetEditorMode(this.Instance)

proc `EditorMode=`*(this: TValueListEditor, AValue: bool)  =
  ValueListEditor_SetEditorMode(this.Instance, AValue)

proc GridHeight*(this: TValueListEditor): int32  =
  return ValueListEditor_GetGridHeight(this.Instance)

proc GridWidth*(this: TValueListEditor): int32  =
  return ValueListEditor_GetGridWidth(this.Instance)

proc LeftCol*(this: TValueListEditor): int32  =
  return ValueListEditor_GetLeftCol(this.Instance)

proc `LeftCol=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetLeftCol(this.Instance, AValue)

proc Selection*(this: TValueListEditor): TGridRect  =
  ValueListEditor_GetSelection(this.Instance, result)

proc `Selection=`*(this: TValueListEditor, AValue: TGridRect)  =
  var ps1 = AValue
  ValueListEditor_SetSelection(this.Instance, ps1)

proc Row*(this: TValueListEditor): int32  =
  return ValueListEditor_GetRow(this.Instance)

proc `Row=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetRow(this.Instance, AValue)

proc TopRow*(this: TValueListEditor): int32  =
  return ValueListEditor_GetTopRow(this.Instance)

proc `TopRow=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetTopRow(this.Instance, AValue)

proc TabStop*(this: TValueListEditor): bool  =
  return ValueListEditor_GetTabStop(this.Instance)

proc `TabStop=`*(this: TValueListEditor, AValue: bool)  =
  ValueListEditor_SetTabStop(this.Instance, AValue)

proc DockClientCount*(this: TValueListEditor): int32  =
  return ValueListEditor_GetDockClientCount(this.Instance)

proc DockSite*(this: TValueListEditor): bool  =
  return ValueListEditor_GetDockSite(this.Instance)

proc `DockSite=`*(this: TValueListEditor, AValue: bool)  =
  ValueListEditor_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TValueListEditor): bool  =
  return ValueListEditor_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TValueListEditor): int32  =
  return ValueListEditor_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TValueListEditor): TBrush  =
  return ValueListEditor_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TValueListEditor): int32  =
  return ValueListEditor_GetControlCount(this.Instance)

proc Handle*(this: TValueListEditor): HWND  =
  return ValueListEditor_GetHandle(this.Instance)

proc ParentWindow*(this: TValueListEditor): HWND  =
  return ValueListEditor_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TValueListEditor, AValue: HWND)  =
  ValueListEditor_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TValueListEditor): bool  =
  return ValueListEditor_GetShowing(this.Instance)

proc UseDockManager*(this: TValueListEditor): bool  =
  return ValueListEditor_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TValueListEditor, AValue: bool)  =
  ValueListEditor_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TValueListEditor): TAction  =
  return ValueListEditor_GetAction(this.Instance).AsAction

proc `Action=`*(this: TValueListEditor, AValue: TAction)  =
  ValueListEditor_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TValueListEditor): TRect  =
  ValueListEditor_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TValueListEditor, AValue: TRect)  =
  var ps1 = AValue
  ValueListEditor_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TValueListEditor): int32  =
  return ValueListEditor_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TValueListEditor): TPoint  =
  ValueListEditor_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TValueListEditor): TRect  =
  ValueListEditor_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TValueListEditor): int32  =
  return ValueListEditor_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TValueListEditor): TControlState  =
  return ValueListEditor_GetControlState(this.Instance)

proc `ControlState=`*(this: TValueListEditor, AValue: TControlState)  =
  ValueListEditor_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TValueListEditor): TControlStyle  =
  return ValueListEditor_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TValueListEditor, AValue: TControlStyle)  =
  ValueListEditor_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TValueListEditor): bool  =
  return ValueListEditor_GetFloating(this.Instance)

proc Parent*(this: TValueListEditor): TWinControl  =
  return ValueListEditor_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TValueListEditor, AValue: TWinControl)  =
  ValueListEditor_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TValueListEditor): int32  =
  return ValueListEditor_GetLeft(this.Instance)

proc `Left=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetLeft(this.Instance, AValue)

proc Top*(this: TValueListEditor): int32  =
  return ValueListEditor_GetTop(this.Instance)

proc `Top=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetTop(this.Instance, AValue)

proc Width*(this: TValueListEditor): int32  =
  return ValueListEditor_GetWidth(this.Instance)

proc `Width=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetWidth(this.Instance, AValue)

proc Height*(this: TValueListEditor): int32  =
  return ValueListEditor_GetHeight(this.Instance)

proc `Height=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetHeight(this.Instance, AValue)

proc Cursor*(this: TValueListEditor): TCursor  =
  return ValueListEditor_GetCursor(this.Instance)

proc `Cursor=`*(this: TValueListEditor, AValue: TCursor)  =
  ValueListEditor_SetCursor(this.Instance, AValue)

proc Hint*(this: TValueListEditor): string  =
  return $ValueListEditor_GetHint(this.Instance)

proc `Hint=`*(this: TValueListEditor, AValue: string)  =
  ValueListEditor_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TValueListEditor): int32  =
  return ValueListEditor_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TValueListEditor): int32  =
  return ValueListEditor_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TValueListEditor, AValue: int32)  =
  ValueListEditor_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TValueListEditor): TComponent  =
  return ValueListEditor_GetOwner(this.Instance).AsComponent

proc Name*(this: TValueListEditor): string  =
  return $ValueListEditor_GetName(this.Instance)

proc `Name=`*(this: TValueListEditor, AValue: string)  =
  ValueListEditor_SetName(this.Instance, AValue)

proc Tag*(this: TValueListEditor): int  =
  return ValueListEditor_GetTag(this.Instance)

proc `Tag=`*(this: TValueListEditor, AValue: int)  =
  ValueListEditor_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TValueListEditor): TAnchorSide  =
  return ValueListEditor_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TValueListEditor, AValue: TAnchorSide)  =
  ValueListEditor_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TValueListEditor): TAnchorSide  =
  return ValueListEditor_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TValueListEditor, AValue: TAnchorSide)  =
  ValueListEditor_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TValueListEditor): TAnchorSide  =
  return ValueListEditor_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TValueListEditor, AValue: TAnchorSide)  =
  ValueListEditor_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TValueListEditor): TAnchorSide  =
  return ValueListEditor_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TValueListEditor, AValue: TAnchorSide)  =
  ValueListEditor_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TValueListEditor): TControlChildSizing  =
  return ValueListEditor_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TValueListEditor, AValue: TControlChildSizing)  =
  ValueListEditor_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TValueListEditor): TControlBorderSpacing  =
  return ValueListEditor_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TValueListEditor, AValue: TControlBorderSpacing)  =
  ValueListEditor_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Cells*(this: TValueListEditor, ACol: int32, ARow: int32): string  =
  return $ValueListEditor_GetCells(this.Instance, ACol, ARow)

proc `Cells=`*(this: TValueListEditor, ACol: int32, ARow: int32, AValue: string)  =
  ValueListEditor_SetCells(this.Instance, ACol, ARow, AValue)

proc Values*(this: TValueListEditor, Key: string): string  =
  return $ValueListEditor_GetValues(this.Instance, Key)

proc `Values=`*(this: TValueListEditor, Key: string, AValue: string)  =
  ValueListEditor_SetValues(this.Instance, Key, AValue)

proc ColWidths*(this: TValueListEditor, Index: int32): int32  =
  return ValueListEditor_GetColWidths(this.Instance, Index)

proc `ColWidths=`*(this: TValueListEditor, Index: int32, AValue: int32)  =
  ValueListEditor_SetColWidths(this.Instance, Index, AValue)

proc RowHeights*(this: TValueListEditor, Index: int32): int32  =
  return ValueListEditor_GetRowHeights(this.Instance, Index)

proc `RowHeights=`*(this: TValueListEditor, Index: int32, AValue: int32)  =
  ValueListEditor_SetRowHeights(this.Instance, Index, AValue)

proc DockClients*(this: TValueListEditor, Index: int32): TControl  =
  return ValueListEditor_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TValueListEditor, Index: int32): TControl  =
  return ValueListEditor_GetControls(this.Instance, Index).AsControl

proc Components*(this: TValueListEditor, AIndex: int32): TComponent  =
  return ValueListEditor_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TValueListEditor, AKind: TAnchorKind): TAnchorSide  =
  return ValueListEditor_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TValueListEditorClass*(): TClass = ValueListEditor_StaticClassType()


#------------------------- THeaderControl -------------------------

proc Free*(this: THeaderControl) = defaultFree: HeaderControl_Free

proc NewHeaderControl*(AOwner: TComponent): THeaderControl =
  new(result)
  result.Instance = HeaderControl_Create(CheckPtr(AOwner))

proc FlipChildren*(this: THeaderControl, AllLevels: bool) =
  HeaderControl_FlipChildren(this.Instance, AllLevels)

proc CanFocus*(this: THeaderControl): bool =
  return HeaderControl_CanFocus(this.Instance)

proc ContainsControl*(this: THeaderControl, Control: TControl): bool =
  return HeaderControl_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: THeaderControl, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return HeaderControl_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: THeaderControl) =
  HeaderControl_DisableAlign(this.Instance)

proc EnableAlign*(this: THeaderControl) =
  HeaderControl_EnableAlign(this.Instance)

proc FindChildControl*(this: THeaderControl, ControlName: string): TControl =
  return HeaderControl_FindChildControl(this.Instance, ControlName).AsControl

proc Focused*(this: THeaderControl): bool =
  return HeaderControl_Focused(this.Instance)

proc HandleAllocated*(this: THeaderControl): bool =
  return HeaderControl_HandleAllocated(this.Instance)

proc InsertControl*(this: THeaderControl, AControl: TControl) =
  HeaderControl_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: THeaderControl) =
  HeaderControl_Invalidate(this.Instance)

proc PaintTo*(this: THeaderControl, DC: HDC, X: int32, Y: int32) =
  HeaderControl_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: THeaderControl, AControl: TControl) =
  HeaderControl_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: THeaderControl) =
  HeaderControl_Realign(this.Instance)

proc Repaint*(this: THeaderControl) =
  HeaderControl_Repaint(this.Instance)

proc ScaleBy*(this: THeaderControl, M: int32, D: int32) =
  HeaderControl_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: THeaderControl, DeltaX: int32, DeltaY: int32) =
  HeaderControl_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: THeaderControl, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  HeaderControl_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: THeaderControl) =
  HeaderControl_SetFocus(this.Instance)

proc Update*(this: THeaderControl) =
  HeaderControl_Update(this.Instance)

proc BringToFront*(this: THeaderControl) =
  HeaderControl_BringToFront(this.Instance)

proc ClientToScreen*(this: THeaderControl, Point: TPoint): TPoint =
  var ps1 = Point
  HeaderControl_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: THeaderControl, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  HeaderControl_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: THeaderControl): bool =
  return HeaderControl_Dragging(this.Instance)

proc HasParent*(this: THeaderControl): bool =
  return HeaderControl_HasParent(this.Instance)

proc Hide*(this: THeaderControl) =
  HeaderControl_Hide(this.Instance)

proc Perform*(this: THeaderControl, Msg: uint32, WParam: uint, LParam: int): int =
  return HeaderControl_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: THeaderControl) =
  HeaderControl_Refresh(this.Instance)

proc ScreenToClient*(this: THeaderControl, Point: TPoint): TPoint =
  var ps1 = Point
  HeaderControl_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: THeaderControl, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  HeaderControl_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: THeaderControl) =
  HeaderControl_SendToBack(this.Instance)

proc Show*(this: THeaderControl) =
  HeaderControl_Show(this.Instance)

proc GetTextBuf*(this: THeaderControl, Buffer: string, BufSize: int32): int32 =
  return HeaderControl_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: THeaderControl): int32 =
  return HeaderControl_GetTextLen(this.Instance)

proc SetTextBuf*(this: THeaderControl, Buffer: string) =
  HeaderControl_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: THeaderControl, AName: string): TComponent =
  return HeaderControl_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: THeaderControl): string =
  return $HeaderControl_GetNamePath(this.Instance)

proc Assign*(this: THeaderControl, Source: TObject) =
  HeaderControl_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: THeaderControl): TClass =
  return HeaderControl_ClassType(this.Instance)

proc ClassName*(this: THeaderControl): string =
  return $HeaderControl_ClassName(this.Instance)

proc InstanceSize*(this: THeaderControl): int32 =
  return HeaderControl_InstanceSize(this.Instance)

proc InheritsFrom*(this: THeaderControl, AClass: TClass): bool =
  return HeaderControl_InheritsFrom(this.Instance, AClass)

proc Equals*(this: THeaderControl, Obj: TObject): bool =
  return HeaderControl_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: THeaderControl): int32 =
  return HeaderControl_GetHashCode(this.Instance)

proc ToString*(this: THeaderControl): string =
  return $HeaderControl_ToString(this.Instance)

proc AnchorToNeighbour*(this: THeaderControl, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  HeaderControl_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: THeaderControl, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  HeaderControl_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: THeaderControl, ASibling: TControl) =
  HeaderControl_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: THeaderControl, ASibling: TControl) =
  HeaderControl_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: THeaderControl, ASide: TAnchorKind, ASibling: TControl) =
  HeaderControl_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: THeaderControl, ATheAlign: TAlign, ASpace: int32) =
  HeaderControl_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: THeaderControl, ASpace: int32) =
  HeaderControl_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: THeaderControl, ASize: int32): int32 =
  return HeaderControl_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: THeaderControl, ASize: int32): int32 =
  return HeaderControl_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: THeaderControl, ASize: int32): int32 =
  return HeaderControl_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: THeaderControl, ASize: int32): int32 =
  return HeaderControl_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: THeaderControl, ASize: int32): int32 =
  return HeaderControl_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: THeaderControl, ASize: int32): int32 =
  return HeaderControl_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: THeaderControl, ASize: int32): int32 =
  return HeaderControl_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: THeaderControl, ASize: int32): int32 =
  return HeaderControl_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: THeaderControl, ASize: int32): int32 =
  return HeaderControl_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: THeaderControl, ASize: int32): int32 =
  return HeaderControl_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: THeaderControl, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  HeaderControl_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: THeaderControl, ADesignTimePPI: int32) =
  HeaderControl_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: THeaderControl, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  HeaderControl_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: THeaderControl): TAlign  =
  return HeaderControl_GetAlign(this.Instance)

proc `Align=`*(this: THeaderControl, AValue: TAlign)  =
  HeaderControl_SetAlign(this.Instance, AValue)

proc Anchors*(this: THeaderControl): TAnchors  =
  return HeaderControl_GetAnchors(this.Instance)

proc `Anchors=`*(this: THeaderControl, AValue: TAnchors)  =
  HeaderControl_SetAnchors(this.Instance, AValue)

proc BorderWidth*(this: THeaderControl): int32  =
  return HeaderControl_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: THeaderControl, AValue: int32)  =
  HeaderControl_SetBorderWidth(this.Instance, AValue)

proc DoubleBuffered*(this: THeaderControl): bool  =
  return HeaderControl_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: THeaderControl, AValue: bool)  =
  HeaderControl_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: THeaderControl): TCursor  =
  return HeaderControl_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: THeaderControl, AValue: TCursor)  =
  HeaderControl_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: THeaderControl): TDragKind  =
  return HeaderControl_GetDragKind(this.Instance)

proc `DragKind=`*(this: THeaderControl, AValue: TDragKind)  =
  HeaderControl_SetDragKind(this.Instance, AValue)

proc DragMode*(this: THeaderControl): TDragMode  =
  return HeaderControl_GetDragMode(this.Instance)

proc `DragMode=`*(this: THeaderControl, AValue: TDragMode)  =
  HeaderControl_SetDragMode(this.Instance, AValue)

proc Enabled*(this: THeaderControl): bool  =
  return HeaderControl_GetEnabled(this.Instance)

proc `Enabled=`*(this: THeaderControl, AValue: bool)  =
  HeaderControl_SetEnabled(this.Instance, AValue)

proc Font*(this: THeaderControl): TFont  =
  return HeaderControl_GetFont(this.Instance).AsFont

proc `Font=`*(this: THeaderControl, AValue: TFont)  =
  HeaderControl_SetFont(this.Instance, CheckPtr(AValue))

proc Images*(this: THeaderControl): TImageList  =
  return HeaderControl_GetImages(this.Instance).AsImageList

proc `Images=`*(this: THeaderControl, AValue: TImageList)  =
  HeaderControl_SetImages(this.Instance, CheckPtr(AValue))

proc Constraints*(this: THeaderControl): TSizeConstraints  =
  return HeaderControl_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: THeaderControl, AValue: TSizeConstraints)  =
  HeaderControl_SetConstraints(this.Instance, CheckPtr(AValue))

proc Sections*(this: THeaderControl): THeaderSections  =
  return HeaderControl_GetSections(this.Instance).AsHeaderSections

proc `Sections=`*(this: THeaderControl, AValue: THeaderSections)  =
  HeaderControl_SetSections(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: THeaderControl): bool  =
  return HeaderControl_GetShowHint(this.Instance)

proc `ShowHint=`*(this: THeaderControl, AValue: bool)  =
  HeaderControl_SetShowHint(this.Instance, AValue)

proc ParentDoubleBuffered*(this: THeaderControl): bool  =
  return HeaderControl_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: THeaderControl, AValue: bool)  =
  HeaderControl_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: THeaderControl): bool  =
  return HeaderControl_GetParentFont(this.Instance)

proc `ParentFont=`*(this: THeaderControl, AValue: bool)  =
  HeaderControl_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: THeaderControl): bool  =
  return HeaderControl_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: THeaderControl, AValue: bool)  =
  HeaderControl_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: THeaderControl): TPopupMenu  =
  return HeaderControl_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: THeaderControl, AValue: TPopupMenu)  =
  HeaderControl_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc Visible*(this: THeaderControl): bool  =
  return HeaderControl_GetVisible(this.Instance)

proc `Visible=`*(this: THeaderControl, AValue: bool)  =
  HeaderControl_SetVisible(this.Instance, AValue)

proc `OnContextPopup=`*(this: THeaderControl, AEventId: TContextPopupEvent)  =
  HeaderControl_SetOnContextPopup(this.Instance, AEventId)

proc `OnDragDrop=`*(this: THeaderControl, AEventId: TDragDropEvent)  =
  HeaderControl_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: THeaderControl, AEventId: TDragOverEvent)  =
  HeaderControl_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDock=`*(this: THeaderControl, AEventId: TEndDragEvent)  =
  HeaderControl_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: THeaderControl, AEventId: TEndDragEvent)  =
  HeaderControl_SetOnEndDrag(this.Instance, AEventId)

proc `OnMouseDown=`*(this: THeaderControl, AEventId: TMouseEvent)  =
  HeaderControl_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: THeaderControl, AEventId: TNotifyEvent)  =
  HeaderControl_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: THeaderControl, AEventId: TNotifyEvent)  =
  HeaderControl_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: THeaderControl, AEventId: TMouseMoveEvent)  =
  HeaderControl_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: THeaderControl, AEventId: TMouseEvent)  =
  HeaderControl_SetOnMouseUp(this.Instance, AEventId)

proc `OnResize=`*(this: THeaderControl, AEventId: TNotifyEvent)  =
  HeaderControl_SetOnResize(this.Instance, AEventId)

proc `OnSectionClick=`*(this: THeaderControl, AEventId: TSectionNotifyEvent)  =
  HeaderControl_SetOnSectionClick(this.Instance, AEventId)

proc `OnSectionResize=`*(this: THeaderControl, AEventId: TSectionNotifyEvent)  =
  HeaderControl_SetOnSectionResize(this.Instance, AEventId)

proc `OnSectionTrack=`*(this: THeaderControl, AEventId: TSectionTrackEvent)  =
  HeaderControl_SetOnSectionTrack(this.Instance, AEventId)

proc `OnSectionDrag=`*(this: THeaderControl, AEventId: TSectionDragEvent)  =
  HeaderControl_SetOnSectionDrag(this.Instance, AEventId)

proc `OnSectionEndDrag=`*(this: THeaderControl, AEventId: TNotifyEvent)  =
  HeaderControl_SetOnSectionEndDrag(this.Instance, AEventId)

proc Canvas*(this: THeaderControl): TCanvas  =
  return HeaderControl_GetCanvas(this.Instance).AsCanvas

proc DockClientCount*(this: THeaderControl): int32  =
  return HeaderControl_GetDockClientCount(this.Instance)

proc DockSite*(this: THeaderControl): bool  =
  return HeaderControl_GetDockSite(this.Instance)

proc `DockSite=`*(this: THeaderControl, AValue: bool)  =
  HeaderControl_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: THeaderControl): bool  =
  return HeaderControl_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: THeaderControl): int32  =
  return HeaderControl_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: THeaderControl): TBrush  =
  return HeaderControl_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: THeaderControl): int32  =
  return HeaderControl_GetControlCount(this.Instance)

proc Handle*(this: THeaderControl): HWND  =
  return HeaderControl_GetHandle(this.Instance)

proc ParentWindow*(this: THeaderControl): HWND  =
  return HeaderControl_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: THeaderControl, AValue: HWND)  =
  HeaderControl_SetParentWindow(this.Instance, AValue)

proc Showing*(this: THeaderControl): bool  =
  return HeaderControl_GetShowing(this.Instance)

proc TabOrder*(this: THeaderControl): TTabOrder  =
  return HeaderControl_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: THeaderControl, AValue: TTabOrder)  =
  HeaderControl_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: THeaderControl): bool  =
  return HeaderControl_GetTabStop(this.Instance)

proc `TabStop=`*(this: THeaderControl, AValue: bool)  =
  HeaderControl_SetTabStop(this.Instance, AValue)

proc UseDockManager*(this: THeaderControl): bool  =
  return HeaderControl_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: THeaderControl, AValue: bool)  =
  HeaderControl_SetUseDockManager(this.Instance, AValue)

proc Action*(this: THeaderControl): TAction  =
  return HeaderControl_GetAction(this.Instance).AsAction

proc `Action=`*(this: THeaderControl, AValue: TAction)  =
  HeaderControl_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: THeaderControl): TRect  =
  HeaderControl_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: THeaderControl, AValue: TRect)  =
  var ps1 = AValue
  HeaderControl_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: THeaderControl): int32  =
  return HeaderControl_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: THeaderControl, AValue: int32)  =
  HeaderControl_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: THeaderControl): TPoint  =
  HeaderControl_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: THeaderControl): TRect  =
  HeaderControl_GetClientRect(this.Instance, result)

proc ClientWidth*(this: THeaderControl): int32  =
  return HeaderControl_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: THeaderControl, AValue: int32)  =
  HeaderControl_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: THeaderControl): TControlState  =
  return HeaderControl_GetControlState(this.Instance)

proc `ControlState=`*(this: THeaderControl, AValue: TControlState)  =
  HeaderControl_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: THeaderControl): TControlStyle  =
  return HeaderControl_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: THeaderControl, AValue: TControlStyle)  =
  HeaderControl_SetControlStyle(this.Instance, AValue)

proc Floating*(this: THeaderControl): bool  =
  return HeaderControl_GetFloating(this.Instance)

proc Parent*(this: THeaderControl): TWinControl  =
  return HeaderControl_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: THeaderControl, AValue: TWinControl)  =
  HeaderControl_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: THeaderControl): int32  =
  return HeaderControl_GetLeft(this.Instance)

proc `Left=`*(this: THeaderControl, AValue: int32)  =
  HeaderControl_SetLeft(this.Instance, AValue)

proc Top*(this: THeaderControl): int32  =
  return HeaderControl_GetTop(this.Instance)

proc `Top=`*(this: THeaderControl, AValue: int32)  =
  HeaderControl_SetTop(this.Instance, AValue)

proc Width*(this: THeaderControl): int32  =
  return HeaderControl_GetWidth(this.Instance)

proc `Width=`*(this: THeaderControl, AValue: int32)  =
  HeaderControl_SetWidth(this.Instance, AValue)

proc Height*(this: THeaderControl): int32  =
  return HeaderControl_GetHeight(this.Instance)

proc `Height=`*(this: THeaderControl, AValue: int32)  =
  HeaderControl_SetHeight(this.Instance, AValue)

proc Cursor*(this: THeaderControl): TCursor  =
  return HeaderControl_GetCursor(this.Instance)

proc `Cursor=`*(this: THeaderControl, AValue: TCursor)  =
  HeaderControl_SetCursor(this.Instance, AValue)

proc Hint*(this: THeaderControl): string  =
  return $HeaderControl_GetHint(this.Instance)

proc `Hint=`*(this: THeaderControl, AValue: string)  =
  HeaderControl_SetHint(this.Instance, AValue)

proc ComponentCount*(this: THeaderControl): int32  =
  return HeaderControl_GetComponentCount(this.Instance)

proc ComponentIndex*(this: THeaderControl): int32  =
  return HeaderControl_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: THeaderControl, AValue: int32)  =
  HeaderControl_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: THeaderControl): TComponent  =
  return HeaderControl_GetOwner(this.Instance).AsComponent

proc Name*(this: THeaderControl): string  =
  return $HeaderControl_GetName(this.Instance)

proc `Name=`*(this: THeaderControl, AValue: string)  =
  HeaderControl_SetName(this.Instance, AValue)

proc Tag*(this: THeaderControl): int  =
  return HeaderControl_GetTag(this.Instance)

proc `Tag=`*(this: THeaderControl, AValue: int)  =
  HeaderControl_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: THeaderControl): TAnchorSide  =
  return HeaderControl_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: THeaderControl, AValue: TAnchorSide)  =
  HeaderControl_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: THeaderControl): TAnchorSide  =
  return HeaderControl_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: THeaderControl, AValue: TAnchorSide)  =
  HeaderControl_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: THeaderControl): TAnchorSide  =
  return HeaderControl_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: THeaderControl, AValue: TAnchorSide)  =
  HeaderControl_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: THeaderControl): TAnchorSide  =
  return HeaderControl_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: THeaderControl, AValue: TAnchorSide)  =
  HeaderControl_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: THeaderControl): TControlChildSizing  =
  return HeaderControl_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: THeaderControl, AValue: TControlChildSizing)  =
  HeaderControl_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: THeaderControl): TControlBorderSpacing  =
  return HeaderControl_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: THeaderControl, AValue: TControlBorderSpacing)  =
  HeaderControl_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: THeaderControl, Index: int32): TControl  =
  return HeaderControl_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: THeaderControl, Index: int32): TControl  =
  return HeaderControl_GetControls(this.Instance, Index).AsControl

proc Components*(this: THeaderControl, AIndex: int32): TComponent  =
  return HeaderControl_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: THeaderControl, AKind: TAnchorKind): TAnchorSide  =
  return HeaderControl_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc THeaderControlClass*(): TClass = HeaderControl_StaticClassType()


#------------------------- THeaderSection -------------------------

proc Free*(this: THeaderSection) = defaultFree: HeaderSection_Free

proc NewHeaderSection*(AOwner: TCollection): THeaderSection =
  new(result, Free)
  result.Instance = HeaderSection_Create(CheckPtr(AOwner))

proc Assign*(this: THeaderSection, Source: TObject)  =
  HeaderSection_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: THeaderSection): string  =
  return $HeaderSection_GetNamePath(this.Instance)

proc ClassType*(this: THeaderSection): TClass =
  return HeaderSection_ClassType(this.Instance)

proc ClassName*(this: THeaderSection): string =
  return $HeaderSection_ClassName(this.Instance)

proc InstanceSize*(this: THeaderSection): int32 =
  return HeaderSection_InstanceSize(this.Instance)

proc InheritsFrom*(this: THeaderSection, AClass: TClass): bool =
  return HeaderSection_InheritsFrom(this.Instance, AClass)

proc Equals*(this: THeaderSection, Obj: TObject): bool =
  return HeaderSection_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: THeaderSection): int32 =
  return HeaderSection_GetHashCode(this.Instance)

proc ToString*(this: THeaderSection): string =
  return $HeaderSection_ToString(this.Instance)

proc Left*(this: THeaderSection): int32  =
  return HeaderSection_GetLeft(this.Instance)

proc Right*(this: THeaderSection): int32  =
  return HeaderSection_GetRight(this.Instance)

proc Alignment*(this: THeaderSection): TAlignment  =
  return HeaderSection_GetAlignment(this.Instance)

proc `Alignment=`*(this: THeaderSection, AValue: TAlignment)  =
  HeaderSection_SetAlignment(this.Instance, AValue)

proc ImageIndex*(this: THeaderSection): int32  =
  return HeaderSection_GetImageIndex(this.Instance)

proc `ImageIndex=`*(this: THeaderSection, AValue: int32)  =
  HeaderSection_SetImageIndex(this.Instance, AValue)

proc MaxWidth*(this: THeaderSection): int32  =
  return HeaderSection_GetMaxWidth(this.Instance)

proc `MaxWidth=`*(this: THeaderSection, AValue: int32)  =
  HeaderSection_SetMaxWidth(this.Instance, AValue)

proc MinWidth*(this: THeaderSection): int32  =
  return HeaderSection_GetMinWidth(this.Instance)

proc `MinWidth=`*(this: THeaderSection, AValue: int32)  =
  HeaderSection_SetMinWidth(this.Instance, AValue)

proc Text*(this: THeaderSection): string  =
  return $HeaderSection_GetText(this.Instance)

proc `Text=`*(this: THeaderSection, AValue: string)  =
  HeaderSection_SetText(this.Instance, AValue)

proc Width*(this: THeaderSection): int32  =
  return HeaderSection_GetWidth(this.Instance)

proc `Width=`*(this: THeaderSection, AValue: int32)  =
  HeaderSection_SetWidth(this.Instance, AValue)

proc Collection*(this: THeaderSection): TCollection  =
  return HeaderSection_GetCollection(this.Instance).AsCollection

proc `Collection=`*(this: THeaderSection, AValue: TCollection)  =
  HeaderSection_SetCollection(this.Instance, CheckPtr(AValue))

proc Index*(this: THeaderSection): int32  =
  return HeaderSection_GetIndex(this.Instance)

proc `Index=`*(this: THeaderSection, AValue: int32)  =
  HeaderSection_SetIndex(this.Instance, AValue)

proc DisplayName*(this: THeaderSection): string  =
  return $HeaderSection_GetDisplayName(this.Instance)

proc `DisplayName=`*(this: THeaderSection, AValue: string)  =
  HeaderSection_SetDisplayName(this.Instance, AValue)

proc THeaderSectionClass*(): TClass = HeaderSection_StaticClassType()


#------------------------- THeaderSections -------------------------

proc Free*(this: THeaderSections) = defaultFree: HeaderSections_Free

proc NewHeaderSections*(AOwner: THeaderControl): THeaderSections =
  new(result, Free)
  result.Instance = HeaderSections_Create(CheckPtr(AOwner))

proc Add*(this: THeaderSections): THeaderSection  =
  return HeaderSections_Add(this.Instance).AsHeaderSection

proc AddItem*(this: THeaderSections, Item: THeaderSection, Index: int32): THeaderSection  =
  return HeaderSections_AddItem(this.Instance, CheckPtr(Item), Index).AsHeaderSection

proc Insert*(this: THeaderSections, Index: int32): THeaderSection  =
  return HeaderSections_Insert(this.Instance, Index).AsHeaderSection

proc Owner*(this: THeaderSections): TObject  =
  return HeaderSections_Owner(this.Instance).AsObject

proc Assign*(this: THeaderSections, Source: TObject)  =
  HeaderSections_Assign(this.Instance, CheckPtr(Source))

proc BeginUpdate*(this: THeaderSections)  =
  HeaderSections_BeginUpdate(this.Instance)

proc Clear*(this: THeaderSections)  =
  HeaderSections_Clear(this.Instance)

proc Delete*(this: THeaderSections, Index: int32)  =
  HeaderSections_Delete(this.Instance, Index)

proc EndUpdate*(this: THeaderSections)  =
  HeaderSections_EndUpdate(this.Instance)

proc FindItemID*(this: THeaderSections, ID: int32): TCollectionItem  =
  return HeaderSections_FindItemID(this.Instance, ID).AsCollectionItem

proc GetNamePath*(this: THeaderSections): string  =
  return $HeaderSections_GetNamePath(this.Instance)

proc ClassType*(this: THeaderSections): TClass =
  return HeaderSections_ClassType(this.Instance)

proc ClassName*(this: THeaderSections): string =
  return $HeaderSections_ClassName(this.Instance)

proc InstanceSize*(this: THeaderSections): int32 =
  return HeaderSections_InstanceSize(this.Instance)

proc InheritsFrom*(this: THeaderSections, AClass: TClass): bool =
  return HeaderSections_InheritsFrom(this.Instance, AClass)

proc Equals*(this: THeaderSections, Obj: TObject): bool =
  return HeaderSections_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: THeaderSections): int32 =
  return HeaderSections_GetHashCode(this.Instance)

proc ToString*(this: THeaderSections): string =
  return $HeaderSections_ToString(this.Instance)

proc Count*(this: THeaderSections): int32  =
  return HeaderSections_GetCount(this.Instance)

proc Items*(this: THeaderSections, Index: int32): THeaderSection  =
  return HeaderSections_GetItems(this.Instance, Index).AsHeaderSection

proc `Items=`*(this: THeaderSections, Index: int32, AValue: THeaderSection)  =
  HeaderSections_SetItems(this.Instance, Index, CheckPtr(AValue))

proc THeaderSectionsClass*(): TClass = HeaderSections_StaticClassType()


#------------------------- TLabeledEdit -------------------------

proc Free*(this: TLabeledEdit) = defaultFree: LabeledEdit_Free

proc NewLabeledEdit*(AOwner: TComponent): TLabeledEdit =
  new(result)
  result.Instance = LabeledEdit_Create(CheckPtr(AOwner))

proc SetBounds*(this: TLabeledEdit, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  LabeledEdit_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Clear*(this: TLabeledEdit)  =
  LabeledEdit_Clear(this.Instance)

proc ClearSelection*(this: TLabeledEdit)  =
  LabeledEdit_ClearSelection(this.Instance)

proc CopyToClipboard*(this: TLabeledEdit)  =
  LabeledEdit_CopyToClipboard(this.Instance)

proc CutToClipboard*(this: TLabeledEdit)  =
  LabeledEdit_CutToClipboard(this.Instance)

proc PasteFromClipboard*(this: TLabeledEdit)  =
  LabeledEdit_PasteFromClipboard(this.Instance)

proc Undo*(this: TLabeledEdit)  =
  LabeledEdit_Undo(this.Instance)

proc SelectAll*(this: TLabeledEdit)  =
  LabeledEdit_SelectAll(this.Instance)

proc CanFocus*(this: TLabeledEdit): bool =
  return LabeledEdit_CanFocus(this.Instance)

proc ContainsControl*(this: TLabeledEdit, Control: TControl): bool =
  return LabeledEdit_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TLabeledEdit, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return LabeledEdit_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TLabeledEdit) =
  LabeledEdit_DisableAlign(this.Instance)

proc EnableAlign*(this: TLabeledEdit) =
  LabeledEdit_EnableAlign(this.Instance)

proc FindChildControl*(this: TLabeledEdit, ControlName: string): TControl =
  return LabeledEdit_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TLabeledEdit, AllLevels: bool) =
  LabeledEdit_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TLabeledEdit): bool =
  return LabeledEdit_Focused(this.Instance)

proc HandleAllocated*(this: TLabeledEdit): bool =
  return LabeledEdit_HandleAllocated(this.Instance)

proc InsertControl*(this: TLabeledEdit, AControl: TControl) =
  LabeledEdit_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TLabeledEdit) =
  LabeledEdit_Invalidate(this.Instance)

proc PaintTo*(this: TLabeledEdit, DC: HDC, X: int32, Y: int32) =
  LabeledEdit_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TLabeledEdit, AControl: TControl) =
  LabeledEdit_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TLabeledEdit) =
  LabeledEdit_Realign(this.Instance)

proc Repaint*(this: TLabeledEdit) =
  LabeledEdit_Repaint(this.Instance)

proc ScaleBy*(this: TLabeledEdit, M: int32, D: int32) =
  LabeledEdit_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TLabeledEdit, DeltaX: int32, DeltaY: int32) =
  LabeledEdit_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetFocus*(this: TLabeledEdit) =
  LabeledEdit_SetFocus(this.Instance)

proc Update*(this: TLabeledEdit) =
  LabeledEdit_Update(this.Instance)

proc BringToFront*(this: TLabeledEdit) =
  LabeledEdit_BringToFront(this.Instance)

proc ClientToScreen*(this: TLabeledEdit, Point: TPoint): TPoint =
  var ps1 = Point
  LabeledEdit_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TLabeledEdit, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  LabeledEdit_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TLabeledEdit): bool =
  return LabeledEdit_Dragging(this.Instance)

proc HasParent*(this: TLabeledEdit): bool =
  return LabeledEdit_HasParent(this.Instance)

proc Hide*(this: TLabeledEdit) =
  LabeledEdit_Hide(this.Instance)

proc Perform*(this: TLabeledEdit, Msg: uint32, WParam: uint, LParam: int): int =
  return LabeledEdit_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TLabeledEdit) =
  LabeledEdit_Refresh(this.Instance)

proc ScreenToClient*(this: TLabeledEdit, Point: TPoint): TPoint =
  var ps1 = Point
  LabeledEdit_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TLabeledEdit, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  LabeledEdit_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TLabeledEdit) =
  LabeledEdit_SendToBack(this.Instance)

proc Show*(this: TLabeledEdit) =
  LabeledEdit_Show(this.Instance)

proc GetTextBuf*(this: TLabeledEdit, Buffer: string, BufSize: int32): int32 =
  return LabeledEdit_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TLabeledEdit): int32 =
  return LabeledEdit_GetTextLen(this.Instance)

proc SetTextBuf*(this: TLabeledEdit, Buffer: string) =
  LabeledEdit_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TLabeledEdit, AName: string): TComponent =
  return LabeledEdit_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TLabeledEdit): string =
  return $LabeledEdit_GetNamePath(this.Instance)

proc Assign*(this: TLabeledEdit, Source: TObject) =
  LabeledEdit_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TLabeledEdit): TClass =
  return LabeledEdit_ClassType(this.Instance)

proc ClassName*(this: TLabeledEdit): string =
  return $LabeledEdit_ClassName(this.Instance)

proc InstanceSize*(this: TLabeledEdit): int32 =
  return LabeledEdit_InstanceSize(this.Instance)

proc InheritsFrom*(this: TLabeledEdit, AClass: TClass): bool =
  return LabeledEdit_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TLabeledEdit, Obj: TObject): bool =
  return LabeledEdit_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TLabeledEdit): int32 =
  return LabeledEdit_GetHashCode(this.Instance)

proc ToString*(this: TLabeledEdit): string =
  return $LabeledEdit_ToString(this.Instance)

proc AnchorToNeighbour*(this: TLabeledEdit, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  LabeledEdit_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TLabeledEdit, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  LabeledEdit_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TLabeledEdit, ASibling: TControl) =
  LabeledEdit_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TLabeledEdit, ASibling: TControl) =
  LabeledEdit_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TLabeledEdit, ASide: TAnchorKind, ASibling: TControl) =
  LabeledEdit_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TLabeledEdit, ATheAlign: TAlign, ASpace: int32) =
  LabeledEdit_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TLabeledEdit, ASpace: int32) =
  LabeledEdit_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TLabeledEdit, ASize: int32): int32 =
  return LabeledEdit_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TLabeledEdit, ASize: int32): int32 =
  return LabeledEdit_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TLabeledEdit, ASize: int32): int32 =
  return LabeledEdit_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TLabeledEdit, ASize: int32): int32 =
  return LabeledEdit_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TLabeledEdit, ASize: int32): int32 =
  return LabeledEdit_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TLabeledEdit, ASize: int32): int32 =
  return LabeledEdit_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TLabeledEdit, ASize: int32): int32 =
  return LabeledEdit_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TLabeledEdit, ASize: int32): int32 =
  return LabeledEdit_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TLabeledEdit, ASize: int32): int32 =
  return LabeledEdit_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TLabeledEdit, ASize: int32): int32 =
  return LabeledEdit_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TLabeledEdit, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  LabeledEdit_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TLabeledEdit, ADesignTimePPI: int32) =
  LabeledEdit_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TLabeledEdit, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  LabeledEdit_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Alignment*(this: TLabeledEdit): TAlignment  =
  return LabeledEdit_GetAlignment(this.Instance)

proc `Alignment=`*(this: TLabeledEdit, AValue: TAlignment)  =
  LabeledEdit_SetAlignment(this.Instance, AValue)

proc Anchors*(this: TLabeledEdit): TAnchors  =
  return LabeledEdit_GetAnchors(this.Instance)

proc `Anchors=`*(this: TLabeledEdit, AValue: TAnchors)  =
  LabeledEdit_SetAnchors(this.Instance, AValue)

proc AutoSelect*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetAutoSelect(this.Instance)

proc `AutoSelect=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetAutoSelect(this.Instance, AValue)

proc AutoSize*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetAutoSize(this.Instance, AValue)

proc BiDiMode*(this: TLabeledEdit): TBiDiMode  =
  return LabeledEdit_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TLabeledEdit, AValue: TBiDiMode)  =
  LabeledEdit_SetBiDiMode(this.Instance, AValue)

proc BorderStyle*(this: TLabeledEdit): TBorderStyle  =
  return LabeledEdit_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TLabeledEdit, AValue: TBorderStyle)  =
  LabeledEdit_SetBorderStyle(this.Instance, AValue)

proc CharCase*(this: TLabeledEdit): TEditCharCase  =
  return LabeledEdit_GetCharCase(this.Instance)

proc `CharCase=`*(this: TLabeledEdit, AValue: TEditCharCase)  =
  LabeledEdit_SetCharCase(this.Instance, AValue)

proc Color*(this: TLabeledEdit): TColor  =
  return LabeledEdit_GetColor(this.Instance)

proc `Color=`*(this: TLabeledEdit, AValue: TColor)  =
  LabeledEdit_SetColor(this.Instance, AValue)

proc Constraints*(this: TLabeledEdit): TSizeConstraints  =
  return LabeledEdit_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TLabeledEdit, AValue: TSizeConstraints)  =
  LabeledEdit_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TLabeledEdit): TCursor  =
  return LabeledEdit_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TLabeledEdit, AValue: TCursor)  =
  LabeledEdit_SetDragCursor(this.Instance, AValue)

proc DragMode*(this: TLabeledEdit): TDragMode  =
  return LabeledEdit_GetDragMode(this.Instance)

proc `DragMode=`*(this: TLabeledEdit, AValue: TDragMode)  =
  LabeledEdit_SetDragMode(this.Instance, AValue)

proc EditLabel*(this: TLabeledEdit): TBoundLabel  =
  return LabeledEdit_GetEditLabel(this.Instance).AsBoundLabel

proc Enabled*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetEnabled(this.Instance)

proc `Enabled=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetEnabled(this.Instance, AValue)

proc Font*(this: TLabeledEdit): TFont  =
  return LabeledEdit_GetFont(this.Instance).AsFont

proc `Font=`*(this: TLabeledEdit, AValue: TFont)  =
  LabeledEdit_SetFont(this.Instance, CheckPtr(AValue))

proc HideSelection*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetHideSelection(this.Instance)

proc `HideSelection=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetHideSelection(this.Instance, AValue)

proc LabelPosition*(this: TLabeledEdit): TLabelPosition  =
  return LabeledEdit_GetLabelPosition(this.Instance)

proc `LabelPosition=`*(this: TLabeledEdit, AValue: TLabelPosition)  =
  LabeledEdit_SetLabelPosition(this.Instance, AValue)

proc LabelSpacing*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetLabelSpacing(this.Instance)

proc `LabelSpacing=`*(this: TLabeledEdit, AValue: int32)  =
  LabeledEdit_SetLabelSpacing(this.Instance, AValue)

proc MaxLength*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetMaxLength(this.Instance)

proc `MaxLength=`*(this: TLabeledEdit, AValue: int32)  =
  LabeledEdit_SetMaxLength(this.Instance, AValue)

proc NumbersOnly*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetNumbersOnly(this.Instance)

proc `NumbersOnly=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetNumbersOnly(this.Instance, AValue)

proc ParentColor*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetParentShowHint(this.Instance, AValue)

proc PasswordChar*(this: TLabeledEdit): Char  =
  return LabeledEdit_GetPasswordChar(this.Instance)

proc `PasswordChar=`*(this: TLabeledEdit, AValue: Char)  =
  LabeledEdit_SetPasswordChar(this.Instance, AValue)

proc PopupMenu*(this: TLabeledEdit): TPopupMenu  =
  return LabeledEdit_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TLabeledEdit, AValue: TPopupMenu)  =
  LabeledEdit_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ReadOnly*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetReadOnly(this.Instance)

proc `ReadOnly=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetReadOnly(this.Instance, AValue)

proc ShowHint*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TLabeledEdit): TTabOrder  =
  return LabeledEdit_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TLabeledEdit, AValue: TTabOrder)  =
  LabeledEdit_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetTabStop(this.Instance)

proc `TabStop=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetTabStop(this.Instance, AValue)

proc Text*(this: TLabeledEdit): string  =
  return $LabeledEdit_GetText(this.Instance)

proc `Text=`*(this: TLabeledEdit, AValue: string)  =
  LabeledEdit_SetText(this.Instance, AValue)

proc TextHint*(this: TLabeledEdit): string  =
  return $LabeledEdit_GetTextHint(this.Instance)

proc `TextHint=`*(this: TLabeledEdit, AValue: string)  =
  LabeledEdit_SetTextHint(this.Instance, AValue)

proc Visible*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetVisible(this.Instance)

proc `Visible=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetVisible(this.Instance, AValue)

proc `OnChange=`*(this: TLabeledEdit, AEventId: TNotifyEvent)  =
  LabeledEdit_SetOnChange(this.Instance, AEventId)

proc `OnClick=`*(this: TLabeledEdit, AEventId: TNotifyEvent)  =
  LabeledEdit_SetOnClick(this.Instance, AEventId)

proc `OnDblClick=`*(this: TLabeledEdit, AEventId: TNotifyEvent)  =
  LabeledEdit_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TLabeledEdit, AEventId: TDragDropEvent)  =
  LabeledEdit_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TLabeledEdit, AEventId: TDragOverEvent)  =
  LabeledEdit_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TLabeledEdit, AEventId: TEndDragEvent)  =
  LabeledEdit_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TLabeledEdit, AEventId: TNotifyEvent)  =
  LabeledEdit_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TLabeledEdit, AEventId: TNotifyEvent)  =
  LabeledEdit_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TLabeledEdit, AEventId: TKeyEvent)  =
  LabeledEdit_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TLabeledEdit, AEventId: TKeyPressEvent)  =
  LabeledEdit_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TLabeledEdit, AEventId: TKeyEvent)  =
  LabeledEdit_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TLabeledEdit, AEventId: TMouseEvent)  =
  LabeledEdit_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TLabeledEdit, AEventId: TNotifyEvent)  =
  LabeledEdit_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TLabeledEdit, AEventId: TNotifyEvent)  =
  LabeledEdit_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TLabeledEdit, AEventId: TMouseMoveEvent)  =
  LabeledEdit_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TLabeledEdit, AEventId: TMouseEvent)  =
  LabeledEdit_SetOnMouseUp(this.Instance, AEventId)

proc CanUndo*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetCanUndo(this.Instance)

proc Modified*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetModified(this.Instance)

proc `Modified=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetModified(this.Instance, AValue)

proc SelLength*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetSelLength(this.Instance)

proc `SelLength=`*(this: TLabeledEdit, AValue: int32)  =
  LabeledEdit_SetSelLength(this.Instance, AValue)

proc SelStart*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetSelStart(this.Instance)

proc `SelStart=`*(this: TLabeledEdit, AValue: int32)  =
  LabeledEdit_SetSelStart(this.Instance, AValue)

proc SelText*(this: TLabeledEdit): string  =
  return $LabeledEdit_GetSelText(this.Instance)

proc `SelText=`*(this: TLabeledEdit, AValue: string)  =
  LabeledEdit_SetSelText(this.Instance, AValue)

proc DockClientCount*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetDockClientCount(this.Instance)

proc DockSite*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetDockSite(this.Instance)

proc `DockSite=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TLabeledEdit): TBrush  =
  return LabeledEdit_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetControlCount(this.Instance)

proc Handle*(this: TLabeledEdit): HWND  =
  return LabeledEdit_GetHandle(this.Instance)

proc ParentWindow*(this: TLabeledEdit): HWND  =
  return LabeledEdit_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TLabeledEdit, AValue: HWND)  =
  LabeledEdit_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetShowing(this.Instance)

proc UseDockManager*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TLabeledEdit, AValue: bool)  =
  LabeledEdit_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TLabeledEdit): TAction  =
  return LabeledEdit_GetAction(this.Instance).AsAction

proc `Action=`*(this: TLabeledEdit, AValue: TAction)  =
  LabeledEdit_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TLabeledEdit): TAlign  =
  return LabeledEdit_GetAlign(this.Instance)

proc `Align=`*(this: TLabeledEdit, AValue: TAlign)  =
  LabeledEdit_SetAlign(this.Instance, AValue)

proc BoundsRect*(this: TLabeledEdit): TRect  =
  LabeledEdit_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TLabeledEdit, AValue: TRect)  =
  var ps1 = AValue
  LabeledEdit_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TLabeledEdit, AValue: int32)  =
  LabeledEdit_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TLabeledEdit): TPoint  =
  LabeledEdit_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TLabeledEdit): TRect  =
  LabeledEdit_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TLabeledEdit, AValue: int32)  =
  LabeledEdit_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TLabeledEdit): TControlState  =
  return LabeledEdit_GetControlState(this.Instance)

proc `ControlState=`*(this: TLabeledEdit, AValue: TControlState)  =
  LabeledEdit_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TLabeledEdit): TControlStyle  =
  return LabeledEdit_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TLabeledEdit, AValue: TControlStyle)  =
  LabeledEdit_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TLabeledEdit): bool  =
  return LabeledEdit_GetFloating(this.Instance)

proc Parent*(this: TLabeledEdit): TWinControl  =
  return LabeledEdit_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TLabeledEdit, AValue: TWinControl)  =
  LabeledEdit_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetLeft(this.Instance)

proc `Left=`*(this: TLabeledEdit, AValue: int32)  =
  LabeledEdit_SetLeft(this.Instance, AValue)

proc Top*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetTop(this.Instance)

proc `Top=`*(this: TLabeledEdit, AValue: int32)  =
  LabeledEdit_SetTop(this.Instance, AValue)

proc Width*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetWidth(this.Instance)

proc `Width=`*(this: TLabeledEdit, AValue: int32)  =
  LabeledEdit_SetWidth(this.Instance, AValue)

proc Height*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetHeight(this.Instance)

proc `Height=`*(this: TLabeledEdit, AValue: int32)  =
  LabeledEdit_SetHeight(this.Instance, AValue)

proc Cursor*(this: TLabeledEdit): TCursor  =
  return LabeledEdit_GetCursor(this.Instance)

proc `Cursor=`*(this: TLabeledEdit, AValue: TCursor)  =
  LabeledEdit_SetCursor(this.Instance, AValue)

proc Hint*(this: TLabeledEdit): string  =
  return $LabeledEdit_GetHint(this.Instance)

proc `Hint=`*(this: TLabeledEdit, AValue: string)  =
  LabeledEdit_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TLabeledEdit): int32  =
  return LabeledEdit_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TLabeledEdit, AValue: int32)  =
  LabeledEdit_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TLabeledEdit): TComponent  =
  return LabeledEdit_GetOwner(this.Instance).AsComponent

proc Name*(this: TLabeledEdit): string  =
  return $LabeledEdit_GetName(this.Instance)

proc `Name=`*(this: TLabeledEdit, AValue: string)  =
  LabeledEdit_SetName(this.Instance, AValue)

proc Tag*(this: TLabeledEdit): int  =
  return LabeledEdit_GetTag(this.Instance)

proc `Tag=`*(this: TLabeledEdit, AValue: int)  =
  LabeledEdit_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TLabeledEdit): TAnchorSide  =
  return LabeledEdit_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TLabeledEdit, AValue: TAnchorSide)  =
  LabeledEdit_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TLabeledEdit): TAnchorSide  =
  return LabeledEdit_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TLabeledEdit, AValue: TAnchorSide)  =
  LabeledEdit_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TLabeledEdit): TAnchorSide  =
  return LabeledEdit_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TLabeledEdit, AValue: TAnchorSide)  =
  LabeledEdit_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TLabeledEdit): TAnchorSide  =
  return LabeledEdit_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TLabeledEdit, AValue: TAnchorSide)  =
  LabeledEdit_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TLabeledEdit): TControlChildSizing  =
  return LabeledEdit_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TLabeledEdit, AValue: TControlChildSizing)  =
  LabeledEdit_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TLabeledEdit): TControlBorderSpacing  =
  return LabeledEdit_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TLabeledEdit, AValue: TControlBorderSpacing)  =
  LabeledEdit_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TLabeledEdit, Index: int32): TControl  =
  return LabeledEdit_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TLabeledEdit, Index: int32): TControl  =
  return LabeledEdit_GetControls(this.Instance, Index).AsControl

proc Components*(this: TLabeledEdit, AIndex: int32): TComponent  =
  return LabeledEdit_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TLabeledEdit, AKind: TAnchorKind): TAnchorSide  =
  return LabeledEdit_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TLabeledEditClass*(): TClass = LabeledEdit_StaticClassType()


#------------------------- TBoundLabel -------------------------

proc Free*(this: TBoundLabel) = defaultFree: BoundLabel_Free

proc NewBoundLabel*(AOwner: TComponent): TBoundLabel =
  new(result)
  result.Instance = BoundLabel_Create(CheckPtr(AOwner))

proc BringToFront*(this: TBoundLabel) =
  BoundLabel_BringToFront(this.Instance)

proc ClientToScreen*(this: TBoundLabel, Point: TPoint): TPoint =
  var ps1 = Point
  BoundLabel_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TBoundLabel, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  BoundLabel_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TBoundLabel): bool =
  return BoundLabel_Dragging(this.Instance)

proc HasParent*(this: TBoundLabel): bool =
  return BoundLabel_HasParent(this.Instance)

proc Hide*(this: TBoundLabel) =
  BoundLabel_Hide(this.Instance)

proc Invalidate*(this: TBoundLabel) =
  BoundLabel_Invalidate(this.Instance)

proc Perform*(this: TBoundLabel, Msg: uint32, WParam: uint, LParam: int): int =
  return BoundLabel_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TBoundLabel) =
  BoundLabel_Refresh(this.Instance)

proc Repaint*(this: TBoundLabel) =
  BoundLabel_Repaint(this.Instance)

proc ScreenToClient*(this: TBoundLabel, Point: TPoint): TPoint =
  var ps1 = Point
  BoundLabel_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TBoundLabel, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  BoundLabel_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TBoundLabel) =
  BoundLabel_SendToBack(this.Instance)

proc SetBounds*(this: TBoundLabel, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  BoundLabel_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Show*(this: TBoundLabel) =
  BoundLabel_Show(this.Instance)

proc Update*(this: TBoundLabel) =
  BoundLabel_Update(this.Instance)

proc GetTextBuf*(this: TBoundLabel, Buffer: string, BufSize: int32): int32 =
  return BoundLabel_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TBoundLabel): int32 =
  return BoundLabel_GetTextLen(this.Instance)

proc SetTextBuf*(this: TBoundLabel, Buffer: string) =
  BoundLabel_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TBoundLabel, AName: string): TComponent =
  return BoundLabel_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TBoundLabel): string =
  return $BoundLabel_GetNamePath(this.Instance)

proc Assign*(this: TBoundLabel, Source: TObject) =
  BoundLabel_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TBoundLabel): TClass =
  return BoundLabel_ClassType(this.Instance)

proc ClassName*(this: TBoundLabel): string =
  return $BoundLabel_ClassName(this.Instance)

proc InstanceSize*(this: TBoundLabel): int32 =
  return BoundLabel_InstanceSize(this.Instance)

proc InheritsFrom*(this: TBoundLabel, AClass: TClass): bool =
  return BoundLabel_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TBoundLabel, Obj: TObject): bool =
  return BoundLabel_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TBoundLabel): int32 =
  return BoundLabel_GetHashCode(this.Instance)

proc ToString*(this: TBoundLabel): string =
  return $BoundLabel_ToString(this.Instance)

proc AnchorToNeighbour*(this: TBoundLabel, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  BoundLabel_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TBoundLabel, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  BoundLabel_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TBoundLabel, ASibling: TControl) =
  BoundLabel_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TBoundLabel, ASibling: TControl) =
  BoundLabel_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TBoundLabel, ASide: TAnchorKind, ASibling: TControl) =
  BoundLabel_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TBoundLabel, ATheAlign: TAlign, ASpace: int32) =
  BoundLabel_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TBoundLabel, ASpace: int32) =
  BoundLabel_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TBoundLabel, ASize: int32): int32 =
  return BoundLabel_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TBoundLabel, ASize: int32): int32 =
  return BoundLabel_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TBoundLabel, ASize: int32): int32 =
  return BoundLabel_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TBoundLabel, ASize: int32): int32 =
  return BoundLabel_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TBoundLabel, ASize: int32): int32 =
  return BoundLabel_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TBoundLabel, ASize: int32): int32 =
  return BoundLabel_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TBoundLabel, ASize: int32): int32 =
  return BoundLabel_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TBoundLabel, ASize: int32): int32 =
  return BoundLabel_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TBoundLabel, ASize: int32): int32 =
  return BoundLabel_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TBoundLabel, ASize: int32): int32 =
  return BoundLabel_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TBoundLabel, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  BoundLabel_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TBoundLabel, ADesignTimePPI: int32) =
  BoundLabel_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TBoundLabel, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  BoundLabel_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc BiDiMode*(this: TBoundLabel): TBiDiMode  =
  return BoundLabel_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TBoundLabel, AValue: TBiDiMode)  =
  BoundLabel_SetBiDiMode(this.Instance, AValue)

proc Caption*(this: TBoundLabel): string  =
  return $BoundLabel_GetCaption(this.Instance)

proc `Caption=`*(this: TBoundLabel, AValue: string)  =
  BoundLabel_SetCaption(this.Instance, AValue)

proc Color*(this: TBoundLabel): TColor  =
  return BoundLabel_GetColor(this.Instance)

proc `Color=`*(this: TBoundLabel, AValue: TColor)  =
  BoundLabel_SetColor(this.Instance, AValue)

proc DragCursor*(this: TBoundLabel): TCursor  =
  return BoundLabel_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TBoundLabel, AValue: TCursor)  =
  BoundLabel_SetDragCursor(this.Instance, AValue)

proc DragMode*(this: TBoundLabel): TDragMode  =
  return BoundLabel_GetDragMode(this.Instance)

proc `DragMode=`*(this: TBoundLabel, AValue: TDragMode)  =
  BoundLabel_SetDragMode(this.Instance, AValue)

proc Font*(this: TBoundLabel): TFont  =
  return BoundLabel_GetFont(this.Instance).AsFont

proc `Font=`*(this: TBoundLabel, AValue: TFont)  =
  BoundLabel_SetFont(this.Instance, CheckPtr(AValue))

proc Height*(this: TBoundLabel): int32  =
  return BoundLabel_GetHeight(this.Instance)

proc `Height=`*(this: TBoundLabel, AValue: int32)  =
  BoundLabel_SetHeight(this.Instance, AValue)

proc Left*(this: TBoundLabel): int32  =
  return BoundLabel_GetLeft(this.Instance)

proc ParentColor*(this: TBoundLabel): bool  =
  return BoundLabel_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TBoundLabel, AValue: bool)  =
  BoundLabel_SetParentColor(this.Instance, AValue)

proc ParentFont*(this: TBoundLabel): bool  =
  return BoundLabel_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TBoundLabel, AValue: bool)  =
  BoundLabel_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TBoundLabel): bool  =
  return BoundLabel_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TBoundLabel, AValue: bool)  =
  BoundLabel_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TBoundLabel): TPopupMenu  =
  return BoundLabel_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TBoundLabel, AValue: TPopupMenu)  =
  BoundLabel_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowAccelChar*(this: TBoundLabel): bool  =
  return BoundLabel_GetShowAccelChar(this.Instance)

proc `ShowAccelChar=`*(this: TBoundLabel, AValue: bool)  =
  BoundLabel_SetShowAccelChar(this.Instance, AValue)

proc ShowHint*(this: TBoundLabel): bool  =
  return BoundLabel_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TBoundLabel, AValue: bool)  =
  BoundLabel_SetShowHint(this.Instance, AValue)

proc Top*(this: TBoundLabel): int32  =
  return BoundLabel_GetTop(this.Instance)

proc Layout*(this: TBoundLabel): TTextLayout  =
  return BoundLabel_GetLayout(this.Instance)

proc `Layout=`*(this: TBoundLabel, AValue: TTextLayout)  =
  BoundLabel_SetLayout(this.Instance, AValue)

proc WordWrap*(this: TBoundLabel): bool  =
  return BoundLabel_GetWordWrap(this.Instance)

proc `WordWrap=`*(this: TBoundLabel, AValue: bool)  =
  BoundLabel_SetWordWrap(this.Instance, AValue)

proc Width*(this: TBoundLabel): int32  =
  return BoundLabel_GetWidth(this.Instance)

proc `Width=`*(this: TBoundLabel, AValue: int32)  =
  BoundLabel_SetWidth(this.Instance, AValue)

proc `OnClick=`*(this: TBoundLabel, AEventId: TNotifyEvent)  =
  BoundLabel_SetOnClick(this.Instance, AEventId)

proc `OnDblClick=`*(this: TBoundLabel, AEventId: TNotifyEvent)  =
  BoundLabel_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TBoundLabel, AEventId: TDragDropEvent)  =
  BoundLabel_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TBoundLabel, AEventId: TDragOverEvent)  =
  BoundLabel_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TBoundLabel, AEventId: TEndDragEvent)  =
  BoundLabel_SetOnEndDrag(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TBoundLabel, AEventId: TMouseEvent)  =
  BoundLabel_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TBoundLabel, AEventId: TMouseMoveEvent)  =
  BoundLabel_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TBoundLabel, AEventId: TMouseEvent)  =
  BoundLabel_SetOnMouseUp(this.Instance, AEventId)

proc Canvas*(this: TBoundLabel): TCanvas  =
  return BoundLabel_GetCanvas(this.Instance).AsCanvas

proc Enabled*(this: TBoundLabel): bool  =
  return BoundLabel_GetEnabled(this.Instance)

proc `Enabled=`*(this: TBoundLabel, AValue: bool)  =
  BoundLabel_SetEnabled(this.Instance, AValue)

proc Action*(this: TBoundLabel): TAction  =
  return BoundLabel_GetAction(this.Instance).AsAction

proc `Action=`*(this: TBoundLabel, AValue: TAction)  =
  BoundLabel_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TBoundLabel): TAlign  =
  return BoundLabel_GetAlign(this.Instance)

proc `Align=`*(this: TBoundLabel, AValue: TAlign)  =
  BoundLabel_SetAlign(this.Instance, AValue)

proc Anchors*(this: TBoundLabel): TAnchors  =
  return BoundLabel_GetAnchors(this.Instance)

proc `Anchors=`*(this: TBoundLabel, AValue: TAnchors)  =
  BoundLabel_SetAnchors(this.Instance, AValue)

proc BoundsRect*(this: TBoundLabel): TRect  =
  BoundLabel_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TBoundLabel, AValue: TRect)  =
  var ps1 = AValue
  BoundLabel_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TBoundLabel): int32  =
  return BoundLabel_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TBoundLabel, AValue: int32)  =
  BoundLabel_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TBoundLabel): TPoint  =
  BoundLabel_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TBoundLabel): TRect  =
  BoundLabel_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TBoundLabel): int32  =
  return BoundLabel_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TBoundLabel, AValue: int32)  =
  BoundLabel_SetClientWidth(this.Instance, AValue)

proc Constraints*(this: TBoundLabel): TSizeConstraints  =
  return BoundLabel_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TBoundLabel, AValue: TSizeConstraints)  =
  BoundLabel_SetConstraints(this.Instance, CheckPtr(AValue))

proc ControlState*(this: TBoundLabel): TControlState  =
  return BoundLabel_GetControlState(this.Instance)

proc `ControlState=`*(this: TBoundLabel, AValue: TControlState)  =
  BoundLabel_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TBoundLabel): TControlStyle  =
  return BoundLabel_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TBoundLabel, AValue: TControlStyle)  =
  BoundLabel_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TBoundLabel): bool  =
  return BoundLabel_GetFloating(this.Instance)

proc Visible*(this: TBoundLabel): bool  =
  return BoundLabel_GetVisible(this.Instance)

proc `Visible=`*(this: TBoundLabel, AValue: bool)  =
  BoundLabel_SetVisible(this.Instance, AValue)

proc Parent*(this: TBoundLabel): TWinControl  =
  return BoundLabel_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TBoundLabel, AValue: TWinControl)  =
  BoundLabel_SetParent(this.Instance, CheckPtr(AValue))

proc Cursor*(this: TBoundLabel): TCursor  =
  return BoundLabel_GetCursor(this.Instance)

proc `Cursor=`*(this: TBoundLabel, AValue: TCursor)  =
  BoundLabel_SetCursor(this.Instance, AValue)

proc Hint*(this: TBoundLabel): string  =
  return $BoundLabel_GetHint(this.Instance)

proc `Hint=`*(this: TBoundLabel, AValue: string)  =
  BoundLabel_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TBoundLabel): int32  =
  return BoundLabel_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TBoundLabel): int32  =
  return BoundLabel_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TBoundLabel, AValue: int32)  =
  BoundLabel_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TBoundLabel): TComponent  =
  return BoundLabel_GetOwner(this.Instance).AsComponent

proc Name*(this: TBoundLabel): string  =
  return $BoundLabel_GetName(this.Instance)

proc `Name=`*(this: TBoundLabel, AValue: string)  =
  BoundLabel_SetName(this.Instance, AValue)

proc Tag*(this: TBoundLabel): int  =
  return BoundLabel_GetTag(this.Instance)

proc `Tag=`*(this: TBoundLabel, AValue: int)  =
  BoundLabel_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TBoundLabel): TAnchorSide  =
  return BoundLabel_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TBoundLabel, AValue: TAnchorSide)  =
  BoundLabel_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TBoundLabel): TAnchorSide  =
  return BoundLabel_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TBoundLabel, AValue: TAnchorSide)  =
  BoundLabel_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TBoundLabel): TAnchorSide  =
  return BoundLabel_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TBoundLabel, AValue: TAnchorSide)  =
  BoundLabel_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TBoundLabel): TAnchorSide  =
  return BoundLabel_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TBoundLabel, AValue: TAnchorSide)  =
  BoundLabel_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TBoundLabel): TControlBorderSpacing  =
  return BoundLabel_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TBoundLabel, AValue: TControlBorderSpacing)  =
  BoundLabel_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TBoundLabel, AIndex: int32): TComponent  =
  return BoundLabel_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TBoundLabel, AKind: TAnchorKind): TAnchorSide  =
  return BoundLabel_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TBoundLabelClass*(): TClass = BoundLabel_StaticClassType()


#------------------------- TFlowPanel -------------------------

proc Free*(this: TFlowPanel) = defaultFree: FlowPanel_Free

proc NewFlowPanel*(AOwner: TComponent): TFlowPanel =
  new(result)
  result.Instance = FlowPanel_Create(CheckPtr(AOwner))

proc GetControlIndex*(this: TFlowPanel, AControl: TControl): int32  =
  return FlowPanel_GetControlIndex(this.Instance, CheckPtr(AControl))

proc SetControlIndex*(this: TFlowPanel, AControl: TControl, Index: int32)  =
  FlowPanel_SetControlIndex(this.Instance, CheckPtr(AControl), Index)

proc CanFocus*(this: TFlowPanel): bool =
  return FlowPanel_CanFocus(this.Instance)

proc ContainsControl*(this: TFlowPanel, Control: TControl): bool =
  return FlowPanel_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TFlowPanel, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return FlowPanel_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TFlowPanel) =
  FlowPanel_DisableAlign(this.Instance)

proc EnableAlign*(this: TFlowPanel) =
  FlowPanel_EnableAlign(this.Instance)

proc FindChildControl*(this: TFlowPanel, ControlName: string): TControl =
  return FlowPanel_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TFlowPanel, AllLevels: bool) =
  FlowPanel_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TFlowPanel): bool =
  return FlowPanel_Focused(this.Instance)

proc HandleAllocated*(this: TFlowPanel): bool =
  return FlowPanel_HandleAllocated(this.Instance)

proc InsertControl*(this: TFlowPanel, AControl: TControl) =
  FlowPanel_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TFlowPanel) =
  FlowPanel_Invalidate(this.Instance)

proc PaintTo*(this: TFlowPanel, DC: HDC, X: int32, Y: int32) =
  FlowPanel_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TFlowPanel, AControl: TControl) =
  FlowPanel_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TFlowPanel) =
  FlowPanel_Realign(this.Instance)

proc Repaint*(this: TFlowPanel) =
  FlowPanel_Repaint(this.Instance)

proc ScaleBy*(this: TFlowPanel, M: int32, D: int32) =
  FlowPanel_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TFlowPanel, DeltaX: int32, DeltaY: int32) =
  FlowPanel_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TFlowPanel, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  FlowPanel_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TFlowPanel) =
  FlowPanel_SetFocus(this.Instance)

proc Update*(this: TFlowPanel) =
  FlowPanel_Update(this.Instance)

proc BringToFront*(this: TFlowPanel) =
  FlowPanel_BringToFront(this.Instance)

proc ClientToScreen*(this: TFlowPanel, Point: TPoint): TPoint =
  var ps1 = Point
  FlowPanel_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TFlowPanel, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  FlowPanel_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TFlowPanel): bool =
  return FlowPanel_Dragging(this.Instance)

proc HasParent*(this: TFlowPanel): bool =
  return FlowPanel_HasParent(this.Instance)

proc Hide*(this: TFlowPanel) =
  FlowPanel_Hide(this.Instance)

proc Perform*(this: TFlowPanel, Msg: uint32, WParam: uint, LParam: int): int =
  return FlowPanel_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TFlowPanel) =
  FlowPanel_Refresh(this.Instance)

proc ScreenToClient*(this: TFlowPanel, Point: TPoint): TPoint =
  var ps1 = Point
  FlowPanel_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TFlowPanel, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  FlowPanel_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TFlowPanel) =
  FlowPanel_SendToBack(this.Instance)

proc Show*(this: TFlowPanel) =
  FlowPanel_Show(this.Instance)

proc GetTextBuf*(this: TFlowPanel, Buffer: string, BufSize: int32): int32 =
  return FlowPanel_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TFlowPanel): int32 =
  return FlowPanel_GetTextLen(this.Instance)

proc SetTextBuf*(this: TFlowPanel, Buffer: string) =
  FlowPanel_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TFlowPanel, AName: string): TComponent =
  return FlowPanel_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TFlowPanel): string =
  return $FlowPanel_GetNamePath(this.Instance)

proc Assign*(this: TFlowPanel, Source: TObject) =
  FlowPanel_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TFlowPanel): TClass =
  return FlowPanel_ClassType(this.Instance)

proc ClassName*(this: TFlowPanel): string =
  return $FlowPanel_ClassName(this.Instance)

proc InstanceSize*(this: TFlowPanel): int32 =
  return FlowPanel_InstanceSize(this.Instance)

proc InheritsFrom*(this: TFlowPanel, AClass: TClass): bool =
  return FlowPanel_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TFlowPanel, Obj: TObject): bool =
  return FlowPanel_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TFlowPanel): int32 =
  return FlowPanel_GetHashCode(this.Instance)

proc ToString*(this: TFlowPanel): string =
  return $FlowPanel_ToString(this.Instance)

proc AnchorToNeighbour*(this: TFlowPanel, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  FlowPanel_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TFlowPanel, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  FlowPanel_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TFlowPanel, ASibling: TControl) =
  FlowPanel_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TFlowPanel, ASibling: TControl) =
  FlowPanel_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TFlowPanel, ASide: TAnchorKind, ASibling: TControl) =
  FlowPanel_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TFlowPanel, ATheAlign: TAlign, ASpace: int32) =
  FlowPanel_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TFlowPanel, ASpace: int32) =
  FlowPanel_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TFlowPanel, ASize: int32): int32 =
  return FlowPanel_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TFlowPanel, ASize: int32): int32 =
  return FlowPanel_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TFlowPanel, ASize: int32): int32 =
  return FlowPanel_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TFlowPanel, ASize: int32): int32 =
  return FlowPanel_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TFlowPanel, ASize: int32): int32 =
  return FlowPanel_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TFlowPanel, ASize: int32): int32 =
  return FlowPanel_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TFlowPanel, ASize: int32): int32 =
  return FlowPanel_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TFlowPanel, ASize: int32): int32 =
  return FlowPanel_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TFlowPanel, ASize: int32): int32 =
  return FlowPanel_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TFlowPanel, ASize: int32): int32 =
  return FlowPanel_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TFlowPanel, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  FlowPanel_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TFlowPanel, ADesignTimePPI: int32) =
  FlowPanel_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TFlowPanel, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  FlowPanel_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TFlowPanel): TAlign  =
  return FlowPanel_GetAlign(this.Instance)

proc `Align=`*(this: TFlowPanel, AValue: TAlign)  =
  FlowPanel_SetAlign(this.Instance, AValue)

proc Alignment*(this: TFlowPanel): TAlignment  =
  return FlowPanel_GetAlignment(this.Instance)

proc `Alignment=`*(this: TFlowPanel, AValue: TAlignment)  =
  FlowPanel_SetAlignment(this.Instance, AValue)

proc Anchors*(this: TFlowPanel): TAnchors  =
  return FlowPanel_GetAnchors(this.Instance)

proc `Anchors=`*(this: TFlowPanel, AValue: TAnchors)  =
  FlowPanel_SetAnchors(this.Instance, AValue)

proc AutoSize*(this: TFlowPanel): bool  =
  return FlowPanel_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetAutoSize(this.Instance, AValue)

proc AutoWrap*(this: TFlowPanel): bool  =
  return FlowPanel_GetAutoWrap(this.Instance)

proc `AutoWrap=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetAutoWrap(this.Instance, AValue)

proc BiDiMode*(this: TFlowPanel): TBiDiMode  =
  return FlowPanel_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TFlowPanel, AValue: TBiDiMode)  =
  FlowPanel_SetBiDiMode(this.Instance, AValue)

proc BorderWidth*(this: TFlowPanel): int32  =
  return FlowPanel_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TFlowPanel, AValue: int32)  =
  FlowPanel_SetBorderWidth(this.Instance, AValue)

proc BorderStyle*(this: TFlowPanel): TBorderStyle  =
  return FlowPanel_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TFlowPanel, AValue: TBorderStyle)  =
  FlowPanel_SetBorderStyle(this.Instance, AValue)

proc Caption*(this: TFlowPanel): string  =
  return $FlowPanel_GetCaption(this.Instance)

proc `Caption=`*(this: TFlowPanel, AValue: string)  =
  FlowPanel_SetCaption(this.Instance, AValue)

proc Color*(this: TFlowPanel): TColor  =
  return FlowPanel_GetColor(this.Instance)

proc `Color=`*(this: TFlowPanel, AValue: TColor)  =
  FlowPanel_SetColor(this.Instance, AValue)

proc Constraints*(this: TFlowPanel): TSizeConstraints  =
  return FlowPanel_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TFlowPanel, AValue: TSizeConstraints)  =
  FlowPanel_SetConstraints(this.Instance, CheckPtr(AValue))

proc UseDockManager*(this: TFlowPanel): bool  =
  return FlowPanel_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetUseDockManager(this.Instance, AValue)

proc DockSite*(this: TFlowPanel): bool  =
  return FlowPanel_GetDockSite(this.Instance)

proc `DockSite=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetDockSite(this.Instance, AValue)

proc DoubleBuffered*(this: TFlowPanel): bool  =
  return FlowPanel_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TFlowPanel): TCursor  =
  return FlowPanel_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TFlowPanel, AValue: TCursor)  =
  FlowPanel_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TFlowPanel): TDragKind  =
  return FlowPanel_GetDragKind(this.Instance)

proc `DragKind=`*(this: TFlowPanel, AValue: TDragKind)  =
  FlowPanel_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TFlowPanel): TDragMode  =
  return FlowPanel_GetDragMode(this.Instance)

proc `DragMode=`*(this: TFlowPanel, AValue: TDragMode)  =
  FlowPanel_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TFlowPanel): bool  =
  return FlowPanel_GetEnabled(this.Instance)

proc `Enabled=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetEnabled(this.Instance, AValue)

proc FlowStyle*(this: TFlowPanel): TFlowStyle  =
  return FlowPanel_GetFlowStyle(this.Instance)

proc `FlowStyle=`*(this: TFlowPanel, AValue: TFlowStyle)  =
  FlowPanel_SetFlowStyle(this.Instance, AValue)

proc FullRepaint*(this: TFlowPanel): bool  =
  return FlowPanel_GetFullRepaint(this.Instance)

proc `FullRepaint=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetFullRepaint(this.Instance, AValue)

proc Font*(this: TFlowPanel): TFont  =
  return FlowPanel_GetFont(this.Instance).AsFont

proc `Font=`*(this: TFlowPanel, AValue: TFont)  =
  FlowPanel_SetFont(this.Instance, CheckPtr(AValue))

proc ParentBackground*(this: TFlowPanel): bool  =
  return FlowPanel_GetParentBackground(this.Instance)

proc `ParentBackground=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetParentBackground(this.Instance, AValue)

proc ParentColor*(this: TFlowPanel): bool  =
  return FlowPanel_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TFlowPanel): bool  =
  return FlowPanel_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TFlowPanel): bool  =
  return FlowPanel_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TFlowPanel): bool  =
  return FlowPanel_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TFlowPanel): TPopupMenu  =
  return FlowPanel_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TFlowPanel, AValue: TPopupMenu)  =
  FlowPanel_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TFlowPanel): bool  =
  return FlowPanel_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TFlowPanel): TTabOrder  =
  return FlowPanel_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TFlowPanel, AValue: TTabOrder)  =
  FlowPanel_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TFlowPanel): bool  =
  return FlowPanel_GetTabStop(this.Instance)

proc `TabStop=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetTabStop(this.Instance, AValue)

proc Visible*(this: TFlowPanel): bool  =
  return FlowPanel_GetVisible(this.Instance)

proc `Visible=`*(this: TFlowPanel, AValue: bool)  =
  FlowPanel_SetVisible(this.Instance, AValue)

proc `OnAlignPosition=`*(this: TFlowPanel, AEventId: TAlignPositionEvent)  =
  FlowPanel_SetOnAlignPosition(this.Instance, AEventId)

proc `OnClick=`*(this: TFlowPanel, AEventId: TNotifyEvent)  =
  FlowPanel_SetOnClick(this.Instance, AEventId)

proc `OnConstrainedResize=`*(this: TFlowPanel, AEventId: TConstrainedResizeEvent)  =
  FlowPanel_SetOnConstrainedResize(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TFlowPanel, AEventId: TContextPopupEvent)  =
  FlowPanel_SetOnContextPopup(this.Instance, AEventId)

proc `OnDockDrop=`*(this: TFlowPanel, AEventId: TDockDropEvent)  =
  FlowPanel_SetOnDockDrop(this.Instance, AEventId)

proc `OnDblClick=`*(this: TFlowPanel, AEventId: TNotifyEvent)  =
  FlowPanel_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TFlowPanel, AEventId: TDragDropEvent)  =
  FlowPanel_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TFlowPanel, AEventId: TDragOverEvent)  =
  FlowPanel_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDock=`*(this: TFlowPanel, AEventId: TEndDragEvent)  =
  FlowPanel_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TFlowPanel, AEventId: TEndDragEvent)  =
  FlowPanel_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TFlowPanel, AEventId: TNotifyEvent)  =
  FlowPanel_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TFlowPanel, AEventId: TNotifyEvent)  =
  FlowPanel_SetOnExit(this.Instance, AEventId)

proc `OnGetSiteInfo=`*(this: TFlowPanel, AEventId: TGetSiteInfoEvent)  =
  FlowPanel_SetOnGetSiteInfo(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TFlowPanel, AEventId: TMouseEvent)  =
  FlowPanel_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TFlowPanel, AEventId: TNotifyEvent)  =
  FlowPanel_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TFlowPanel, AEventId: TNotifyEvent)  =
  FlowPanel_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TFlowPanel, AEventId: TMouseMoveEvent)  =
  FlowPanel_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TFlowPanel, AEventId: TMouseEvent)  =
  FlowPanel_SetOnMouseUp(this.Instance, AEventId)

proc `OnResize=`*(this: TFlowPanel, AEventId: TNotifyEvent)  =
  FlowPanel_SetOnResize(this.Instance, AEventId)

proc `OnStartDock=`*(this: TFlowPanel, AEventId: TStartDockEvent)  =
  FlowPanel_SetOnStartDock(this.Instance, AEventId)

proc `OnUnDock=`*(this: TFlowPanel, AEventId: TUnDockEvent)  =
  FlowPanel_SetOnUnDock(this.Instance, AEventId)

proc DockClientCount*(this: TFlowPanel): int32  =
  return FlowPanel_GetDockClientCount(this.Instance)

proc MouseInClient*(this: TFlowPanel): bool  =
  return FlowPanel_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TFlowPanel): int32  =
  return FlowPanel_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TFlowPanel): TBrush  =
  return FlowPanel_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TFlowPanel): int32  =
  return FlowPanel_GetControlCount(this.Instance)

proc Handle*(this: TFlowPanel): HWND  =
  return FlowPanel_GetHandle(this.Instance)

proc ParentWindow*(this: TFlowPanel): HWND  =
  return FlowPanel_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TFlowPanel, AValue: HWND)  =
  FlowPanel_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TFlowPanel): bool  =
  return FlowPanel_GetShowing(this.Instance)

proc Action*(this: TFlowPanel): TAction  =
  return FlowPanel_GetAction(this.Instance).AsAction

proc `Action=`*(this: TFlowPanel, AValue: TAction)  =
  FlowPanel_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TFlowPanel): TRect  =
  FlowPanel_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TFlowPanel, AValue: TRect)  =
  var ps1 = AValue
  FlowPanel_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TFlowPanel): int32  =
  return FlowPanel_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TFlowPanel, AValue: int32)  =
  FlowPanel_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TFlowPanel): TPoint  =
  FlowPanel_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TFlowPanel): TRect  =
  FlowPanel_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TFlowPanel): int32  =
  return FlowPanel_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TFlowPanel, AValue: int32)  =
  FlowPanel_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TFlowPanel): TControlState  =
  return FlowPanel_GetControlState(this.Instance)

proc `ControlState=`*(this: TFlowPanel, AValue: TControlState)  =
  FlowPanel_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TFlowPanel): TControlStyle  =
  return FlowPanel_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TFlowPanel, AValue: TControlStyle)  =
  FlowPanel_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TFlowPanel): bool  =
  return FlowPanel_GetFloating(this.Instance)

proc Parent*(this: TFlowPanel): TWinControl  =
  return FlowPanel_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TFlowPanel, AValue: TWinControl)  =
  FlowPanel_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TFlowPanel): int32  =
  return FlowPanel_GetLeft(this.Instance)

proc `Left=`*(this: TFlowPanel, AValue: int32)  =
  FlowPanel_SetLeft(this.Instance, AValue)

proc Top*(this: TFlowPanel): int32  =
  return FlowPanel_GetTop(this.Instance)

proc `Top=`*(this: TFlowPanel, AValue: int32)  =
  FlowPanel_SetTop(this.Instance, AValue)

proc Width*(this: TFlowPanel): int32  =
  return FlowPanel_GetWidth(this.Instance)

proc `Width=`*(this: TFlowPanel, AValue: int32)  =
  FlowPanel_SetWidth(this.Instance, AValue)

proc Height*(this: TFlowPanel): int32  =
  return FlowPanel_GetHeight(this.Instance)

proc `Height=`*(this: TFlowPanel, AValue: int32)  =
  FlowPanel_SetHeight(this.Instance, AValue)

proc Cursor*(this: TFlowPanel): TCursor  =
  return FlowPanel_GetCursor(this.Instance)

proc `Cursor=`*(this: TFlowPanel, AValue: TCursor)  =
  FlowPanel_SetCursor(this.Instance, AValue)

proc Hint*(this: TFlowPanel): string  =
  return $FlowPanel_GetHint(this.Instance)

proc `Hint=`*(this: TFlowPanel, AValue: string)  =
  FlowPanel_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TFlowPanel): int32  =
  return FlowPanel_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TFlowPanel): int32  =
  return FlowPanel_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TFlowPanel, AValue: int32)  =
  FlowPanel_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TFlowPanel): TComponent  =
  return FlowPanel_GetOwner(this.Instance).AsComponent

proc Name*(this: TFlowPanel): string  =
  return $FlowPanel_GetName(this.Instance)

proc `Name=`*(this: TFlowPanel, AValue: string)  =
  FlowPanel_SetName(this.Instance, AValue)

proc Tag*(this: TFlowPanel): int  =
  return FlowPanel_GetTag(this.Instance)

proc `Tag=`*(this: TFlowPanel, AValue: int)  =
  FlowPanel_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TFlowPanel): TAnchorSide  =
  return FlowPanel_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TFlowPanel, AValue: TAnchorSide)  =
  FlowPanel_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TFlowPanel): TAnchorSide  =
  return FlowPanel_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TFlowPanel, AValue: TAnchorSide)  =
  FlowPanel_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TFlowPanel): TAnchorSide  =
  return FlowPanel_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TFlowPanel, AValue: TAnchorSide)  =
  FlowPanel_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TFlowPanel): TAnchorSide  =
  return FlowPanel_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TFlowPanel, AValue: TAnchorSide)  =
  FlowPanel_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TFlowPanel): TControlChildSizing  =
  return FlowPanel_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TFlowPanel, AValue: TControlChildSizing)  =
  FlowPanel_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TFlowPanel): TControlBorderSpacing  =
  return FlowPanel_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TFlowPanel, AValue: TControlBorderSpacing)  =
  FlowPanel_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TFlowPanel, Index: int32): TControl  =
  return FlowPanel_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TFlowPanel, Index: int32): TControl  =
  return FlowPanel_GetControls(this.Instance, Index).AsControl

proc Components*(this: TFlowPanel, AIndex: int32): TComponent  =
  return FlowPanel_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TFlowPanel, AKind: TAnchorKind): TAnchorSide  =
  return FlowPanel_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TFlowPanelClass*(): TClass = FlowPanel_StaticClassType()


#------------------------- TCoolBar -------------------------

proc Free*(this: TCoolBar) = defaultFree: CoolBar_Free

proc NewCoolBar*(AOwner: TComponent): TCoolBar =
  new(result)
  result.Instance = CoolBar_Create(CheckPtr(AOwner))

proc FlipChildren*(this: TCoolBar, AllLevels: bool) =
  CoolBar_FlipChildren(this.Instance, AllLevels)

proc CanFocus*(this: TCoolBar): bool =
  return CoolBar_CanFocus(this.Instance)

proc ContainsControl*(this: TCoolBar, Control: TControl): bool =
  return CoolBar_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TCoolBar, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return CoolBar_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TCoolBar) =
  CoolBar_DisableAlign(this.Instance)

proc EnableAlign*(this: TCoolBar) =
  CoolBar_EnableAlign(this.Instance)

proc FindChildControl*(this: TCoolBar, ControlName: string): TControl =
  return CoolBar_FindChildControl(this.Instance, ControlName).AsControl

proc Focused*(this: TCoolBar): bool =
  return CoolBar_Focused(this.Instance)

proc HandleAllocated*(this: TCoolBar): bool =
  return CoolBar_HandleAllocated(this.Instance)

proc Invalidate*(this: TCoolBar) =
  CoolBar_Invalidate(this.Instance)

proc PaintTo*(this: TCoolBar, DC: HDC, X: int32, Y: int32) =
  CoolBar_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TCoolBar, AControl: TControl) =
  CoolBar_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TCoolBar) =
  CoolBar_Realign(this.Instance)

proc Repaint*(this: TCoolBar) =
  CoolBar_Repaint(this.Instance)

proc ScaleBy*(this: TCoolBar, M: int32, D: int32) =
  CoolBar_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TCoolBar, DeltaX: int32, DeltaY: int32) =
  CoolBar_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TCoolBar, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  CoolBar_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TCoolBar) =
  CoolBar_SetFocus(this.Instance)

proc Update*(this: TCoolBar) =
  CoolBar_Update(this.Instance)

proc BringToFront*(this: TCoolBar) =
  CoolBar_BringToFront(this.Instance)

proc ClientToScreen*(this: TCoolBar, Point: TPoint): TPoint =
  var ps1 = Point
  CoolBar_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TCoolBar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  CoolBar_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TCoolBar): bool =
  return CoolBar_Dragging(this.Instance)

proc HasParent*(this: TCoolBar): bool =
  return CoolBar_HasParent(this.Instance)

proc Hide*(this: TCoolBar) =
  CoolBar_Hide(this.Instance)

proc Perform*(this: TCoolBar, Msg: uint32, WParam: uint, LParam: int): int =
  return CoolBar_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TCoolBar) =
  CoolBar_Refresh(this.Instance)

proc ScreenToClient*(this: TCoolBar, Point: TPoint): TPoint =
  var ps1 = Point
  CoolBar_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TCoolBar, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  CoolBar_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TCoolBar) =
  CoolBar_SendToBack(this.Instance)

proc Show*(this: TCoolBar) =
  CoolBar_Show(this.Instance)

proc GetTextBuf*(this: TCoolBar, Buffer: string, BufSize: int32): int32 =
  return CoolBar_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TCoolBar): int32 =
  return CoolBar_GetTextLen(this.Instance)

proc SetTextBuf*(this: TCoolBar, Buffer: string) =
  CoolBar_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TCoolBar, AName: string): TComponent =
  return CoolBar_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TCoolBar): string =
  return $CoolBar_GetNamePath(this.Instance)

proc Assign*(this: TCoolBar, Source: TObject) =
  CoolBar_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TCoolBar): TClass =
  return CoolBar_ClassType(this.Instance)

proc ClassName*(this: TCoolBar): string =
  return $CoolBar_ClassName(this.Instance)

proc InstanceSize*(this: TCoolBar): int32 =
  return CoolBar_InstanceSize(this.Instance)

proc InheritsFrom*(this: TCoolBar, AClass: TClass): bool =
  return CoolBar_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TCoolBar, Obj: TObject): bool =
  return CoolBar_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TCoolBar): int32 =
  return CoolBar_GetHashCode(this.Instance)

proc ToString*(this: TCoolBar): string =
  return $CoolBar_ToString(this.Instance)

proc AnchorToNeighbour*(this: TCoolBar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  CoolBar_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TCoolBar, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  CoolBar_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TCoolBar, ASibling: TControl) =
  CoolBar_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TCoolBar, ASibling: TControl) =
  CoolBar_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TCoolBar, ASide: TAnchorKind, ASibling: TControl) =
  CoolBar_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TCoolBar, ATheAlign: TAlign, ASpace: int32) =
  CoolBar_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TCoolBar, ASpace: int32) =
  CoolBar_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TCoolBar, ASize: int32): int32 =
  return CoolBar_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TCoolBar, ASize: int32): int32 =
  return CoolBar_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TCoolBar, ASize: int32): int32 =
  return CoolBar_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TCoolBar, ASize: int32): int32 =
  return CoolBar_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TCoolBar, ASize: int32): int32 =
  return CoolBar_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TCoolBar, ASize: int32): int32 =
  return CoolBar_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TCoolBar, ASize: int32): int32 =
  return CoolBar_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TCoolBar, ASize: int32): int32 =
  return CoolBar_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TCoolBar, ASize: int32): int32 =
  return CoolBar_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TCoolBar, ASize: int32): int32 =
  return CoolBar_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TCoolBar, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  CoolBar_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TCoolBar, ADesignTimePPI: int32) =
  CoolBar_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TCoolBar, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  CoolBar_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TCoolBar): TAlign  =
  return CoolBar_GetAlign(this.Instance)

proc `Align=`*(this: TCoolBar, AValue: TAlign)  =
  CoolBar_SetAlign(this.Instance, AValue)

proc Anchors*(this: TCoolBar): TAnchors  =
  return CoolBar_GetAnchors(this.Instance)

proc `Anchors=`*(this: TCoolBar, AValue: TAnchors)  =
  CoolBar_SetAnchors(this.Instance, AValue)

proc AutoSize*(this: TCoolBar): bool  =
  return CoolBar_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetAutoSize(this.Instance, AValue)

proc BandBorderStyle*(this: TCoolBar): TBorderStyle  =
  return CoolBar_GetBandBorderStyle(this.Instance)

proc `BandBorderStyle=`*(this: TCoolBar, AValue: TBorderStyle)  =
  CoolBar_SetBandBorderStyle(this.Instance, AValue)

proc BandMaximize*(this: TCoolBar): TCoolBandMaximize  =
  return CoolBar_GetBandMaximize(this.Instance)

proc `BandMaximize=`*(this: TCoolBar, AValue: TCoolBandMaximize)  =
  CoolBar_SetBandMaximize(this.Instance, AValue)

proc Bands*(this: TCoolBar): TCoolBands  =
  return CoolBar_GetBands(this.Instance).AsCoolBands

proc `Bands=`*(this: TCoolBar, AValue: TCoolBands)  =
  CoolBar_SetBands(this.Instance, CheckPtr(AValue))

proc BorderWidth*(this: TCoolBar): int32  =
  return CoolBar_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TCoolBar, AValue: int32)  =
  CoolBar_SetBorderWidth(this.Instance, AValue)

proc Color*(this: TCoolBar): TColor  =
  return CoolBar_GetColor(this.Instance)

proc `Color=`*(this: TCoolBar, AValue: TColor)  =
  CoolBar_SetColor(this.Instance, AValue)

proc Constraints*(this: TCoolBar): TSizeConstraints  =
  return CoolBar_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TCoolBar, AValue: TSizeConstraints)  =
  CoolBar_SetConstraints(this.Instance, CheckPtr(AValue))

proc DockSite*(this: TCoolBar): bool  =
  return CoolBar_GetDockSite(this.Instance)

proc `DockSite=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetDockSite(this.Instance, AValue)

proc DoubleBuffered*(this: TCoolBar): bool  =
  return CoolBar_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TCoolBar): TCursor  =
  return CoolBar_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TCoolBar, AValue: TCursor)  =
  CoolBar_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TCoolBar): TDragKind  =
  return CoolBar_GetDragKind(this.Instance)

proc `DragKind=`*(this: TCoolBar, AValue: TDragKind)  =
  CoolBar_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TCoolBar): TDragMode  =
  return CoolBar_GetDragMode(this.Instance)

proc `DragMode=`*(this: TCoolBar, AValue: TDragMode)  =
  CoolBar_SetDragMode(this.Instance, AValue)

proc EdgeBorders*(this: TCoolBar): TEdgeBorders  =
  return CoolBar_GetEdgeBorders(this.Instance)

proc `EdgeBorders=`*(this: TCoolBar, AValue: TEdgeBorders)  =
  CoolBar_SetEdgeBorders(this.Instance, AValue)

proc EdgeInner*(this: TCoolBar): TEdgeStyle  =
  return CoolBar_GetEdgeInner(this.Instance)

proc `EdgeInner=`*(this: TCoolBar, AValue: TEdgeStyle)  =
  CoolBar_SetEdgeInner(this.Instance, AValue)

proc EdgeOuter*(this: TCoolBar): TEdgeStyle  =
  return CoolBar_GetEdgeOuter(this.Instance)

proc `EdgeOuter=`*(this: TCoolBar, AValue: TEdgeStyle)  =
  CoolBar_SetEdgeOuter(this.Instance, AValue)

proc Enabled*(this: TCoolBar): bool  =
  return CoolBar_GetEnabled(this.Instance)

proc `Enabled=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetEnabled(this.Instance, AValue)

proc FixedSize*(this: TCoolBar): bool  =
  return CoolBar_GetFixedSize(this.Instance)

proc `FixedSize=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetFixedSize(this.Instance, AValue)

proc FixedOrder*(this: TCoolBar): bool  =
  return CoolBar_GetFixedOrder(this.Instance)

proc `FixedOrder=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetFixedOrder(this.Instance, AValue)

proc Font*(this: TCoolBar): TFont  =
  return CoolBar_GetFont(this.Instance).AsFont

proc `Font=`*(this: TCoolBar, AValue: TFont)  =
  CoolBar_SetFont(this.Instance, CheckPtr(AValue))

proc Images*(this: TCoolBar): TImageList  =
  return CoolBar_GetImages(this.Instance).AsImageList

proc `Images=`*(this: TCoolBar, AValue: TImageList)  =
  CoolBar_SetImages(this.Instance, CheckPtr(AValue))

proc ParentColor*(this: TCoolBar): bool  =
  return CoolBar_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TCoolBar): bool  =
  return CoolBar_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TCoolBar): bool  =
  return CoolBar_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TCoolBar): bool  =
  return CoolBar_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetParentShowHint(this.Instance, AValue)

proc Bitmap*(this: TCoolBar): TBitmap  =
  return CoolBar_GetBitmap(this.Instance).AsBitmap

proc `Bitmap=`*(this: TCoolBar, AValue: TBitmap)  =
  CoolBar_SetBitmap(this.Instance, CheckPtr(AValue))

proc PopupMenu*(this: TCoolBar): TPopupMenu  =
  return CoolBar_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TCoolBar, AValue: TPopupMenu)  =
  CoolBar_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TCoolBar): bool  =
  return CoolBar_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetShowHint(this.Instance, AValue)

proc ShowText*(this: TCoolBar): bool  =
  return CoolBar_GetShowText(this.Instance)

proc `ShowText=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetShowText(this.Instance, AValue)

proc Vertical*(this: TCoolBar): bool  =
  return CoolBar_GetVertical(this.Instance)

proc `Vertical=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetVertical(this.Instance, AValue)

proc Visible*(this: TCoolBar): bool  =
  return CoolBar_GetVisible(this.Instance)

proc `Visible=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetVisible(this.Instance, AValue)

proc `OnChange=`*(this: TCoolBar, AEventId: TNotifyEvent)  =
  CoolBar_SetOnChange(this.Instance, AEventId)

proc `OnClick=`*(this: TCoolBar, AEventId: TNotifyEvent)  =
  CoolBar_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TCoolBar, AEventId: TContextPopupEvent)  =
  CoolBar_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TCoolBar, AEventId: TNotifyEvent)  =
  CoolBar_SetOnDblClick(this.Instance, AEventId)

proc `OnDockDrop=`*(this: TCoolBar, AEventId: TDockDropEvent)  =
  CoolBar_SetOnDockDrop(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TCoolBar, AEventId: TDragDropEvent)  =
  CoolBar_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TCoolBar, AEventId: TDragOverEvent)  =
  CoolBar_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDock=`*(this: TCoolBar, AEventId: TEndDragEvent)  =
  CoolBar_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TCoolBar, AEventId: TEndDragEvent)  =
  CoolBar_SetOnEndDrag(this.Instance, AEventId)

proc `OnGetSiteInfo=`*(this: TCoolBar, AEventId: TGetSiteInfoEvent)  =
  CoolBar_SetOnGetSiteInfo(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TCoolBar, AEventId: TMouseEvent)  =
  CoolBar_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TCoolBar, AEventId: TNotifyEvent)  =
  CoolBar_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TCoolBar, AEventId: TNotifyEvent)  =
  CoolBar_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TCoolBar, AEventId: TMouseMoveEvent)  =
  CoolBar_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TCoolBar, AEventId: TMouseEvent)  =
  CoolBar_SetOnMouseUp(this.Instance, AEventId)

proc `OnResize=`*(this: TCoolBar, AEventId: TNotifyEvent)  =
  CoolBar_SetOnResize(this.Instance, AEventId)

proc `OnStartDock=`*(this: TCoolBar, AEventId: TStartDockEvent)  =
  CoolBar_SetOnStartDock(this.Instance, AEventId)

proc `OnUnDock=`*(this: TCoolBar, AEventId: TUnDockEvent)  =
  CoolBar_SetOnUnDock(this.Instance, AEventId)

proc DockClientCount*(this: TCoolBar): int32  =
  return CoolBar_GetDockClientCount(this.Instance)

proc MouseInClient*(this: TCoolBar): bool  =
  return CoolBar_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TCoolBar): int32  =
  return CoolBar_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TCoolBar): TBrush  =
  return CoolBar_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TCoolBar): int32  =
  return CoolBar_GetControlCount(this.Instance)

proc Handle*(this: TCoolBar): HWND  =
  return CoolBar_GetHandle(this.Instance)

proc ParentWindow*(this: TCoolBar): HWND  =
  return CoolBar_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TCoolBar, AValue: HWND)  =
  CoolBar_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TCoolBar): bool  =
  return CoolBar_GetShowing(this.Instance)

proc TabOrder*(this: TCoolBar): TTabOrder  =
  return CoolBar_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TCoolBar, AValue: TTabOrder)  =
  CoolBar_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TCoolBar): bool  =
  return CoolBar_GetTabStop(this.Instance)

proc `TabStop=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetTabStop(this.Instance, AValue)

proc UseDockManager*(this: TCoolBar): bool  =
  return CoolBar_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TCoolBar, AValue: bool)  =
  CoolBar_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TCoolBar): TAction  =
  return CoolBar_GetAction(this.Instance).AsAction

proc `Action=`*(this: TCoolBar, AValue: TAction)  =
  CoolBar_SetAction(this.Instance, CheckPtr(AValue))

proc BiDiMode*(this: TCoolBar): TBiDiMode  =
  return CoolBar_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TCoolBar, AValue: TBiDiMode)  =
  CoolBar_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TCoolBar): TRect  =
  CoolBar_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TCoolBar, AValue: TRect)  =
  var ps1 = AValue
  CoolBar_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TCoolBar): int32  =
  return CoolBar_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TCoolBar, AValue: int32)  =
  CoolBar_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TCoolBar): TPoint  =
  CoolBar_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TCoolBar): TRect  =
  CoolBar_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TCoolBar): int32  =
  return CoolBar_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TCoolBar, AValue: int32)  =
  CoolBar_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TCoolBar): TControlState  =
  return CoolBar_GetControlState(this.Instance)

proc `ControlState=`*(this: TCoolBar, AValue: TControlState)  =
  CoolBar_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TCoolBar): TControlStyle  =
  return CoolBar_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TCoolBar, AValue: TControlStyle)  =
  CoolBar_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TCoolBar): bool  =
  return CoolBar_GetFloating(this.Instance)

proc Parent*(this: TCoolBar): TWinControl  =
  return CoolBar_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TCoolBar, AValue: TWinControl)  =
  CoolBar_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TCoolBar): int32  =
  return CoolBar_GetLeft(this.Instance)

proc `Left=`*(this: TCoolBar, AValue: int32)  =
  CoolBar_SetLeft(this.Instance, AValue)

proc Top*(this: TCoolBar): int32  =
  return CoolBar_GetTop(this.Instance)

proc `Top=`*(this: TCoolBar, AValue: int32)  =
  CoolBar_SetTop(this.Instance, AValue)

proc Width*(this: TCoolBar): int32  =
  return CoolBar_GetWidth(this.Instance)

proc `Width=`*(this: TCoolBar, AValue: int32)  =
  CoolBar_SetWidth(this.Instance, AValue)

proc Height*(this: TCoolBar): int32  =
  return CoolBar_GetHeight(this.Instance)

proc `Height=`*(this: TCoolBar, AValue: int32)  =
  CoolBar_SetHeight(this.Instance, AValue)

proc Cursor*(this: TCoolBar): TCursor  =
  return CoolBar_GetCursor(this.Instance)

proc `Cursor=`*(this: TCoolBar, AValue: TCursor)  =
  CoolBar_SetCursor(this.Instance, AValue)

proc Hint*(this: TCoolBar): string  =
  return $CoolBar_GetHint(this.Instance)

proc `Hint=`*(this: TCoolBar, AValue: string)  =
  CoolBar_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TCoolBar): int32  =
  return CoolBar_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TCoolBar): int32  =
  return CoolBar_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TCoolBar, AValue: int32)  =
  CoolBar_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TCoolBar): TComponent  =
  return CoolBar_GetOwner(this.Instance).AsComponent

proc Name*(this: TCoolBar): string  =
  return $CoolBar_GetName(this.Instance)

proc `Name=`*(this: TCoolBar, AValue: string)  =
  CoolBar_SetName(this.Instance, AValue)

proc Tag*(this: TCoolBar): int  =
  return CoolBar_GetTag(this.Instance)

proc `Tag=`*(this: TCoolBar, AValue: int)  =
  CoolBar_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TCoolBar): TAnchorSide  =
  return CoolBar_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TCoolBar, AValue: TAnchorSide)  =
  CoolBar_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TCoolBar): TAnchorSide  =
  return CoolBar_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TCoolBar, AValue: TAnchorSide)  =
  CoolBar_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TCoolBar): TAnchorSide  =
  return CoolBar_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TCoolBar, AValue: TAnchorSide)  =
  CoolBar_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TCoolBar): TAnchorSide  =
  return CoolBar_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TCoolBar, AValue: TAnchorSide)  =
  CoolBar_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TCoolBar): TControlChildSizing  =
  return CoolBar_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TCoolBar, AValue: TControlChildSizing)  =
  CoolBar_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TCoolBar): TControlBorderSpacing  =
  return CoolBar_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TCoolBar, AValue: TControlBorderSpacing)  =
  CoolBar_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TCoolBar, Index: int32): TControl  =
  return CoolBar_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TCoolBar, Index: int32): TControl  =
  return CoolBar_GetControls(this.Instance, Index).AsControl

proc Components*(this: TCoolBar, AIndex: int32): TComponent  =
  return CoolBar_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TCoolBar, AKind: TAnchorKind): TAnchorSide  =
  return CoolBar_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TCoolBarClass*(): TClass = CoolBar_StaticClassType()


#------------------------- TCoolBands -------------------------

proc Free*(this: TCoolBands) = defaultFree: CoolBands_Free

proc NewCoolBands*(AOwner: TCoolBar): TCoolBands =
  new(result, Free)
  result.Instance = CoolBands_Create(CheckPtr(AOwner))

proc Add*(this: TCoolBands): TCoolBand  =
  return CoolBands_Add(this.Instance).AsCoolBand

proc FindBand*(this: TCoolBands, AControl: TControl): TCoolBand  =
  return CoolBands_FindBand(this.Instance, CheckPtr(AControl)).AsCoolBand

proc Owner*(this: TCoolBands): TObject  =
  return CoolBands_Owner(this.Instance).AsObject

proc Assign*(this: TCoolBands, Source: TObject)  =
  CoolBands_Assign(this.Instance, CheckPtr(Source))

proc BeginUpdate*(this: TCoolBands)  =
  CoolBands_BeginUpdate(this.Instance)

proc Clear*(this: TCoolBands)  =
  CoolBands_Clear(this.Instance)

proc Delete*(this: TCoolBands, Index: int32)  =
  CoolBands_Delete(this.Instance, Index)

proc EndUpdate*(this: TCoolBands)  =
  CoolBands_EndUpdate(this.Instance)

proc FindItemID*(this: TCoolBands, ID: int32): TCollectionItem  =
  return CoolBands_FindItemID(this.Instance, ID).AsCollectionItem

proc GetNamePath*(this: TCoolBands): string  =
  return $CoolBands_GetNamePath(this.Instance)

proc Insert*(this: TCoolBands, Index: int32): TCollectionItem  =
  return CoolBands_Insert(this.Instance, Index).AsCollectionItem

proc ClassType*(this: TCoolBands): TClass =
  return CoolBands_ClassType(this.Instance)

proc ClassName*(this: TCoolBands): string =
  return $CoolBands_ClassName(this.Instance)

proc InstanceSize*(this: TCoolBands): int32 =
  return CoolBands_InstanceSize(this.Instance)

proc InheritsFrom*(this: TCoolBands, AClass: TClass): bool =
  return CoolBands_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TCoolBands, Obj: TObject): bool =
  return CoolBands_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TCoolBands): int32 =
  return CoolBands_GetHashCode(this.Instance)

proc ToString*(this: TCoolBands): string =
  return $CoolBands_ToString(this.Instance)

proc Count*(this: TCoolBands): int32  =
  return CoolBands_GetCount(this.Instance)

proc Items*(this: TCoolBands, Index: int32): TCoolBand  =
  return CoolBands_GetItems(this.Instance, Index).AsCoolBand

proc `Items=`*(this: TCoolBands, Index: int32, AValue: TCoolBand)  =
  CoolBands_SetItems(this.Instance, Index, CheckPtr(AValue))

proc TCoolBandsClass*(): TClass = CoolBands_StaticClassType()


#------------------------- TCoolBand -------------------------

proc Free*(this: TCoolBand) = defaultFree: CoolBand_Free

proc NewCoolBand*(AOwner: TCollection): TCoolBand =
  new(result, Free)
  result.Instance = CoolBand_Create(CheckPtr(AOwner))

proc Assign*(this: TCoolBand, Source: TObject)  =
  CoolBand_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TCoolBand): string  =
  return $CoolBand_GetNamePath(this.Instance)

proc ClassType*(this: TCoolBand): TClass =
  return CoolBand_ClassType(this.Instance)

proc ClassName*(this: TCoolBand): string =
  return $CoolBand_ClassName(this.Instance)

proc InstanceSize*(this: TCoolBand): int32 =
  return CoolBand_InstanceSize(this.Instance)

proc InheritsFrom*(this: TCoolBand, AClass: TClass): bool =
  return CoolBand_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TCoolBand, Obj: TObject): bool =
  return CoolBand_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TCoolBand): int32 =
  return CoolBand_GetHashCode(this.Instance)

proc ToString*(this: TCoolBand): string =
  return $CoolBand_ToString(this.Instance)

proc Height*(this: TCoolBand): int32  =
  return CoolBand_GetHeight(this.Instance)

proc Bitmap*(this: TCoolBand): TBitmap  =
  return CoolBand_GetBitmap(this.Instance).AsBitmap

proc `Bitmap=`*(this: TCoolBand, AValue: TBitmap)  =
  CoolBand_SetBitmap(this.Instance, CheckPtr(AValue))

proc BorderStyle*(this: TCoolBand): TBorderStyle  =
  return CoolBand_GetBorderStyle(this.Instance)

proc `BorderStyle=`*(this: TCoolBand, AValue: TBorderStyle)  =
  CoolBand_SetBorderStyle(this.Instance, AValue)

proc Break*(this: TCoolBand): bool  =
  return CoolBand_GetBreak(this.Instance)

proc `Break=`*(this: TCoolBand, AValue: bool)  =
  CoolBand_SetBreak(this.Instance, AValue)

proc Color*(this: TCoolBand): TColor  =
  return CoolBand_GetColor(this.Instance)

proc `Color=`*(this: TCoolBand, AValue: TColor)  =
  CoolBand_SetColor(this.Instance, AValue)

proc Control*(this: TCoolBand): TWinControl  =
  return CoolBand_GetControl(this.Instance).AsWinControl

proc `Control=`*(this: TCoolBand, AValue: TWinControl)  =
  CoolBand_SetControl(this.Instance, CheckPtr(AValue))

proc FixedBackground*(this: TCoolBand): bool  =
  return CoolBand_GetFixedBackground(this.Instance)

proc `FixedBackground=`*(this: TCoolBand, AValue: bool)  =
  CoolBand_SetFixedBackground(this.Instance, AValue)

proc FixedSize*(this: TCoolBand): bool  =
  return CoolBand_GetFixedSize(this.Instance)

proc `FixedSize=`*(this: TCoolBand, AValue: bool)  =
  CoolBand_SetFixedSize(this.Instance, AValue)

proc HorizontalOnly*(this: TCoolBand): bool  =
  return CoolBand_GetHorizontalOnly(this.Instance)

proc `HorizontalOnly=`*(this: TCoolBand, AValue: bool)  =
  CoolBand_SetHorizontalOnly(this.Instance, AValue)

proc ImageIndex*(this: TCoolBand): int32  =
  return CoolBand_GetImageIndex(this.Instance)

proc `ImageIndex=`*(this: TCoolBand, AValue: int32)  =
  CoolBand_SetImageIndex(this.Instance, AValue)

proc MinHeight*(this: TCoolBand): int32  =
  return CoolBand_GetMinHeight(this.Instance)

proc `MinHeight=`*(this: TCoolBand, AValue: int32)  =
  CoolBand_SetMinHeight(this.Instance, AValue)

proc MinWidth*(this: TCoolBand): int32  =
  return CoolBand_GetMinWidth(this.Instance)

proc `MinWidth=`*(this: TCoolBand, AValue: int32)  =
  CoolBand_SetMinWidth(this.Instance, AValue)

proc ParentColor*(this: TCoolBand): bool  =
  return CoolBand_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TCoolBand, AValue: bool)  =
  CoolBand_SetParentColor(this.Instance, AValue)

proc ParentBitmap*(this: TCoolBand): bool  =
  return CoolBand_GetParentBitmap(this.Instance)

proc `ParentBitmap=`*(this: TCoolBand, AValue: bool)  =
  CoolBand_SetParentBitmap(this.Instance, AValue)

proc Text*(this: TCoolBand): string  =
  return $CoolBand_GetText(this.Instance)

proc `Text=`*(this: TCoolBand, AValue: string)  =
  CoolBand_SetText(this.Instance, AValue)

proc Visible*(this: TCoolBand): bool  =
  return CoolBand_GetVisible(this.Instance)

proc `Visible=`*(this: TCoolBand, AValue: bool)  =
  CoolBand_SetVisible(this.Instance, AValue)

proc Width*(this: TCoolBand): int32  =
  return CoolBand_GetWidth(this.Instance)

proc `Width=`*(this: TCoolBand, AValue: int32)  =
  CoolBand_SetWidth(this.Instance, AValue)

proc Collection*(this: TCoolBand): TCollection  =
  return CoolBand_GetCollection(this.Instance).AsCollection

proc `Collection=`*(this: TCoolBand, AValue: TCollection)  =
  CoolBand_SetCollection(this.Instance, CheckPtr(AValue))

proc Index*(this: TCoolBand): int32  =
  return CoolBand_GetIndex(this.Instance)

proc `Index=`*(this: TCoolBand, AValue: int32)  =
  CoolBand_SetIndex(this.Instance, AValue)

proc DisplayName*(this: TCoolBand): string  =
  return $CoolBand_GetDisplayName(this.Instance)

proc `DisplayName=`*(this: TCoolBand, AValue: string)  =
  CoolBand_SetDisplayName(this.Instance, AValue)

proc TCoolBandClass*(): TClass = CoolBand_StaticClassType()


#------------------------- TCollection -------------------------

proc Free*(this: TCollection) = defaultFree: Collection_Free

proc NewCollection*(AOwner: pointer): TCollection =
  new(result, Free)
  result.Instance = Collection_Create(AOwner)

proc Owner*(this: TCollection): TObject  =
  return Collection_Owner(this.Instance).AsObject

proc Add*(this: TCollection): TCollectionItem  =
  return Collection_Add(this.Instance).AsCollectionItem

proc Assign*(this: TCollection, Source: TObject)  =
  Collection_Assign(this.Instance, CheckPtr(Source))

proc BeginUpdate*(this: TCollection)  =
  Collection_BeginUpdate(this.Instance)

proc Clear*(this: TCollection)  =
  Collection_Clear(this.Instance)

proc Delete*(this: TCollection, Index: int32)  =
  Collection_Delete(this.Instance, Index)

proc EndUpdate*(this: TCollection)  =
  Collection_EndUpdate(this.Instance)

proc FindItemID*(this: TCollection, ID: int32): TCollectionItem  =
  return Collection_FindItemID(this.Instance, ID).AsCollectionItem

proc GetNamePath*(this: TCollection): string  =
  return $Collection_GetNamePath(this.Instance)

proc Insert*(this: TCollection, Index: int32): TCollectionItem  =
  return Collection_Insert(this.Instance, Index).AsCollectionItem

proc ClassType*(this: TCollection): TClass =
  return Collection_ClassType(this.Instance)

proc ClassName*(this: TCollection): string =
  return $Collection_ClassName(this.Instance)

proc InstanceSize*(this: TCollection): int32 =
  return Collection_InstanceSize(this.Instance)

proc InheritsFrom*(this: TCollection, AClass: TClass): bool =
  return Collection_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TCollection, Obj: TObject): bool =
  return Collection_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TCollection): int32 =
  return Collection_GetHashCode(this.Instance)

proc ToString*(this: TCollection): string =
  return $Collection_ToString(this.Instance)

proc Count*(this: TCollection): int32  =
  return Collection_GetCount(this.Instance)

proc Items*(this: TCollection, Index: int32): TCollectionItem  =
  return Collection_GetItems(this.Instance, Index).AsCollectionItem

proc `Items=`*(this: TCollection, Index: int32, AValue: TCollectionItem)  =
  Collection_SetItems(this.Instance, Index, CheckPtr(AValue))

proc TCollectionClass*(): TClass = Collection_StaticClassType()


#------------------------- TPrinter -------------------------

proc Free*(this: TPrinter) = defaultFree: Printer_Free

proc NewPrinter*(): TPrinter =
  new(result, Free)
  result.Instance = Printer_Create()

proc Abort*(this: TPrinter)  =
  Printer_Abort(this.Instance)

proc BeginDoc*(this: TPrinter)  =
  Printer_BeginDoc(this.Instance)

proc EndDoc*(this: TPrinter)  =
  Printer_EndDoc(this.Instance)

proc NewPage*(this: TPrinter)  =
  Printer_NewPage(this.Instance)

proc Refresh*(this: TPrinter)  =
  Printer_Refresh(this.Instance)

proc ClassType*(this: TPrinter): TClass =
  return Printer_ClassType(this.Instance)

proc ClassName*(this: TPrinter): string =
  return $Printer_ClassName(this.Instance)

proc InstanceSize*(this: TPrinter): int32 =
  return Printer_InstanceSize(this.Instance)

proc InheritsFrom*(this: TPrinter, AClass: TClass): bool =
  return Printer_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TPrinter, Obj: TObject): bool =
  return Printer_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TPrinter): int32 =
  return Printer_GetHashCode(this.Instance)

proc ToString*(this: TPrinter): string =
  return $Printer_ToString(this.Instance)

proc Aborted*(this: TPrinter): bool  =
  return Printer_GetAborted(this.Instance)

proc Canvas*(this: TPrinter): TCanvas  =
  return Printer_GetCanvas(this.Instance).AsCanvas

proc Copies*(this: TPrinter): int32  =
  return Printer_GetCopies(this.Instance)

proc `Copies=`*(this: TPrinter, AValue: int32)  =
  Printer_SetCopies(this.Instance, AValue)

proc Fonts*(this: TPrinter): TStrings  =
  return Printer_GetFonts(this.Instance).AsStrings

proc Orientation*(this: TPrinter): TPrinterOrientation  =
  return Printer_GetOrientation(this.Instance)

proc `Orientation=`*(this: TPrinter, AValue: TPrinterOrientation)  =
  Printer_SetOrientation(this.Instance, AValue)

proc PageHeight*(this: TPrinter): int32  =
  return Printer_GetPageHeight(this.Instance)

proc PageWidth*(this: TPrinter): int32  =
  return Printer_GetPageWidth(this.Instance)

proc PageNumber*(this: TPrinter): int32  =
  return Printer_GetPageNumber(this.Instance)

proc PrinterIndex*(this: TPrinter): int32  =
  return Printer_GetPrinterIndex(this.Instance)

proc `PrinterIndex=`*(this: TPrinter, AValue: int32)  =
  Printer_SetPrinterIndex(this.Instance, AValue)

proc Printing*(this: TPrinter): bool  =
  return Printer_GetPrinting(this.Instance)

proc Printers*(this: TPrinter): TStrings  =
  return Printer_GetPrinters(this.Instance).AsStrings

proc Title*(this: TPrinter): string  =
  return $Printer_GetTitle(this.Instance)

proc `Title=`*(this: TPrinter, AValue: string)  =
  Printer_SetTitle(this.Instance, AValue)

proc TPrinterClass*(): TClass = Printer_StaticClassType()


proc SetPrinter*(this: TPrinter, aName: string)  =
  Printer_SetPrinter(this.Instance, aName)

#------------------------- TTaskDialog -------------------------

proc Free*(this: TTaskDialog) = defaultFree: TaskDialog_Free

proc NewTaskDialog*(AOwner: TComponent): TTaskDialog =
  new(result)
  result.Instance = TaskDialog_Create(CheckPtr(AOwner))

proc Execute*(this: TTaskDialog): bool  =
  return TaskDialog_Execute(this.Instance)

proc FindComponent*(this: TTaskDialog, AName: string): TComponent =
  return TaskDialog_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TTaskDialog): string =
  return $TaskDialog_GetNamePath(this.Instance)

proc HasParent*(this: TTaskDialog): bool =
  return TaskDialog_HasParent(this.Instance)

proc Assign*(this: TTaskDialog, Source: TObject) =
  TaskDialog_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TTaskDialog): TClass =
  return TaskDialog_ClassType(this.Instance)

proc ClassName*(this: TTaskDialog): string =
  return $TaskDialog_ClassName(this.Instance)

proc InstanceSize*(this: TTaskDialog): int32 =
  return TaskDialog_InstanceSize(this.Instance)

proc InheritsFrom*(this: TTaskDialog, AClass: TClass): bool =
  return TaskDialog_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TTaskDialog, Obj: TObject): bool =
  return TaskDialog_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TTaskDialog): int32 =
  return TaskDialog_GetHashCode(this.Instance)

proc ToString*(this: TTaskDialog): string =
  return $TaskDialog_ToString(this.Instance)

proc Buttons*(this: TTaskDialog): TTaskDialogButtons  =
  return TaskDialog_GetButtons(this.Instance).AsTaskDialogButtons

proc `Buttons=`*(this: TTaskDialog, AValue: TTaskDialogButtons)  =
  TaskDialog_SetButtons(this.Instance, CheckPtr(AValue))

proc Caption*(this: TTaskDialog): string  =
  return $TaskDialog_GetCaption(this.Instance)

proc `Caption=`*(this: TTaskDialog, AValue: string)  =
  TaskDialog_SetCaption(this.Instance, AValue)

proc CommonButtons*(this: TTaskDialog): TTaskDialogCommonButtons  =
  return TaskDialog_GetCommonButtons(this.Instance)

proc `CommonButtons=`*(this: TTaskDialog, AValue: TTaskDialogCommonButtons)  =
  TaskDialog_SetCommonButtons(this.Instance, AValue)

proc DefaultButton*(this: TTaskDialog): TTaskDialogCommonButton  =
  return TaskDialog_GetDefaultButton(this.Instance)

proc `DefaultButton=`*(this: TTaskDialog, AValue: TTaskDialogCommonButton)  =
  TaskDialog_SetDefaultButton(this.Instance, AValue)

proc ExpandButtonCaption*(this: TTaskDialog): string  =
  return $TaskDialog_GetExpandButtonCaption(this.Instance)

proc `ExpandButtonCaption=`*(this: TTaskDialog, AValue: string)  =
  TaskDialog_SetExpandButtonCaption(this.Instance, AValue)

proc ExpandedText*(this: TTaskDialog): string  =
  return $TaskDialog_GetExpandedText(this.Instance)

proc `ExpandedText=`*(this: TTaskDialog, AValue: string)  =
  TaskDialog_SetExpandedText(this.Instance, AValue)

proc Flags*(this: TTaskDialog): TTaskDialogFlags  =
  return TaskDialog_GetFlags(this.Instance)

proc `Flags=`*(this: TTaskDialog, AValue: TTaskDialogFlags)  =
  TaskDialog_SetFlags(this.Instance, AValue)

proc FooterIcon*(this: TTaskDialog): TTaskDialogIcon  =
  return TaskDialog_GetFooterIcon(this.Instance)

proc `FooterIcon=`*(this: TTaskDialog, AValue: TTaskDialogIcon)  =
  TaskDialog_SetFooterIcon(this.Instance, AValue)

proc FooterText*(this: TTaskDialog): string  =
  return $TaskDialog_GetFooterText(this.Instance)

proc `FooterText=`*(this: TTaskDialog, AValue: string)  =
  TaskDialog_SetFooterText(this.Instance, AValue)

proc MainIcon*(this: TTaskDialog): TTaskDialogIcon  =
  return TaskDialog_GetMainIcon(this.Instance)

proc `MainIcon=`*(this: TTaskDialog, AValue: TTaskDialogIcon)  =
  TaskDialog_SetMainIcon(this.Instance, AValue)

proc RadioButtons*(this: TTaskDialog): TTaskDialogButtons  =
  return TaskDialog_GetRadioButtons(this.Instance).AsTaskDialogButtons

proc `RadioButtons=`*(this: TTaskDialog, AValue: TTaskDialogButtons)  =
  TaskDialog_SetRadioButtons(this.Instance, CheckPtr(AValue))

proc Text*(this: TTaskDialog): string  =
  return $TaskDialog_GetText(this.Instance)

proc `Text=`*(this: TTaskDialog, AValue: string)  =
  TaskDialog_SetText(this.Instance, AValue)

proc Title*(this: TTaskDialog): string  =
  return $TaskDialog_GetTitle(this.Instance)

proc `Title=`*(this: TTaskDialog, AValue: string)  =
  TaskDialog_SetTitle(this.Instance, AValue)

proc VerificationText*(this: TTaskDialog): string  =
  return $TaskDialog_GetVerificationText(this.Instance)

proc `VerificationText=`*(this: TTaskDialog, AValue: string)  =
  TaskDialog_SetVerificationText(this.Instance, AValue)

proc `OnButtonClicked=`*(this: TTaskDialog, AEventId: TTaskDlgClickEvent)  =
  TaskDialog_SetOnButtonClicked(this.Instance, AEventId)

proc Button*(this: TTaskDialog): TTaskDialogButtonItem  =
  return TaskDialog_GetButton(this.Instance).AsTaskDialogButtonItem

proc `Button=`*(this: TTaskDialog, AValue: TTaskDialogButtonItem)  =
  TaskDialog_SetButton(this.Instance, CheckPtr(AValue))

proc ModalResult*(this: TTaskDialog): TModalResult  =
  return TaskDialog_GetModalResult(this.Instance)

proc `ModalResult=`*(this: TTaskDialog, AValue: TModalResult)  =
  TaskDialog_SetModalResult(this.Instance, AValue)

proc RadioButton*(this: TTaskDialog): TTaskDialogRadioButtonItem  =
  return TaskDialog_GetRadioButton(this.Instance).AsTaskDialogRadioButtonItem

proc ComponentCount*(this: TTaskDialog): int32  =
  return TaskDialog_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TTaskDialog): int32  =
  return TaskDialog_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TTaskDialog, AValue: int32)  =
  TaskDialog_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TTaskDialog): TComponent  =
  return TaskDialog_GetOwner(this.Instance).AsComponent

proc Name*(this: TTaskDialog): string  =
  return $TaskDialog_GetName(this.Instance)

proc `Name=`*(this: TTaskDialog, AValue: string)  =
  TaskDialog_SetName(this.Instance, AValue)

proc Tag*(this: TTaskDialog): int  =
  return TaskDialog_GetTag(this.Instance)

proc `Tag=`*(this: TTaskDialog, AValue: int)  =
  TaskDialog_SetTag(this.Instance, AValue)

proc Components*(this: TTaskDialog, AIndex: int32): TComponent  =
  return TaskDialog_GetComponents(this.Instance, AIndex).AsComponent

proc TTaskDialogClass*(): TClass = TaskDialog_StaticClassType()


#------------------------- TTaskDialogButtons -------------------------


proc Add*(this: TTaskDialogButtons): TTaskDialogBaseButtonItem  =
  return TaskDialogButtons_Add(this.Instance).AsTaskDialogBaseButtonItem

proc FindButton*(this: TTaskDialogButtons, AModalResult: TModalResult): TTaskDialogBaseButtonItem  =
  return TaskDialogButtons_FindButton(this.Instance, AModalResult).AsTaskDialogBaseButtonItem

proc Owner*(this: TTaskDialogButtons): TObject  =
  return TaskDialogButtons_Owner(this.Instance).AsObject

proc Assign*(this: TTaskDialogButtons, Source: TObject)  =
  TaskDialogButtons_Assign(this.Instance, CheckPtr(Source))

proc BeginUpdate*(this: TTaskDialogButtons)  =
  TaskDialogButtons_BeginUpdate(this.Instance)

proc Clear*(this: TTaskDialogButtons)  =
  TaskDialogButtons_Clear(this.Instance)

proc Delete*(this: TTaskDialogButtons, Index: int32)  =
  TaskDialogButtons_Delete(this.Instance, Index)

proc EndUpdate*(this: TTaskDialogButtons)  =
  TaskDialogButtons_EndUpdate(this.Instance)

proc FindItemID*(this: TTaskDialogButtons, ID: int32): TCollectionItem  =
  return TaskDialogButtons_FindItemID(this.Instance, ID).AsCollectionItem

proc GetNamePath*(this: TTaskDialogButtons): string  =
  return $TaskDialogButtons_GetNamePath(this.Instance)

proc Insert*(this: TTaskDialogButtons, Index: int32): TCollectionItem  =
  return TaskDialogButtons_Insert(this.Instance, Index).AsCollectionItem

proc ClassType*(this: TTaskDialogButtons): TClass =
  return TaskDialogButtons_ClassType(this.Instance)

proc ClassName*(this: TTaskDialogButtons): string =
  return $TaskDialogButtons_ClassName(this.Instance)

proc InstanceSize*(this: TTaskDialogButtons): int32 =
  return TaskDialogButtons_InstanceSize(this.Instance)

proc InheritsFrom*(this: TTaskDialogButtons, AClass: TClass): bool =
  return TaskDialogButtons_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TTaskDialogButtons, Obj: TObject): bool =
  return TaskDialogButtons_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TTaskDialogButtons): int32 =
  return TaskDialogButtons_GetHashCode(this.Instance)

proc ToString*(this: TTaskDialogButtons): string =
  return $TaskDialogButtons_ToString(this.Instance)

proc DefaultButton*(this: TTaskDialogButtons): TTaskDialogBaseButtonItem  =
  return TaskDialogButtons_GetDefaultButton(this.Instance).AsTaskDialogBaseButtonItem

proc `DefaultButton=`*(this: TTaskDialogButtons, AValue: TTaskDialogBaseButtonItem)  =
  TaskDialogButtons_SetDefaultButton(this.Instance, CheckPtr(AValue))

proc Count*(this: TTaskDialogButtons): int32  =
  return TaskDialogButtons_GetCount(this.Instance)

proc Items*(this: TTaskDialogButtons, Index: int32): TTaskDialogBaseButtonItem  =
  return TaskDialogButtons_GetItems(this.Instance, Index).AsTaskDialogBaseButtonItem

proc `Items=`*(this: TTaskDialogButtons, Index: int32, AValue: TTaskDialogBaseButtonItem)  =
  TaskDialogButtons_SetItems(this.Instance, Index, CheckPtr(AValue))

proc TTaskDialogButtonsClass*(): TClass = TaskDialogButtons_StaticClassType()


#------------------------- TTaskDialogButtonItem -------------------------

proc Free*(this: TTaskDialogButtonItem) = defaultFree: TaskDialogButtonItem_Free

proc NewTaskDialogButtonItem*(AOwner: TCollection): TTaskDialogButtonItem =
  new(result, Free)
  result.Instance = TaskDialogButtonItem_Create(CheckPtr(AOwner))

proc GetNamePath*(this: TTaskDialogButtonItem): string  =
  return $TaskDialogButtonItem_GetNamePath(this.Instance)

proc Assign*(this: TTaskDialogButtonItem, Source: TObject)  =
  TaskDialogButtonItem_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TTaskDialogButtonItem): TClass =
  return TaskDialogButtonItem_ClassType(this.Instance)

proc ClassName*(this: TTaskDialogButtonItem): string =
  return $TaskDialogButtonItem_ClassName(this.Instance)

proc InstanceSize*(this: TTaskDialogButtonItem): int32 =
  return TaskDialogButtonItem_InstanceSize(this.Instance)

proc InheritsFrom*(this: TTaskDialogButtonItem, AClass: TClass): bool =
  return TaskDialogButtonItem_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TTaskDialogButtonItem, Obj: TObject): bool =
  return TaskDialogButtonItem_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TTaskDialogButtonItem): int32 =
  return TaskDialogButtonItem_GetHashCode(this.Instance)

proc ToString*(this: TTaskDialogButtonItem): string =
  return $TaskDialogButtonItem_ToString(this.Instance)

proc ModalResult*(this: TTaskDialogButtonItem): TModalResult  =
  return TaskDialogButtonItem_GetModalResult(this.Instance)

proc `ModalResult=`*(this: TTaskDialogButtonItem, AValue: TModalResult)  =
  TaskDialogButtonItem_SetModalResult(this.Instance, AValue)

proc Caption*(this: TTaskDialogButtonItem): string  =
  return $TaskDialogButtonItem_GetCaption(this.Instance)

proc `Caption=`*(this: TTaskDialogButtonItem, AValue: string)  =
  TaskDialogButtonItem_SetCaption(this.Instance, AValue)

proc Default*(this: TTaskDialogButtonItem): bool  =
  return TaskDialogButtonItem_GetDefault(this.Instance)

proc `Default=`*(this: TTaskDialogButtonItem, AValue: bool)  =
  TaskDialogButtonItem_SetDefault(this.Instance, AValue)

proc Collection*(this: TTaskDialogButtonItem): TCollection  =
  return TaskDialogButtonItem_GetCollection(this.Instance).AsCollection

proc `Collection=`*(this: TTaskDialogButtonItem, AValue: TCollection)  =
  TaskDialogButtonItem_SetCollection(this.Instance, CheckPtr(AValue))

proc Index*(this: TTaskDialogButtonItem): int32  =
  return TaskDialogButtonItem_GetIndex(this.Instance)

proc `Index=`*(this: TTaskDialogButtonItem, AValue: int32)  =
  TaskDialogButtonItem_SetIndex(this.Instance, AValue)

proc DisplayName*(this: TTaskDialogButtonItem): string  =
  return $TaskDialogButtonItem_GetDisplayName(this.Instance)

proc `DisplayName=`*(this: TTaskDialogButtonItem, AValue: string)  =
  TaskDialogButtonItem_SetDisplayName(this.Instance, AValue)

proc TTaskDialogButtonItemClass*(): TClass = TaskDialogButtonItem_StaticClassType()


#------------------------- TTaskDialogRadioButtonItem -------------------------

proc Free*(this: TTaskDialogRadioButtonItem) = defaultFree: TaskDialogRadioButtonItem_Free

proc NewTaskDialogRadioButtonItem*(AOwner: TCollection): TTaskDialogRadioButtonItem =
  new(result, Free)
  result.Instance = TaskDialogRadioButtonItem_Create(CheckPtr(AOwner))

proc GetNamePath*(this: TTaskDialogRadioButtonItem): string  =
  return $TaskDialogRadioButtonItem_GetNamePath(this.Instance)

proc Assign*(this: TTaskDialogRadioButtonItem, Source: TObject)  =
  TaskDialogRadioButtonItem_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TTaskDialogRadioButtonItem): TClass =
  return TaskDialogRadioButtonItem_ClassType(this.Instance)

proc ClassName*(this: TTaskDialogRadioButtonItem): string =
  return $TaskDialogRadioButtonItem_ClassName(this.Instance)

proc InstanceSize*(this: TTaskDialogRadioButtonItem): int32 =
  return TaskDialogRadioButtonItem_InstanceSize(this.Instance)

proc InheritsFrom*(this: TTaskDialogRadioButtonItem, AClass: TClass): bool =
  return TaskDialogRadioButtonItem_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TTaskDialogRadioButtonItem, Obj: TObject): bool =
  return TaskDialogRadioButtonItem_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TTaskDialogRadioButtonItem): int32 =
  return TaskDialogRadioButtonItem_GetHashCode(this.Instance)

proc ToString*(this: TTaskDialogRadioButtonItem): string =
  return $TaskDialogRadioButtonItem_ToString(this.Instance)

proc ModalResult*(this: TTaskDialogRadioButtonItem): TModalResult  =
  return TaskDialogRadioButtonItem_GetModalResult(this.Instance)

proc `ModalResult=`*(this: TTaskDialogRadioButtonItem, AValue: TModalResult)  =
  TaskDialogRadioButtonItem_SetModalResult(this.Instance, AValue)

proc Caption*(this: TTaskDialogRadioButtonItem): string  =
  return $TaskDialogRadioButtonItem_GetCaption(this.Instance)

proc `Caption=`*(this: TTaskDialogRadioButtonItem, AValue: string)  =
  TaskDialogRadioButtonItem_SetCaption(this.Instance, AValue)

proc Default*(this: TTaskDialogRadioButtonItem): bool  =
  return TaskDialogRadioButtonItem_GetDefault(this.Instance)

proc `Default=`*(this: TTaskDialogRadioButtonItem, AValue: bool)  =
  TaskDialogRadioButtonItem_SetDefault(this.Instance, AValue)

proc Collection*(this: TTaskDialogRadioButtonItem): TCollection  =
  return TaskDialogRadioButtonItem_GetCollection(this.Instance).AsCollection

proc `Collection=`*(this: TTaskDialogRadioButtonItem, AValue: TCollection)  =
  TaskDialogRadioButtonItem_SetCollection(this.Instance, CheckPtr(AValue))

proc Index*(this: TTaskDialogRadioButtonItem): int32  =
  return TaskDialogRadioButtonItem_GetIndex(this.Instance)

proc `Index=`*(this: TTaskDialogRadioButtonItem, AValue: int32)  =
  TaskDialogRadioButtonItem_SetIndex(this.Instance, AValue)

proc DisplayName*(this: TTaskDialogRadioButtonItem): string  =
  return $TaskDialogRadioButtonItem_GetDisplayName(this.Instance)

proc `DisplayName=`*(this: TTaskDialogRadioButtonItem, AValue: string)  =
  TaskDialogRadioButtonItem_SetDisplayName(this.Instance, AValue)

proc TTaskDialogRadioButtonItemClass*(): TClass = TaskDialogRadioButtonItem_StaticClassType()


#------------------------- TTaskDialogBaseButtonItem -------------------------

proc Free*(this: TTaskDialogBaseButtonItem) = defaultFree: TaskDialogBaseButtonItem_Free

proc NewTaskDialogBaseButtonItem*(AOwner: TCollection): TTaskDialogBaseButtonItem =
  new(result, Free)
  result.Instance = TaskDialogBaseButtonItem_Create(CheckPtr(AOwner))

proc GetNamePath*(this: TTaskDialogBaseButtonItem): string  =
  return $TaskDialogBaseButtonItem_GetNamePath(this.Instance)

proc Assign*(this: TTaskDialogBaseButtonItem, Source: TObject)  =
  TaskDialogBaseButtonItem_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TTaskDialogBaseButtonItem): TClass =
  return TaskDialogBaseButtonItem_ClassType(this.Instance)

proc ClassName*(this: TTaskDialogBaseButtonItem): string =
  return $TaskDialogBaseButtonItem_ClassName(this.Instance)

proc InstanceSize*(this: TTaskDialogBaseButtonItem): int32 =
  return TaskDialogBaseButtonItem_InstanceSize(this.Instance)

proc InheritsFrom*(this: TTaskDialogBaseButtonItem, AClass: TClass): bool =
  return TaskDialogBaseButtonItem_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TTaskDialogBaseButtonItem, Obj: TObject): bool =
  return TaskDialogBaseButtonItem_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TTaskDialogBaseButtonItem): int32 =
  return TaskDialogBaseButtonItem_GetHashCode(this.Instance)

proc ToString*(this: TTaskDialogBaseButtonItem): string =
  return $TaskDialogBaseButtonItem_ToString(this.Instance)

proc ModalResult*(this: TTaskDialogBaseButtonItem): TModalResult  =
  return TaskDialogBaseButtonItem_GetModalResult(this.Instance)

proc `ModalResult=`*(this: TTaskDialogBaseButtonItem, AValue: TModalResult)  =
  TaskDialogBaseButtonItem_SetModalResult(this.Instance, AValue)

proc Caption*(this: TTaskDialogBaseButtonItem): string  =
  return $TaskDialogBaseButtonItem_GetCaption(this.Instance)

proc `Caption=`*(this: TTaskDialogBaseButtonItem, AValue: string)  =
  TaskDialogBaseButtonItem_SetCaption(this.Instance, AValue)

proc Default*(this: TTaskDialogBaseButtonItem): bool  =
  return TaskDialogBaseButtonItem_GetDefault(this.Instance)

proc `Default=`*(this: TTaskDialogBaseButtonItem, AValue: bool)  =
  TaskDialogBaseButtonItem_SetDefault(this.Instance, AValue)

proc Collection*(this: TTaskDialogBaseButtonItem): TCollection  =
  return TaskDialogBaseButtonItem_GetCollection(this.Instance).AsCollection

proc `Collection=`*(this: TTaskDialogBaseButtonItem, AValue: TCollection)  =
  TaskDialogBaseButtonItem_SetCollection(this.Instance, CheckPtr(AValue))

proc Index*(this: TTaskDialogBaseButtonItem): int32  =
  return TaskDialogBaseButtonItem_GetIndex(this.Instance)

proc `Index=`*(this: TTaskDialogBaseButtonItem, AValue: int32)  =
  TaskDialogBaseButtonItem_SetIndex(this.Instance, AValue)

proc DisplayName*(this: TTaskDialogBaseButtonItem): string  =
  return $TaskDialogBaseButtonItem_GetDisplayName(this.Instance)

proc `DisplayName=`*(this: TTaskDialogBaseButtonItem, AValue: string)  =
  TaskDialogBaseButtonItem_SetDisplayName(this.Instance, AValue)

proc TTaskDialogBaseButtonItemClass*(): TClass = TaskDialogBaseButtonItem_StaticClassType()


#------------------------- TComboBoxEx -------------------------

proc Free*(this: TComboBoxEx) = defaultFree: ComboBoxEx_Free

proc NewComboBoxEx*(AOwner: TComponent): TComboBoxEx =
  new(result)
  result.Instance = ComboBoxEx_Create(CheckPtr(AOwner))

proc Focused*(this: TComboBoxEx): bool =
  return ComboBoxEx_Focused(this.Instance)

proc AddItem*(this: TComboBoxEx, Item: string, AObject: TObject)  =
  ComboBoxEx_AddItem(this.Instance, Item, CheckPtr(AObject))

proc Clear*(this: TComboBoxEx)  =
  ComboBoxEx_Clear(this.Instance)

proc ClearSelection*(this: TComboBoxEx)  =
  ComboBoxEx_ClearSelection(this.Instance)

proc DeleteSelected*(this: TComboBoxEx)  =
  ComboBoxEx_DeleteSelected(this.Instance)

proc SelectAll*(this: TComboBoxEx)  =
  ComboBoxEx_SelectAll(this.Instance)

proc CanFocus*(this: TComboBoxEx): bool =
  return ComboBoxEx_CanFocus(this.Instance)

proc ContainsControl*(this: TComboBoxEx, Control: TControl): bool =
  return ComboBoxEx_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TComboBoxEx, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return ComboBoxEx_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TComboBoxEx) =
  ComboBoxEx_DisableAlign(this.Instance)

proc EnableAlign*(this: TComboBoxEx) =
  ComboBoxEx_EnableAlign(this.Instance)

proc FindChildControl*(this: TComboBoxEx, ControlName: string): TControl =
  return ComboBoxEx_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TComboBoxEx, AllLevels: bool) =
  ComboBoxEx_FlipChildren(this.Instance, AllLevels)

proc HandleAllocated*(this: TComboBoxEx): bool =
  return ComboBoxEx_HandleAllocated(this.Instance)

proc InsertControl*(this: TComboBoxEx, AControl: TControl) =
  ComboBoxEx_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TComboBoxEx) =
  ComboBoxEx_Invalidate(this.Instance)

proc PaintTo*(this: TComboBoxEx, DC: HDC, X: int32, Y: int32) =
  ComboBoxEx_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TComboBoxEx, AControl: TControl) =
  ComboBoxEx_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TComboBoxEx) =
  ComboBoxEx_Realign(this.Instance)

proc Repaint*(this: TComboBoxEx) =
  ComboBoxEx_Repaint(this.Instance)

proc ScaleBy*(this: TComboBoxEx, M: int32, D: int32) =
  ComboBoxEx_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TComboBoxEx, DeltaX: int32, DeltaY: int32) =
  ComboBoxEx_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TComboBoxEx, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ComboBoxEx_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TComboBoxEx) =
  ComboBoxEx_SetFocus(this.Instance)

proc Update*(this: TComboBoxEx) =
  ComboBoxEx_Update(this.Instance)

proc BringToFront*(this: TComboBoxEx) =
  ComboBoxEx_BringToFront(this.Instance)

proc ClientToScreen*(this: TComboBoxEx, Point: TPoint): TPoint =
  var ps1 = Point
  ComboBoxEx_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TComboBoxEx, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ComboBoxEx_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TComboBoxEx): bool =
  return ComboBoxEx_Dragging(this.Instance)

proc HasParent*(this: TComboBoxEx): bool =
  return ComboBoxEx_HasParent(this.Instance)

proc Hide*(this: TComboBoxEx) =
  ComboBoxEx_Hide(this.Instance)

proc Perform*(this: TComboBoxEx, Msg: uint32, WParam: uint, LParam: int): int =
  return ComboBoxEx_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TComboBoxEx) =
  ComboBoxEx_Refresh(this.Instance)

proc ScreenToClient*(this: TComboBoxEx, Point: TPoint): TPoint =
  var ps1 = Point
  ComboBoxEx_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TComboBoxEx, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ComboBoxEx_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TComboBoxEx) =
  ComboBoxEx_SendToBack(this.Instance)

proc Show*(this: TComboBoxEx) =
  ComboBoxEx_Show(this.Instance)

proc GetTextBuf*(this: TComboBoxEx, Buffer: string, BufSize: int32): int32 =
  return ComboBoxEx_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TComboBoxEx): int32 =
  return ComboBoxEx_GetTextLen(this.Instance)

proc SetTextBuf*(this: TComboBoxEx, Buffer: string) =
  ComboBoxEx_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TComboBoxEx, AName: string): TComponent =
  return ComboBoxEx_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TComboBoxEx): string =
  return $ComboBoxEx_GetNamePath(this.Instance)

proc Assign*(this: TComboBoxEx, Source: TObject) =
  ComboBoxEx_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TComboBoxEx): TClass =
  return ComboBoxEx_ClassType(this.Instance)

proc ClassName*(this: TComboBoxEx): string =
  return $ComboBoxEx_ClassName(this.Instance)

proc InstanceSize*(this: TComboBoxEx): int32 =
  return ComboBoxEx_InstanceSize(this.Instance)

proc InheritsFrom*(this: TComboBoxEx, AClass: TClass): bool =
  return ComboBoxEx_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TComboBoxEx, Obj: TObject): bool =
  return ComboBoxEx_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TComboBoxEx): int32 =
  return ComboBoxEx_GetHashCode(this.Instance)

proc ToString*(this: TComboBoxEx): string =
  return $ComboBoxEx_ToString(this.Instance)

proc AnchorToNeighbour*(this: TComboBoxEx, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ComboBoxEx_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TComboBoxEx, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ComboBoxEx_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TComboBoxEx, ASibling: TControl) =
  ComboBoxEx_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TComboBoxEx, ASibling: TControl) =
  ComboBoxEx_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TComboBoxEx, ASide: TAnchorKind, ASibling: TControl) =
  ComboBoxEx_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TComboBoxEx, ATheAlign: TAlign, ASpace: int32) =
  ComboBoxEx_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TComboBoxEx, ASpace: int32) =
  ComboBoxEx_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TComboBoxEx, ASize: int32): int32 =
  return ComboBoxEx_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TComboBoxEx, ASize: int32): int32 =
  return ComboBoxEx_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TComboBoxEx, ASize: int32): int32 =
  return ComboBoxEx_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TComboBoxEx, ASize: int32): int32 =
  return ComboBoxEx_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TComboBoxEx, ASize: int32): int32 =
  return ComboBoxEx_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TComboBoxEx, ASize: int32): int32 =
  return ComboBoxEx_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TComboBoxEx, ASize: int32): int32 =
  return ComboBoxEx_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TComboBoxEx, ASize: int32): int32 =
  return ComboBoxEx_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TComboBoxEx, ASize: int32): int32 =
  return ComboBoxEx_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TComboBoxEx, ASize: int32): int32 =
  return ComboBoxEx_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TComboBoxEx, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ComboBoxEx_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TComboBoxEx, ADesignTimePPI: int32) =
  ComboBoxEx_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TComboBoxEx, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ComboBoxEx_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TComboBoxEx): TAlign  =
  return ComboBoxEx_GetAlign(this.Instance)

proc `Align=`*(this: TComboBoxEx, AValue: TAlign)  =
  ComboBoxEx_SetAlign(this.Instance, AValue)

proc AutoCompleteOptions*(this: TComboBoxEx): TAutoCompleteOptions  =
  return ComboBoxEx_GetAutoCompleteOptions(this.Instance)

proc `AutoCompleteOptions=`*(this: TComboBoxEx, AValue: TAutoCompleteOptions)  =
  ComboBoxEx_SetAutoCompleteOptions(this.Instance, AValue)

proc ItemsEx*(this: TComboBoxEx): TComboExItems  =
  return ComboBoxEx_GetItemsEx(this.Instance).AsComboExItems

proc `ItemsEx=`*(this: TComboBoxEx, AValue: TComboExItems)  =
  ComboBoxEx_SetItemsEx(this.Instance, CheckPtr(AValue))

proc Style*(this: TComboBoxEx): TComboBoxExStyle  =
  return ComboBoxEx_GetStyle(this.Instance)

proc `Style=`*(this: TComboBoxEx, AValue: TComboBoxExStyle)  =
  ComboBoxEx_SetStyle(this.Instance, AValue)

proc StyleEx*(this: TComboBoxEx): TComboBoxExStyles  =
  return ComboBoxEx_GetStyleEx(this.Instance)

proc `StyleEx=`*(this: TComboBoxEx, AValue: TComboBoxExStyles)  =
  ComboBoxEx_SetStyleEx(this.Instance, AValue)

proc Action*(this: TComboBoxEx): TAction  =
  return ComboBoxEx_GetAction(this.Instance).AsAction

proc `Action=`*(this: TComboBoxEx, AValue: TAction)  =
  ComboBoxEx_SetAction(this.Instance, CheckPtr(AValue))

proc Anchors*(this: TComboBoxEx): TAnchors  =
  return ComboBoxEx_GetAnchors(this.Instance)

proc `Anchors=`*(this: TComboBoxEx, AValue: TAnchors)  =
  ComboBoxEx_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TComboBoxEx): TBiDiMode  =
  return ComboBoxEx_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TComboBoxEx, AValue: TBiDiMode)  =
  ComboBoxEx_SetBiDiMode(this.Instance, AValue)

proc Color*(this: TComboBoxEx): TColor  =
  return ComboBoxEx_GetColor(this.Instance)

proc `Color=`*(this: TComboBoxEx, AValue: TColor)  =
  ComboBoxEx_SetColor(this.Instance, AValue)

proc Constraints*(this: TComboBoxEx): TSizeConstraints  =
  return ComboBoxEx_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TComboBoxEx, AValue: TSizeConstraints)  =
  ComboBoxEx_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TComboBoxEx, AValue: bool)  =
  ComboBoxEx_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TComboBoxEx): TCursor  =
  return ComboBoxEx_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TComboBoxEx, AValue: TCursor)  =
  ComboBoxEx_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TComboBoxEx): TDragKind  =
  return ComboBoxEx_GetDragKind(this.Instance)

proc `DragKind=`*(this: TComboBoxEx, AValue: TDragKind)  =
  ComboBoxEx_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TComboBoxEx): TDragMode  =
  return ComboBoxEx_GetDragMode(this.Instance)

proc `DragMode=`*(this: TComboBoxEx, AValue: TDragMode)  =
  ComboBoxEx_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetEnabled(this.Instance)

proc `Enabled=`*(this: TComboBoxEx, AValue: bool)  =
  ComboBoxEx_SetEnabled(this.Instance, AValue)

proc Font*(this: TComboBoxEx): TFont  =
  return ComboBoxEx_GetFont(this.Instance).AsFont

proc `Font=`*(this: TComboBoxEx, AValue: TFont)  =
  ComboBoxEx_SetFont(this.Instance, CheckPtr(AValue))

proc ItemHeight*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetItemHeight(this.Instance)

proc `ItemHeight=`*(this: TComboBoxEx, AValue: int32)  =
  ComboBoxEx_SetItemHeight(this.Instance, AValue)

proc MaxLength*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetMaxLength(this.Instance)

proc `MaxLength=`*(this: TComboBoxEx, AValue: int32)  =
  ComboBoxEx_SetMaxLength(this.Instance, AValue)

proc ParentColor*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TComboBoxEx, AValue: bool)  =
  ComboBoxEx_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TComboBoxEx, AValue: bool)  =
  ComboBoxEx_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TComboBoxEx, AValue: bool)  =
  ComboBoxEx_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TComboBoxEx, AValue: bool)  =
  ComboBoxEx_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TComboBoxEx): TPopupMenu  =
  return ComboBoxEx_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TComboBoxEx, AValue: TPopupMenu)  =
  ComboBoxEx_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TComboBoxEx, AValue: bool)  =
  ComboBoxEx_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TComboBoxEx): TTabOrder  =
  return ComboBoxEx_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TComboBoxEx, AValue: TTabOrder)  =
  ComboBoxEx_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetTabStop(this.Instance)

proc `TabStop=`*(this: TComboBoxEx, AValue: bool)  =
  ComboBoxEx_SetTabStop(this.Instance, AValue)

proc Text*(this: TComboBoxEx): string  =
  return $ComboBoxEx_GetText(this.Instance)

proc `Text=`*(this: TComboBoxEx, AValue: string)  =
  ComboBoxEx_SetText(this.Instance, AValue)

proc Visible*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetVisible(this.Instance)

proc `Visible=`*(this: TComboBoxEx, AValue: bool)  =
  ComboBoxEx_SetVisible(this.Instance, AValue)

proc `OnChange=`*(this: TComboBoxEx, AEventId: TNotifyEvent)  =
  ComboBoxEx_SetOnChange(this.Instance, AEventId)

proc `OnClick=`*(this: TComboBoxEx, AEventId: TNotifyEvent)  =
  ComboBoxEx_SetOnClick(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TComboBoxEx, AEventId: TContextPopupEvent)  =
  ComboBoxEx_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TComboBoxEx, AEventId: TNotifyEvent)  =
  ComboBoxEx_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TComboBoxEx, AEventId: TDragDropEvent)  =
  ComboBoxEx_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TComboBoxEx, AEventId: TDragOverEvent)  =
  ComboBoxEx_SetOnDragOver(this.Instance, AEventId)

proc `OnDropDown=`*(this: TComboBoxEx, AEventId: TNotifyEvent)  =
  ComboBoxEx_SetOnDropDown(this.Instance, AEventId)

proc `OnEndDock=`*(this: TComboBoxEx, AEventId: TEndDragEvent)  =
  ComboBoxEx_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TComboBoxEx, AEventId: TEndDragEvent)  =
  ComboBoxEx_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TComboBoxEx, AEventId: TNotifyEvent)  =
  ComboBoxEx_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TComboBoxEx, AEventId: TNotifyEvent)  =
  ComboBoxEx_SetOnExit(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TComboBoxEx, AEventId: TKeyEvent)  =
  ComboBoxEx_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TComboBoxEx, AEventId: TKeyPressEvent)  =
  ComboBoxEx_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TComboBoxEx, AEventId: TKeyEvent)  =
  ComboBoxEx_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TComboBoxEx, AEventId: TMouseMoveEvent)  =
  ComboBoxEx_SetOnMouseMove(this.Instance, AEventId)

proc `OnSelect=`*(this: TComboBoxEx, AEventId: TNotifyEvent)  =
  ComboBoxEx_SetOnSelect(this.Instance, AEventId)

proc `OnStartDock=`*(this: TComboBoxEx, AEventId: TStartDockEvent)  =
  ComboBoxEx_SetOnStartDock(this.Instance, AEventId)

proc Images*(this: TComboBoxEx): TImageList  =
  return ComboBoxEx_GetImages(this.Instance).AsImageList

proc `Images=`*(this: TComboBoxEx, AValue: TImageList)  =
  ComboBoxEx_SetImages(this.Instance, CheckPtr(AValue))

proc DropDownCount*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetDropDownCount(this.Instance)

proc `DropDownCount=`*(this: TComboBoxEx, AValue: int32)  =
  ComboBoxEx_SetDropDownCount(this.Instance, AValue)

proc SelText*(this: TComboBoxEx): string  =
  return $ComboBoxEx_GetSelText(this.Instance)

proc `SelText=`*(this: TComboBoxEx, AValue: string)  =
  ComboBoxEx_SetSelText(this.Instance, AValue)

proc Canvas*(this: TComboBoxEx): TCanvas  =
  return ComboBoxEx_GetCanvas(this.Instance).AsCanvas

proc DroppedDown*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetDroppedDown(this.Instance)

proc `DroppedDown=`*(this: TComboBoxEx, AValue: bool)  =
  ComboBoxEx_SetDroppedDown(this.Instance, AValue)

proc Items*(this: TComboBoxEx): TStrings  =
  return ComboBoxEx_GetItems(this.Instance).AsStrings

proc `Items=`*(this: TComboBoxEx, AValue: TStrings)  =
  ComboBoxEx_SetItems(this.Instance, CheckPtr(AValue))

proc SelLength*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetSelLength(this.Instance)

proc `SelLength=`*(this: TComboBoxEx, AValue: int32)  =
  ComboBoxEx_SetSelLength(this.Instance, AValue)

proc SelStart*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetSelStart(this.Instance)

proc `SelStart=`*(this: TComboBoxEx, AValue: int32)  =
  ComboBoxEx_SetSelStart(this.Instance, AValue)

proc ItemIndex*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetItemIndex(this.Instance)

proc `ItemIndex=`*(this: TComboBoxEx, AValue: int32)  =
  ComboBoxEx_SetItemIndex(this.Instance, AValue)

proc DockClientCount*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetDockClientCount(this.Instance)

proc DockSite*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetDockSite(this.Instance)

proc `DockSite=`*(this: TComboBoxEx, AValue: bool)  =
  ComboBoxEx_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TComboBoxEx): TBrush  =
  return ComboBoxEx_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetControlCount(this.Instance)

proc Handle*(this: TComboBoxEx): HWND  =
  return ComboBoxEx_GetHandle(this.Instance)

proc ParentWindow*(this: TComboBoxEx): HWND  =
  return ComboBoxEx_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TComboBoxEx, AValue: HWND)  =
  ComboBoxEx_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetShowing(this.Instance)

proc UseDockManager*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TComboBoxEx, AValue: bool)  =
  ComboBoxEx_SetUseDockManager(this.Instance, AValue)

proc BoundsRect*(this: TComboBoxEx): TRect  =
  ComboBoxEx_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TComboBoxEx, AValue: TRect)  =
  var ps1 = AValue
  ComboBoxEx_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TComboBoxEx, AValue: int32)  =
  ComboBoxEx_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TComboBoxEx): TPoint  =
  ComboBoxEx_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TComboBoxEx): TRect  =
  ComboBoxEx_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TComboBoxEx, AValue: int32)  =
  ComboBoxEx_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TComboBoxEx): TControlState  =
  return ComboBoxEx_GetControlState(this.Instance)

proc `ControlState=`*(this: TComboBoxEx, AValue: TControlState)  =
  ComboBoxEx_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TComboBoxEx): TControlStyle  =
  return ComboBoxEx_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TComboBoxEx, AValue: TControlStyle)  =
  ComboBoxEx_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TComboBoxEx): bool  =
  return ComboBoxEx_GetFloating(this.Instance)

proc Parent*(this: TComboBoxEx): TWinControl  =
  return ComboBoxEx_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TComboBoxEx, AValue: TWinControl)  =
  ComboBoxEx_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetLeft(this.Instance)

proc `Left=`*(this: TComboBoxEx, AValue: int32)  =
  ComboBoxEx_SetLeft(this.Instance, AValue)

proc Top*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetTop(this.Instance)

proc `Top=`*(this: TComboBoxEx, AValue: int32)  =
  ComboBoxEx_SetTop(this.Instance, AValue)

proc Width*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetWidth(this.Instance)

proc `Width=`*(this: TComboBoxEx, AValue: int32)  =
  ComboBoxEx_SetWidth(this.Instance, AValue)

proc Height*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetHeight(this.Instance)

proc `Height=`*(this: TComboBoxEx, AValue: int32)  =
  ComboBoxEx_SetHeight(this.Instance, AValue)

proc Cursor*(this: TComboBoxEx): TCursor  =
  return ComboBoxEx_GetCursor(this.Instance)

proc `Cursor=`*(this: TComboBoxEx, AValue: TCursor)  =
  ComboBoxEx_SetCursor(this.Instance, AValue)

proc Hint*(this: TComboBoxEx): string  =
  return $ComboBoxEx_GetHint(this.Instance)

proc `Hint=`*(this: TComboBoxEx, AValue: string)  =
  ComboBoxEx_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TComboBoxEx): int32  =
  return ComboBoxEx_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TComboBoxEx, AValue: int32)  =
  ComboBoxEx_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TComboBoxEx): TComponent  =
  return ComboBoxEx_GetOwner(this.Instance).AsComponent

proc Name*(this: TComboBoxEx): string  =
  return $ComboBoxEx_GetName(this.Instance)

proc `Name=`*(this: TComboBoxEx, AValue: string)  =
  ComboBoxEx_SetName(this.Instance, AValue)

proc Tag*(this: TComboBoxEx): int  =
  return ComboBoxEx_GetTag(this.Instance)

proc `Tag=`*(this: TComboBoxEx, AValue: int)  =
  ComboBoxEx_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TComboBoxEx): TAnchorSide  =
  return ComboBoxEx_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TComboBoxEx, AValue: TAnchorSide)  =
  ComboBoxEx_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TComboBoxEx): TAnchorSide  =
  return ComboBoxEx_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TComboBoxEx, AValue: TAnchorSide)  =
  ComboBoxEx_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TComboBoxEx): TAnchorSide  =
  return ComboBoxEx_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TComboBoxEx, AValue: TAnchorSide)  =
  ComboBoxEx_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TComboBoxEx): TAnchorSide  =
  return ComboBoxEx_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TComboBoxEx, AValue: TAnchorSide)  =
  ComboBoxEx_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TComboBoxEx): TControlChildSizing  =
  return ComboBoxEx_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TComboBoxEx, AValue: TControlChildSizing)  =
  ComboBoxEx_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TComboBoxEx): TControlBorderSpacing  =
  return ComboBoxEx_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TComboBoxEx, AValue: TControlBorderSpacing)  =
  ComboBoxEx_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TComboBoxEx, Index: int32): TControl  =
  return ComboBoxEx_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TComboBoxEx, Index: int32): TControl  =
  return ComboBoxEx_GetControls(this.Instance, Index).AsControl

proc Components*(this: TComboBoxEx, AIndex: int32): TComponent  =
  return ComboBoxEx_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TComboBoxEx, AKind: TAnchorKind): TAnchorSide  =
  return ComboBoxEx_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TComboBoxExClass*(): TClass = ComboBoxEx_StaticClassType()


#------------------------- TComboExItems -------------------------


proc Add*(this: TComboExItems): TComboExItem  =
  return ComboExItems_Add(this.Instance).AsComboExItem

proc AddItem*(this: TComboExItems, Caption: string, ImageIndex: int32, SelectedImageIndex: int32, OverlayImageIndex: int32, Indent: int32, Data: pointer): TComboExItem  =
  return ComboExItems_AddItem(this.Instance, Caption, ImageIndex, SelectedImageIndex, OverlayImageIndex, Indent, Data).AsComboExItem

proc Insert*(this: TComboExItems, Index: int32): TComboExItem  =
  return ComboExItems_Insert(this.Instance, Index).AsComboExItem

proc Owner*(this: TComboExItems): TObject  =
  return ComboExItems_Owner(this.Instance).AsObject

proc Assign*(this: TComboExItems, Source: TObject)  =
  ComboExItems_Assign(this.Instance, CheckPtr(Source))

proc BeginUpdate*(this: TComboExItems)  =
  ComboExItems_BeginUpdate(this.Instance)

proc Clear*(this: TComboExItems)  =
  ComboExItems_Clear(this.Instance)

proc Delete*(this: TComboExItems, Index: int32)  =
  ComboExItems_Delete(this.Instance, Index)

proc EndUpdate*(this: TComboExItems)  =
  ComboExItems_EndUpdate(this.Instance)

proc FindItemID*(this: TComboExItems, ID: int32): TCollectionItem  =
  return ComboExItems_FindItemID(this.Instance, ID).AsCollectionItem

proc GetNamePath*(this: TComboExItems): string  =
  return $ComboExItems_GetNamePath(this.Instance)

proc ClassType*(this: TComboExItems): TClass =
  return ComboExItems_ClassType(this.Instance)

proc ClassName*(this: TComboExItems): string =
  return $ComboExItems_ClassName(this.Instance)

proc InstanceSize*(this: TComboExItems): int32 =
  return ComboExItems_InstanceSize(this.Instance)

proc InheritsFrom*(this: TComboExItems, AClass: TClass): bool =
  return ComboExItems_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TComboExItems, Obj: TObject): bool =
  return ComboExItems_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TComboExItems): int32 =
  return ComboExItems_GetHashCode(this.Instance)

proc ToString*(this: TComboExItems): string =
  return $ComboExItems_ToString(this.Instance)

proc Count*(this: TComboExItems): int32  =
  return ComboExItems_GetCount(this.Instance)

proc ComboItems*(this: TComboExItems, Index: int32): TComboExItem  =
  return ComboExItems_GetComboItems(this.Instance, Index).AsComboExItem

proc TComboExItemsClass*(): TClass = ComboExItems_StaticClassType()


#------------------------- TComboExItem -------------------------


proc Assign*(this: TComboExItem, Source: TObject)  =
  ComboExItem_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TComboExItem): string  =
  return $ComboExItem_GetNamePath(this.Instance)

proc ClassType*(this: TComboExItem): TClass =
  return ComboExItem_ClassType(this.Instance)

proc ClassName*(this: TComboExItem): string =
  return $ComboExItem_ClassName(this.Instance)

proc InstanceSize*(this: TComboExItem): int32 =
  return ComboExItem_InstanceSize(this.Instance)

proc InheritsFrom*(this: TComboExItem, AClass: TClass): bool =
  return ComboExItem_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TComboExItem, Obj: TObject): bool =
  return ComboExItem_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TComboExItem): int32 =
  return ComboExItem_GetHashCode(this.Instance)

proc ToString*(this: TComboExItem): string =
  return $ComboExItem_ToString(this.Instance)

proc Indent*(this: TComboExItem): int32  =
  return ComboExItem_GetIndent(this.Instance)

proc `Indent=`*(this: TComboExItem, AValue: int32)  =
  ComboExItem_SetIndent(this.Instance, AValue)

proc OverlayImageIndex*(this: TComboExItem): int32  =
  return ComboExItem_GetOverlayImageIndex(this.Instance)

proc `OverlayImageIndex=`*(this: TComboExItem, AValue: int32)  =
  ComboExItem_SetOverlayImageIndex(this.Instance, AValue)

proc Data*(this: TComboExItem): pointer  =
  return ComboExItem_GetData(this.Instance)

proc `Data=`*(this: TComboExItem, AValue: pointer)  =
  ComboExItem_SetData(this.Instance, AValue)

proc Caption*(this: TComboExItem): string  =
  return $ComboExItem_GetCaption(this.Instance)

proc `Caption=`*(this: TComboExItem, AValue: string)  =
  ComboExItem_SetCaption(this.Instance, AValue)

proc ImageIndex*(this: TComboExItem): int32  =
  return ComboExItem_GetImageIndex(this.Instance)

proc `ImageIndex=`*(this: TComboExItem, AValue: int32)  =
  ComboExItem_SetImageIndex(this.Instance, AValue)

proc Collection*(this: TComboExItem): TCollection  =
  return ComboExItem_GetCollection(this.Instance).AsCollection

proc `Collection=`*(this: TComboExItem, AValue: TCollection)  =
  ComboExItem_SetCollection(this.Instance, CheckPtr(AValue))

proc Index*(this: TComboExItem): int32  =
  return ComboExItem_GetIndex(this.Instance)

proc `Index=`*(this: TComboExItem, AValue: int32)  =
  ComboExItem_SetIndex(this.Instance, AValue)

proc DisplayName*(this: TComboExItem): string  =
  return $ComboExItem_GetDisplayName(this.Instance)

proc `DisplayName=`*(this: TComboExItem, AValue: string)  =
  ComboExItem_SetDisplayName(this.Instance, AValue)

proc TComboExItemClass*(): TClass = ComboExItem_StaticClassType()


#------------------------- TFrame -------------------------

proc Free*(this: TFrame) = defaultFree: Frame_Free

proc NewFrame*(AOwner: TComponent): TFrame =
  new(result)
  result.Instance = Frame_Create(CheckPtr(AOwner))

proc ScrollInView*(this: TFrame, AControl: TControl)  =
  Frame_ScrollInView(this.Instance, CheckPtr(AControl))

proc CanFocus*(this: TFrame): bool =
  return Frame_CanFocus(this.Instance)

proc ContainsControl*(this: TFrame, Control: TControl): bool =
  return Frame_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TFrame, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return Frame_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TFrame) =
  Frame_DisableAlign(this.Instance)

proc EnableAlign*(this: TFrame) =
  Frame_EnableAlign(this.Instance)

proc FindChildControl*(this: TFrame, ControlName: string): TControl =
  return Frame_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TFrame, AllLevels: bool) =
  Frame_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TFrame): bool =
  return Frame_Focused(this.Instance)

proc HandleAllocated*(this: TFrame): bool =
  return Frame_HandleAllocated(this.Instance)

proc InsertControl*(this: TFrame, AControl: TControl) =
  Frame_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TFrame) =
  Frame_Invalidate(this.Instance)

proc PaintTo*(this: TFrame, DC: HDC, X: int32, Y: int32) =
  Frame_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TFrame, AControl: TControl) =
  Frame_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TFrame) =
  Frame_Realign(this.Instance)

proc Repaint*(this: TFrame) =
  Frame_Repaint(this.Instance)

proc ScaleBy*(this: TFrame, M: int32, D: int32) =
  Frame_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TFrame, DeltaX: int32, DeltaY: int32) =
  Frame_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TFrame, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  Frame_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TFrame) =
  Frame_SetFocus(this.Instance)

proc Update*(this: TFrame) =
  Frame_Update(this.Instance)

proc BringToFront*(this: TFrame) =
  Frame_BringToFront(this.Instance)

proc ClientToScreen*(this: TFrame, Point: TPoint): TPoint =
  var ps1 = Point
  Frame_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TFrame, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Frame_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TFrame): bool =
  return Frame_Dragging(this.Instance)

proc HasParent*(this: TFrame): bool =
  return Frame_HasParent(this.Instance)

proc Hide*(this: TFrame) =
  Frame_Hide(this.Instance)

proc Perform*(this: TFrame, Msg: uint32, WParam: uint, LParam: int): int =
  return Frame_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TFrame) =
  Frame_Refresh(this.Instance)

proc ScreenToClient*(this: TFrame, Point: TPoint): TPoint =
  var ps1 = Point
  Frame_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TFrame, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  Frame_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TFrame) =
  Frame_SendToBack(this.Instance)

proc Show*(this: TFrame) =
  Frame_Show(this.Instance)

proc GetTextBuf*(this: TFrame, Buffer: string, BufSize: int32): int32 =
  return Frame_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TFrame): int32 =
  return Frame_GetTextLen(this.Instance)

proc SetTextBuf*(this: TFrame, Buffer: string) =
  Frame_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TFrame, AName: string): TComponent =
  return Frame_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TFrame): string =
  return $Frame_GetNamePath(this.Instance)

proc Assign*(this: TFrame, Source: TObject) =
  Frame_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TFrame): TClass =
  return Frame_ClassType(this.Instance)

proc ClassName*(this: TFrame): string =
  return $Frame_ClassName(this.Instance)

proc InstanceSize*(this: TFrame): int32 =
  return Frame_InstanceSize(this.Instance)

proc InheritsFrom*(this: TFrame, AClass: TClass): bool =
  return Frame_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TFrame, Obj: TObject): bool =
  return Frame_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TFrame): int32 =
  return Frame_GetHashCode(this.Instance)

proc ToString*(this: TFrame): string =
  return $Frame_ToString(this.Instance)

proc AnchorToNeighbour*(this: TFrame, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Frame_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TFrame, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  Frame_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TFrame, ASibling: TControl) =
  Frame_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TFrame, ASibling: TControl) =
  Frame_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TFrame, ASide: TAnchorKind, ASibling: TControl) =
  Frame_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TFrame, ATheAlign: TAlign, ASpace: int32) =
  Frame_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TFrame, ASpace: int32) =
  Frame_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TFrame, ASize: int32): int32 =
  return Frame_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TFrame, ASize: int32): int32 =
  return Frame_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TFrame, ASize: int32): int32 =
  return Frame_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TFrame, ASize: int32): int32 =
  return Frame_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TFrame, ASize: int32): int32 =
  return Frame_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TFrame, ASize: int32): int32 =
  return Frame_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TFrame, ASize: int32): int32 =
  return Frame_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TFrame, ASize: int32): int32 =
  return Frame_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TFrame, ASize: int32): int32 =
  return Frame_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TFrame, ASize: int32): int32 =
  return Frame_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TFrame, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  Frame_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TFrame, ADesignTimePPI: int32) =
  Frame_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TFrame, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  Frame_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc DesignTimePPI*(this: TFrame): int32  =
  return Frame_GetDesignTimePPI(this.Instance)

proc `DesignTimePPI=`*(this: TFrame, AValue: int32)  =
  Frame_SetDesignTimePPI(this.Instance, AValue)

proc Align*(this: TFrame): TAlign  =
  return Frame_GetAlign(this.Instance)

proc `Align=`*(this: TFrame, AValue: TAlign)  =
  Frame_SetAlign(this.Instance, AValue)

proc Anchors*(this: TFrame): TAnchors  =
  return Frame_GetAnchors(this.Instance)

proc `Anchors=`*(this: TFrame, AValue: TAnchors)  =
  Frame_SetAnchors(this.Instance, AValue)

proc AutoScroll*(this: TFrame): bool  =
  return Frame_GetAutoScroll(this.Instance)

proc `AutoScroll=`*(this: TFrame, AValue: bool)  =
  Frame_SetAutoScroll(this.Instance, AValue)

proc AutoSize*(this: TFrame): bool  =
  return Frame_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TFrame, AValue: bool)  =
  Frame_SetAutoSize(this.Instance, AValue)

proc BiDiMode*(this: TFrame): TBiDiMode  =
  return Frame_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TFrame, AValue: TBiDiMode)  =
  Frame_SetBiDiMode(this.Instance, AValue)

proc Constraints*(this: TFrame): TSizeConstraints  =
  return Frame_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TFrame, AValue: TSizeConstraints)  =
  Frame_SetConstraints(this.Instance, CheckPtr(AValue))

proc DockSite*(this: TFrame): bool  =
  return Frame_GetDockSite(this.Instance)

proc `DockSite=`*(this: TFrame, AValue: bool)  =
  Frame_SetDockSite(this.Instance, AValue)

proc DoubleBuffered*(this: TFrame): bool  =
  return Frame_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TFrame, AValue: bool)  =
  Frame_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TFrame): TCursor  =
  return Frame_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TFrame, AValue: TCursor)  =
  Frame_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TFrame): TDragKind  =
  return Frame_GetDragKind(this.Instance)

proc `DragKind=`*(this: TFrame, AValue: TDragKind)  =
  Frame_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TFrame): TDragMode  =
  return Frame_GetDragMode(this.Instance)

proc `DragMode=`*(this: TFrame, AValue: TDragMode)  =
  Frame_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TFrame): bool  =
  return Frame_GetEnabled(this.Instance)

proc `Enabled=`*(this: TFrame, AValue: bool)  =
  Frame_SetEnabled(this.Instance, AValue)

proc Color*(this: TFrame): TColor  =
  return Frame_GetColor(this.Instance)

proc `Color=`*(this: TFrame, AValue: TColor)  =
  Frame_SetColor(this.Instance, AValue)

proc Font*(this: TFrame): TFont  =
  return Frame_GetFont(this.Instance).AsFont

proc `Font=`*(this: TFrame, AValue: TFont)  =
  Frame_SetFont(this.Instance, CheckPtr(AValue))

proc ParentColor*(this: TFrame): bool  =
  return Frame_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TFrame, AValue: bool)  =
  Frame_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TFrame): bool  =
  return Frame_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TFrame, AValue: bool)  =
  Frame_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TFrame): bool  =
  return Frame_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TFrame, AValue: bool)  =
  Frame_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TFrame): bool  =
  return Frame_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TFrame, AValue: bool)  =
  Frame_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TFrame): TPopupMenu  =
  return Frame_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TFrame, AValue: TPopupMenu)  =
  Frame_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TFrame): bool  =
  return Frame_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TFrame, AValue: bool)  =
  Frame_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TFrame): TTabOrder  =
  return Frame_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TFrame, AValue: TTabOrder)  =
  Frame_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TFrame): bool  =
  return Frame_GetTabStop(this.Instance)

proc `TabStop=`*(this: TFrame, AValue: bool)  =
  Frame_SetTabStop(this.Instance, AValue)

proc Visible*(this: TFrame): bool  =
  return Frame_GetVisible(this.Instance)

proc `Visible=`*(this: TFrame, AValue: bool)  =
  Frame_SetVisible(this.Instance, AValue)

proc `OnAlignPosition=`*(this: TFrame, AEventId: TAlignPositionEvent)  =
  Frame_SetOnAlignPosition(this.Instance, AEventId)

proc `OnClick=`*(this: TFrame, AEventId: TNotifyEvent)  =
  Frame_SetOnClick(this.Instance, AEventId)

proc `OnConstrainedResize=`*(this: TFrame, AEventId: TConstrainedResizeEvent)  =
  Frame_SetOnConstrainedResize(this.Instance, AEventId)

proc `OnContextPopup=`*(this: TFrame, AEventId: TContextPopupEvent)  =
  Frame_SetOnContextPopup(this.Instance, AEventId)

proc `OnDblClick=`*(this: TFrame, AEventId: TNotifyEvent)  =
  Frame_SetOnDblClick(this.Instance, AEventId)

proc `OnDockDrop=`*(this: TFrame, AEventId: TDockDropEvent)  =
  Frame_SetOnDockDrop(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TFrame, AEventId: TDragDropEvent)  =
  Frame_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TFrame, AEventId: TDragOverEvent)  =
  Frame_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDock=`*(this: TFrame, AEventId: TEndDragEvent)  =
  Frame_SetOnEndDock(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TFrame, AEventId: TEndDragEvent)  =
  Frame_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TFrame, AEventId: TNotifyEvent)  =
  Frame_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TFrame, AEventId: TNotifyEvent)  =
  Frame_SetOnExit(this.Instance, AEventId)

proc `OnGetSiteInfo=`*(this: TFrame, AEventId: TGetSiteInfoEvent)  =
  Frame_SetOnGetSiteInfo(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TFrame, AEventId: TMouseEvent)  =
  Frame_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TFrame, AEventId: TNotifyEvent)  =
  Frame_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TFrame, AEventId: TNotifyEvent)  =
  Frame_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TFrame, AEventId: TMouseMoveEvent)  =
  Frame_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TFrame, AEventId: TMouseEvent)  =
  Frame_SetOnMouseUp(this.Instance, AEventId)

proc `OnMouseWheel=`*(this: TFrame, AEventId: TMouseWheelEvent)  =
  Frame_SetOnMouseWheel(this.Instance, AEventId)

proc `OnMouseWheelDown=`*(this: TFrame, AEventId: TMouseWheelUpDownEvent)  =
  Frame_SetOnMouseWheelDown(this.Instance, AEventId)

proc `OnMouseWheelUp=`*(this: TFrame, AEventId: TMouseWheelUpDownEvent)  =
  Frame_SetOnMouseWheelUp(this.Instance, AEventId)

proc `OnResize=`*(this: TFrame, AEventId: TNotifyEvent)  =
  Frame_SetOnResize(this.Instance, AEventId)

proc `OnStartDock=`*(this: TFrame, AEventId: TStartDockEvent)  =
  Frame_SetOnStartDock(this.Instance, AEventId)

proc `OnUnDock=`*(this: TFrame, AEventId: TUnDockEvent)  =
  Frame_SetOnUnDock(this.Instance, AEventId)

proc HorzScrollBar*(this: TFrame): TControlScrollBar  =
  return Frame_GetHorzScrollBar(this.Instance).AsControlScrollBar

proc `HorzScrollBar=`*(this: TFrame, AValue: TControlScrollBar)  =
  Frame_SetHorzScrollBar(this.Instance, CheckPtr(AValue))

proc VertScrollBar*(this: TFrame): TControlScrollBar  =
  return Frame_GetVertScrollBar(this.Instance).AsControlScrollBar

proc `VertScrollBar=`*(this: TFrame, AValue: TControlScrollBar)  =
  Frame_SetVertScrollBar(this.Instance, CheckPtr(AValue))

proc DockClientCount*(this: TFrame): int32  =
  return Frame_GetDockClientCount(this.Instance)

proc MouseInClient*(this: TFrame): bool  =
  return Frame_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TFrame): int32  =
  return Frame_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TFrame): TBrush  =
  return Frame_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TFrame): int32  =
  return Frame_GetControlCount(this.Instance)

proc Handle*(this: TFrame): HWND  =
  return Frame_GetHandle(this.Instance)

proc ParentWindow*(this: TFrame): HWND  =
  return Frame_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TFrame, AValue: HWND)  =
  Frame_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TFrame): bool  =
  return Frame_GetShowing(this.Instance)

proc UseDockManager*(this: TFrame): bool  =
  return Frame_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TFrame, AValue: bool)  =
  Frame_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TFrame): TAction  =
  return Frame_GetAction(this.Instance).AsAction

proc `Action=`*(this: TFrame, AValue: TAction)  =
  Frame_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TFrame): TRect  =
  Frame_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TFrame, AValue: TRect)  =
  var ps1 = AValue
  Frame_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TFrame): int32  =
  return Frame_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TFrame, AValue: int32)  =
  Frame_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TFrame): TPoint  =
  Frame_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TFrame): TRect  =
  Frame_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TFrame): int32  =
  return Frame_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TFrame, AValue: int32)  =
  Frame_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TFrame): TControlState  =
  return Frame_GetControlState(this.Instance)

proc `ControlState=`*(this: TFrame, AValue: TControlState)  =
  Frame_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TFrame): TControlStyle  =
  return Frame_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TFrame, AValue: TControlStyle)  =
  Frame_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TFrame): bool  =
  return Frame_GetFloating(this.Instance)

proc Parent*(this: TFrame): TWinControl  =
  return Frame_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TFrame, AValue: TWinControl)  =
  Frame_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TFrame): int32  =
  return Frame_GetLeft(this.Instance)

proc `Left=`*(this: TFrame, AValue: int32)  =
  Frame_SetLeft(this.Instance, AValue)

proc Top*(this: TFrame): int32  =
  return Frame_GetTop(this.Instance)

proc `Top=`*(this: TFrame, AValue: int32)  =
  Frame_SetTop(this.Instance, AValue)

proc Width*(this: TFrame): int32  =
  return Frame_GetWidth(this.Instance)

proc `Width=`*(this: TFrame, AValue: int32)  =
  Frame_SetWidth(this.Instance, AValue)

proc Height*(this: TFrame): int32  =
  return Frame_GetHeight(this.Instance)

proc `Height=`*(this: TFrame, AValue: int32)  =
  Frame_SetHeight(this.Instance, AValue)

proc Cursor*(this: TFrame): TCursor  =
  return Frame_GetCursor(this.Instance)

proc `Cursor=`*(this: TFrame, AValue: TCursor)  =
  Frame_SetCursor(this.Instance, AValue)

proc Hint*(this: TFrame): string  =
  return $Frame_GetHint(this.Instance)

proc `Hint=`*(this: TFrame, AValue: string)  =
  Frame_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TFrame): int32  =
  return Frame_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TFrame): int32  =
  return Frame_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TFrame, AValue: int32)  =
  Frame_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TFrame): TComponent  =
  return Frame_GetOwner(this.Instance).AsComponent

proc Name*(this: TFrame): string  =
  return $Frame_GetName(this.Instance)

proc `Name=`*(this: TFrame, AValue: string)  =
  Frame_SetName(this.Instance, AValue)

proc Tag*(this: TFrame): int  =
  return Frame_GetTag(this.Instance)

proc `Tag=`*(this: TFrame, AValue: int)  =
  Frame_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TFrame): TAnchorSide  =
  return Frame_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TFrame, AValue: TAnchorSide)  =
  Frame_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TFrame): TAnchorSide  =
  return Frame_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TFrame, AValue: TAnchorSide)  =
  Frame_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TFrame): TAnchorSide  =
  return Frame_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TFrame, AValue: TAnchorSide)  =
  Frame_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TFrame): TAnchorSide  =
  return Frame_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TFrame, AValue: TAnchorSide)  =
  Frame_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TFrame): TControlChildSizing  =
  return Frame_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TFrame, AValue: TControlChildSizing)  =
  Frame_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TFrame): TControlBorderSpacing  =
  return Frame_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TFrame, AValue: TControlBorderSpacing)  =
  Frame_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TFrame, Index: int32): TControl  =
  return Frame_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TFrame, Index: int32): TControl  =
  return Frame_GetControls(this.Instance, Index).AsControl

proc Components*(this: TFrame, AIndex: int32): TComponent  =
  return Frame_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TFrame, AKind: TAnchorKind): TAnchorSide  =
  return Frame_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TFrameClass*(): TClass = Frame_StaticClassType()


#------------------------- TControlScrollBar -------------------------


proc Assign*(this: TControlScrollBar, Source: TObject)  =
  ControlScrollBar_Assign(this.Instance, CheckPtr(Source))

proc IsScrollBarVisible*(this: TControlScrollBar): bool  =
  return ControlScrollBar_IsScrollBarVisible(this.Instance)

proc GetNamePath*(this: TControlScrollBar): string  =
  return $ControlScrollBar_GetNamePath(this.Instance)

proc ClassType*(this: TControlScrollBar): TClass =
  return ControlScrollBar_ClassType(this.Instance)

proc ClassName*(this: TControlScrollBar): string =
  return $ControlScrollBar_ClassName(this.Instance)

proc InstanceSize*(this: TControlScrollBar): int32 =
  return ControlScrollBar_InstanceSize(this.Instance)

proc InheritsFrom*(this: TControlScrollBar, AClass: TClass): bool =
  return ControlScrollBar_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TControlScrollBar, Obj: TObject): bool =
  return ControlScrollBar_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TControlScrollBar): int32 =
  return ControlScrollBar_GetHashCode(this.Instance)

proc ToString*(this: TControlScrollBar): string =
  return $ControlScrollBar_ToString(this.Instance)

proc ScrollPos*(this: TControlScrollBar): int32  =
  return ControlScrollBar_GetScrollPos(this.Instance)

proc Increment*(this: TControlScrollBar): TScrollBarInc  =
  return ControlScrollBar_GetIncrement(this.Instance)

proc `Increment=`*(this: TControlScrollBar, AValue: TScrollBarInc)  =
  ControlScrollBar_SetIncrement(this.Instance, AValue)

proc Position*(this: TControlScrollBar): int32  =
  return ControlScrollBar_GetPosition(this.Instance)

proc `Position=`*(this: TControlScrollBar, AValue: int32)  =
  ControlScrollBar_SetPosition(this.Instance, AValue)

proc Range*(this: TControlScrollBar): int32  =
  return ControlScrollBar_GetRange(this.Instance)

proc `Range=`*(this: TControlScrollBar, AValue: int32)  =
  ControlScrollBar_SetRange(this.Instance, AValue)

proc Smooth*(this: TControlScrollBar): bool  =
  return ControlScrollBar_GetSmooth(this.Instance)

proc `Smooth=`*(this: TControlScrollBar, AValue: bool)  =
  ControlScrollBar_SetSmooth(this.Instance, AValue)

proc Tracking*(this: TControlScrollBar): bool  =
  return ControlScrollBar_GetTracking(this.Instance)

proc `Tracking=`*(this: TControlScrollBar, AValue: bool)  =
  ControlScrollBar_SetTracking(this.Instance, AValue)

proc Visible*(this: TControlScrollBar): bool  =
  return ControlScrollBar_GetVisible(this.Instance)

proc `Visible=`*(this: TControlScrollBar, AValue: bool)  =
  ControlScrollBar_SetVisible(this.Instance, AValue)

proc TControlScrollBarClass*(): TClass = ControlScrollBar_StaticClassType()


#------------------------- TSizeConstraints -------------------------


proc Assign*(this: TSizeConstraints, Source: TObject)  =
  SizeConstraints_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TSizeConstraints): string  =
  return $SizeConstraints_GetNamePath(this.Instance)

proc ClassType*(this: TSizeConstraints): TClass =
  return SizeConstraints_ClassType(this.Instance)

proc ClassName*(this: TSizeConstraints): string =
  return $SizeConstraints_ClassName(this.Instance)

proc InstanceSize*(this: TSizeConstraints): int32 =
  return SizeConstraints_InstanceSize(this.Instance)

proc InheritsFrom*(this: TSizeConstraints, AClass: TClass): bool =
  return SizeConstraints_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TSizeConstraints, Obj: TObject): bool =
  return SizeConstraints_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TSizeConstraints): int32 =
  return SizeConstraints_GetHashCode(this.Instance)

proc ToString*(this: TSizeConstraints): string =
  return $SizeConstraints_ToString(this.Instance)

proc `OnChange=`*(this: TSizeConstraints, AEventId: TNotifyEvent)  =
  SizeConstraints_SetOnChange(this.Instance, AEventId)

proc MaxHeight*(this: TSizeConstraints): TConstraintSize  =
  return SizeConstraints_GetMaxHeight(this.Instance)

proc `MaxHeight=`*(this: TSizeConstraints, AValue: TConstraintSize)  =
  SizeConstraints_SetMaxHeight(this.Instance, AValue)

proc MaxWidth*(this: TSizeConstraints): TConstraintSize  =
  return SizeConstraints_GetMaxWidth(this.Instance)

proc `MaxWidth=`*(this: TSizeConstraints, AValue: TConstraintSize)  =
  SizeConstraints_SetMaxWidth(this.Instance, AValue)

proc MinHeight*(this: TSizeConstraints): TConstraintSize  =
  return SizeConstraints_GetMinHeight(this.Instance)

proc `MinHeight=`*(this: TSizeConstraints, AValue: TConstraintSize)  =
  SizeConstraints_SetMinHeight(this.Instance, AValue)

proc MinWidth*(this: TSizeConstraints): TConstraintSize  =
  return SizeConstraints_GetMinWidth(this.Instance)

proc `MinWidth=`*(this: TSizeConstraints, AValue: TConstraintSize)  =
  SizeConstraints_SetMinWidth(this.Instance, AValue)

proc TSizeConstraintsClass*(): TClass = SizeConstraints_StaticClassType()


#------------------------- TXButton -------------------------

proc Free*(this: TXButton) = defaultFree: XButton_Free

proc NewXButton*(AOwner: TComponent): TXButton =
  new(result)
  result.Instance = XButton_Create(CheckPtr(AOwner))

proc BringToFront*(this: TXButton) =
  XButton_BringToFront(this.Instance)

proc ClientToScreen*(this: TXButton, Point: TPoint): TPoint =
  var ps1 = Point
  XButton_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TXButton, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  XButton_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TXButton): bool =
  return XButton_Dragging(this.Instance)

proc HasParent*(this: TXButton): bool =
  return XButton_HasParent(this.Instance)

proc Hide*(this: TXButton) =
  XButton_Hide(this.Instance)

proc Invalidate*(this: TXButton) =
  XButton_Invalidate(this.Instance)

proc Perform*(this: TXButton, Msg: uint32, WParam: uint, LParam: int): int =
  return XButton_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TXButton) =
  XButton_Refresh(this.Instance)

proc Repaint*(this: TXButton) =
  XButton_Repaint(this.Instance)

proc ScreenToClient*(this: TXButton, Point: TPoint): TPoint =
  var ps1 = Point
  XButton_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TXButton, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  XButton_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TXButton) =
  XButton_SendToBack(this.Instance)

proc SetBounds*(this: TXButton, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  XButton_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc Show*(this: TXButton) =
  XButton_Show(this.Instance)

proc Update*(this: TXButton) =
  XButton_Update(this.Instance)

proc GetTextBuf*(this: TXButton, Buffer: string, BufSize: int32): int32 =
  return XButton_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TXButton): int32 =
  return XButton_GetTextLen(this.Instance)

proc SetTextBuf*(this: TXButton, Buffer: string) =
  XButton_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TXButton, AName: string): TComponent =
  return XButton_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TXButton): string =
  return $XButton_GetNamePath(this.Instance)

proc Assign*(this: TXButton, Source: TObject) =
  XButton_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TXButton): TClass =
  return XButton_ClassType(this.Instance)

proc ClassName*(this: TXButton): string =
  return $XButton_ClassName(this.Instance)

proc InstanceSize*(this: TXButton): int32 =
  return XButton_InstanceSize(this.Instance)

proc InheritsFrom*(this: TXButton, AClass: TClass): bool =
  return XButton_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TXButton, Obj: TObject): bool =
  return XButton_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TXButton): int32 =
  return XButton_GetHashCode(this.Instance)

proc ToString*(this: TXButton): string =
  return $XButton_ToString(this.Instance)

proc AnchorToNeighbour*(this: TXButton, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  XButton_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TXButton, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  XButton_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TXButton, ASibling: TControl) =
  XButton_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TXButton, ASibling: TControl) =
  XButton_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TXButton, ASide: TAnchorKind, ASibling: TControl) =
  XButton_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TXButton, ATheAlign: TAlign, ASpace: int32) =
  XButton_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TXButton, ASpace: int32) =
  XButton_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TXButton, ASize: int32): int32 =
  return XButton_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TXButton, ASize: int32): int32 =
  return XButton_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TXButton, ASize: int32): int32 =
  return XButton_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TXButton, ASize: int32): int32 =
  return XButton_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TXButton, ASize: int32): int32 =
  return XButton_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TXButton, ASize: int32): int32 =
  return XButton_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TXButton, ASize: int32): int32 =
  return XButton_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TXButton, ASize: int32): int32 =
  return XButton_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TXButton, ASize: int32): int32 =
  return XButton_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TXButton, ASize: int32): int32 =
  return XButton_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TXButton, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  XButton_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TXButton, ADesignTimePPI: int32) =
  XButton_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TXButton, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  XButton_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Caption*(this: TXButton): string  =
  return $XButton_GetCaption(this.Instance)

proc `Caption=`*(this: TXButton, AValue: string)  =
  XButton_SetCaption(this.Instance, AValue)

proc ShowCaption*(this: TXButton): bool  =
  return XButton_GetShowCaption(this.Instance)

proc `ShowCaption=`*(this: TXButton, AValue: bool)  =
  XButton_SetShowCaption(this.Instance, AValue)

proc BackColor*(this: TXButton): TColor  =
  return XButton_GetBackColor(this.Instance)

proc `BackColor=`*(this: TXButton, AValue: TColor)  =
  XButton_SetBackColor(this.Instance, AValue)

proc HoverColor*(this: TXButton): TColor  =
  return XButton_GetHoverColor(this.Instance)

proc `HoverColor=`*(this: TXButton, AValue: TColor)  =
  XButton_SetHoverColor(this.Instance, AValue)

proc DownColor*(this: TXButton): TColor  =
  return XButton_GetDownColor(this.Instance)

proc `DownColor=`*(this: TXButton, AValue: TColor)  =
  XButton_SetDownColor(this.Instance, AValue)

proc BorderWidth*(this: TXButton): int32  =
  return XButton_GetBorderWidth(this.Instance)

proc `BorderWidth=`*(this: TXButton, AValue: int32)  =
  XButton_SetBorderWidth(this.Instance, AValue)

proc BorderColor*(this: TXButton): TColor  =
  return XButton_GetBorderColor(this.Instance)

proc `BorderColor=`*(this: TXButton, AValue: TColor)  =
  XButton_SetBorderColor(this.Instance, AValue)

proc Picture*(this: TXButton): TPicture  =
  return XButton_GetPicture(this.Instance).AsPicture

proc `Picture=`*(this: TXButton, AValue: TPicture)  =
  XButton_SetPicture(this.Instance, CheckPtr(AValue))

proc DrawMode*(this: TXButton): TDrawImageMode  =
  return XButton_GetDrawMode(this.Instance)

proc `DrawMode=`*(this: TXButton, AValue: TDrawImageMode)  =
  XButton_SetDrawMode(this.Instance, AValue)

proc NormalFontColor*(this: TXButton): TColor  =
  return XButton_GetNormalFontColor(this.Instance)

proc `NormalFontColor=`*(this: TXButton, AValue: TColor)  =
  XButton_SetNormalFontColor(this.Instance, AValue)

proc DownFontColor*(this: TXButton): TColor  =
  return XButton_GetDownFontColor(this.Instance)

proc `DownFontColor=`*(this: TXButton, AValue: TColor)  =
  XButton_SetDownFontColor(this.Instance, AValue)

proc HoverFontColor*(this: TXButton): TColor  =
  return XButton_GetHoverFontColor(this.Instance)

proc `HoverFontColor=`*(this: TXButton, AValue: TColor)  =
  XButton_SetHoverFontColor(this.Instance, AValue)

proc Action*(this: TXButton): TAction  =
  return XButton_GetAction(this.Instance).AsAction

proc `Action=`*(this: TXButton, AValue: TAction)  =
  XButton_SetAction(this.Instance, CheckPtr(AValue))

proc Align*(this: TXButton): TAlign  =
  return XButton_GetAlign(this.Instance)

proc `Align=`*(this: TXButton, AValue: TAlign)  =
  XButton_SetAlign(this.Instance, AValue)

proc Anchors*(this: TXButton): TAnchors  =
  return XButton_GetAnchors(this.Instance)

proc `Anchors=`*(this: TXButton, AValue: TAnchors)  =
  XButton_SetAnchors(this.Instance, AValue)

proc BiDiMode*(this: TXButton): TBiDiMode  =
  return XButton_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TXButton, AValue: TBiDiMode)  =
  XButton_SetBiDiMode(this.Instance, AValue)

proc Constraints*(this: TXButton): TSizeConstraints  =
  return XButton_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TXButton, AValue: TSizeConstraints)  =
  XButton_SetConstraints(this.Instance, CheckPtr(AValue))

proc Enabled*(this: TXButton): bool  =
  return XButton_GetEnabled(this.Instance)

proc `Enabled=`*(this: TXButton, AValue: bool)  =
  XButton_SetEnabled(this.Instance, AValue)

proc Font*(this: TXButton): TFont  =
  return XButton_GetFont(this.Instance).AsFont

proc `Font=`*(this: TXButton, AValue: TFont)  =
  XButton_SetFont(this.Instance, CheckPtr(AValue))

proc ParentFont*(this: TXButton): bool  =
  return XButton_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TXButton, AValue: bool)  =
  XButton_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TXButton): bool  =
  return XButton_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TXButton, AValue: bool)  =
  XButton_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TXButton): TPopupMenu  =
  return XButton_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TXButton, AValue: TPopupMenu)  =
  XButton_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TXButton): bool  =
  return XButton_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TXButton, AValue: bool)  =
  XButton_SetShowHint(this.Instance, AValue)

proc Visible*(this: TXButton): bool  =
  return XButton_GetVisible(this.Instance)

proc `Visible=`*(this: TXButton, AValue: bool)  =
  XButton_SetVisible(this.Instance, AValue)

proc `OnClick=`*(this: TXButton, AEventId: TNotifyEvent)  =
  XButton_SetOnClick(this.Instance, AEventId)

proc `OnDblClick=`*(this: TXButton, AEventId: TNotifyEvent)  =
  XButton_SetOnDblClick(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TXButton, AEventId: TMouseEvent)  =
  XButton_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TXButton, AEventId: TNotifyEvent)  =
  XButton_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TXButton, AEventId: TNotifyEvent)  =
  XButton_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TXButton, AEventId: TMouseMoveEvent)  =
  XButton_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TXButton, AEventId: TMouseEvent)  =
  XButton_SetOnMouseUp(this.Instance, AEventId)

proc BoundsRect*(this: TXButton): TRect  =
  XButton_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TXButton, AValue: TRect)  =
  var ps1 = AValue
  XButton_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TXButton): int32  =
  return XButton_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TXButton, AValue: int32)  =
  XButton_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TXButton): TPoint  =
  XButton_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TXButton): TRect  =
  XButton_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TXButton): int32  =
  return XButton_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TXButton, AValue: int32)  =
  XButton_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TXButton): TControlState  =
  return XButton_GetControlState(this.Instance)

proc `ControlState=`*(this: TXButton, AValue: TControlState)  =
  XButton_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TXButton): TControlStyle  =
  return XButton_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TXButton, AValue: TControlStyle)  =
  XButton_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TXButton): bool  =
  return XButton_GetFloating(this.Instance)

proc Parent*(this: TXButton): TWinControl  =
  return XButton_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TXButton, AValue: TWinControl)  =
  XButton_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TXButton): int32  =
  return XButton_GetLeft(this.Instance)

proc `Left=`*(this: TXButton, AValue: int32)  =
  XButton_SetLeft(this.Instance, AValue)

proc Top*(this: TXButton): int32  =
  return XButton_GetTop(this.Instance)

proc `Top=`*(this: TXButton, AValue: int32)  =
  XButton_SetTop(this.Instance, AValue)

proc Width*(this: TXButton): int32  =
  return XButton_GetWidth(this.Instance)

proc `Width=`*(this: TXButton, AValue: int32)  =
  XButton_SetWidth(this.Instance, AValue)

proc Height*(this: TXButton): int32  =
  return XButton_GetHeight(this.Instance)

proc `Height=`*(this: TXButton, AValue: int32)  =
  XButton_SetHeight(this.Instance, AValue)

proc Cursor*(this: TXButton): TCursor  =
  return XButton_GetCursor(this.Instance)

proc `Cursor=`*(this: TXButton, AValue: TCursor)  =
  XButton_SetCursor(this.Instance, AValue)

proc Hint*(this: TXButton): string  =
  return $XButton_GetHint(this.Instance)

proc `Hint=`*(this: TXButton, AValue: string)  =
  XButton_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TXButton): int32  =
  return XButton_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TXButton): int32  =
  return XButton_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TXButton, AValue: int32)  =
  XButton_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TXButton): TComponent  =
  return XButton_GetOwner(this.Instance).AsComponent

proc Name*(this: TXButton): string  =
  return $XButton_GetName(this.Instance)

proc `Name=`*(this: TXButton, AValue: string)  =
  XButton_SetName(this.Instance, AValue)

proc Tag*(this: TXButton): int  =
  return XButton_GetTag(this.Instance)

proc `Tag=`*(this: TXButton, AValue: int)  =
  XButton_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TXButton): TAnchorSide  =
  return XButton_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TXButton, AValue: TAnchorSide)  =
  XButton_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TXButton): TAnchorSide  =
  return XButton_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TXButton, AValue: TAnchorSide)  =
  XButton_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TXButton): TAnchorSide  =
  return XButton_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TXButton, AValue: TAnchorSide)  =
  XButton_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TXButton): TAnchorSide  =
  return XButton_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TXButton, AValue: TAnchorSide)  =
  XButton_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TXButton): TControlBorderSpacing  =
  return XButton_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TXButton, AValue: TControlBorderSpacing)  =
  XButton_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Components*(this: TXButton, AIndex: int32): TComponent  =
  return XButton_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TXButton, AKind: TAnchorKind): TAnchorSide  =
  return XButton_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TXButtonClass*(): TClass = XButton_StaticClassType()


#------------------------- TAnchorSide -------------------------


proc Assign*(this: TAnchorSide, Source: TObject)  =
  AnchorSide_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TAnchorSide): string  =
  return $AnchorSide_GetNamePath(this.Instance)

proc ClassType*(this: TAnchorSide): TClass =
  return AnchorSide_ClassType(this.Instance)

proc ClassName*(this: TAnchorSide): string =
  return $AnchorSide_ClassName(this.Instance)

proc InstanceSize*(this: TAnchorSide): int32 =
  return AnchorSide_InstanceSize(this.Instance)

proc InheritsFrom*(this: TAnchorSide, AClass: TClass): bool =
  return AnchorSide_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TAnchorSide, Obj: TObject): bool =
  return AnchorSide_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TAnchorSide): int32 =
  return AnchorSide_GetHashCode(this.Instance)

proc ToString*(this: TAnchorSide): string =
  return $AnchorSide_ToString(this.Instance)

proc Owner*(this: TAnchorSide): TControl  =
  return AnchorSide_GetOwner(this.Instance).AsControl

proc Control*(this: TAnchorSide): TControl  =
  return AnchorSide_GetControl(this.Instance).AsControl

proc `Control=`*(this: TAnchorSide, AValue: TControl)  =
  AnchorSide_SetControl(this.Instance, CheckPtr(AValue))

proc Side*(this: TAnchorSide): TAnchorSideReference  =
  return AnchorSide_GetSide(this.Instance)

proc `Side=`*(this: TAnchorSide, AValue: TAnchorSideReference)  =
  AnchorSide_SetSide(this.Instance, AValue)

proc TAnchorSideClass*(): TClass = AnchorSide_StaticClassType()


#------------------------- TControlBorderSpacing -------------------------


proc Assign*(this: TControlBorderSpacing, Source: TObject)  =
  ControlBorderSpacing_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TControlBorderSpacing): string  =
  return $ControlBorderSpacing_GetNamePath(this.Instance)

proc ClassType*(this: TControlBorderSpacing): TClass =
  return ControlBorderSpacing_ClassType(this.Instance)

proc ClassName*(this: TControlBorderSpacing): string =
  return $ControlBorderSpacing_ClassName(this.Instance)

proc InstanceSize*(this: TControlBorderSpacing): int32 =
  return ControlBorderSpacing_InstanceSize(this.Instance)

proc InheritsFrom*(this: TControlBorderSpacing, AClass: TClass): bool =
  return ControlBorderSpacing_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TControlBorderSpacing, Obj: TObject): bool =
  return ControlBorderSpacing_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TControlBorderSpacing): int32 =
  return ControlBorderSpacing_GetHashCode(this.Instance)

proc ToString*(this: TControlBorderSpacing): string =
  return $ControlBorderSpacing_ToString(this.Instance)

proc Control*(this: TControlBorderSpacing): TControl  =
  return ControlBorderSpacing_GetControl(this.Instance).AsControl

proc AroundLeft*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetAroundLeft(this.Instance)

proc AroundTop*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetAroundTop(this.Instance)

proc AroundRight*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetAroundRight(this.Instance)

proc AroundBottom*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetAroundBottom(this.Instance)

proc ControlLeft*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetControlLeft(this.Instance)

proc ControlTop*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetControlTop(this.Instance)

proc ControlWidth*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetControlWidth(this.Instance)

proc ControlHeight*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetControlHeight(this.Instance)

proc ControlRight*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetControlRight(this.Instance)

proc ControlBottom*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetControlBottom(this.Instance)

proc `OnChange=`*(this: TControlBorderSpacing, AEventId: TNotifyEvent)  =
  ControlBorderSpacing_SetOnChange(this.Instance, AEventId)

proc Left*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetLeft(this.Instance)

proc `Left=`*(this: TControlBorderSpacing, AValue: int32)  =
  ControlBorderSpacing_SetLeft(this.Instance, AValue)

proc Top*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetTop(this.Instance)

proc `Top=`*(this: TControlBorderSpacing, AValue: int32)  =
  ControlBorderSpacing_SetTop(this.Instance, AValue)

proc Right*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetRight(this.Instance)

proc `Right=`*(this: TControlBorderSpacing, AValue: int32)  =
  ControlBorderSpacing_SetRight(this.Instance, AValue)

proc Bottom*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetBottom(this.Instance)

proc `Bottom=`*(this: TControlBorderSpacing, AValue: int32)  =
  ControlBorderSpacing_SetBottom(this.Instance, AValue)

proc Around*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetAround(this.Instance)

proc `Around=`*(this: TControlBorderSpacing, AValue: int32)  =
  ControlBorderSpacing_SetAround(this.Instance, AValue)

proc InnerBorder*(this: TControlBorderSpacing): int32  =
  return ControlBorderSpacing_GetInnerBorder(this.Instance)

proc `InnerBorder=`*(this: TControlBorderSpacing, AValue: int32)  =
  ControlBorderSpacing_SetInnerBorder(this.Instance, AValue)

proc CellAlignHorizontal*(this: TControlBorderSpacing): TControlCellAlign  =
  return ControlBorderSpacing_GetCellAlignHorizontal(this.Instance)

proc `CellAlignHorizontal=`*(this: TControlBorderSpacing, AValue: TControlCellAlign)  =
  ControlBorderSpacing_SetCellAlignHorizontal(this.Instance, AValue)

proc CellAlignVertical*(this: TControlBorderSpacing): TControlCellAlign  =
  return ControlBorderSpacing_GetCellAlignVertical(this.Instance)

proc `CellAlignVertical=`*(this: TControlBorderSpacing, AValue: TControlCellAlign)  =
  ControlBorderSpacing_SetCellAlignVertical(this.Instance, AValue)

proc Space*(this: TControlBorderSpacing, Kind: TAnchorKind): int32  =
  return ControlBorderSpacing_GetSpace(this.Instance, Kind)

proc `Space=`*(this: TControlBorderSpacing, Kind: TAnchorKind, AValue: int32)  =
  ControlBorderSpacing_SetSpace(this.Instance, Kind, AValue)

proc TControlBorderSpacingClass*(): TClass = ControlBorderSpacing_StaticClassType()


#------------------------- TControlChildSizing -------------------------


proc Assign*(this: TControlChildSizing, Source: TObject)  =
  ControlChildSizing_Assign(this.Instance, CheckPtr(Source))

proc GetNamePath*(this: TControlChildSizing): string  =
  return $ControlChildSizing_GetNamePath(this.Instance)

proc ClassType*(this: TControlChildSizing): TClass =
  return ControlChildSizing_ClassType(this.Instance)

proc ClassName*(this: TControlChildSizing): string =
  return $ControlChildSizing_ClassName(this.Instance)

proc InstanceSize*(this: TControlChildSizing): int32 =
  return ControlChildSizing_InstanceSize(this.Instance)

proc InheritsFrom*(this: TControlChildSizing, AClass: TClass): bool =
  return ControlChildSizing_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TControlChildSizing, Obj: TObject): bool =
  return ControlChildSizing_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TControlChildSizing): int32 =
  return ControlChildSizing_GetHashCode(this.Instance)

proc ToString*(this: TControlChildSizing): string =
  return $ControlChildSizing_ToString(this.Instance)

proc Control*(this: TControlChildSizing): TWinControl  =
  return ControlChildSizing_GetControl(this.Instance).AsWinControl

proc `OnChange=`*(this: TControlChildSizing, AEventId: TNotifyEvent)  =
  ControlChildSizing_SetOnChange(this.Instance, AEventId)

proc LeftRightSpacing*(this: TControlChildSizing): int32  =
  return ControlChildSizing_GetLeftRightSpacing(this.Instance)

proc `LeftRightSpacing=`*(this: TControlChildSizing, AValue: int32)  =
  ControlChildSizing_SetLeftRightSpacing(this.Instance, AValue)

proc TopBottomSpacing*(this: TControlChildSizing): int32  =
  return ControlChildSizing_GetTopBottomSpacing(this.Instance)

proc `TopBottomSpacing=`*(this: TControlChildSizing, AValue: int32)  =
  ControlChildSizing_SetTopBottomSpacing(this.Instance, AValue)

proc HorizontalSpacing*(this: TControlChildSizing): int32  =
  return ControlChildSizing_GetHorizontalSpacing(this.Instance)

proc `HorizontalSpacing=`*(this: TControlChildSizing, AValue: int32)  =
  ControlChildSizing_SetHorizontalSpacing(this.Instance, AValue)

proc VerticalSpacing*(this: TControlChildSizing): int32  =
  return ControlChildSizing_GetVerticalSpacing(this.Instance)

proc `VerticalSpacing=`*(this: TControlChildSizing, AValue: int32)  =
  ControlChildSizing_SetVerticalSpacing(this.Instance, AValue)

proc EnlargeHorizontal*(this: TControlChildSizing): TChildControlResizeStyle  =
  return ControlChildSizing_GetEnlargeHorizontal(this.Instance)

proc `EnlargeHorizontal=`*(this: TControlChildSizing, AValue: TChildControlResizeStyle)  =
  ControlChildSizing_SetEnlargeHorizontal(this.Instance, AValue)

proc EnlargeVertical*(this: TControlChildSizing): TChildControlResizeStyle  =
  return ControlChildSizing_GetEnlargeVertical(this.Instance)

proc `EnlargeVertical=`*(this: TControlChildSizing, AValue: TChildControlResizeStyle)  =
  ControlChildSizing_SetEnlargeVertical(this.Instance, AValue)

proc ShrinkHorizontal*(this: TControlChildSizing): TChildControlResizeStyle  =
  return ControlChildSizing_GetShrinkHorizontal(this.Instance)

proc `ShrinkHorizontal=`*(this: TControlChildSizing, AValue: TChildControlResizeStyle)  =
  ControlChildSizing_SetShrinkHorizontal(this.Instance, AValue)

proc ShrinkVertical*(this: TControlChildSizing): TChildControlResizeStyle  =
  return ControlChildSizing_GetShrinkVertical(this.Instance)

proc `ShrinkVertical=`*(this: TControlChildSizing, AValue: TChildControlResizeStyle)  =
  ControlChildSizing_SetShrinkVertical(this.Instance, AValue)

proc Layout*(this: TControlChildSizing): TControlChildrenLayout  =
  return ControlChildSizing_GetLayout(this.Instance)

proc `Layout=`*(this: TControlChildSizing, AValue: TControlChildrenLayout)  =
  ControlChildSizing_SetLayout(this.Instance, AValue)

proc ControlsPerLine*(this: TControlChildSizing): int32  =
  return ControlChildSizing_GetControlsPerLine(this.Instance)

proc `ControlsPerLine=`*(this: TControlChildSizing, AValue: int32)  =
  ControlChildSizing_SetControlsPerLine(this.Instance, AValue)

proc TControlChildSizingClass*(): TClass = ControlChildSizing_StaticClassType()


#------------------------- TCheckGroup -------------------------

proc Free*(this: TCheckGroup) = defaultFree: CheckGroup_Free

proc NewCheckGroup*(AOwner: TComponent): TCheckGroup =
  new(result)
  result.Instance = CheckGroup_Create(CheckPtr(AOwner))

proc FlipChildren*(this: TCheckGroup, AllLevels: bool) =
  CheckGroup_FlipChildren(this.Instance, AllLevels)

proc Rows*(this: TCheckGroup): int32  =
  return CheckGroup_Rows(this.Instance)

proc CanFocus*(this: TCheckGroup): bool =
  return CheckGroup_CanFocus(this.Instance)

proc ContainsControl*(this: TCheckGroup, Control: TControl): bool =
  return CheckGroup_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TCheckGroup, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return CheckGroup_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TCheckGroup) =
  CheckGroup_DisableAlign(this.Instance)

proc EnableAlign*(this: TCheckGroup) =
  CheckGroup_EnableAlign(this.Instance)

proc FindChildControl*(this: TCheckGroup, ControlName: string): TControl =
  return CheckGroup_FindChildControl(this.Instance, ControlName).AsControl

proc Focused*(this: TCheckGroup): bool =
  return CheckGroup_Focused(this.Instance)

proc HandleAllocated*(this: TCheckGroup): bool =
  return CheckGroup_HandleAllocated(this.Instance)

proc InsertControl*(this: TCheckGroup, AControl: TControl) =
  CheckGroup_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TCheckGroup) =
  CheckGroup_Invalidate(this.Instance)

proc PaintTo*(this: TCheckGroup, DC: HDC, X: int32, Y: int32) =
  CheckGroup_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TCheckGroup, AControl: TControl) =
  CheckGroup_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TCheckGroup) =
  CheckGroup_Realign(this.Instance)

proc Repaint*(this: TCheckGroup) =
  CheckGroup_Repaint(this.Instance)

proc ScaleBy*(this: TCheckGroup, M: int32, D: int32) =
  CheckGroup_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TCheckGroup, DeltaX: int32, DeltaY: int32) =
  CheckGroup_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TCheckGroup, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  CheckGroup_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TCheckGroup) =
  CheckGroup_SetFocus(this.Instance)

proc Update*(this: TCheckGroup) =
  CheckGroup_Update(this.Instance)

proc BringToFront*(this: TCheckGroup) =
  CheckGroup_BringToFront(this.Instance)

proc ClientToScreen*(this: TCheckGroup, Point: TPoint): TPoint =
  var ps1 = Point
  CheckGroup_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TCheckGroup, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  CheckGroup_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TCheckGroup): bool =
  return CheckGroup_Dragging(this.Instance)

proc HasParent*(this: TCheckGroup): bool =
  return CheckGroup_HasParent(this.Instance)

proc Hide*(this: TCheckGroup) =
  CheckGroup_Hide(this.Instance)

proc Perform*(this: TCheckGroup, Msg: uint32, WParam: uint, LParam: int): int =
  return CheckGroup_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TCheckGroup) =
  CheckGroup_Refresh(this.Instance)

proc ScreenToClient*(this: TCheckGroup, Point: TPoint): TPoint =
  var ps1 = Point
  CheckGroup_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TCheckGroup, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  CheckGroup_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TCheckGroup) =
  CheckGroup_SendToBack(this.Instance)

proc Show*(this: TCheckGroup) =
  CheckGroup_Show(this.Instance)

proc GetTextBuf*(this: TCheckGroup, Buffer: string, BufSize: int32): int32 =
  return CheckGroup_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TCheckGroup): int32 =
  return CheckGroup_GetTextLen(this.Instance)

proc SetTextBuf*(this: TCheckGroup, Buffer: string) =
  CheckGroup_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TCheckGroup, AName: string): TComponent =
  return CheckGroup_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TCheckGroup): string =
  return $CheckGroup_GetNamePath(this.Instance)

proc Assign*(this: TCheckGroup, Source: TObject) =
  CheckGroup_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TCheckGroup): TClass =
  return CheckGroup_ClassType(this.Instance)

proc ClassName*(this: TCheckGroup): string =
  return $CheckGroup_ClassName(this.Instance)

proc InstanceSize*(this: TCheckGroup): int32 =
  return CheckGroup_InstanceSize(this.Instance)

proc InheritsFrom*(this: TCheckGroup, AClass: TClass): bool =
  return CheckGroup_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TCheckGroup, Obj: TObject): bool =
  return CheckGroup_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TCheckGroup): int32 =
  return CheckGroup_GetHashCode(this.Instance)

proc ToString*(this: TCheckGroup): string =
  return $CheckGroup_ToString(this.Instance)

proc AnchorToNeighbour*(this: TCheckGroup, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  CheckGroup_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TCheckGroup, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  CheckGroup_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TCheckGroup, ASibling: TControl) =
  CheckGroup_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TCheckGroup, ASibling: TControl) =
  CheckGroup_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TCheckGroup, ASide: TAnchorKind, ASibling: TControl) =
  CheckGroup_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TCheckGroup, ATheAlign: TAlign, ASpace: int32) =
  CheckGroup_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TCheckGroup, ASpace: int32) =
  CheckGroup_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TCheckGroup, ASize: int32): int32 =
  return CheckGroup_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TCheckGroup, ASize: int32): int32 =
  return CheckGroup_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TCheckGroup, ASize: int32): int32 =
  return CheckGroup_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TCheckGroup, ASize: int32): int32 =
  return CheckGroup_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TCheckGroup, ASize: int32): int32 =
  return CheckGroup_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TCheckGroup, ASize: int32): int32 =
  return CheckGroup_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TCheckGroup, ASize: int32): int32 =
  return CheckGroup_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TCheckGroup, ASize: int32): int32 =
  return CheckGroup_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TCheckGroup, ASize: int32): int32 =
  return CheckGroup_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TCheckGroup, ASize: int32): int32 =
  return CheckGroup_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TCheckGroup, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  CheckGroup_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TCheckGroup, ADesignTimePPI: int32) =
  CheckGroup_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TCheckGroup, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  CheckGroup_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc Align*(this: TCheckGroup): TAlign  =
  return CheckGroup_GetAlign(this.Instance)

proc `Align=`*(this: TCheckGroup, AValue: TAlign)  =
  CheckGroup_SetAlign(this.Instance, AValue)

proc Anchors*(this: TCheckGroup): TAnchors  =
  return CheckGroup_GetAnchors(this.Instance)

proc `Anchors=`*(this: TCheckGroup, AValue: TAnchors)  =
  CheckGroup_SetAnchors(this.Instance, AValue)

proc AutoFill*(this: TCheckGroup): bool  =
  return CheckGroup_GetAutoFill(this.Instance)

proc `AutoFill=`*(this: TCheckGroup, AValue: bool)  =
  CheckGroup_SetAutoFill(this.Instance, AValue)

proc AutoSize*(this: TCheckGroup): bool  =
  return CheckGroup_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TCheckGroup, AValue: bool)  =
  CheckGroup_SetAutoSize(this.Instance, AValue)

proc BiDiMode*(this: TCheckGroup): TBiDiMode  =
  return CheckGroup_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TCheckGroup, AValue: TBiDiMode)  =
  CheckGroup_SetBiDiMode(this.Instance, AValue)

proc Caption*(this: TCheckGroup): string  =
  return $CheckGroup_GetCaption(this.Instance)

proc `Caption=`*(this: TCheckGroup, AValue: string)  =
  CheckGroup_SetCaption(this.Instance, AValue)

proc ClientHeight*(this: TCheckGroup): int32  =
  return CheckGroup_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TCheckGroup, AValue: int32)  =
  CheckGroup_SetClientHeight(this.Instance, AValue)

proc ClientWidth*(this: TCheckGroup): int32  =
  return CheckGroup_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TCheckGroup, AValue: int32)  =
  CheckGroup_SetClientWidth(this.Instance, AValue)

proc Color*(this: TCheckGroup): TColor  =
  return CheckGroup_GetColor(this.Instance)

proc `Color=`*(this: TCheckGroup, AValue: TColor)  =
  CheckGroup_SetColor(this.Instance, AValue)

proc ColumnLayout*(this: TCheckGroup): TColumnLayout  =
  return CheckGroup_GetColumnLayout(this.Instance)

proc `ColumnLayout=`*(this: TCheckGroup, AValue: TColumnLayout)  =
  CheckGroup_SetColumnLayout(this.Instance, AValue)

proc Columns*(this: TCheckGroup): int32  =
  return CheckGroup_GetColumns(this.Instance)

proc `Columns=`*(this: TCheckGroup, AValue: int32)  =
  CheckGroup_SetColumns(this.Instance, AValue)

proc Constraints*(this: TCheckGroup): TSizeConstraints  =
  return CheckGroup_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TCheckGroup, AValue: TSizeConstraints)  =
  CheckGroup_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TCheckGroup): bool  =
  return CheckGroup_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TCheckGroup, AValue: bool)  =
  CheckGroup_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TCheckGroup): TCursor  =
  return CheckGroup_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TCheckGroup, AValue: TCursor)  =
  CheckGroup_SetDragCursor(this.Instance, AValue)

proc DragMode*(this: TCheckGroup): TDragMode  =
  return CheckGroup_GetDragMode(this.Instance)

proc `DragMode=`*(this: TCheckGroup, AValue: TDragMode)  =
  CheckGroup_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TCheckGroup): bool  =
  return CheckGroup_GetEnabled(this.Instance)

proc `Enabled=`*(this: TCheckGroup, AValue: bool)  =
  CheckGroup_SetEnabled(this.Instance, AValue)

proc Font*(this: TCheckGroup): TFont  =
  return CheckGroup_GetFont(this.Instance).AsFont

proc `Font=`*(this: TCheckGroup, AValue: TFont)  =
  CheckGroup_SetFont(this.Instance, CheckPtr(AValue))

proc Items*(this: TCheckGroup): TStrings  =
  return CheckGroup_GetItems(this.Instance).AsStrings

proc `Items=`*(this: TCheckGroup, AValue: TStrings)  =
  CheckGroup_SetItems(this.Instance, CheckPtr(AValue))

proc `OnClick=`*(this: TCheckGroup, AEventId: TNotifyEvent)  =
  CheckGroup_SetOnClick(this.Instance, AEventId)

proc `OnDblClick=`*(this: TCheckGroup, AEventId: TNotifyEvent)  =
  CheckGroup_SetOnDblClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TCheckGroup, AEventId: TDragDropEvent)  =
  CheckGroup_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TCheckGroup, AEventId: TDragOverEvent)  =
  CheckGroup_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TCheckGroup, AEventId: TEndDragEvent)  =
  CheckGroup_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TCheckGroup, AEventId: TNotifyEvent)  =
  CheckGroup_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TCheckGroup, AEventId: TNotifyEvent)  =
  CheckGroup_SetOnExit(this.Instance, AEventId)

proc `OnItemClick=`*(this: TCheckGroup, AEventId: TCheckGroupClicked)  =
  CheckGroup_SetOnItemClick(this.Instance, AEventId)

proc `OnKeyDown=`*(this: TCheckGroup, AEventId: TKeyEvent)  =
  CheckGroup_SetOnKeyDown(this.Instance, AEventId)

proc `OnKeyPress=`*(this: TCheckGroup, AEventId: TKeyPressEvent)  =
  CheckGroup_SetOnKeyPress(this.Instance, AEventId)

proc `OnKeyUp=`*(this: TCheckGroup, AEventId: TKeyEvent)  =
  CheckGroup_SetOnKeyUp(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TCheckGroup, AEventId: TMouseEvent)  =
  CheckGroup_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TCheckGroup, AEventId: TNotifyEvent)  =
  CheckGroup_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TCheckGroup, AEventId: TNotifyEvent)  =
  CheckGroup_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TCheckGroup, AEventId: TMouseMoveEvent)  =
  CheckGroup_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TCheckGroup, AEventId: TMouseEvent)  =
  CheckGroup_SetOnMouseUp(this.Instance, AEventId)

proc `OnMouseWheel=`*(this: TCheckGroup, AEventId: TMouseWheelEvent)  =
  CheckGroup_SetOnMouseWheel(this.Instance, AEventId)

proc `OnMouseWheelDown=`*(this: TCheckGroup, AEventId: TMouseWheelUpDownEvent)  =
  CheckGroup_SetOnMouseWheelDown(this.Instance, AEventId)

proc `OnMouseWheelUp=`*(this: TCheckGroup, AEventId: TMouseWheelUpDownEvent)  =
  CheckGroup_SetOnMouseWheelUp(this.Instance, AEventId)

proc `OnResize=`*(this: TCheckGroup, AEventId: TNotifyEvent)  =
  CheckGroup_SetOnResize(this.Instance, AEventId)

proc ParentFont*(this: TCheckGroup): bool  =
  return CheckGroup_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TCheckGroup, AValue: bool)  =
  CheckGroup_SetParentFont(this.Instance, AValue)

proc ParentColor*(this: TCheckGroup): bool  =
  return CheckGroup_GetParentColor(this.Instance)

proc `ParentColor=`*(this: TCheckGroup, AValue: bool)  =
  CheckGroup_SetParentColor(this.Instance, AValue)

proc ParentDoubleBuffered*(this: TCheckGroup): bool  =
  return CheckGroup_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TCheckGroup, AValue: bool)  =
  CheckGroup_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentShowHint*(this: TCheckGroup): bool  =
  return CheckGroup_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TCheckGroup, AValue: bool)  =
  CheckGroup_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TCheckGroup): TPopupMenu  =
  return CheckGroup_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TCheckGroup, AValue: TPopupMenu)  =
  CheckGroup_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TCheckGroup): bool  =
  return CheckGroup_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TCheckGroup, AValue: bool)  =
  CheckGroup_SetShowHint(this.Instance, AValue)

proc TabOrder*(this: TCheckGroup): TTabOrder  =
  return CheckGroup_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TCheckGroup, AValue: TTabOrder)  =
  CheckGroup_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TCheckGroup): bool  =
  return CheckGroup_GetTabStop(this.Instance)

proc `TabStop=`*(this: TCheckGroup, AValue: bool)  =
  CheckGroup_SetTabStop(this.Instance, AValue)

proc Visible*(this: TCheckGroup): bool  =
  return CheckGroup_GetVisible(this.Instance)

proc `Visible=`*(this: TCheckGroup, AValue: bool)  =
  CheckGroup_SetVisible(this.Instance, AValue)

proc DockClientCount*(this: TCheckGroup): int32  =
  return CheckGroup_GetDockClientCount(this.Instance)

proc DockSite*(this: TCheckGroup): bool  =
  return CheckGroup_GetDockSite(this.Instance)

proc `DockSite=`*(this: TCheckGroup, AValue: bool)  =
  CheckGroup_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TCheckGroup): bool  =
  return CheckGroup_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TCheckGroup): int32  =
  return CheckGroup_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TCheckGroup): TBrush  =
  return CheckGroup_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TCheckGroup): int32  =
  return CheckGroup_GetControlCount(this.Instance)

proc Handle*(this: TCheckGroup): HWND  =
  return CheckGroup_GetHandle(this.Instance)

proc ParentWindow*(this: TCheckGroup): HWND  =
  return CheckGroup_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TCheckGroup, AValue: HWND)  =
  CheckGroup_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TCheckGroup): bool  =
  return CheckGroup_GetShowing(this.Instance)

proc UseDockManager*(this: TCheckGroup): bool  =
  return CheckGroup_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TCheckGroup, AValue: bool)  =
  CheckGroup_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TCheckGroup): TAction  =
  return CheckGroup_GetAction(this.Instance).AsAction

proc `Action=`*(this: TCheckGroup, AValue: TAction)  =
  CheckGroup_SetAction(this.Instance, CheckPtr(AValue))

proc BoundsRect*(this: TCheckGroup): TRect  =
  CheckGroup_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TCheckGroup, AValue: TRect)  =
  var ps1 = AValue
  CheckGroup_SetBoundsRect(this.Instance, ps1)

proc ClientOrigin*(this: TCheckGroup): TPoint  =
  CheckGroup_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TCheckGroup): TRect  =
  CheckGroup_GetClientRect(this.Instance, result)

proc ControlState*(this: TCheckGroup): TControlState  =
  return CheckGroup_GetControlState(this.Instance)

proc `ControlState=`*(this: TCheckGroup, AValue: TControlState)  =
  CheckGroup_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TCheckGroup): TControlStyle  =
  return CheckGroup_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TCheckGroup, AValue: TControlStyle)  =
  CheckGroup_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TCheckGroup): bool  =
  return CheckGroup_GetFloating(this.Instance)

proc Parent*(this: TCheckGroup): TWinControl  =
  return CheckGroup_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TCheckGroup, AValue: TWinControl)  =
  CheckGroup_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TCheckGroup): int32  =
  return CheckGroup_GetLeft(this.Instance)

proc `Left=`*(this: TCheckGroup, AValue: int32)  =
  CheckGroup_SetLeft(this.Instance, AValue)

proc Top*(this: TCheckGroup): int32  =
  return CheckGroup_GetTop(this.Instance)

proc `Top=`*(this: TCheckGroup, AValue: int32)  =
  CheckGroup_SetTop(this.Instance, AValue)

proc Width*(this: TCheckGroup): int32  =
  return CheckGroup_GetWidth(this.Instance)

proc `Width=`*(this: TCheckGroup, AValue: int32)  =
  CheckGroup_SetWidth(this.Instance, AValue)

proc Height*(this: TCheckGroup): int32  =
  return CheckGroup_GetHeight(this.Instance)

proc `Height=`*(this: TCheckGroup, AValue: int32)  =
  CheckGroup_SetHeight(this.Instance, AValue)

proc Cursor*(this: TCheckGroup): TCursor  =
  return CheckGroup_GetCursor(this.Instance)

proc `Cursor=`*(this: TCheckGroup, AValue: TCursor)  =
  CheckGroup_SetCursor(this.Instance, AValue)

proc Hint*(this: TCheckGroup): string  =
  return $CheckGroup_GetHint(this.Instance)

proc `Hint=`*(this: TCheckGroup, AValue: string)  =
  CheckGroup_SetHint(this.Instance, AValue)

proc ComponentCount*(this: TCheckGroup): int32  =
  return CheckGroup_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TCheckGroup): int32  =
  return CheckGroup_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TCheckGroup, AValue: int32)  =
  CheckGroup_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TCheckGroup): TComponent  =
  return CheckGroup_GetOwner(this.Instance).AsComponent

proc Name*(this: TCheckGroup): string  =
  return $CheckGroup_GetName(this.Instance)

proc `Name=`*(this: TCheckGroup, AValue: string)  =
  CheckGroup_SetName(this.Instance, AValue)

proc Tag*(this: TCheckGroup): int  =
  return CheckGroup_GetTag(this.Instance)

proc `Tag=`*(this: TCheckGroup, AValue: int)  =
  CheckGroup_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TCheckGroup): TAnchorSide  =
  return CheckGroup_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TCheckGroup, AValue: TAnchorSide)  =
  CheckGroup_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TCheckGroup): TAnchorSide  =
  return CheckGroup_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TCheckGroup, AValue: TAnchorSide)  =
  CheckGroup_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TCheckGroup): TAnchorSide  =
  return CheckGroup_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TCheckGroup, AValue: TAnchorSide)  =
  CheckGroup_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TCheckGroup): TAnchorSide  =
  return CheckGroup_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TCheckGroup, AValue: TAnchorSide)  =
  CheckGroup_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TCheckGroup): TControlChildSizing  =
  return CheckGroup_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TCheckGroup, AValue: TControlChildSizing)  =
  CheckGroup_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TCheckGroup): TControlBorderSpacing  =
  return CheckGroup_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TCheckGroup, AValue: TControlBorderSpacing)  =
  CheckGroup_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc Checked*(this: TCheckGroup, Index: int32): bool  =
  return CheckGroup_GetChecked(this.Instance, Index)

proc `Checked=`*(this: TCheckGroup, Index: int32, AValue: bool)  =
  CheckGroup_SetChecked(this.Instance, Index, AValue)

proc CheckEnabled*(this: TCheckGroup, Index: int32): bool  =
  return CheckGroup_GetCheckEnabled(this.Instance, Index)

proc `CheckEnabled=`*(this: TCheckGroup, Index: int32, AValue: bool)  =
  CheckGroup_SetCheckEnabled(this.Instance, Index, AValue)

proc DockClients*(this: TCheckGroup, Index: int32): TControl  =
  return CheckGroup_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TCheckGroup, Index: int32): TControl  =
  return CheckGroup_GetControls(this.Instance, Index).AsControl

proc Components*(this: TCheckGroup, AIndex: int32): TComponent  =
  return CheckGroup_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TCheckGroup, AKind: TAnchorKind): TAnchorSide  =
  return CheckGroup_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TCheckGroupClass*(): TClass = CheckGroup_StaticClassType()


#------------------------- TToggleBox -------------------------

proc Free*(this: TToggleBox) = defaultFree: ToggleBox_Free

proc NewToggleBox*(AOwner: TComponent): TToggleBox =
  new(result)
  result.Instance = ToggleBox_Create(CheckPtr(AOwner))

proc CanFocus*(this: TToggleBox): bool =
  return ToggleBox_CanFocus(this.Instance)

proc ContainsControl*(this: TToggleBox, Control: TControl): bool =
  return ToggleBox_ContainsControl(this.Instance, CheckPtr(Control))

proc ControlAtPos*(this: TToggleBox, Pos: TPoint, AllowDisabled: bool, AllowWinControls: bool): TControl =
  var ps1 = Pos
  return ToggleBox_ControlAtPos(this.Instance, ps1, AllowDisabled, AllowWinControls).AsControl

proc DisableAlign*(this: TToggleBox) =
  ToggleBox_DisableAlign(this.Instance)

proc EnableAlign*(this: TToggleBox) =
  ToggleBox_EnableAlign(this.Instance)

proc FindChildControl*(this: TToggleBox, ControlName: string): TControl =
  return ToggleBox_FindChildControl(this.Instance, ControlName).AsControl

proc FlipChildren*(this: TToggleBox, AllLevels: bool) =
  ToggleBox_FlipChildren(this.Instance, AllLevels)

proc Focused*(this: TToggleBox): bool =
  return ToggleBox_Focused(this.Instance)

proc HandleAllocated*(this: TToggleBox): bool =
  return ToggleBox_HandleAllocated(this.Instance)

proc InsertControl*(this: TToggleBox, AControl: TControl) =
  ToggleBox_InsertControl(this.Instance, CheckPtr(AControl))

proc Invalidate*(this: TToggleBox) =
  ToggleBox_Invalidate(this.Instance)

proc PaintTo*(this: TToggleBox, DC: HDC, X: int32, Y: int32) =
  ToggleBox_PaintTo(this.Instance, DC, X, Y)

proc RemoveControl*(this: TToggleBox, AControl: TControl) =
  ToggleBox_RemoveControl(this.Instance, CheckPtr(AControl))

proc Realign*(this: TToggleBox) =
  ToggleBox_Realign(this.Instance)

proc Repaint*(this: TToggleBox) =
  ToggleBox_Repaint(this.Instance)

proc ScaleBy*(this: TToggleBox, M: int32, D: int32) =
  ToggleBox_ScaleBy(this.Instance, M, D)

proc ScrollBy*(this: TToggleBox, DeltaX: int32, DeltaY: int32) =
  ToggleBox_ScrollBy(this.Instance, DeltaX, DeltaY)

proc SetBounds*(this: TToggleBox, ALeft: int32, ATop: int32, AWidth: int32, AHeight: int32) =
  ToggleBox_SetBounds(this.Instance, ALeft, ATop, AWidth, AHeight)

proc SetFocus*(this: TToggleBox) =
  ToggleBox_SetFocus(this.Instance)

proc Update*(this: TToggleBox) =
  ToggleBox_Update(this.Instance)

proc BringToFront*(this: TToggleBox) =
  ToggleBox_BringToFront(this.Instance)

proc ClientToScreen*(this: TToggleBox, Point: TPoint): TPoint =
  var ps1 = Point
  ToggleBox_ClientToScreen(this.Instance, ps1, result)

proc ClientToParent*(this: TToggleBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ToggleBox_ClientToParent(this.Instance, ps1, CheckPtr(AParent), result)

proc Dragging*(this: TToggleBox): bool =
  return ToggleBox_Dragging(this.Instance)

proc HasParent*(this: TToggleBox): bool =
  return ToggleBox_HasParent(this.Instance)

proc Hide*(this: TToggleBox) =
  ToggleBox_Hide(this.Instance)

proc Perform*(this: TToggleBox, Msg: uint32, WParam: uint, LParam: int): int =
  return ToggleBox_Perform(this.Instance, Msg, WParam, LParam)

proc Refresh*(this: TToggleBox) =
  ToggleBox_Refresh(this.Instance)

proc ScreenToClient*(this: TToggleBox, Point: TPoint): TPoint =
  var ps1 = Point
  ToggleBox_ScreenToClient(this.Instance, ps1, result)

proc ParentToClient*(this: TToggleBox, Point: TPoint, AParent: TWinControl): TPoint =
  var ps1 = Point
  ToggleBox_ParentToClient(this.Instance, ps1, CheckPtr(AParent), result)

proc SendToBack*(this: TToggleBox) =
  ToggleBox_SendToBack(this.Instance)

proc Show*(this: TToggleBox) =
  ToggleBox_Show(this.Instance)

proc GetTextBuf*(this: TToggleBox, Buffer: string, BufSize: int32): int32 =
  return ToggleBox_GetTextBuf(this.Instance, Buffer, BufSize)

proc GetTextLen*(this: TToggleBox): int32 =
  return ToggleBox_GetTextLen(this.Instance)

proc SetTextBuf*(this: TToggleBox, Buffer: string) =
  ToggleBox_SetTextBuf(this.Instance, Buffer)

proc FindComponent*(this: TToggleBox, AName: string): TComponent =
  return ToggleBox_FindComponent(this.Instance, AName).AsComponent

proc GetNamePath*(this: TToggleBox): string =
  return $ToggleBox_GetNamePath(this.Instance)

proc Assign*(this: TToggleBox, Source: TObject) =
  ToggleBox_Assign(this.Instance, CheckPtr(Source))

proc ClassType*(this: TToggleBox): TClass =
  return ToggleBox_ClassType(this.Instance)

proc ClassName*(this: TToggleBox): string =
  return $ToggleBox_ClassName(this.Instance)

proc InstanceSize*(this: TToggleBox): int32 =
  return ToggleBox_InstanceSize(this.Instance)

proc InheritsFrom*(this: TToggleBox, AClass: TClass): bool =
  return ToggleBox_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TToggleBox, Obj: TObject): bool =
  return ToggleBox_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TToggleBox): int32 =
  return ToggleBox_GetHashCode(this.Instance)

proc ToString*(this: TToggleBox): string =
  return $ToggleBox_ToString(this.Instance)

proc AnchorToNeighbour*(this: TToggleBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ToggleBox_AnchorToNeighbour(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorParallel*(this: TToggleBox, ASide: TAnchorKind, ASpace: int32, ASibling: TControl) =
  ToggleBox_AnchorParallel(this.Instance, ASide, ASpace, CheckPtr(ASibling))

proc AnchorHorizontalCenterTo*(this: TToggleBox, ASibling: TControl) =
  ToggleBox_AnchorHorizontalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorVerticalCenterTo*(this: TToggleBox, ASibling: TControl) =
  ToggleBox_AnchorVerticalCenterTo(this.Instance, CheckPtr(ASibling))

proc AnchorSame*(this: TToggleBox, ASide: TAnchorKind, ASibling: TControl) =
  ToggleBox_AnchorSame(this.Instance, ASide, CheckPtr(ASibling))

proc AnchorAsAlign*(this: TToggleBox, ATheAlign: TAlign, ASpace: int32) =
  ToggleBox_AnchorAsAlign(this.Instance, ATheAlign, ASpace)

proc AnchorClient*(this: TToggleBox, ASpace: int32) =
  ToggleBox_AnchorClient(this.Instance, ASpace)

proc ScaleDesignToForm*(this: TToggleBox, ASize: int32): int32 =
  return ToggleBox_ScaleDesignToForm(this.Instance, ASize)

proc ScaleFormToDesign*(this: TToggleBox, ASize: int32): int32 =
  return ToggleBox_ScaleFormToDesign(this.Instance, ASize)

proc Scale96ToForm*(this: TToggleBox, ASize: int32): int32 =
  return ToggleBox_Scale96ToForm(this.Instance, ASize)

proc ScaleFormTo9*(this: TToggleBox, ASize: int32): int32 =
  return ToggleBox_ScaleFormTo96(this.Instance, ASize)

proc Scale96ToFont*(this: TToggleBox, ASize: int32): int32 =
  return ToggleBox_Scale96ToFont(this.Instance, ASize)

proc ScaleFontTo9*(this: TToggleBox, ASize: int32): int32 =
  return ToggleBox_ScaleFontTo96(this.Instance, ASize)

proc ScaleScreenToFont*(this: TToggleBox, ASize: int32): int32 =
  return ToggleBox_ScaleScreenToFont(this.Instance, ASize)

proc ScaleFontToScreen*(this: TToggleBox, ASize: int32): int32 =
  return ToggleBox_ScaleFontToScreen(this.Instance, ASize)

proc Scale96ToScreen*(this: TToggleBox, ASize: int32): int32 =
  return ToggleBox_Scale96ToScreen(this.Instance, ASize)

proc ScaleScreenTo9*(this: TToggleBox, ASize: int32): int32 =
  return ToggleBox_ScaleScreenTo96(this.Instance, ASize)

proc AutoAdjustLayout*(this: TToggleBox, AMode: TLayoutAdjustmentPolicy, AFromPPI: int32, AToPPI: int32, AOldFormWidth: int32, ANewFormWidth: int32) =
  ToggleBox_AutoAdjustLayout(this.Instance, AMode, AFromPPI, AToPPI, AOldFormWidth, ANewFormWidth)

proc FixDesignFontsPPI*(this: TToggleBox, ADesignTimePPI: int32) =
  ToggleBox_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TToggleBox, AToPPI: int32, AProportion: float64) =
  var ps2 = AProportion
  ToggleBox_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc AllowGrayed*(this: TToggleBox): bool  =
  return ToggleBox_GetAllowGrayed(this.Instance)

proc `AllowGrayed=`*(this: TToggleBox, AValue: bool)  =
  ToggleBox_SetAllowGrayed(this.Instance, AValue)

proc Align*(this: TToggleBox): TAlign  =
  return ToggleBox_GetAlign(this.Instance)

proc `Align=`*(this: TToggleBox, AValue: TAlign)  =
  ToggleBox_SetAlign(this.Instance, AValue)

proc Anchors*(this: TToggleBox): TAnchors  =
  return ToggleBox_GetAnchors(this.Instance)

proc `Anchors=`*(this: TToggleBox, AValue: TAnchors)  =
  ToggleBox_SetAnchors(this.Instance, AValue)

proc AutoSize*(this: TToggleBox): bool  =
  return ToggleBox_GetAutoSize(this.Instance)

proc `AutoSize=`*(this: TToggleBox, AValue: bool)  =
  ToggleBox_SetAutoSize(this.Instance, AValue)

proc Caption*(this: TToggleBox): string  =
  return $ToggleBox_GetCaption(this.Instance)

proc `Caption=`*(this: TToggleBox, AValue: string)  =
  ToggleBox_SetCaption(this.Instance, AValue)

proc Checked*(this: TToggleBox): bool  =
  return ToggleBox_GetChecked(this.Instance)

proc `Checked=`*(this: TToggleBox, AValue: bool)  =
  ToggleBox_SetChecked(this.Instance, AValue)

proc Color*(this: TToggleBox): TColor  =
  return ToggleBox_GetColor(this.Instance)

proc `Color=`*(this: TToggleBox, AValue: TColor)  =
  ToggleBox_SetColor(this.Instance, AValue)

proc Constraints*(this: TToggleBox): TSizeConstraints  =
  return ToggleBox_GetConstraints(this.Instance).AsSizeConstraints

proc `Constraints=`*(this: TToggleBox, AValue: TSizeConstraints)  =
  ToggleBox_SetConstraints(this.Instance, CheckPtr(AValue))

proc DoubleBuffered*(this: TToggleBox): bool  =
  return ToggleBox_GetDoubleBuffered(this.Instance)

proc `DoubleBuffered=`*(this: TToggleBox, AValue: bool)  =
  ToggleBox_SetDoubleBuffered(this.Instance, AValue)

proc DragCursor*(this: TToggleBox): TCursor  =
  return ToggleBox_GetDragCursor(this.Instance)

proc `DragCursor=`*(this: TToggleBox, AValue: TCursor)  =
  ToggleBox_SetDragCursor(this.Instance, AValue)

proc DragKind*(this: TToggleBox): TDragKind  =
  return ToggleBox_GetDragKind(this.Instance)

proc `DragKind=`*(this: TToggleBox, AValue: TDragKind)  =
  ToggleBox_SetDragKind(this.Instance, AValue)

proc DragMode*(this: TToggleBox): TDragMode  =
  return ToggleBox_GetDragMode(this.Instance)

proc `DragMode=`*(this: TToggleBox, AValue: TDragMode)  =
  ToggleBox_SetDragMode(this.Instance, AValue)

proc Enabled*(this: TToggleBox): bool  =
  return ToggleBox_GetEnabled(this.Instance)

proc `Enabled=`*(this: TToggleBox, AValue: bool)  =
  ToggleBox_SetEnabled(this.Instance, AValue)

proc Font*(this: TToggleBox): TFont  =
  return ToggleBox_GetFont(this.Instance).AsFont

proc `Font=`*(this: TToggleBox, AValue: TFont)  =
  ToggleBox_SetFont(this.Instance, CheckPtr(AValue))

proc Hint*(this: TToggleBox): string  =
  return $ToggleBox_GetHint(this.Instance)

proc `Hint=`*(this: TToggleBox, AValue: string)  =
  ToggleBox_SetHint(this.Instance, AValue)

proc `OnChange=`*(this: TToggleBox, AEventId: TNotifyEvent)  =
  ToggleBox_SetOnChange(this.Instance, AEventId)

proc `OnClick=`*(this: TToggleBox, AEventId: TNotifyEvent)  =
  ToggleBox_SetOnClick(this.Instance, AEventId)

proc `OnDragDrop=`*(this: TToggleBox, AEventId: TDragDropEvent)  =
  ToggleBox_SetOnDragDrop(this.Instance, AEventId)

proc `OnDragOver=`*(this: TToggleBox, AEventId: TDragOverEvent)  =
  ToggleBox_SetOnDragOver(this.Instance, AEventId)

proc `OnEndDrag=`*(this: TToggleBox, AEventId: TEndDragEvent)  =
  ToggleBox_SetOnEndDrag(this.Instance, AEventId)

proc `OnEnter=`*(this: TToggleBox, AEventId: TNotifyEvent)  =
  ToggleBox_SetOnEnter(this.Instance, AEventId)

proc `OnExit=`*(this: TToggleBox, AEventId: TNotifyEvent)  =
  ToggleBox_SetOnExit(this.Instance, AEventId)

proc `OnMouseDown=`*(this: TToggleBox, AEventId: TMouseEvent)  =
  ToggleBox_SetOnMouseDown(this.Instance, AEventId)

proc `OnMouseEnter=`*(this: TToggleBox, AEventId: TNotifyEvent)  =
  ToggleBox_SetOnMouseEnter(this.Instance, AEventId)

proc `OnMouseLeave=`*(this: TToggleBox, AEventId: TNotifyEvent)  =
  ToggleBox_SetOnMouseLeave(this.Instance, AEventId)

proc `OnMouseMove=`*(this: TToggleBox, AEventId: TMouseMoveEvent)  =
  ToggleBox_SetOnMouseMove(this.Instance, AEventId)

proc `OnMouseUp=`*(this: TToggleBox, AEventId: TMouseEvent)  =
  ToggleBox_SetOnMouseUp(this.Instance, AEventId)

proc `OnMouseWheel=`*(this: TToggleBox, AEventId: TMouseWheelEvent)  =
  ToggleBox_SetOnMouseWheel(this.Instance, AEventId)

proc `OnMouseWheelDown=`*(this: TToggleBox, AEventId: TMouseWheelUpDownEvent)  =
  ToggleBox_SetOnMouseWheelDown(this.Instance, AEventId)

proc `OnMouseWheelUp=`*(this: TToggleBox, AEventId: TMouseWheelUpDownEvent)  =
  ToggleBox_SetOnMouseWheelUp(this.Instance, AEventId)

proc ParentDoubleBuffered*(this: TToggleBox): bool  =
  return ToggleBox_GetParentDoubleBuffered(this.Instance)

proc `ParentDoubleBuffered=`*(this: TToggleBox, AValue: bool)  =
  ToggleBox_SetParentDoubleBuffered(this.Instance, AValue)

proc ParentFont*(this: TToggleBox): bool  =
  return ToggleBox_GetParentFont(this.Instance)

proc `ParentFont=`*(this: TToggleBox, AValue: bool)  =
  ToggleBox_SetParentFont(this.Instance, AValue)

proc ParentShowHint*(this: TToggleBox): bool  =
  return ToggleBox_GetParentShowHint(this.Instance)

proc `ParentShowHint=`*(this: TToggleBox, AValue: bool)  =
  ToggleBox_SetParentShowHint(this.Instance, AValue)

proc PopupMenu*(this: TToggleBox): TPopupMenu  =
  return ToggleBox_GetPopupMenu(this.Instance).AsPopupMenu

proc `PopupMenu=`*(this: TToggleBox, AValue: TPopupMenu)  =
  ToggleBox_SetPopupMenu(this.Instance, CheckPtr(AValue))

proc ShowHint*(this: TToggleBox): bool  =
  return ToggleBox_GetShowHint(this.Instance)

proc `ShowHint=`*(this: TToggleBox, AValue: bool)  =
  ToggleBox_SetShowHint(this.Instance, AValue)

proc State*(this: TToggleBox): TCheckBoxState  =
  return ToggleBox_GetState(this.Instance)

proc `State=`*(this: TToggleBox, AValue: TCheckBoxState)  =
  ToggleBox_SetState(this.Instance, AValue)

proc TabOrder*(this: TToggleBox): TTabOrder  =
  return ToggleBox_GetTabOrder(this.Instance)

proc `TabOrder=`*(this: TToggleBox, AValue: TTabOrder)  =
  ToggleBox_SetTabOrder(this.Instance, AValue)

proc TabStop*(this: TToggleBox): bool  =
  return ToggleBox_GetTabStop(this.Instance)

proc `TabStop=`*(this: TToggleBox, AValue: bool)  =
  ToggleBox_SetTabStop(this.Instance, AValue)

proc Visible*(this: TToggleBox): bool  =
  return ToggleBox_GetVisible(this.Instance)

proc `Visible=`*(this: TToggleBox, AValue: bool)  =
  ToggleBox_SetVisible(this.Instance, AValue)

proc DockClientCount*(this: TToggleBox): int32  =
  return ToggleBox_GetDockClientCount(this.Instance)

proc DockSite*(this: TToggleBox): bool  =
  return ToggleBox_GetDockSite(this.Instance)

proc `DockSite=`*(this: TToggleBox, AValue: bool)  =
  ToggleBox_SetDockSite(this.Instance, AValue)

proc MouseInClient*(this: TToggleBox): bool  =
  return ToggleBox_GetMouseInClient(this.Instance)

proc VisibleDockClientCount*(this: TToggleBox): int32  =
  return ToggleBox_GetVisibleDockClientCount(this.Instance)

proc Brush*(this: TToggleBox): TBrush  =
  return ToggleBox_GetBrush(this.Instance).AsBrush

proc ControlCount*(this: TToggleBox): int32  =
  return ToggleBox_GetControlCount(this.Instance)

proc Handle*(this: TToggleBox): HWND  =
  return ToggleBox_GetHandle(this.Instance)

proc ParentWindow*(this: TToggleBox): HWND  =
  return ToggleBox_GetParentWindow(this.Instance)

proc `ParentWindow=`*(this: TToggleBox, AValue: HWND)  =
  ToggleBox_SetParentWindow(this.Instance, AValue)

proc Showing*(this: TToggleBox): bool  =
  return ToggleBox_GetShowing(this.Instance)

proc UseDockManager*(this: TToggleBox): bool  =
  return ToggleBox_GetUseDockManager(this.Instance)

proc `UseDockManager=`*(this: TToggleBox, AValue: bool)  =
  ToggleBox_SetUseDockManager(this.Instance, AValue)

proc Action*(this: TToggleBox): TAction  =
  return ToggleBox_GetAction(this.Instance).AsAction

proc `Action=`*(this: TToggleBox, AValue: TAction)  =
  ToggleBox_SetAction(this.Instance, CheckPtr(AValue))

proc BiDiMode*(this: TToggleBox): TBiDiMode  =
  return ToggleBox_GetBiDiMode(this.Instance)

proc `BiDiMode=`*(this: TToggleBox, AValue: TBiDiMode)  =
  ToggleBox_SetBiDiMode(this.Instance, AValue)

proc BoundsRect*(this: TToggleBox): TRect  =
  ToggleBox_GetBoundsRect(this.Instance, result)

proc `BoundsRect=`*(this: TToggleBox, AValue: TRect)  =
  var ps1 = AValue
  ToggleBox_SetBoundsRect(this.Instance, ps1)

proc ClientHeight*(this: TToggleBox): int32  =
  return ToggleBox_GetClientHeight(this.Instance)

proc `ClientHeight=`*(this: TToggleBox, AValue: int32)  =
  ToggleBox_SetClientHeight(this.Instance, AValue)

proc ClientOrigin*(this: TToggleBox): TPoint  =
  ToggleBox_GetClientOrigin(this.Instance, result)

proc ClientRect*(this: TToggleBox): TRect  =
  ToggleBox_GetClientRect(this.Instance, result)

proc ClientWidth*(this: TToggleBox): int32  =
  return ToggleBox_GetClientWidth(this.Instance)

proc `ClientWidth=`*(this: TToggleBox, AValue: int32)  =
  ToggleBox_SetClientWidth(this.Instance, AValue)

proc ControlState*(this: TToggleBox): TControlState  =
  return ToggleBox_GetControlState(this.Instance)

proc `ControlState=`*(this: TToggleBox, AValue: TControlState)  =
  ToggleBox_SetControlState(this.Instance, AValue)

proc ControlStyle*(this: TToggleBox): TControlStyle  =
  return ToggleBox_GetControlStyle(this.Instance)

proc `ControlStyle=`*(this: TToggleBox, AValue: TControlStyle)  =
  ToggleBox_SetControlStyle(this.Instance, AValue)

proc Floating*(this: TToggleBox): bool  =
  return ToggleBox_GetFloating(this.Instance)

proc Parent*(this: TToggleBox): TWinControl  =
  return ToggleBox_GetParent(this.Instance).AsWinControl

proc `Parent=`*(this: TToggleBox, AValue: TWinControl)  =
  ToggleBox_SetParent(this.Instance, CheckPtr(AValue))

proc Left*(this: TToggleBox): int32  =
  return ToggleBox_GetLeft(this.Instance)

proc `Left=`*(this: TToggleBox, AValue: int32)  =
  ToggleBox_SetLeft(this.Instance, AValue)

proc Top*(this: TToggleBox): int32  =
  return ToggleBox_GetTop(this.Instance)

proc `Top=`*(this: TToggleBox, AValue: int32)  =
  ToggleBox_SetTop(this.Instance, AValue)

proc Width*(this: TToggleBox): int32  =
  return ToggleBox_GetWidth(this.Instance)

proc `Width=`*(this: TToggleBox, AValue: int32)  =
  ToggleBox_SetWidth(this.Instance, AValue)

proc Height*(this: TToggleBox): int32  =
  return ToggleBox_GetHeight(this.Instance)

proc `Height=`*(this: TToggleBox, AValue: int32)  =
  ToggleBox_SetHeight(this.Instance, AValue)

proc Cursor*(this: TToggleBox): TCursor  =
  return ToggleBox_GetCursor(this.Instance)

proc `Cursor=`*(this: TToggleBox, AValue: TCursor)  =
  ToggleBox_SetCursor(this.Instance, AValue)

proc ComponentCount*(this: TToggleBox): int32  =
  return ToggleBox_GetComponentCount(this.Instance)

proc ComponentIndex*(this: TToggleBox): int32  =
  return ToggleBox_GetComponentIndex(this.Instance)

proc `ComponentIndex=`*(this: TToggleBox, AValue: int32)  =
  ToggleBox_SetComponentIndex(this.Instance, AValue)

proc Owner*(this: TToggleBox): TComponent  =
  return ToggleBox_GetOwner(this.Instance).AsComponent

proc Name*(this: TToggleBox): string  =
  return $ToggleBox_GetName(this.Instance)

proc `Name=`*(this: TToggleBox, AValue: string)  =
  ToggleBox_SetName(this.Instance, AValue)

proc Tag*(this: TToggleBox): int  =
  return ToggleBox_GetTag(this.Instance)

proc `Tag=`*(this: TToggleBox, AValue: int)  =
  ToggleBox_SetTag(this.Instance, AValue)

proc AnchorSideLeft*(this: TToggleBox): TAnchorSide  =
  return ToggleBox_GetAnchorSideLeft(this.Instance).AsAnchorSide

proc `AnchorSideLeft=`*(this: TToggleBox, AValue: TAnchorSide)  =
  ToggleBox_SetAnchorSideLeft(this.Instance, CheckPtr(AValue))

proc AnchorSideTop*(this: TToggleBox): TAnchorSide  =
  return ToggleBox_GetAnchorSideTop(this.Instance).AsAnchorSide

proc `AnchorSideTop=`*(this: TToggleBox, AValue: TAnchorSide)  =
  ToggleBox_SetAnchorSideTop(this.Instance, CheckPtr(AValue))

proc AnchorSideRight*(this: TToggleBox): TAnchorSide  =
  return ToggleBox_GetAnchorSideRight(this.Instance).AsAnchorSide

proc `AnchorSideRight=`*(this: TToggleBox, AValue: TAnchorSide)  =
  ToggleBox_SetAnchorSideRight(this.Instance, CheckPtr(AValue))

proc AnchorSideBottom*(this: TToggleBox): TAnchorSide  =
  return ToggleBox_GetAnchorSideBottom(this.Instance).AsAnchorSide

proc `AnchorSideBottom=`*(this: TToggleBox, AValue: TAnchorSide)  =
  ToggleBox_SetAnchorSideBottom(this.Instance, CheckPtr(AValue))

proc ChildSizing*(this: TToggleBox): TControlChildSizing  =
  return ToggleBox_GetChildSizing(this.Instance).AsControlChildSizing

proc `ChildSizing=`*(this: TToggleBox, AValue: TControlChildSizing)  =
  ToggleBox_SetChildSizing(this.Instance, CheckPtr(AValue))

proc BorderSpacing*(this: TToggleBox): TControlBorderSpacing  =
  return ToggleBox_GetBorderSpacing(this.Instance).AsControlBorderSpacing

proc `BorderSpacing=`*(this: TToggleBox, AValue: TControlBorderSpacing)  =
  ToggleBox_SetBorderSpacing(this.Instance, CheckPtr(AValue))

proc DockClients*(this: TToggleBox, Index: int32): TControl  =
  return ToggleBox_GetDockClients(this.Instance, Index).AsControl

proc Controls*(this: TToggleBox, Index: int32): TControl  =
  return ToggleBox_GetControls(this.Instance, Index).AsControl

proc Components*(this: TToggleBox, AIndex: int32): TComponent  =
  return ToggleBox_GetComponents(this.Instance, AIndex).AsComponent

proc AnchorSide*(this: TToggleBox, AKind: TAnchorKind): TAnchorSide  =
  return ToggleBox_GetAnchorSide(this.Instance, AKind).AsAnchorSide

proc TToggleBoxClass*(): TClass = ToggleBox_StaticClassType()


#------------------------- TGridColumnTitle -------------------------


proc Assign*(this: TGridColumnTitle, Source: TObject)  =
  GridColumnTitle_Assign(this.Instance, CheckPtr(Source))

proc FillTitleDefaultFont*(this: TGridColumnTitle)  =
  GridColumnTitle_FillTitleDefaultFont(this.Instance)

proc FixDesignFontsPPI*(this: TGridColumnTitle, ADesignTimePPI: int32)  =
  GridColumnTitle_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TGridColumnTitle, AToPPI: int32, AProportion: float64)  =
  var ps2 = AProportion
  GridColumnTitle_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc IsDefault*(this: TGridColumnTitle): bool  =
  return GridColumnTitle_IsDefault(this.Instance)

proc GetNamePath*(this: TGridColumnTitle): string  =
  return $GridColumnTitle_GetNamePath(this.Instance)

proc ClassType*(this: TGridColumnTitle): TClass =
  return GridColumnTitle_ClassType(this.Instance)

proc ClassName*(this: TGridColumnTitle): string =
  return $GridColumnTitle_ClassName(this.Instance)

proc InstanceSize*(this: TGridColumnTitle): int32 =
  return GridColumnTitle_InstanceSize(this.Instance)

proc InheritsFrom*(this: TGridColumnTitle, AClass: TClass): bool =
  return GridColumnTitle_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TGridColumnTitle, Obj: TObject): bool =
  return GridColumnTitle_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TGridColumnTitle): int32 =
  return GridColumnTitle_GetHashCode(this.Instance)

proc ToString*(this: TGridColumnTitle): string =
  return $GridColumnTitle_ToString(this.Instance)

proc Column*(this: TGridColumnTitle): TGridColumn  =
  return GridColumnTitle_GetColumn(this.Instance).AsGridColumn

proc Alignment*(this: TGridColumnTitle): TAlignment  =
  return GridColumnTitle_GetAlignment(this.Instance)

proc `Alignment=`*(this: TGridColumnTitle, AValue: TAlignment)  =
  GridColumnTitle_SetAlignment(this.Instance, AValue)

proc Caption*(this: TGridColumnTitle): string  =
  return $GridColumnTitle_GetCaption(this.Instance)

proc `Caption=`*(this: TGridColumnTitle, AValue: string)  =
  GridColumnTitle_SetCaption(this.Instance, AValue)

proc Color*(this: TGridColumnTitle): TColor  =
  return GridColumnTitle_GetColor(this.Instance)

proc `Color=`*(this: TGridColumnTitle, AValue: TColor)  =
  GridColumnTitle_SetColor(this.Instance, AValue)

proc Font*(this: TGridColumnTitle): TFont  =
  return GridColumnTitle_GetFont(this.Instance).AsFont

proc `Font=`*(this: TGridColumnTitle, AValue: TFont)  =
  GridColumnTitle_SetFont(this.Instance, CheckPtr(AValue))

proc ImageIndex*(this: TGridColumnTitle): int32  =
  return GridColumnTitle_GetImageIndex(this.Instance)

proc `ImageIndex=`*(this: TGridColumnTitle, AValue: int32)  =
  GridColumnTitle_SetImageIndex(this.Instance, AValue)

proc ImageLayout*(this: TGridColumnTitle): TButtonLayout  =
  return GridColumnTitle_GetImageLayout(this.Instance)

proc `ImageLayout=`*(this: TGridColumnTitle, AValue: TButtonLayout)  =
  GridColumnTitle_SetImageLayout(this.Instance, AValue)

proc Layout*(this: TGridColumnTitle): TTextLayout  =
  return GridColumnTitle_GetLayout(this.Instance)

proc `Layout=`*(this: TGridColumnTitle, AValue: TTextLayout)  =
  GridColumnTitle_SetLayout(this.Instance, AValue)

proc MultiLine*(this: TGridColumnTitle): bool  =
  return GridColumnTitle_GetMultiLine(this.Instance)

proc `MultiLine=`*(this: TGridColumnTitle, AValue: bool)  =
  GridColumnTitle_SetMultiLine(this.Instance, AValue)

proc PrefixOption*(this: TGridColumnTitle): TPrefixOption  =
  return GridColumnTitle_GetPrefixOption(this.Instance)

proc `PrefixOption=`*(this: TGridColumnTitle, AValue: TPrefixOption)  =
  GridColumnTitle_SetPrefixOption(this.Instance, AValue)

proc TGridColumnTitleClass*(): TClass = GridColumnTitle_StaticClassType()


#------------------------- TGridColumn -------------------------


proc Assign*(this: TGridColumn, Source: TObject)  =
  GridColumn_Assign(this.Instance, CheckPtr(Source))

proc FixDesignFontsPPI*(this: TGridColumn, ADesignTimePPI: int32)  =
  GridColumn_FixDesignFontsPPI(this.Instance, ADesignTimePPI)

proc ScaleFontsPPI*(this: TGridColumn, AToPPI: int32, AProportion: float64)  =
  var ps2 = AProportion
  GridColumn_ScaleFontsPPI(this.Instance, AToPPI, ps2)

proc IsDefault*(this: TGridColumn): bool  =
  return GridColumn_IsDefault(this.Instance)

proc GetNamePath*(this: TGridColumn): string  =
  return $GridColumn_GetNamePath(this.Instance)

proc ClassType*(this: TGridColumn): TClass =
  return GridColumn_ClassType(this.Instance)

proc ClassName*(this: TGridColumn): string =
  return $GridColumn_ClassName(this.Instance)

proc InstanceSize*(this: TGridColumn): int32 =
  return GridColumn_InstanceSize(this.Instance)

proc InheritsFrom*(this: TGridColumn, AClass: TClass): bool =
  return GridColumn_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TGridColumn, Obj: TObject): bool =
  return GridColumn_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TGridColumn): int32 =
  return GridColumn_GetHashCode(this.Instance)

proc ToString*(this: TGridColumn): string =
  return $GridColumn_ToString(this.Instance)

proc Grid*(this: TGridColumn): TStringGrid  =
  return GridColumn_GetGrid(this.Instance).AsStringGrid

proc DefaultWidth*(this: TGridColumn): int32  =
  return GridColumn_GetDefaultWidth(this.Instance)

proc StoredWidth*(this: TGridColumn): int32  =
  return GridColumn_GetStoredWidth(this.Instance)

proc WidthChanged*(this: TGridColumn): bool  =
  return GridColumn_GetWidthChanged(this.Instance)

proc Alignment*(this: TGridColumn): TAlignment  =
  return GridColumn_GetAlignment(this.Instance)

proc `Alignment=`*(this: TGridColumn, AValue: TAlignment)  =
  GridColumn_SetAlignment(this.Instance, AValue)

proc ButtonStyle*(this: TGridColumn): TColumnButtonStyle  =
  return GridColumn_GetButtonStyle(this.Instance)

proc `ButtonStyle=`*(this: TGridColumn, AValue: TColumnButtonStyle)  =
  GridColumn_SetButtonStyle(this.Instance, AValue)

proc Color*(this: TGridColumn): TColor  =
  return GridColumn_GetColor(this.Instance)

proc `Color=`*(this: TGridColumn, AValue: TColor)  =
  GridColumn_SetColor(this.Instance, AValue)

proc DropDownRows*(this: TGridColumn): int32  =
  return GridColumn_GetDropDownRows(this.Instance)

proc `DropDownRows=`*(this: TGridColumn, AValue: int32)  =
  GridColumn_SetDropDownRows(this.Instance, AValue)

proc Expanded*(this: TGridColumn): bool  =
  return GridColumn_GetExpanded(this.Instance)

proc `Expanded=`*(this: TGridColumn, AValue: bool)  =
  GridColumn_SetExpanded(this.Instance, AValue)

proc Font*(this: TGridColumn): TFont  =
  return GridColumn_GetFont(this.Instance).AsFont

proc `Font=`*(this: TGridColumn, AValue: TFont)  =
  GridColumn_SetFont(this.Instance, CheckPtr(AValue))

proc Layout*(this: TGridColumn): TTextLayout  =
  return GridColumn_GetLayout(this.Instance)

proc `Layout=`*(this: TGridColumn, AValue: TTextLayout)  =
  GridColumn_SetLayout(this.Instance, AValue)

proc MinSize*(this: TGridColumn): int32  =
  return GridColumn_GetMinSize(this.Instance)

proc `MinSize=`*(this: TGridColumn, AValue: int32)  =
  GridColumn_SetMinSize(this.Instance, AValue)

proc MaxSize*(this: TGridColumn): int32  =
  return GridColumn_GetMaxSize(this.Instance)

proc `MaxSize=`*(this: TGridColumn, AValue: int32)  =
  GridColumn_SetMaxSize(this.Instance, AValue)

proc PickList*(this: TGridColumn): TStrings  =
  return GridColumn_GetPickList(this.Instance).AsStrings

proc `PickList=`*(this: TGridColumn, AValue: TStrings)  =
  GridColumn_SetPickList(this.Instance, CheckPtr(AValue))

proc ReadOnly*(this: TGridColumn): bool  =
  return GridColumn_GetReadOnly(this.Instance)

proc `ReadOnly=`*(this: TGridColumn, AValue: bool)  =
  GridColumn_SetReadOnly(this.Instance, AValue)

proc SizePriority*(this: TGridColumn): int32  =
  return GridColumn_GetSizePriority(this.Instance)

proc `SizePriority=`*(this: TGridColumn, AValue: int32)  =
  GridColumn_SetSizePriority(this.Instance, AValue)

proc Tag*(this: TGridColumn): int  =
  return GridColumn_GetTag(this.Instance)

proc `Tag=`*(this: TGridColumn, AValue: int)  =
  GridColumn_SetTag(this.Instance, AValue)

proc Title*(this: TGridColumn): TGridColumnTitle  =
  return GridColumn_GetTitle(this.Instance).AsGridColumnTitle

proc `Title=`*(this: TGridColumn, AValue: TGridColumnTitle)  =
  GridColumn_SetTitle(this.Instance, CheckPtr(AValue))

proc Width*(this: TGridColumn): int32  =
  return GridColumn_GetWidth(this.Instance)

proc `Width=`*(this: TGridColumn, AValue: int32)  =
  GridColumn_SetWidth(this.Instance, AValue)

proc Visible*(this: TGridColumn): bool  =
  return GridColumn_GetVisible(this.Instance)

proc `Visible=`*(this: TGridColumn, AValue: bool)  =
  GridColumn_SetVisible(this.Instance, AValue)

proc ValueChecked*(this: TGridColumn): string  =
  return $GridColumn_GetValueChecked(this.Instance)

proc `ValueChecked=`*(this: TGridColumn, AValue: string)  =
  GridColumn_SetValueChecked(this.Instance, AValue)

proc ValueUnchecked*(this: TGridColumn): string  =
  return $GridColumn_GetValueUnchecked(this.Instance)

proc `ValueUnchecked=`*(this: TGridColumn, AValue: string)  =
  GridColumn_SetValueUnchecked(this.Instance, AValue)

proc Collection*(this: TGridColumn): TCollection  =
  return GridColumn_GetCollection(this.Instance).AsCollection

proc `Collection=`*(this: TGridColumn, AValue: TCollection)  =
  GridColumn_SetCollection(this.Instance, CheckPtr(AValue))

proc Index*(this: TGridColumn): int32  =
  return GridColumn_GetIndex(this.Instance)

proc `Index=`*(this: TGridColumn, AValue: int32)  =
  GridColumn_SetIndex(this.Instance, AValue)

proc DisplayName*(this: TGridColumn): string  =
  return $GridColumn_GetDisplayName(this.Instance)

proc `DisplayName=`*(this: TGridColumn, AValue: string)  =
  GridColumn_SetDisplayName(this.Instance, AValue)

proc TGridColumnClass*(): TClass = GridColumn_StaticClassType()


#------------------------- TGridColumns -------------------------


proc Add*(this: TGridColumns): TGridColumn  =
  return GridColumns_Add(this.Instance).AsGridColumn

proc Clear*(this: TGridColumns)  =
  GridColumns_Clear(this.Instance)

proc RealIndex*(this: TGridColumns, Index: int32): int32  =
  return GridColumns_RealIndex(this.Instance, Index)

proc IndexOf*(this: TGridColumns, Column: TGridColumn): int32  =
  return GridColumns_IndexOf(this.Instance, CheckPtr(Column))

proc IsDefault*(this: TGridColumns): bool  =
  return GridColumns_IsDefault(this.Instance)

proc HasIndex*(this: TGridColumns, Index: int32): bool  =
  return GridColumns_HasIndex(this.Instance, Index)

proc Owner*(this: TGridColumns): TObject  =
  return GridColumns_Owner(this.Instance).AsObject

proc Assign*(this: TGridColumns, Source: TObject)  =
  GridColumns_Assign(this.Instance, CheckPtr(Source))

proc BeginUpdate*(this: TGridColumns)  =
  GridColumns_BeginUpdate(this.Instance)

proc Delete*(this: TGridColumns, Index: int32)  =
  GridColumns_Delete(this.Instance, Index)

proc EndUpdate*(this: TGridColumns)  =
  GridColumns_EndUpdate(this.Instance)

proc FindItemID*(this: TGridColumns, ID: int32): TCollectionItem  =
  return GridColumns_FindItemID(this.Instance, ID).AsCollectionItem

proc GetNamePath*(this: TGridColumns): string  =
  return $GridColumns_GetNamePath(this.Instance)

proc Insert*(this: TGridColumns, Index: int32): TCollectionItem  =
  return GridColumns_Insert(this.Instance, Index).AsCollectionItem

proc ClassType*(this: TGridColumns): TClass =
  return GridColumns_ClassType(this.Instance)

proc ClassName*(this: TGridColumns): string =
  return $GridColumns_ClassName(this.Instance)

proc InstanceSize*(this: TGridColumns): int32 =
  return GridColumns_InstanceSize(this.Instance)

proc InheritsFrom*(this: TGridColumns, AClass: TClass): bool =
  return GridColumns_InheritsFrom(this.Instance, AClass)

proc Equals*(this: TGridColumns, Obj: TObject): bool =
  return GridColumns_Equals(this.Instance, CheckPtr(Obj))

proc GetHashCode*(this: TGridColumns): int32 =
  return GridColumns_GetHashCode(this.Instance)

proc ToString*(this: TGridColumns): string =
  return $GridColumns_ToString(this.Instance)

proc Grid*(this: TGridColumns): TStringGrid  =
  return GridColumns_GetGrid(this.Instance).AsStringGrid

proc VisibleCount*(this: TGridColumns): int32  =
  return GridColumns_GetVisibleCount(this.Instance)

proc Enabled*(this: TGridColumns): bool  =
  return GridColumns_GetEnabled(this.Instance)

proc Count*(this: TGridColumns): int32  =
  return GridColumns_GetCount(this.Instance)

proc Items*(this: TGridColumns, Index: int32): TGridColumn  =
  return GridColumns_GetItems(this.Instance, Index).AsGridColumn

proc `Items=`*(this: TGridColumns, Index: int32, AValue: TGridColumn)  =
  GridColumns_SetItems(this.Instance, Index, CheckPtr(AValue))

proc TGridColumnsClass*(): TClass = GridColumns_StaticClassType()


#------------ threadSync ----------------------
# 
import locks

# 线程同步专用回调
var
  syncLock: Lock

proc ThreadSync*(fn: TThreadProc) =
  acquire(syncLock) 
  defer:
    release(syncLock)
  threadSyncProc = fn
  DSynchronize(false)
  threadSyncProc = nil

# 锁
initLock(syncLock)

#------------ global vars ----------------------

var
  Application* = AsApplication(Application_Instance())
  Screen* = AsScreen(Screen_Instance())
  Mouse* = AsMouse(Mouse_Instance())
  Clipboard* = AsClipboard(Clipboard_Instance())
  Printer* = AsPrinter(Printer_Instance())
