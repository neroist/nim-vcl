#[ 
   The code is automatically generated by the genBind tool. 
   Author: ying32
   https://github.com/ying32  
]#
#{.experimental: "codeReordering".}

type

  TPoint* = object
    x*: int32
    y*: int32

  TRect* = object
    left*: int32
    top*: int32
    right*: int32
    bottom*: int32

  TSize* = object
    cx*: int32
    cy*: int32

  HWND* = uint

  HBITMAP* = uint

  HMENU* = uint

  HICON* = uint

  HDC* = uint

  HFONT* = uint

  HBRUSH* = uint

  HPEN* = uint

  HKEY* = uint

  HMONITOR* = uint

  HGDIOBJ* = uint

  HMODULE* = uint

  COLORREF* = uint32

  DWORD* = uint32

  HCURSOR* = HICON

  HINST* = uint

  LPCWSTR* = uint

  HRGN* = uint

  UINT* = uint32

  LPARAM* = uint

  WPARAM* = uint

  LRESULT* = uint

  HResult* = uint

  HPALETTE* = uint

  HRSRC* = uint

  HGLOBAL* = uint

  TFNWndEnumProc* = uint

  TXID* = uint64

  ATOM* = uint16

  TAtom* = uint16

  SIZE_T* = uint

  TSet* = uint32

  TMsg* = object
    hwnd*: HWND
    message*: uint32
    wParam*: uint
    lParam*: uint
    time*: uint32
    pt*: TPoint

  TCursorInfo* = object
    cbSize*: uint32
    flags*: uint32
    hCursor*: HCURSOR
    ptScreenPos*: TPoint

  TWndClass* = object
    style*: uint32
    lpfnWndProc*: uint
    cbClsExtra*: int32
    cbWndExtra*: int32
    hInstance*: uint
    hIcon*: HICON
    hCursor*: HCURSOR
    hbrBackground*: HBRUSH
    lpszMenuName*: LPCWSTR
    lpszClassName*: LPCWSTR

  TModalResult* = int32

  TColor* = uint32

  THelpEventData* = uint

  TTabOrder* = int16

  PFNLVCOMPARE* = uint

  PFNTVCOMPARE* = uint

  Integer* = int32

  Cardinal* = uint32

  Single* = float32

  Word* = uint16

  Byte* = uint8

  TFontCharset* = uint8

  TSpacingSize* = int32

  Char* = uint16

  TClass* = uint

  TThreadID* = uint

  TGridCoord* = object
    x*: int32
    y*: int32

  TCustomData* = uint

  TGridRect* = TRect

  IObjectArray* = uint

  TSysLocale* = object
    defaultLCID*: int32
    priLangID*: int32
    subLangID*: int32
    farEast*: bool
    middleEast*: bool

  TSmallPoint* = object
    x*: int16
    y*: int16

  TGUID* = object
    d1*: uint32
    d2*: uint16
    d3*: uint16
    d4*: array[0..7, uint8]

  TLibResource* = object
    name*: cstring
    valPtr*: uint

  TResItem* = object
    name*: uint
    value*: uint

  TConstraintSize* = int32

  TAlignInfo* = object
    alignList*: uint
    controlIndex*: int32
    align*: TAlign
    scratch*: int32

  TAlign* = enum
    alNone,
    alTop,
    alBottom,
    alLeft,
    alRight,
    alClient,
    alCustom,

  TAlignSet* = set[TAlign]

  TBorderStyle* = enum
    bsNone,
    bsSingle,
    bsSizeable,
    bsDialog,
    bsToolWindow,
    bsSizeToolWin,

  TFormBorderStyle* = TBorderStyle

  TFormStyle* = enum
    fsNormal,
    fsMDIChild,
    fsMDIForm,
    fsStayOnTop,
    fsSplash,
    fsSystemStayOnTop,

  TPosition* = enum
    poDesigned, # use bounds from the designer (read from stream)
    poDefault, # LCL decision (normally window manager decides)
    poDefaultPosOnly, # designed size and LCL position
    poDefaultSizeOnly, # designed position and LCL size
    poScreenCenter, # center form on screen (depends on DefaultMonitor)
    poDesktopCenter, # center form on desktop (total of all screens)
    poMainFormCenter, # center form on main form (depends on DefaultMonitor)
    poOwnerFormCenter, # center form on owner form (depends on DefaultMonitor)
    poWorkAreaCenter, # center form on working area (depends on DefaultMonitor)

  TCursor* = int16

  TSeekOrigin* = enum
    soBeginning,
    soCurrent,
    soEnd,

  TPixelFormat* = enum
    pfDevice,
    pf1bit,
    pf4bit,
    pf8bit,
    pf15bit,
    pf16bit,
    pf24bit,
    pf32bit,
    pfCustom,

  TAlignment* = enum
    taLeftJustify,
    taRightJustify,
    taCenter,

  TLeftRight* = int32

  TBiDiMode* = enum
    bdLeftToRight,
    bdRightToLeft,
    bdRightToLeftNoAlign,
    bdRightToLeftReadingOnly,

  TVerticalAlignment* = enum
    taAlignTop,
    taAlignBottom,
    taVerticalCenter,

  TComboBoxStyle* = enum
    csDropDown, # like an TEdit plus a button to drop down the list, default
    csSimple, # like an TEdit plus a TListBox
    csDropDownList, # like TLabel plus a button to drop down the list
    csOwnerDrawFixed, # like csDropDownList, but custom drawn
    csOwnerDrawVariable, # like csDropDownList, but custom drawn and with each item can have another height
    csOwnerDrawEditableFixed, # like csOwnerDrawFixed, but with TEdit
    csOwnerDrawEditableVariable, # like csOwnerDrawVariable, but with TEdit

  TColorBoxStyle* = TComboBoxStyle

  TWindowState* = enum
    wsNormal,
    wsMinimized,
    wsMaximized,
    wsFullScreen,

  TTextLayout* = enum
    tlTop,
    tlCenter,
    tlBottom,

  TEllipsisPosition* = enum
    epNone,
    epPathEllipsis,
    epEndEllipsis,
    epWordEllipsis,

  TLinkAlignment* = TAlignment

  TListBoxStyle* = enum
    lbStandard,
    lbOwnerDrawFixed,
    lbOwnerDrawVariable,
    lbVirtual,

  TPopupAlignment* = enum
    paLeft,
    paRight,
    paCenter,

  TTrackButton* = enum
    tbRightButton,
    tbLeftButton,

  TProgressBarOrientation* = enum
    pbHorizontal,
    pbVertical,
    pbRightToLeft,
    pbTopDown,

  TProgressBarStyle* = enum
    pbstNormal,
    pbstMarquee,

  TProgressBarState* = enum
    pbsNormal,
    pbsError,
    pbsPaused,

  TButtonLayout* = enum
    blGlyphLeft,
    blGlyphRight,
    blGlyphTop,
    blGlyphBottom,

  TButtonState* = enum
    bsUp, # button is up
    bsDisabled, # button disabled (grayed)
    bsDown, # button is down
    bsExclusive, # button is the only down in his group
    bsHot, # button is under mouse

  TButtonStyle* = enum
    bsAutoDetect,
    bsWin31,
    bsNew,

  TNumGlyphs* = int32

  TStaticBorderStyle* = enum
    sbsNone,
    sbsSingle,
    sbsSunken,

  TFontStyle* = enum
    fsBold,
    fsItalic,
    fsUnderline,
    fsStrikeOut,

  TFontStyles* = set[TFontStyle]

  TScrollStyle* = enum
    ssNone,
    ssHorizontal,
    ssVertical,
    ssBoth,
    ssAutoHorizontal,
    ssAutoVertical,
    ssAutoBoth,

  TSortType* = enum
    stNone,
    stData,
    stText,
    stBoth,

  TListArrangement* = enum
    arAlignBottom,
    arAlignLeft,
    arAlignRight,
    arAlignTop,
    arDefault,
    arSnapToGrid,

  TViewStyle* = enum
    vsIcon,
    vsSmallIcon,
    vsList,
    vsReport,

  TItemState* = enum
    isNone,
    isCut,
    isDropHilited,
    isFocused,
    isSelected,
    isActivating,

  TItemStates* = set[TItemState]

  TItemChange* = enum
    ctText,
    ctImage,
    ctState,

  TItemFind* = enum
    ifData,
    ifPartialString,
    ifExactString,
    ifNearest,

  TSearchDirection* = enum
    sdLeft,
    sdRight,
    sdAbove,
    sdBelow,
    sdAll,

  TListHotTrackStyle* = enum
    htHandPoint,
    htUnderlineCold,
    htUnderlineHot,

  TListHotTrackStyles* = set[TListHotTrackStyle]

  TItemRequests* = enum
    irText,
    irImage,
    irParam,
    irState,
    irIndent,

  TBrushStyle* = enum
    bsSolid,
    bsClear,
    bsHorizontal,
    bsVertical,
    bsFDiagonal,
    bsBDiagonal,
    bsCross,
    bsDiagCross,
    bsImage,
    bsPattern,

  TPenStyle* = enum
    psSolid,
    psDash,
    psDot,
    psDashDot,
    psDashDotDot,
    psinsideFrame,
    psPattern,
    psClear,

  TUDBtnType* = enum
    btNext,
    btPrev,

  TTabPosition* = enum
    tpTop,
    tpBottom,
    tpLeft,
    tpRight,

  TTabStyle* = enum
    tsTabs,
    tsButtons,
    tsFlatButtons,

  TFontPitch* = enum
    fpDefault,
    fpVariable,
    fpFixed,

  TPenMode* = enum
    pmBlack,
    pmWhite,
    pmNop,
    pmNot,
    pmCopy,
    pmNotCopy,
    pmMergePenNot,
    pmMaskPenNot,
    pmMergeNotPen,
    pmMaskNotPen,
    pmMerge,
    pmNotMerge,
    pmMask,
    pmNotMask,
    pmXor,
    pmNotXor,

  TTrackBarOrientation* = enum
    trHorizontal,
    trVertical,

  TUDOrientation* = enum
    udHorizontal,
    udVertical,

  TFontQuality* = enum
    fqDefault,
    fqDraft,
    fqProof,
    fqNonAntialiased,
    fqAntialiased,
    fqClearType,
    fqClearTypeNatural,

  TCloseAction* = enum
    caNone,
    caHide,
    caFree,
    caMinimize,

  TBalloonFlags* = enum
    bfNone,
    bfInfo,
    bfWarning,
    bfError,

  TMsgDlgType* = enum
    mtWarning,
    mtError,
    mtInformation,
    mtConfirmation,
    mtCustom,

  TMsgDlgBtn* = enum
    mbYes,
    mbNo,
    mbOK,
    mbCancel,
    mbAbort,
    mbRetry,
    mbIgnore,
    mbAll,
    mbNoToAll,
    mbYesToAll,
    mbHelp,
    mbClose,

  TMsgDlgButtons* = set[TMsgDlgBtn]

  TSysLinkType* = enum
    sltURL,
    sltID,

  TStatusPanelStyle* = enum
    psText,
    psOwnerDraw,

  TJPEGPerformance* = enum
    jpBestQuality,
    jpBestSpeed,

  TJPEGPixelFormat* = TPixelFormat

  TShortCut* = uint16

  TNodeState* = enum
    nsCut,
    nsDropHilite, # = Node.DropTarget
    nsFocused, # = Node.Focused
    nsSelected, # = Node.Selected
    nsMultiSelected, # = Node.MultiSelected
    nsExpanded, # = Node.Expanded
    nsHasChildren, # = Node.HasChildren
    nsDeleting, # = Node.Deleting, set on Destroy
    nsVisible, # = Node.Visible
    nsBound, # bound to a tree, e.g. has Parent or is top lvl node

  TNodeAttachMode* = enum
    naAdd, # add as last sibling of Destination
    naAddFirst, # add as first sibling of Destination
    naAddChild, # add as last child of Destination
    naAddChildFirst, # add as first child of Destination
    naInsert, # insert in front of Destination
    naInsertBehind, # insert behind Destination

  TAddMode* = enum
    taAddFirst,
    taAdd,
    taInsert,

  TMultiSelectStyles* = enum
    msControlSelect,
    msShiftSelect,
    msVisibleOnly,
    msSiblingOnly,

  TMultiSelectStyle* = set[TMultiSelectStyles]

  TActionListState* = enum
    asNormal,
    asSuspended,
    asSuspendedEnabled,

  TGradientDirection* = enum
    gdHorizontal,
    gdVertical,

  TDrawingStyle* = enum
    dSFocus,
    dSSelected,
    dSNormal,
    dSTransparent,

  TImageType* = enum
    itImage,
    itMask,

  TResType* = enum
    rtBitmap,
    rtCursor,
    rtIcon,

  TLoadResource* = enum
    lrDefaultColor,
    lrDefaultSize,
    lrFromFile,
    lrMap3DColors,
    lrTransparent,
    lrMonoChrome,

  TLoadResources* = set[TLoadResource]

  TColorDepth* = enum
    cdDefault,
    cdDeviceDependent,
    cd4Bit,
    cd8Bit,
    cd16Bit,
    cd24Bit,
    cd32Bit,

  TCheckBoxState* = enum
    cbUnchecked,
    cbChecked,
    cbGrayed,

  TToolButtonStyle* = enum
    tbsButton, # button (can be clicked)
    tbsCheck, # check item (click to toggle state, can be grouped)
    tbsDropDown, # button with dropdown button to show a popup menu
    tbsSeparator, # space holder
    tbsDivider, # space holder with line
    tbsButtonDrop, # button with arrow (not separated from each other)

  TTBGradientDrawingOption* = enum
    gdoHotTrack,
    gdoGradient,

  TTBGradientDrawingOptions* = set[TTBGradientDrawingOption]

  TColorDialogOption* = enum
    cdFullOpen,
    cdPreventFullOpen,
    cdShowHelp,
    cdSolidColor,
    cdAnyColor,

  TColorDialogOptions* = set[TColorDialogOption]

  TBorderIcon* = enum
    biSystemMenu,
    biMinimize,
    biMaximize,
    biHelp,

  TBorderIcons* = set[TBorderIcon]

  TFontDialogOption* = enum
    fdAnsiOnly,
    fdTrueTypeOnly,
    fdEffects,
    fdFixedPitchOnly,
    fdForceFontExist,
    fdNoFaceSel,
    fdNoOEMFonts,
    fdNoSimulations,
    fdNoSizeSel,
    fdNoStyleSel,
    fdNoVectorFonts,
    fdShowHelp,
    fdWysiwyg,
    fdLimitSize,
    fdScalableOnly,
    fdApplyButton,

  TFontDialogOptions* = set[TFontDialogOption]

  TOpenOption* = enum
    ofReadOnly,
    ofOverwritePrompt, # if selected file exists shows a message, that file
    ofHideReadOnly, # hide read only file
    ofNoChangeDir, # do not change current directory
    ofShowHelp, # show a help button
    ofNoValidate,
    ofAllowMultiSelect, # allow multiselection
    ofExtensionDifferent,
    ofPathMustExist, # shows an error message if selected path does not exist
    ofFileMustExist, # shows an error message if selected file does not exist
    ofCreatePrompt,
    ofShareAware,
    ofNoReadOnlyReturn, # do not return filenames that are readonly
    ofNoTestFileCreate,
    ofNoNetworkButton,
    ofNoLongNames,
    ofOldStyleDialog,
    ofNoDereferenceLinks, # do not resolve links while dialog is shown (only on Windows, see OFN_NODEREFERENCELINKS)
    ofNoResolveLinks, # do not resolve links after Execute
    ofEnableIncludeNotify,
    ofEnableSizing, # dialog can be resized, e.g. via the mouse
    ofDontAddToRecent, # do not add the path to the history list
    ofForceShowHidden, # show hidden files
    ofViewDetail, # details are OS and interface dependent
    ofAutoPreview, # details are OS and interface dependent

  TOpenOptions* = set[TOpenOption]

  TOpenOptionEx* = enum
    ofExNoPlacesBar,

  TOpenOptionsEx* = set[TOpenOptionEx]

  TPrintRange* = enum
    prAllPages,
    prSelection,
    prPageNums,
    prCurrentPage,

  TPrintDialogOption* = enum
    poPrintToFile,
    poPageNums,
    poSelection,
    poWarning,
    poHelp,
    poDisablePrintToFile,
    poBeforeBeginDoc,

  TPrintDialogOptions* = set[TPrintDialogOption]

  TPageSetupDialogOption* = enum
    psoDefaultMinMargins,
    psoDisableMargins,
    psoDisableOrientation,
    psoDisablePagePainting,
    psoDisablePaper,
    psoDisablePrinter,
    psoMargins,
    psoMinMargins,
    psoShowHelp,
    psoWarning,
    psoNoNetworkButton,

  TPageSetupDialogOptions* = set[TPageSetupDialogOption]

  TPrinterKind* = enum
    pkDotMatrix,
    pkHPPCL,

  TPageType* = enum
    ptEnvelope,
    ptPaper,

  TPageMeasureUnits* = enum
    pmDefault,
    pmMillimeters,
    pmInches,

  TStringsOption* = enum
    soStrictDelimiter,
    soWriteBOM,
    soTrailingLineBreak,
    soUseLocale,

  TStringsOptions* = set[TStringsOption]

  TShiftStateEnum* = enum
    ssShift,
    ssAlt,
    ssCtrl,
    ssLeft,
    ssRight,
    ssMiddle,
    ssDouble,
    ssMeta,
    ssSuper,
    ssHyper,
    ssAltGr,
    ssCaps,
    ssNum,
    ssScroll,
    ssTriple,
    ssQuad,
    ssExtra1,
    ssExtra2,

  TShiftState* = set[TShiftStateEnum]

  TMouseButton* = enum
    mbLeft,
    mbRight,
    mbMiddle,
    mbExtra1,
    mbExtra2,

  TFillStyle* = enum
    fsSurface,
    fsBorder,

  TFillMode* = enum
    fmAlternate,
    fmWinding,

  TCanvasStates* = enum
    csHandleValid,
    csFontValid,
    csPenValid,
    csBrushValid,
    csRegionValid,

  TCanvasState* = set[TCanvasStates]

  TCanvasOrientation* = enum
    coLeftToRight,
    coRightToLeft,

  TTextFormats* = enum
    tfBottom,
    tfCalcRect,
    tfCenter,
    tfEditControl,
    tfEndEllipsis,
    tfPathEllipsis,
    tfExpandTabs,
    tfExternalLeading,
    tfLeft,
    tfModifyString,
    tfNoClip,
    tfNoPrefix,
    tfRight,
    tfRtlReading,
    tfSingleLine,
    tfTop,
    tfVerticalCenter,
    tfWordBreak,
    tfHidePrefix,
    tfNoFullWidthCharBreak,
    tfPrefixOnly,
    tfTabStop,
    tfWordEllipsis,
    tfComposited,

  TTextFormat* = set[TTextFormats]

  TBevelCut* = enum
    bvNone,
    bvLowered,
    bvRaised,
    bvSpace,

  TBevelEdge* = enum
    beLeft,
    beTop,
    beRight,
    beBottom,

  TBevelEdges* = set[TBevelEdge]

  TBevelKind* = enum
    bkNone,
    bkTile,
    bkSoft,
    bkFlat,

  TTickMark* = enum
    tmBottomRight,
    tmTopLeft,
    tmBoth,

  TTickStyle* = enum
    tsNone,
    tsAuto,
    tsManual,

  TPositionToolTip* = enum
    ptNone,
    ptTop,
    ptLeft,
    ptBottom,
    ptRight,

  TDateTimeKind* = enum
    dtkDate,
    dtkTime,
    dtkDateTime,

  TDTDateMode* = enum
    dmComboBox,
    dmUpDown,
    dmNone,

  TDTDateFormat* = enum
    dfShort,
    dfLong,

  TDTCalAlignment* = enum
    dtaLeft,
    dtaRight,
    dtaDefault,

  TCalDayOfWeek* = enum
    dowMonday,
    dowTuesday,
    dowWednesday,
    dowThursday,
    dowFriday,
    dowSaturday,
    dowSunday,
    dowLocaleDefault,

  TSearchType* = enum
    stWholeWord,
    stMatchCase,

  TSearchTypes* = set[TSearchType]

  TNumberingStyle* = enum
    nsNone,
    nsBullte,

  TAttributeType* = enum
    atSelected,
    atDefaultText,

  TConsistentAttribute* = enum
    caBold,
    caColor,
    caFace,
    caItalic,
    caSize,
    caStrikeOut,
    caUnderline,
    caProtected,

  TConsistentAttributes* = set[TConsistentAttribute]

  TIconArrangement* = enum
    iaTop,
    iaLeft,

  THeaderStyle* = enum
    hsGradient,
    hsImage,
    hsThemed,

  TImageAlignment* = enum
    iiaLeft,
    iiaRight,
    iiaTop,
    iiaBottom,
    iiaCenter,

  TAnchorKind* = enum
    akTop,
    akLeft,
    akRight,
    akBottom,

  TAnchors* = set[TAnchorKind]

  TOwnerDrawStateType* = enum
    odSelected,
    odGrayed,
    odDisabled,
    odChecked,
    odFocused,
    odDefault,
    odHotLight,
    odInactive,
    odNoAccel,
    odNoFocusRect,
    odReserved1,
    odReserved2,
    odComboBoxEdit,
    odBackgroundPainted, # item background already painted

  TOwnerDrawState* = set[TOwnerDrawStateType]

  TBitBtnKind* = enum
    bkCustom,
    bkOK,
    bkCancel,
    bkHelp,
    bkYes,
    bkNo,
    bkClose,
    bkAbort,
    bkRetry,
    bkIgnore,
    bkAll,
    bkNoToAll,
    bkYesToAll,

  TScrollBarKind* = enum
    sbHorizontal,
    sbVertical,

  TScrollBarInc* = int16

  TScrollBarStyle* = enum
    ssRegular,
    ssFlat,
    ssHotTrack,

  TShapeType* = enum
    stRectangle,
    stSquare,
    stRoundRect,
    stRoundSquare,
    stEllipse,
    stCircle,
    stSquaredDiamond,
    stDiamond,
    stTriangle,
    stTriangleLeft,
    stTriangleRight,
    stTriangleDown,
    stStar,
    stStarDown,

  TBevelStyle* = int32

  TBevelShape* = enum
    bsBox,
    bsFrame,
    bsTopLine,
    bsBottomLine,
    bsLeftLine,
    bsRightLine,
    bsSpacer,

  TGaugeKind* = enum
    gkText,
    gkHorizontalBar,
    gkVerticalBar,
    gkPie,
    gkNeedle,
    gkHalfPie,

  TCustomDrawTarget* = enum
    dtControl,
    dtItem,
    dtSubItem,

  TCustomDrawStage* = enum
    cdPrePaint,
    cdPostPaint,
    cdPreErase,
    cdPostErase,

  TCustomDrawStateFlag* = enum
    cdsSelected,
    cdsGrayed,
    cdsDisabled,
    cdsChecked,
    cdsFocused,
    cdsDefault,
    cdsHot,
    cdsMarked,
    cdsIndeterminate,

  TCustomDrawState* = set[TCustomDrawStateFlag]

  TDisplayCode* = enum
    drBounds,
    drIcon,
    drLabel,
    drSelectBounds,

  TSelectDirOpt* = enum
    sdAllowCreate,
    sdPerformCreate,
    sdPrompt,

  TSelectDirOpts* = set[TSelectDirOpt]

  TFindOption* = enum
    frDown,
    frFindNext,
    frHideMatchCase,
    frHideWholeWord,
    frHideUpDown,
    frMatchCase,
    frDisableMatchCase,
    frDisableUpDown,
    frDisableWholeWord,
    frReplace,
    frReplaceAll,
    frWholeWord,
    frShowHelp,
    frEntireScope,
    frHideEntireScope,
    frPromptOnReplace,
    frHidePromptOnReplace,
    frButtonsAtBottom,

  TFindOptions* = set[TFindOption]

  TDragMode* = enum
    dmManual,
    dmAutomatic,

  TDragState* = enum
    dsDragEnter,
    dsDragLeave,
    dsDragMove,

  TDragKind* = enum
    dkDrag,
    dkDock,

  TEditCharCase* = enum
    ecNormal,
    ecUpperCase,
    ecLowerCase,

  TEdgeBorder* = enum
    ebLeft,
    ebTop,
    ebRight,
    ebBottom,

  TEdgeBorders* = set[TEdgeBorder]

  TEdgeStyle* = enum
    esNone,
    esRaised,
    esLowered,

  TGridDrawingStyle* = enum
    gdsClassic,
    gdsThemed,
    gdsGradient,

  TGridOption* = enum
    goFixedVertLine,
    goFixedHorzLine,
    goVertLine,
    goHorzLine,
    goRangeSelect,
    goDrawFocusSelected,
    goRowSizing,
    goColSizing,
    goRowMoving,
    goColMoving,
    goEditing,
    goAutoAddRows,
    goTabs,
    goRowSelect,
    goAlwaysShowEditor,
    goThumbTracking,
    goColSpanning, # Enable cellextent calcs
    goRelaxedRowSelect, # User can see focused cell on goRowSelect
    goDblClickAutoSize, # dblclicking columns borders (on hdrs) resize col.
    goSmoothScroll, # Switch scrolling mode (pixel scroll is by default)
    goFixedRowNumbering, # Ya
    goScrollKeepVisible, # keeps focused cell visible while scrolling
    goHeaderHotTracking, # Header cells change look when mouse is over them
    goHeaderPushedLook, # Header cells looks pushed when clicked
    goSelectionActive, # Setting grid.Selection moves also cell cursor
    goFixedColSizing, # Allow to resize fixed columns
    goDontScrollPartCell, # clicking partially visible cells will not scroll
    goCellHints, # show individual cell hints
    goTruncCellHints, # show cell hints if cell text is too long
    goCellEllipsis, # show "..." if cell text is too long
    goAutoAddRowsSkipContentCheck, # BB Also add a row (if AutoAddRows in Options) if last row is empty
    goRowHighlight, # Highlight the current Row

  TGridOptions* = set[TGridOption]

  TGridDrawStates* = enum
    gdSelected,
    gdFocused,
    gdFixed,
    gdHot,
    gdPushed,
    gdRowHighlight,

  TGridDrawState* = set[TGridDrawStates]

  THeaderSectionStyle* = enum
    hsText,
    hsOwnerDraw,

  TLabelPosition* = enum
    lpAbove,
    lpBelow,
    lpLeft,
    lpRight,

  TFlowStyle* = enum
    fsLeftRightTopBottom,
    fsRightLeftTopBottom,
    fsLeftRightBottomTop,
    fsRightLeftBottomTop,
    fsTopBottomLeftRight,
    fsBottomTopLeftRight,
    fsTopBottomRightLeft,
    fsBottomTopRightLeft,

  TCoolBandMaximize* = enum
    bmNone,
    bmClick,
    bmDblClick,

  TMenuBreak* = enum
    mbNone,
    mbBreak,
    mbBarBreak,

  TSectionTrackState* = enum
    tsTrackBegin,
    tsTrackMove,
    tsTrackEnd,

  TControlStateType* = enum
    csLButtonDown,
    csClicked,
    csPalette,
    csReadingState,
    csFocusing,
    csCreating, # not used, exists for Delphi compatibility
    csPaintCopy,
    csCustomPaint,
    csDestroyingHandle,
    csDocking,
    csVisibleSetInLoading,

  TControlState* = set[TControlStateType]

  TControlStyleType* = enum
    csAcceptsControls, # can have children in the designer
    csCaptureMouse, # auto capture mouse when clicked
    csDesignInteractive, # wants mouse events in design mode
    csClickEvents, # handles mouse events
    csFramed, # not implemented, has 3d frame
    csSetCaption, # if Name=Caption, changing the Name changes the Caption
    csOpaque, # the control paints its area completely
    csDoubleClicks, # understands mouse double clicks
    csTripleClicks, # understands mouse triple clicks
    csQuadClicks, # understands mouse quad clicks
    csFixedWidth, # cannot change its width
    csFixedHeight, # cannot change its height (for example combobox)
    csNoDesignVisible, # is invisible in the designer
    csReplicatable, # PaintTo works
    csNoStdEvents, # standard events such as mouse, key, and click events are ignored.
    csDisplayDragImage, # display images from dragimagelist during drag operation over control
    csReflector, # not implemented, the controls respond to size, focus and dlg messages - it can be used as ActiveX control under Windows
    csActionClient, # Action is set
    csMenuEvents, # not implemented
    csNoFocus, # control will not take focus when clicked with mouse.
    csNeedsBorderPaint, # not implemented
    csParentBackground, # tells WinXP to paint the theme background of parent on controls background
    csDesignNoSmoothResize, # when resizing control in the designer do not SetBounds while dragging
    csDesignFixedBounds, # can not be moved nor resized in designer
    csHasDefaultAction, # implements useful ExecuteDefaultAction
    csHasCancelAction, # implements useful ExecuteCancelAction
    csNoDesignSelectable, # can not be selected at design time
    csOwnedChildrenNotSelectable, # child controls owned by this control are NOT selectable in the designer
    csAutoSize0x0, # if the preferred size is 0x0 then control is shrinked ot 0x0
    csAutoSizeKeepChildLeft, # when AutoSize=true do not move children horizontally
    csAutoSizeKeepChildTop, # when AutoSize=true do not move children vertically
    csRequiresKeyboardInput, # If the device has no physical keyboard then show the virtual keyboard when this control gets focus (therefore available only to TWinControl descendents)

  TControlStyle* = set[TControlStyleType]

  TMouseActivate* = enum
    maDefault,
    maActivate,
    maActivateAndEat,
    maNoActivate,
    maNoActivateAndEat,

  TTaskBarProgressState* = enum
    none,
    indeterminate,
    normal,
    error,
    paused,

  TBitmapHandleType* = enum
    bmDIB,
    bmDDB,

  TPrinterState* = enum
    psNoDefine,
    psReady,
    psPrinting,
    psStopped,

  TPrinterOrientation* = enum
    poPortrait,
    poLandscape,
    poReverseLandscape,
    poReversePortrait,

  TPrinterCapability* = enum
    pcCopies,
    pcOrientation,
    pcCollation,

  TPrinterCapabilities* = set[TPrinterCapability]

  TPrinterType* = enum
    ptLocal,
    ptNetWork,

  TReadyState* = enum
    rsUninitialized,
    rsLoading,
    rsLoaded,
    rsInterActive,
    rsComplete,

  TStringEncoding* = enum
    seUnknown,
    seANSI,
    seUnicode,
    seUTF8,

  TShowInTaskbar* = enum
    stDefault, # use default rules for showing taskbar item
    stAlways, # always show taskbar item for the form
    stNever, # never show taskbar item for the form

  TTaskDialogCommonButton* = enum
    tcbOk,
    tcbYes,
    tcbNo,
    tcbCancel,
    tcbRetry,
    tcbClose,

  TTaskDialogCommonButtons* = set[TTaskDialogCommonButton]

  TTaskDialogFlag* = enum
    tfEnableHyperlinks,
    tfUseHiconMain,
    tfUseHiconFooter,
    tfAllowDialogCancellation,
    tfUseCommandLinks,
    tfUseCommandLinksNoIcon,
    tfExpandFooterArea,
    tfExpandedByDefault,
    tfVerificationFlagChecked,
    tfShowProgressBar,
    tfShowMarqueeProgressBar,
    tfCallbackTimer,
    tfPositionRelativeToWindow,
    tfRtlLayout,
    tfNoDefaultRadioButton,
    tfCanBeMinimized,

  TTaskDialogFlags* = set[TTaskDialogFlag]

  TTaskDialogIcon* = enum
    tdiNone,
    tdiWarning,
    tdiError,
    tdiInformation,
    tdiShield,
    tdiQuestion,

  TComboBoxExStyle* = enum
    csExDropDown,
    csExSimple,
    csExDropDownList,

  TComboBoxExStyleEx* = enum
    csExCaseSensitive,
    csExNoEditImage,
    csExNoEditImageIndent,
    csExNoSizeLimit,
    csExPathWordBreak,

  TComboBoxExStyles* = set[TComboBoxExStyleEx]

  TAutoCompleteOption* = enum
    acoAutoSuggest,
    acoAutoAppend,
    acoSearch,
    acoFilterPrefixes,
    acoUseTab,
    acoUpDownKeyDropsList,
    acoRtlReading,

  TAutoCompleteOptions* = set[TAutoCompleteOption]

  TDefaultMonitor* = enum
    dmDesktop,
    dmPrimary,
    dmMainForm,
    dmActiveForm,

  TTransparentMode* = enum
    tmAuto,
    tmFixed,

  TDrawImageMode* = enum
    dimNormal,
    dimCenter,
    dimStretch,

  TListBoxOption* = enum
    lboDrawFocusRect, # draw focus rect in case of owner drawing

  TListBoxOptions* = set[TListBoxOption]

  TAntialiasingMode* = enum
    amDontCare, # default antialiasing
    amOn, # enabled
    amOff, # disabled

  TSortDirection* = enum
    sdAscending,
    sdDescending,

  TTreeViewExpandSignType* = enum
    tvestTheme, # use themed sign
    tvestPlusMinus, # use +/- sign
    tvestArrow, # use blank arrow
    tvestArrowFill, # use filled arrow

  TTreeViewOption* = enum
    tvoAllowMultiselect,
    tvoAutoExpand,
    tvoAutoInsertMark,
    tvoAutoItemHeight,
    tvoHideSelection,
    tvoHotTrack,
    tvoKeepCollapsedNodes,
    tvoReadOnly,
    tvoRightClickSelect,
    tvoRowSelect,
    tvoShowButtons,
    tvoShowLines,
    tvoShowRoot,
    tvoShowSeparators,
    tvoToolTips,
    tvoNoDoubleClickExpand,
    tvoThemedDraw,

  TTreeViewOptions* = set[TTreeViewOption]

  TGlyphShowMode* = enum
    gsmAlways, # always show
    gsmNever, # never show
    gsmApplication, # depends on application settings
    gsmSystem, # depends on system settings

  TCTabControlOption* = enum
    nboShowCloseButtons,
    nboMultiLine,
    nboHidePageListPopup,
    nboKeyboardTabSwitch,
    nboShowAddTabButton,
    nboDoChangeOnSetIndex,

  TCTabControlOptions* = set[TCTabControlOption]

  TAnchorSideReference* = enum
    asrTop,
    asrBottom,
    asrCenter,

  TControlCellAlign* = enum
    ccaFill,
    ccaLeftTop,
    ccaRightBottom,
    ccaCenter,

  TControlCellAligns* = set[TControlCellAlign]

  TChildControlResizeStyle* = enum
    crsAnchorAligning, # (like Delphi)
    crsScaleChilds, # scale children equally, keep space between children fixed
    crsHomogenousChildResize, # enlarge children equally (i.e. by the same amount of pixel)
    crsHomogenousSpaceResize, # enlarge space between children equally

  TControlChildrenLayout* = enum
    cclNone,
    cclLeftToRightThenTopToBottom, # if BiDiMode <> bdLeftToRight then it becomes RightToLeft
    cclTopToBottomThenLeftToRight,

  TColumnLayout* = enum
    clHorizontalThenVertical,
    clVerticalThenHorizontal,

  TSortIndicator* = enum
    siNone,
    siAscending,
    siDescending,

  TLibType* = int32

  TColumnButtonStyle* = enum
    cbsAuto,
    cbsEllipsis,
    cbsNone,
    cbsPickList,
    cbsCheckboxColumn,
    cbsButton,
    cbsButtonColumn,

  TGridZone* = enum
    gzNormal,
    gzFixedCols,
    gzFixedRows,
    gzFixedCells,
    gzInvalid,

  TGridZoneSet* = set[TGridZone]

  TSortOrder* = enum
    soAscending,
    soDescending,

  TAutoAdvance* = enum
    aaNone,
    aaDown,
    aaRight,
    aaLeft,
    aaRightDown,
    aaLeftDown,
    aaRightUp,
    aaLeftUp,

  TCellHintPriority* = enum
    chpAll,
    chpAllNoDefault,
    chpTruncOnly,

  TMouseWheelOption* = enum
    mwCursor,
    mwGrid,

  TGridOption2* = enum
    goScrollToLastCol, # allow scrolling to last column (so that last column can be leftcol)
    goScrollToLastRow, # allow scrolling to last row (so that last row can be toprow)

  TGridOptions2* = set[TGridOption2]

  TRangeSelectMode* = enum
    rsmSingle,
    rsmMulti,

  TTitleStyle* = enum
    tsLazarus,
    tsStandard,
    tsNative,

  TPrefixOption* = enum
    poNone,
    poHeaderClick,

  TDisplaySetting* = enum
    dsShowHeadings,
    dsShowDayNames,
    dsNoMonthChange,
    dsShowWeekNumbers,
    dsStartMonday,

  TTimeFormat* = enum
    tf12, # 12 hours format, with am/pm string
    tf24, # 24 hours format

  TTimeDisplay* = enum
    tdHM, # hour and minute
    tdHMS, # hour Minute and second
    tdHMSMs, # hour Minute Second and milisecond

  TArrowShape* = enum
    asClassicSmaller,
    asClassicLarger,
    asModernSmaller,
    asModernLarger,
    asYetAnotherShape,
    asTheme,

  TDateDisplayOrder* = enum
    ddoDMY,
    ddoMDY,
    ddoYMD,
    ddoTryDefault,

  TDateTimePart* = enum
    dtpDay,
    dtpMonth,
    dtpYear,
    dtpHour,
    dtpMinute,
    dtpSecond,
    dtpMiliSec,
    dtpAMPM,

  TDateTimeParts* = set[TDateTimePart]

  TDateTimePickerOption* = enum
    dtpoDoChangeOnSetDateTime,
    dtpoEnabledIfUnchecked,
    dtpoAutoCheck,
    dtpoFlatButton,

  TDateTimePickerOptions* = set[TDateTimePickerOption]

when defined(i386):
  type
    TDWordFiller = object

when defined(i386):
  type
    TWMKey* = object
      msg*: uint32
      msgFiller: TDWordFiller
      charCode*: array[0..1, uint16]
      charCodeUnusedFiller: TDWordFiller
      keyData*: uint32
      keyDataFiller: TDWordFiller
      result*: uint

when defined(amd64):
  type
    TDWordFiller = object
      filler*: array[0..3, uint8]

when defined(amd64):
  type
    TWMKey* = object
      msg*: uint32
      msgFiller: TDWordFiller
      charCode*: array[0..1, uint16]
      charCodeUnusedFiller: TDWordFiller
      keyData*: uint32
      keyDataFiller: TDWordFiller
      result*: uint

when defined(i386):
  type
    TMessage* = object
      msg*: uint32
      wParam*: WPARAM
      lParam*: LPARAM
      result*: LRESULT

when defined(amd64):
  type
    TMessage* = object
      msg*: uint32
      unusedMsg: uint32
      wParam*: WPARAM
      lParam*: LPARAM
      result*: LRESULT

when defined(linux):
  type
    PGdkWindow* = pointer
    # TXId* = usize
    PGtkFixed* = pointer


when defined(macosx):
  type
    MyNSWindow* = pointer


type

  TNotifyEvent* = proc(sender: pointer) {.nimcall.}

  TUDClickEvent* = proc(sender: pointer, button: TUDBtnType) {.nimcall.}

  TCloseEvent* = proc(sender: pointer, action: var TCloseAction) {.nimcall.}

  TCloseQueryEvent* = proc(sender: pointer, canClose: var bool) {.nimcall.}

  TMenuChangeEvent* = proc(sender: pointer, source: pointer, rebuild: bool) {.nimcall.}

  TSysLinkEvent* = proc(sender: pointer, link: cstring, linkType: TSysLinkType) {.nimcall.}

  TExceptionEvent* = proc(sender: pointer, e: pointer) {.nimcall.}

  TKeyEvent* = proc(sender: pointer, key: var Char, shift: TShiftState) {.nimcall.}

  TKeyPressEvent* = proc(sender: pointer, key: var Char) {.nimcall.}

  TMouseEvent* = proc(sender: pointer, button: TMouseButton, shift: TShiftState, x: int32, y: int32) {.nimcall.}

  TMouseMoveEvent* = proc(sender: pointer, shift: TShiftState, x: int32, y: int32) {.nimcall.}

  TMouseWheelEvent* = proc(sender: pointer, shift: TShiftState, wheelDelta: int32, x: int32, y: int32, handled: var bool) {.nimcall.}

  TDrawItemEvent* = proc(control: pointer, index: int32, aRect: var TRect, state: TOwnerDrawState) {.nimcall.}

  TMenuDrawItemEvent* = proc(sender: pointer, aCanvas: pointer, aRect: var TRect, selected: bool) {.nimcall.}

  TLVColumnClickEvent* = proc(sender: pointer, column: pointer) {.nimcall.}

  TLVColumnRClickEvent* = proc(sender: pointer, column: pointer, point: var TPoint) {.nimcall.}

  TLVSelectItemEvent* = proc(sender: pointer, item: pointer, selected: bool) {.nimcall.}

  TLVCheckedItemEvent* = proc(sender: pointer, item: pointer) {.nimcall.}

  TLVCompareEvent* = proc(sender: pointer, item1: pointer, item2: pointer, data: int32, compare: var int32) {.nimcall.}

  TLVChangeEvent* = proc(sender: pointer, item: pointer, change: TItemChange) {.nimcall.}

  TLVNotifyEvent* = proc(sender: pointer, item: pointer) {.nimcall.}

  TLVAdvancedCustomDrawEvent* = proc(sender: pointer, aRect: var TRect, stage: TCustomDrawStage, defaultDraw: var bool) {.nimcall.}

  TLVAdvancedCustomDrawItemEvent* = proc(sender: pointer, item: pointer, state: TCustomDrawState, Stage: TCustomDrawStage, defaultDraw: var bool) {.nimcall.}

  TLVAdvancedCustomDrawSubItemEvent* = proc(sender: pointer, item: pointer, subItem: int32, state: TCustomDrawState, stage: TCustomDrawStage, defaultDraw: var bool) {.nimcall.}

  TTVCompareEvent* = proc(sender: pointer, node1: pointer, node2: pointer, data: int32, compare: var int32) {.nimcall.}

  TTVExpandedEvent* = proc(sender: pointer, node: pointer) {.nimcall.}

  TTVChangedEvent* = proc(sender: pointer, node: pointer) {.nimcall.}

  TTVAdvancedCustomDrawEvent* = proc(sender: pointer, aRect: var TRect, stage: TCustomDrawStage, defaultDraw: var bool) {.nimcall.}

  TTVAdvancedCustomDrawItemEvent* = proc(sender: pointer, node: pointer, state: TCustomDrawState, stage: TCustomDrawStage, paintImages: var bool, defaultDraw: var bool) {.nimcall.}

  TTabGetImageEvent* = proc(sender: pointer, tabIndex: int32, imageIndex: var int32) {.nimcall.}

  TTBAdvancedCustomDrawEvent* = proc(sender: pointer, aRect: var TRect, stage: TCustomDrawStage, defaultDraw: var bool) {.nimcall.}

  TThreadProc* = proc() {.nimcall.}

  TDropFilesEvent* = proc(sender: pointer, aFileNames: pointer, len: int) {.nimcall.}

  TConstrainedResizeEvent* = proc(sender: pointer, minWidth: var int32, minHeight: var int32, maxWidth: var int32, maxHeight: var int32) {.nimcall.}

  THelpEvent* = proc(command: uint16, data: THelpEventData, callhelp: var bool, result: var bool) {.nimcall.}

  TShortCutEvent* = proc(msg: var TWMKey, handled: var bool) {.nimcall.}

  TContextPopupEvent* = proc(sender: pointer, mousePos: var TPoint, handled: var bool) {.nimcall.}

  TDragOverEvent* = proc(sender: pointer, source: pointer, x: int32, y: int32, state: TDragState, accept: var bool) {.nimcall.}

  TDragDropEvent* = proc(sender: pointer, source: pointer, x: int32, y: int32) {.nimcall.}

  TEndDragEvent* = proc(sender: pointer, target: pointer, x: int32, y: int32) {.nimcall.}

  TDockDropEvent* = proc(sender: pointer, source: pointer, x: int32, y: int32) {.nimcall.}

  TDockOverEvent* = proc(sender: pointer, source: pointer, x: int32, y: int32, state: TDragState, accept: var bool) {.nimcall.}

  TUnDockEvent* = proc(sender: pointer, client: pointer, newTarget: pointer, allow: var bool) {.nimcall.}

  TStartDockEvent* = proc(sender: pointer, dragObject: var pointer) {.nimcall.}

  TGetSiteInfoEvent* = proc(sender: pointer, dockClient: pointer, influenceRect: var TRect, mousePos: var TPoint, canDock: var bool) {.nimcall.}

  TMouseWheelUpDownEvent* = proc(sender: pointer, shift: TShiftState, mousePos: var TPoint, handled: var bool) {.nimcall.}

  TGridOperationEvent* = proc(sender: pointer, isColumn: bool, sIndex: int32, tIndex: int32) {.nimcall.}

  TDrawCellEvent* = proc(sender: pointer, aCol: int32, aRow: int32, aRect: var TRect, state: TGridDrawState) {.nimcall.}

  TFixedCellClickEvent* = proc(sender: pointer, aCol: int32, aRow: int32) {.nimcall.}

  TGetEditEvent* = proc(sender: pointer, aCol: int32, aRow: int32, value: var cstring) {.nimcall.}

  TSelectCellEvent* = proc(sender: pointer, aCol: int32, aRow: int32, canSelect: var bool) {.nimcall.}

  TSetEditEvent* = proc(sender: pointer, aCol: int32, aRow: int32, value: cstring) {.nimcall.}

  TDrawSectionEvent* = proc(headerControl: pointer, section: pointer, aRect: var TRect, pressed: bool) {.nimcall.}

  TSectionNotifyEvent* = proc(headerControl: pointer, section: pointer) {.nimcall.}

  TSectionTrackEvent* = proc(headerControl: pointer, section: pointer, width: int32, state: TSectionTrackState) {.nimcall.}

  TSectionDragEvent* = proc(sender: pointer, fromSection: pointer, toSection: pointer, allowDrag: var bool) {.nimcall.}

  TCustomSectionNotifyEvent* = proc(headerControl: pointer, section: pointer) {.nimcall.}

  TMouseActivateEvent* = proc(sender: pointer, button: TMouseButton, shift: TShiftState, x: int32, y: int32, hitTest: int32, mouseActivate: var TMouseActivate) {.nimcall.}

  TLBGetDataEvent* = proc(control: pointer, index: int32, data: var cstring) {.nimcall.}

  TLBGetDataObjectEvent* = proc(control: pointer, index: int32, dataObject: pointer) {.nimcall.}

  TLBFindDataEvent* = proc(control: pointer, findString: cstring, result: int32) {.nimcall.}

  TMeasureItemEvent* = proc(control: pointer, index: int32, height: var int32) {.nimcall.}

  TLVChangingEvent* = proc(sender: pointer, item: pointer, change: TItemChange, allowChange: var bool) {.nimcall.}

  TLVOwnerDataEvent* = proc(sender: pointer, item: pointer) {.nimcall.}

  TLVOwnerDataFindEvent* = proc(sender: pointer, find: TItemFind, findString: cstring, findPosition: var TPoint, findData: TCustomData, startIndex: int32, direction: TSearchDirection, warp: bool, index: var int32) {.nimcall.}

  TLVDeletedEvent* = proc(sender: pointer, item: pointer) {.nimcall.}

  TLVEditingEvent* = proc(sender: pointer, item: pointer, allowEdit: var bool) {.nimcall.}

  TLVEditedEvent* = proc(sender: pointer, item: pointer, s: var cstring) {.nimcall.}

  TMenuMeasureItemEvent* = proc(sender: pointer, aCanvas: pointer, width: var int32, height: var int32) {.nimcall.}

  TTabChangingEvent* = proc(sender: pointer, allowChange: var bool) {.nimcall.}

  TTVChangingEvent* = proc(sender: pointer, node: pointer, allowChange: var bool) {.nimcall.}

  TTVCollapsingEvent* = proc(sender: pointer, node: pointer, allowCollapse: var bool) {.nimcall.}

  TTVEditedEvent* = proc(sender: pointer, node: pointer, s: var cstring) {.nimcall.}

  TTVEditingEvent* = proc(sender: pointer, node: pointer, allowEdit: var bool) {.nimcall.}

  TTVExpandingEvent* = proc(sender: pointer, node: pointer, allowExpansion: var bool) {.nimcall.}

  TTVHintEvent* = proc(sender: pointer, node: pointer, hint: var cstring) {.nimcall.}

  TUDChangingEvent* = proc(sender: pointer, allowChange: var bool) {.nimcall.}

  TCreatingListErrorEvent* = proc(sender: pointer, winErrorCode: uint32, errorDescription: cstring, handled: var bool) {.nimcall.}

  TLVCustomDrawEvent* = proc(sender: pointer, aRect: var TRect, defaultDraw: var bool) {.nimcall.}

  TLVCustomDrawItemEvent* = proc(sender: pointer, item: pointer, state: TCustomDrawStage, defaultDraw: var bool) {.nimcall.}

  TLVCustomDrawSubItemEvent* = proc(sender: pointer, item: pointer, subItem: int32, state: TCustomDrawStage, defaultDraw: var bool) {.nimcall.}

  TLVDrawItemEvent* = proc(sender: pointer, item: pointer, rect: var TRect, state: TOwnerDrawState) {.nimcall.}

  TLVDataHintEvent* = proc(sender: pointer, startIndex: int32, endIndex: int32) {.nimcall.}

  TLVOwnerDataHintEvent* = TLVDataHintEvent

  TTVCustomDrawEvent* = proc(sender: pointer, aRect: var TRect, defaultDraw: var bool) {.nimcall.}

  TTVCustomDrawItemEvent* = proc(sender: pointer, node: pointer, state: TCustomDrawStage, defaultDraw: var bool) {.nimcall.}

  TWndProcEvent* = proc(msg: var TMessage) {.nimcall.}

  TWebTitleChangeEvent* = proc(sender: pointer, text: cstring) {.nimcall.}

  TWebJSExternalEvent* = proc(sender: pointer, funcName: cstring, args: cstring, retVal: var cstring) {.nimcall.}

  TTaskDlgClickEvent* = proc(sender: pointer, modalResult: TModalResult, canClose: var bool) {.nimcall.}

  TTaskDlgTimerEvent* = proc(sender: pointer, tickCount: uint32, reset: var bool) {.nimcall.}

  TAlignPositionEvent* = proc(sender: pointer, control: pointer, newLeft: var int32, newTop: var int32, newWidth: var int32, newHeight: var int32, alignRect: var TRect, alignInfo: TAlignInfo) {.nimcall.}

  TCheckGroupClicked* = proc(sender: pointer, index: int32) {.nimcall.}

  TOnSelectEvent* = proc(sender: pointer, aCol: int32, aRow: int32) {.nimcall.}

  TToggledCheckboxEvent* = proc(sender: pointer, aCol: int32, aRow: int32, aState: TCheckBoxState) {.nimcall.}

  TOnCompareCells* = proc(sender: pointer, ACol: int32, ARow: int32, BCol: int32, BRow: int32, result: var int32) {.nimcall.}

  TGetCellHintEvent* = proc(sender: pointer, ACol: int32, ARow: int32, hintText: var cstring) {.nimcall.}

  TGetCheckboxStateEvent* = proc(sender: pointer, ACol: int32, ARow: int32, value: var TCheckBoxState) {.nimcall.}

  TSetCheckboxStateEvent* = proc(sender: pointer, ACol: int32, ARow: int32, Value: TCheckBoxState) {.nimcall.}

  THdrEvent* = proc(sender: pointer, isColumn: bool, index: int32) {.nimcall.}

  THeaderSizingEvent* = proc(sender: pointer, isColumn: bool, aIndex: int32, aSize: int32) {.nimcall.}

  TSelectEditorEvent* = proc(sender: pointer, aCol: int32, aRow: int32, editor: var pointer) {.nimcall.}

  TUserCheckBoxBitmapEvent* = proc(sender: pointer, aCol: int32, aRow: int32, CheckedState: TCheckBoxState, aBitmap: var pointer) {.nimcall.}

  TValidateEntryEvent* = proc(sender: pointer, aCol: int32, aRow: int32, oldValue: cstring, newValue: var cstring) {.nimcall.}

const

  # Delphi中的颜色表，Delphi中的TColor与一般HTML的RGB有点不一样，反过来的以BGR表示.
  clClSysNone* = 0x1FFFFFFF
  clSysDefault* = 0x20000000

  # Actual colors
  clAliceblue* = 0xFFF8F0
  clAntiquewhite* = 0xD7EBFA
  clAqua* = 0xFFFF00
  clAquamarine* = 0xD4FF7F
  clAzure* = 0xFFFFF0
  clBeige* = 0xDCF5F5
  clBisque* = 0xC4E4FF
  clBlack* = 0x000000
  clBlanchedalmond* = 0xCDEBFF
  clBlue* = 0xFF0000
  clBlueviolet* = 0xE22B8A
  clBrown* = 0x2A2AA5
  clBurlywood* = 0x87B8DE
  clCadetblue* = 0xA09E5F
  clChartreuse* = 0x00FF7F
  clChocolate* = 0x1E69D2
  clCoral* = 0x507FFF
  clCornflowerblue* = 0xED9564
  clCornsilk* = 0xDCF8FF
  clCrimson* = 0x3C14DC
  clCyan* = 0xFFFF00
  clDarkblue* = 0x8B0000
  clDarkcyan* = 0x8B8B00
  clDarkgoldenrod* = 0x0B86B8
  clDarkgray* = 0xA9A9A9
  clDarkgreen* = 0x006400
  clDarkgrey* = 0xA9A9A9
  clDarkkhaki* = 0x6BB7BD
  clDarkmagenta* = 0x8B008B
  clDarkolivegreen* = 0x2F6B55
  clDarkorange* = 0x008CFF
  clDarkorchid* = 0xCC3299
  clDarkred* = 0x00008B
  clDarksalmon* = 0x7A96E9
  clDarkseagreen* = 0x8FBC8F
  clDarkslateblue* = 0x8B3D48
  clDarkslategray* = 0x4F4F2F
  clDarkslategrey* = 0x4F4F2F
  clDarkturquoise* = 0xD1CE00
  clDarkviolet* = 0xD30094
  clDeeppink* = 0x9314FF
  clDeepskyblue* = 0xFFBF00
  clDimgray* = 0x696969
  clDimgrey* = 0x696969
  clDodgerblue* = 0xFF901E
  clFirebrick* = 0x2222B2
  clFloralwhite* = 0xF0FAFF
  clForestgreen* = 0x228B22
  clFuchsia* = 0xFF00FF
  clGainsboro* = 0xDCDCDC
  clGhostwhite* = 0xFFF8F8
  clGold* = 0x00D7FF
  clGoldenrod* = 0x20A5DA
  clGray* = 0x808080
  clGreen* = 0x008000
  clGreenyellow* = 0x2FFFAD
  clGrey* = 0x808080
  clHoneydew* = 0xF0FFF0
  clHotpink* = 0xB469FF
  clIndianred* = 0x5C5CCD
  clIndigo* = 0x82004B
  clIvory* = 0xF0FFFF
  clKhaki* = 0x8CE6F0
  clLavender* = 0xFAE6E6
  clLavenderblush* = 0xF5F0FF
  clLawngreen* = 0x00FC7C
  clLemonchiffon* = 0xCDFAFF
  clLightblue* = 0xE6D8AD
  clLightcoral* = 0x8080F0
  clLightcyan* = 0xFFFFE0
  clLightgoldenrodyellow* = 0xD2FAFA
  clLightgray* = 0xD3D3D3
  clLightgreen* = 0x90EE90
  clLightgrey* = 0xD3D3D3
  clLightpink* = 0xC1B6FF
  clLightsalmon* = 0x7AA0FF
  clLightseagreen* = 0xAAB220
  clLightskyblue* = 0xFACE87
  clLightslategray* = 0x998877
  clLightslategrey* = 0x998877
  clLightsteelblue* = 0xDEC4B0
  clLightyellow* = 0xE0FFFF
  clLtGray* = 0xC0C0C0
  clMedGray* = 0xA4A0A0
  clDkGray* = 0x808080
  clMoneyGreen* = 0xC0DCC0
  clLegacySkyBlue* = 0xF0CAA6
  clCream* = 0xF0FBFF
  clLime* = 0x00FF00
  clLimegreen* = 0x32CD32
  clLinen* = 0xE6F0FA
  clMagenta* = 0xFF00FF
  clMaroon* = 0x000080
  clMediumaquamarine* = 0xAACD66
  clMediumblue* = 0xCD0000
  clMediumorchid* = 0xD355BA
  clMediumpurple* = 0xDB7093
  clMediumseagreen* = 0x71B33C
  clMediumslateblue* = 0xEE687B
  clMediumspringgreen* = 0x9AFA00
  clMediumturquoise* = 0xCCD148
  clMediumvioletred* = 0x8515C7
  clMidnightblue* = 0x701919
  clMintcream* = 0xFAFFF5
  clMistyrose* = 0xE1E4FF
  clMoccasin* = 0xB5E4FF
  clNavajowhite* = 0xADDEFF
  clNavy* = 0x800000
  clOldlace* = 0xE6F5FD
  clOlive* = 0x008080
  clOlivedrab* = 0x238E6B
  clOrange* = 0x00A5FF
  clOrangered* = 0x0045FF
  clOrchid* = 0xD670DA
  clPalegoldenrod* = 0xAAE8EE
  clPalegreen* = 0x98FB98
  clPaleturquoise* = 0xEEEEAF
  clPalevioletred* = 0x9370DB
  clPapayawhip* = 0xD5EFFF
  clPeachpuff* = 0xB9DAFF
  clPeru* = 0x3F85CD
  clPink* = 0xCBC0FF
  clPlum* = 0xDDA0DD
  clPowderblue* = 0xE6E0B0
  clPurple* = 0x800080
  clRed* = 0x0000FF
  clRosybrown* = 0x8F8FBC
  clRoyalblue* = 0xE16941
  clSaddlebrown* = 0x13458B
  clSalmon* = 0x7280FA
  clSandybrown* = 0x60A4F4
  clSeagreen* = 0x578B2E
  clSeashell* = 0xEEF5FF
  clSienna* = 0x2D52A0
  clSilver* = 0xC0C0C0
  clSkyblue* = 0xEBCE87
  clSlateblue* = 0xCD5A6A
  clSlategray* = 0x908070
  clSlategrey* = 0x908070
  clSnow* = 0xFAFAFF
  clSpringgreen* = 0x7FFF00
  clSteelblue* = 0xB48246
  clTan* = 0x8CB4D2
  clTeal* = 0x808000
  clThistle* = 0xD8BFD8
  clTomato* = 0x4763FF
  clTurquoise* = 0xD0E040
  clViolet* = 0xEE82EE
  clWheat* = 0xB3DEF5
  clWhite* = 0xFFFFFF
  clWhitesmoke* = 0xF5F5F5
  clYellow* = 0x00FFFF
  clYellowgreen* = 0x32CD9A
  clBtnFace* = 0xFF00000F
  clNull* = 0x00000000

  # Virtual Keys, Standard Set
  vkLButton* = 0x01 # 1
  vkRButton* = 0x02 # 2
  vkCancel* = 0x03 # 3
  vkMButton* = 0x04 # 4
  vkXButton1* = 0x05 # 5
  vkXButton2* = 0x06 # 6
  vkBack* = 0x08 # 8
  vkTab* = 0x09 # 9
  vkLineFeed* = 0x0A # 10
  vkClear* = 0x0C # 12
  vkReturn* = 0x0D # 13
  vkShift* = 0x10 # 16
  vkControl* = 0x11 # 17
  vkMenu* = 0x12 # 18
  vkPause* = 0x13 # 19
  vkCapital* = 0x14 # 20
  vkKana* = 0x15 # 21
  vkHangul* = 0x15 # 21
  vkJunja* = 0x17 # 23
  vkFinal* = 0x18 # 24
  vkHanja* = 0x19 # 25
  vkKanji* = 0x19 # 25
  vkConvert* = 0x1C # 28
  vkNonConvert* = 0x1D # 29
  vkAccept* = 0x1E # 30
  vkModeChange* = 0x1F # 31
  vkEscape* = 0x1B # 27
  vkSpace* = 0x20 # 32
  vkPrior* = 0x21 # 33
  vkNext* = 0x22 # 34
  vkEnd* = 0x23 # 35
  vkHome* = 0x24 # 36
  vkLeft* = 0x25 # 37
  vkUp* = 0x26 # 38
  vkRight* = 0x27 # 39
  vkDown* = 0x28 # 40
  vkSelect* = 0x29 # 41
  vkPrint* = 0x2A # 42
  vkExecute* = 0x2B # 43
  vkSnapshot* = 0x2C # 44
  vkInsert* = 0x2D # 45
  vkDelete* = 0x2E # 46
  vkHelp* = 0x2F # 47

  # vk0 thru vk9 are the same as ASCII '0' thru '9' (0x30 - 0x39)
  vk0* = 0x30 # 48
  vk1* = 0x31 # 49
  vk2* = 0x32 # 50
  vk3* = 0x33 # 51
  vk4* = 0x34 # 52
  vk5* = 0x35 # 53
  vk6* = 0x36 # 54
  vk7* = 0x37 # 55
  vk8* = 0x38 # 56
  vk9* = 0x39 # 57

  # vkA thru vkZ are the same as ASCII 'A' thru 'Z' (0x41 - 0x5A)
  vkA* = 0x41 # 65
  vkB* = 0x42 # 66
  vkC* = 0x43 # 67
  vkD* = 0x44 # 68
  vkE* = 0x45 # 69
  vkF* = 0x46 # 70
  vkG* = 0x47 # 71
  vkH* = 0x48 # 72
  vkI* = 0x49 # 73
  vkJ* = 0x4A # 74
  vkK* = 0x4B # 75
  vkL* = 0x4C # 76
  vkM* = 0x4D # 77
  vkN* = 0x4E # 78
  vkO* = 0x4F # 79
  vkP* = 0x50 # 80
  vkQ* = 0x51 # 81
  vkR* = 0x52 # 82
  vkS* = 0x53 # 83
  vkT* = 0x54 # 84
  vkU* = 0x55 # 85
  vkV* = 0x56 # 86
  vkW* = 0x57 # 87
  vkX* = 0x58 # 88
  vkY* = 0x59 # 89
  vkZ* = 0x5A # 90
  vkLWin* = 0x5B # 91
  vkRWin* = 0x5C # 92
  vkApps* = 0x5D # 93
  vkSleep* = 0x5F # 95
  vkNumpad0* = 0x60 # 96
  vkNumpad1* = 0x61 # 97
  vkNumpad2* = 0x62 # 98
  vkNumpad3* = 0x63 # 99
  vkNumpad4* = 0x64 # 100
  vkNumpad5* = 0x65 # 101
  vkNumpad6* = 0x66 # 102
  vkNumpad7* = 0x67 # 103
  vkNumpad8* = 0x68 # 104
  vkNumpad9* = 0x69 # 105
  vkMultiply* = 0x6A # 106
  vkAdd* = 0x6B # 107
  vkSeparator* = 0x6C # 108
  vkSubtract* = 0x6D # 109
  vkDecimal* = 0x6E # 110
  vkDivide* = 0x6F # 111
  vkF1* = 0x70 # 112
  vkF2* = 0x71 # 113
  vkF3* = 0x72 # 114
  vkF4* = 0x73 # 115
  vkF5* = 0x74 # 116
  vkF6* = 0x75 # 117
  vkF7* = 0x76 # 118
  vkF8* = 0x77 # 119
  vkF9* = 0x78 # 120
  vkF10* = 0x79 # 121
  vkF11* = 0x7A # 122
  vkF12* = 0x7B # 123
  vkF13* = 0x7C # 124
  vkF14* = 0x7D # 125
  vkF15* = 0x7E # 126
  vkF16* = 0x7F # 127
  vkF17* = 0x80 # 128
  vkF18* = 0x81 # 129
  vkF19* = 0x82 # 130
  vkF20* = 0x83 # 131
  vkF21* = 0x84 # 132
  vkF22* = 0x85 # 133
  vkF23* = 0x86 # 134
  vkF24* = 0x87 # 135
  vkCamera* = 0x88 # 136
  vkHardwareBack* = 0x89 # 137
  vkNumLock* = 0x90 # 144
  vkScroll* = 0x91 # 145
  vkLShift* = 0xA0 # 160
  vkRShift* = 0xA1 # 161
  vkLControl* = 0xA2 # 162
  vkRControl* = 0xA3 # 163
  vkLMenu* = 0xA4 # 164
  vkRMenu* = 0xA5 # 165
  vkBrowserBack* = 0xA6 # 166
  vkBrowserForward* = 0xA7 # 167
  vkBrowserRefresh* = 0xA8 # 168
  vkBrowserStop* = 0xA9 # 169
  vkBrowserSearch* = 0xAA # 170
  vkBrowserFavorites* = 0xAB # 171
  vkBrowserHome* = 0xAC # 172
  vkVolumeMute* = 0xAD # 173
  vkVolumeDown* = 0xAE # 174
  vkVolumeUp* = 0xAF # 175
  vkMediaNextTrack* = 0xB0 # 176
  vkMediaPrevTrack* = 0xB1 # 177
  vkMediaStop* = 0xB2 # 178
  vkMediaPlayPause* = 0xB3 # 179
  vkLaunchMail* = 0xB4 # 180
  vkLaunchMediaSelect* = 0xB5 # 181
  vkLaunchApp1* = 0xB6 # 182
  vkLaunchApp2* = 0xB7 # 183
  vkSemicolon* = 0xBA # 186
  vkEqual* = 0xBB # 187
  vkComma* = 0xBC # 188
  vkMinus* = 0xBD # 189
  vkPeriod* = 0xBE # 190
  vkSlash* = 0xBF # 191
  vkTilde* = 0xC0 # 192
  vkLeftBracket* = 0xDB # 219
  vkBackslash* = 0xDC # 220
  vkRightBracket* = 0xDD # 221
  vkQuote* = 0xDE # 222
  vkPara* = 0xDF # 223
  vkOem102* = 0xE2 # 226
  vkIcoHelp* = 0xE3 # 227
  vkIco00* = 0xE4 # 228
  vkProcessKey* = 0xE5 # 229
  vkIcoClear* = 0xE6 # 230
  vkPacket* = 0xE7 # 231
  vkAttn* = 0xF6 # 246
  vkCrsel* = 0xF7 # 247
  vkExsel* = 0xF8 # 248
  vkErEof* = 0xF9 # 249
  vkPlay* = 0xFA # 250
  vkZoom* = 0xFB # 251
  vkNoname* = 0xFC # 252
  vkPA1* = 0xFD # 253
  vkOemClear* = 0xFE # 254
  vkNone* = 0xFF # 255

  # MessageBox or MessageDlg 返回值
  idOK* = 1
  idCancel* = 2
  idAbort* = 3
  idRetry* = 4
  idIgnore* = 5
  idYes* = 6
  idNo* = 7
  idClose* = 8
  idHelp* = 9
  idTryAgain* = 10
  idContinue* = 11
  mrNone* = 0
  mrOk* = idOK
  mrCancel* = idCancel
  mrAbort* = idAbort
  mrRetry* = idRetry
  mrIgnore* = idIgnore
  mrYes* = idYes
  mrNo* = idNo
  mrClose* = idClose
  mrHelp* = idHelp
  mrTryAgain* = idTryAgain
  mrContinue* = idContinue
  mrAll* = mrContinue + 1
  mrNoToAll* = mrAll + 1
  mrYesToAll* = mrNoToAll + 1

  # Predefined Clipboard Formats
  CF_TEXT* = 1
  CF_BITMAP* = 2
  CF_METAFILEPICT* = 3
  CF_SYLK* = 4
  CF_DIF* = 5
  CF_TIFF* = 6
  CF_OEMTEXT* = 7
  CF_DIB* = 8
  CF_PALETTE* = 9
  CF_PENDATA* = 10
  CF_RIFF* = 11
  CF_WAVE* = 12
  CF_UNICODETEXT* = 13
  CF_ENHMETAFILE* = 14
  CF_HDROP* = 15
  CF_LOCALE* = 0x10

  # 光标定义
  crHigh* = TCursor(0)
  crDefault* = TCursor(0)
  crNone* = TCursor(-1)
  crArrow* = TCursor(-2)
  crCross* = TCursor(-3)
  crIBeam* = TCursor(-4)
  crSize* = TCursor(-22)
  crSizeNESW* = TCursor(-6) # diagonal north east - south west
  crSizeNS* = TCursor(-7)
  crSizeNWSE* = TCursor(-8)
  crSizeWE* = TCursor(-9)
  crSizeNW* = TCursor(-23)
  crSizeN* = TCursor(-24)
  crSizeNE* = TCursor(-25)
  crSizeW* = TCursor(-26)
  crSizeE* = TCursor(-27)
  crSizeSW* = TCursor(-28)
  crSizeS* = TCursor(-29)
  crSizeSE* = TCursor(-30)
  crUpArrow* = TCursor(-10)
  crHourGlass* = TCursor(-11)
  crDrag* = TCursor(-12)
  crNoDrop* = TCursor(-13)
  crHSplit* = TCursor(-14)
  crVSplit* = TCursor(-15)
  crMultiDrag* = TCursor(-16)
  crSQLWait* = TCursor(-17)
  crNo* = TCursor(-18)
  crAppStart* = TCursor(-19)
  crHelp* = TCursor(-20)
  crHandPoint* = TCursor(-21)
  crSizeAll* = TCursor(-22)
  crLow* = TCursor(-30)
